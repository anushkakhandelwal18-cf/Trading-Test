package com.optum.uhg.app.service.impl;

/* Java code generated by CloudFrame on 2024-12-02 at 20:31. */
import com.optum.uhg.app.common.CommonProcess;
import com.cloudframe.app.process.BaseProcess;
import com.optum.uhg.app.dto.cf03secu.Cf03secuCtx.*;
import com.optum.uhg.app.dto.cf03secu.Cf03secuCtx;
import com.optum.uhg.app.service.Cf03secu;
import com.cloudframe.app.process.BaseProcess;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.cloudframe.app.exception.CFException;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestParam;
import com.cloudframe.app.dto.GlobalExecutorCtx;
import com.cloudframe.app.exception.Terminate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.optum.uhg.app.repository.Cf03secuRepository;
import com.cloudframe.app.utility.CFUtil;
import java.util.ArrayList;
import com.cloudframe.app.data.Field;
import java.util.Map;
import java.util.HashMap;
import com.cloudframe.app.dto.ProgramContext;
import com.optum.uhg.app.dto.cf03secu.*;
import com.optum.uhg.app.dto.cf03secu.Dfhcommarea;
import com.optum.uhg.app.dto.cf03secu.Sqlca;
import com.optum.uhg.app.dto.cf03secu.Dcltbdemsec;
import com.optum.uhg.app.dto.cf03secu.Work;
import com.optum.uhg.app.common.CONSTANTS;
import com.optum.uhg.app.common.SQLS;
import com.cloudframe.app.cics.TransactionManager;
import org.springframework.beans.factory.annotation.Value;
import com.cloudframe.app.dao.Db2Base;
import java.sql.SQLException;

@Component("cf03secu")
public class Cf03secuImpl extends CommonProcess implements Cf03secu {

    Logger logger = LoggerFactory.getLogger(Cf03secuImpl.class);

    @Value("${CF03SECU.dbQualifier:}")
    private String dbQualifier;

    @Autowired
    @Qualifier("db2Base")
    Db2Base db2Base;

    @Autowired
    @Qualifier("cf03secuRepository")
    Cf03secuRepository cf03secuRepository;

    /**
     * process
     * Input  : None
     *
     * Output : None
     *
     * @throws CFException
     */
    public int process(Cf03secuCtx programCtx) throws Exception {
        try {
            setCodePage("1047");
            // Reset program ended flag
            programCtx.setProgramEnded(false);
            db2Base.reset("CF03SECU", dbQualifier, true);
            // Added variable to get the output context in place.
            ProcessInCtx methodIn = programCtx.getProcessInCtx();
            // cobolCode::PERFORM 0000-MAINLINE
            mainline(programCtx.getMainlineInCtx());
            /*0000-MAINLINE*/
        } catch (Exception e) {
            handleErrorCode(e);
            throw e;
        } finally {
            handleDbAtEnd(db2Base);
        }
        // Exit with return code
        return programCtx.getRc();
        // end of process method
    }

    /**
     * mainline
     *   This method is derived from
     *   COBOL Paragraph - 0000-MAINLINE COBOL Cyclomatic complexity - 3
     * Input  :
     *
     * - counter                        COBOL Name: COUNTER
     *
     * Output :
     *
     * - counter                        COBOL Name: COUNTER
     *
     * @throws CFException
     */
    @Override
    public MainlineOutCtx mainline(MainlineInCtx methodIn) throws Exception {
        // Added variable to get the program context in place.
        Cf03secuCtx programCtx = methodIn.getCf03secuCtx();
        // Added variable to get the output context in place.
        MainlineOutCtx methodOut = methodIn.getMainlineOutCtx();
        // cobolCode::PERFORM VARYING COUNTER FROM 1 BY 1 UNTIL COUNTER > 2000
        for (methodOut.setCounter(1); ((methodOut.getCounter() <= 2000)); methodOut.setCounter(methodOut.getCounter() + 1)) {
            // cobolCode::DISPLAY "Counter: " COUNTER
            logger.info("Counter: {}", String.valueOf(methodOut.getCounter()));
        }
        // cobolCode::PERFORM 1000-GET-SECURITY THRU 1000-EXIT
        getSecurity(programCtx.getGetSecurityInCtx());
        /*1000-GET-SECURITY*/
        // cobolCode::GOBACK
        throw Terminate.TERMINATE;
    }

    /**
     * getSecurity
     *   This method is derived from
     *   COBOL Paragraph - 1000-GET-SECURITY COBOL Cyclomatic complexity - 6
     * Input  :
     *
     * - isin01                         COBOL Name: LK-ISIN
     * - sqlcode                        COBOL Name: SQLCODE
     * - sedol                          COBOL Name: SEDOL
     * - ric                            COBOL Name: RIC
     * - intlkey                        COBOL Name: INTLKEY
     * - company                        COBOL Name: COMPANY
     * - country                        COBOL Name: COUNTRY
     * - industry                       COBOL Name: INDUSTRY
     * - sector                         COBOL Name: SECTOR
     * - ffmcapmilusd                   COBOL Name: FFMCAPMILUSD
     * - sectorweight                   COBOL Name: SECTORWEIGHT
     *
     * Output :
     *
     * - isin                           COBOL Name: ISIN
     * - isin01                         COBOL Name: LK-ISIN
     * - sqlcode_Ws                     COBOL Name: WS-SQLCODE
     * - sqlcode                        COBOL Name: SQLCODE
     * - sedol01                        COBOL Name: LK-SEDOL
     * - sedol                          COBOL Name: SEDOL
     * - ric01                          COBOL Name: LK-RIC
     * - ric                            COBOL Name: RIC
     * - intlkey01                      COBOL Name: LK-INTLKEY
     * - intlkey                        COBOL Name: INTLKEY
     * - company01                      COBOL Name: LK-COMPANY
     * - company                        COBOL Name: COMPANY
     * - country01                      COBOL Name: LK-COUNTRY
     * - country                        COBOL Name: COUNTRY
     * - industry01                     COBOL Name: LK-INDUSTRY
     * - industry                       COBOL Name: INDUSTRY
     * - sector01                       COBOL Name: LK-SECTOR
     * - sector                         COBOL Name: SECTOR
     * - ffmcapmilusd01                 COBOL Name: LK-FFMCAPMILUSD
     * - ffmcapmilusd                   COBOL Name: FFMCAPMILUSD
     * - sectorweight01                 COBOL Name: LK-SECTORWEIGHT
     * - sectorweight                   COBOL Name: SECTORWEIGHT
     * - secErrorMsg                    COBOL Name: LK-SEC-ERROR-MSG
     *
     * @throws CFException
     */
    @Override
    public GetSecurityOutCtx getSecurity(GetSecurityInCtx methodIn) throws Exception {
        // Declare local variables used in the method
        ArrayList<char[]> charArray = new ArrayList<char[]>();
        char[] joinCharArray = null;
        Map<String, Object> updated = null;
        // End of variable declaration
        // *
        // Added variable to get the program context in place.
        Cf03secuCtx programCtx = methodIn.getCf03secuCtx();
        // Added variable to get the output context in place.
        GetSecurityOutCtx methodOut = methodIn.getGetSecurityOutCtx();
        // cobolCode::MOVE LK-ISIN TO ISIN
        methodOut.setIsin(methodOut.getIsin01());
        // cobolCode::SELECT SEDOL , RIC , INTLKEY , COMPANY , COUNTRY , INDUSTRY , SECTOR , FFMCAPMILUSD , SECTORWEIGHT FROM TBDEMSEC WHERE ISIN = ?
        cf03secuRepository.selectTbdemsec(programCtx.getSqlca(), methodOut.getDcltbdemsec());
        // FORMAT1016334848 = "----"
        methodOut.setSqlcode_Ws(CFUtil.cobolNumberFormatter(CONSTANTS.FORMAT1016334848, String.valueOf(methodOut.getSqlcode()).toCharArray()));
        // cobolCode::EVALUATE SQLCODE
        switch(methodOut.getSqlcode()) {
            case 0:
                // cobolCode::MOVE SEDOL TO LK-SEDOL
                methodOut.setSedol01(methodOut.getSedol());
                // cobolCode::MOVE RIC TO LK-RIC
                methodOut.setRic01(methodOut.getRic());
                // cobolCode::MOVE INTLKEY TO LK-INTLKEY
                methodOut.setIntlkey01(methodOut.getIntlkey());
                // cobolCode::MOVE COMPANY TO LK-COMPANY
                methodOut.setCompany01(methodOut.getCompany());
                // cobolCode::MOVE COUNTRY TO LK-COUNTRY
                methodOut.setCountry01(methodOut.getCountry());
                // cobolCode::MOVE INDUSTRY TO LK-INDUSTRY
                methodOut.setIndustry01(methodOut.getIndustry());
                // cobolCode::MOVE SECTOR TO LK-SECTOR
                methodOut.setSector01(methodOut.getSector());
                // FORMAT2062691925 = "ZZZZZZZZ9"
                methodOut.setFfmcapmilusd01(CFUtil.cobolNumberFormatter(CONSTANTS.FORMAT2062691925, String.valueOf(methodOut.getFfmcapmilusd()).toCharArray()));
                // cobolCode::MOVE SECTORWEIGHT TO LK-SECTORWEIGHT
                methodOut.setSectorweight01(methodOut.getSectorweight());
                // cobolCode::MOVE ALL '*' TO LK-SEC-ERROR-MSG
                methodOut.setSecErrorMsg(CONSTANTS.LITERAL_1118165632);
                break;
            case 100:
                // cobolCode::MOVE 'Security Not found !!' TO LK-SEC-ERROR-MSG
                methodOut.setSecErrorMsg(CONSTANTS.LITERAL_872240021);
                break;
            default:
                // cobolCode::MOVE SPACES TO LK-SEC-ERROR-MSG
                methodOut.setSecErrorMsg(CONSTANTS.SPACE_50);
                // cobolCode::STRING 'Security lookup failed : sqlcode = ' WS-SQLCODE DELIMITED BY SIZE INTO LK-SEC-ERROR-MSG END-STRING
                charArray = new ArrayList<char[]>();
                charArray.add(CONSTANTS.LITERAL_1781749721);
                charArray.add(methodOut.getSqlcode_Ws());
                joinCharArray = Field.mergeArrays(charArray.get(0), charArray.get(1));
                updated = updateString(methodOut.getSecErrorMsg(), joinCharArray);
                methodOut.setSecErrorMsg((char[]) updated.get("string"));
        }
        return methodOut;
    }

    public int call(ProgramContext ctx, Object[] params) throws Exception {
        Cf03secuCtx programCtx = (Cf03secuCtx) ctx;
        int len = params.length;
        if (len > 1 && params[1] != null)
            programCtx.getDfhcommarea().set((Field) params[1]);
        // invoke the process and return rc
        return process(programCtx);
    }

    public int call(ProgramContext ctx, Field... parameters) throws Exception {
        Cf03secuCtx programCtx = (Cf03secuCtx) ctx;
        for (int index = 0; index < parameters.length; index++) {
            switch(index) {
                case 1:
                    if (parameters[index] != null) {
                        if (parameters[index] instanceof Dfhcommarea) {
                            programCtx.setDfhcommarea((Dfhcommarea) parameters[index]);
                        } else {
                            programCtx.getDfhcommarea().set(parameters[index]);
                        }
                    }
                    break;
            }
        }
        return process(programCtx);
    }
}
