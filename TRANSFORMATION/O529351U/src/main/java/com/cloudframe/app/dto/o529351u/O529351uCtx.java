package com.cloudframe.app.dto.o529351u;

import com.cloudframe.app.dto.GlobalExecutorCtx;
import com.cloudframe.app.dto.ProgramContext;
import com.cloudframe.app.dto.Context;
import com.cloudframe.app.data.Field;
import java.math.BigDecimal;
import java.util.List;
import com.cloudframe.app.exception.CFException;

 
 
 
 
 
 
 
 
 
 
 
import com.cloudframe.app.cics.CICSSession;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 


@Context
public class O529351uCtx implements ProgramContext, Cloneable {
    GlobalExecutorCtx globalCtx;

    W02FnuLineRead w02FnuLineRead;
    CsvcCodeGroup csvcCodeGroup;
    EqiRecord eqiRecord;
    CsvcProc csvcProc;
    LsSaveRecord4 lsSaveRecord4;
    W02DsplMsgArea w02DsplMsgArea;
    Work work;
    W02FnuLineStartbr w02FnuLineStartbr;
    FeSpiAltPlanRecord feSpiAltPlanRecord;
    WorkFields workFields;
    FrontendHdPmtIcnRecord frontendHdPmtIcnRecord;
    LsSaveRecord3 lsSaveRecord3;
    FeSpiRulesRecord feSpiRulesRecord;
    DdEqisAlt ddEqisAlt;
    FesaKey1 fesaKey1;
    Ioi02bInterface ioi02bInterface;
    FrontendMedPmtIcnRecord frontendMedPmtIcnRecord;
    FesrKey fesrKey;
    W02FnuLineReadnext w02FnuLineReadnext;
    NewTransSpiTableGroup newTransSpiTableGroup;
    Dfhcommarea dfhcommarea;
    DrstRestartDataArea drstRestartDataArea;
    LsSaveRecord1 lsSaveRecord1;
    Vyspi51uCallArea vyspi51uCallArea;
    LsSaveRec1Clminf lsSaveRec1Clminf;
    DsmCallArea dsmCallArea;
    GenTransSpiTableGroup genTransSpiTableGroup;
    CetCicsErrorTableGroup cetCicsErrorTableGroup;

    int newNdx;
    int genNdx;
    int uTrnslNdx51;

    private int rc;

    public GlobalExecutorCtx getGlobalCtx() {
            return globalCtx;
    }

    public void setGlobalCtx(GlobalExecutorCtx globalCtx) {
        this.globalCtx = globalCtx;
    }

    public int getRc() {
        return this.rc;
    }

    public void setRc(int rc) {
        this.rc = rc;
    }

    CICSSession cicsSession = new CICSSession();

    public CICSSession getCicsSession() {
        return this.cicsSession;
    }

    public void setCicsSession(CICSSession cicsSession) {
        this.cicsSession = cicsSession;
    }


    boolean programEnded = false;

    public boolean isProgramEnded() {
        return this.programEnded;
    }

    public void setProgramEnded(boolean programEnded) {
        this.programEnded = programEnded;
    }


    public W02FnuLineRead getW02FnuLineRead() {
        if (w02FnuLineRead == null) {
            w02FnuLineRead = new W02FnuLineRead();
        }

        return w02FnuLineRead;
    }

    public void setW02FnuLineRead(W02FnuLineRead w02FnuLineRead) {
        this.w02FnuLineRead = w02FnuLineRead;
    }
    public CsvcCodeGroup getCsvcCodeGroup() {
        if (csvcCodeGroup == null) {
            csvcCodeGroup = new CsvcCodeGroup();
        }

        return csvcCodeGroup;
    }

    public void setCsvcCodeGroup(CsvcCodeGroup csvcCodeGroup) {
        this.csvcCodeGroup = csvcCodeGroup;
    }
    public EqiRecord getEqiRecord() {
        if (eqiRecord == null) {
            eqiRecord = new EqiRecord();
        }

        return eqiRecord;
    }

    public void setEqiRecord(EqiRecord eqiRecord) {
        this.eqiRecord = eqiRecord;
    }
    public CsvcProc getCsvcProc() {
        if (csvcProc == null) {
            csvcProc = new CsvcProc();
        }

        return csvcProc;
    }

    public void setCsvcProc(CsvcProc csvcProc) {
        this.csvcProc = csvcProc;
    }
    public LsSaveRecord4 getLsSaveRecord4() {
        if (lsSaveRecord4 == null) {
            lsSaveRecord4 = new LsSaveRecord4();
        }

        return lsSaveRecord4;
    }

    public void setLsSaveRecord4(LsSaveRecord4 lsSaveRecord4) {
        this.lsSaveRecord4 = lsSaveRecord4;
    }
    public W02DsplMsgArea getW02DsplMsgArea() {
        if (w02DsplMsgArea == null) {
            w02DsplMsgArea = new W02DsplMsgArea();
        }

        return w02DsplMsgArea;
    }

    public void setW02DsplMsgArea(W02DsplMsgArea w02DsplMsgArea) {
        this.w02DsplMsgArea = w02DsplMsgArea;
    }
    public Work getWork() {
        if (work == null) {
            work = new Work();
        }

        return work;
    }

    public void setWork(Work work) {
        this.work = work;
    }
    public W02FnuLineStartbr getW02FnuLineStartbr() {
        if (w02FnuLineStartbr == null) {
            w02FnuLineStartbr = new W02FnuLineStartbr();
        }

        return w02FnuLineStartbr;
    }

    public void setW02FnuLineStartbr(W02FnuLineStartbr w02FnuLineStartbr) {
        this.w02FnuLineStartbr = w02FnuLineStartbr;
    }
    public FeSpiAltPlanRecord getFeSpiAltPlanRecord() {
        if (feSpiAltPlanRecord == null) {
            feSpiAltPlanRecord = new FeSpiAltPlanRecord();
        }

        return feSpiAltPlanRecord;
    }

    public void setFeSpiAltPlanRecord(FeSpiAltPlanRecord feSpiAltPlanRecord) {
        this.feSpiAltPlanRecord = feSpiAltPlanRecord;
    }
    public WorkFields getWorkFields() {
        if (workFields == null) {
            workFields = new WorkFields();
        }

        return workFields;
    }

    public void setWorkFields(WorkFields workFields) {
        this.workFields = workFields;
    }
    public FrontendHdPmtIcnRecord getFrontendHdPmtIcnRecord() {
        if (frontendHdPmtIcnRecord == null) {
            frontendHdPmtIcnRecord = new FrontendHdPmtIcnRecord();
        }

        return frontendHdPmtIcnRecord;
    }

    public void setFrontendHdPmtIcnRecord(FrontendHdPmtIcnRecord frontendHdPmtIcnRecord) {
        this.frontendHdPmtIcnRecord = frontendHdPmtIcnRecord;
    }
    public LsSaveRecord3 getLsSaveRecord3() {
        if (lsSaveRecord3 == null) {
            lsSaveRecord3 = new LsSaveRecord3();
        }

        return lsSaveRecord3;
    }

    public void setLsSaveRecord3(LsSaveRecord3 lsSaveRecord3) {
        this.lsSaveRecord3 = lsSaveRecord3;
    }
    public FeSpiRulesRecord getFeSpiRulesRecord() {
        if (feSpiRulesRecord == null) {
            feSpiRulesRecord = new FeSpiRulesRecord();
        }

        return feSpiRulesRecord;
    }

    public void setFeSpiRulesRecord(FeSpiRulesRecord feSpiRulesRecord) {
        this.feSpiRulesRecord = feSpiRulesRecord;
    }
    public DdEqisAlt getDdEqisAlt() {
        if (ddEqisAlt == null) {
            ddEqisAlt = new DdEqisAlt();
        }

        return ddEqisAlt;
    }

    public void setDdEqisAlt(DdEqisAlt ddEqisAlt) {
        this.ddEqisAlt = ddEqisAlt;
    }
    public FesaKey1 getFesaKey1() {
        if (fesaKey1 == null) {
            fesaKey1 = new FesaKey1();
        }

        return fesaKey1;
    }

    public void setFesaKey1(FesaKey1 fesaKey1) {
        this.fesaKey1 = fesaKey1;
    }
    public Ioi02bInterface getIoi02bInterface() {
        if (ioi02bInterface == null) {
            ioi02bInterface = new Ioi02bInterface();
        }

        return ioi02bInterface;
    }

    public void setIoi02bInterface(Ioi02bInterface ioi02bInterface) {
        this.ioi02bInterface = ioi02bInterface;
    }
    public FrontendMedPmtIcnRecord getFrontendMedPmtIcnRecord() {
        if (frontendMedPmtIcnRecord == null) {
            frontendMedPmtIcnRecord = new FrontendMedPmtIcnRecord();
        }

        return frontendMedPmtIcnRecord;
    }

    public void setFrontendMedPmtIcnRecord(FrontendMedPmtIcnRecord frontendMedPmtIcnRecord) {
        this.frontendMedPmtIcnRecord = frontendMedPmtIcnRecord;
    }
    public FesrKey getFesrKey() {
        if (fesrKey == null) {
            fesrKey = new FesrKey();
        }

        return fesrKey;
    }

    public void setFesrKey(FesrKey fesrKey) {
        this.fesrKey = fesrKey;
    }
    public W02FnuLineReadnext getW02FnuLineReadnext() {
        if (w02FnuLineReadnext == null) {
            w02FnuLineReadnext = new W02FnuLineReadnext();
        }

        return w02FnuLineReadnext;
    }

    public void setW02FnuLineReadnext(W02FnuLineReadnext w02FnuLineReadnext) {
        this.w02FnuLineReadnext = w02FnuLineReadnext;
    }
    public NewTransSpiTableGroup getNewTransSpiTableGroup() {
        if (newTransSpiTableGroup == null) {
            newTransSpiTableGroup = new NewTransSpiTableGroup();
        }

        return newTransSpiTableGroup;
    }

    public void setNewTransSpiTableGroup(NewTransSpiTableGroup newTransSpiTableGroup) {
        this.newTransSpiTableGroup = newTransSpiTableGroup;
    }
    public Dfhcommarea getDfhcommarea() {
        if (dfhcommarea == null) {
            dfhcommarea = new Dfhcommarea();
        }

        return dfhcommarea;
    }

    public void setDfhcommarea(Dfhcommarea dfhcommarea) {
        this.dfhcommarea = dfhcommarea;
    }
    public DrstRestartDataArea getDrstRestartDataArea() {
        if (drstRestartDataArea == null) {
            drstRestartDataArea = new DrstRestartDataArea();
        }

        return drstRestartDataArea;
    }

    public void setDrstRestartDataArea(DrstRestartDataArea drstRestartDataArea) {
        this.drstRestartDataArea = drstRestartDataArea;
    }
    public LsSaveRecord1 getLsSaveRecord1() {
        if (lsSaveRecord1 == null) {
            lsSaveRecord1 = new LsSaveRecord1();
        }

        return lsSaveRecord1;
    }

    public void setLsSaveRecord1(LsSaveRecord1 lsSaveRecord1) {
        this.lsSaveRecord1 = lsSaveRecord1;
    }
    public Vyspi51uCallArea getVyspi51uCallArea() {
        if (vyspi51uCallArea == null) {
            vyspi51uCallArea = new Vyspi51uCallArea();
        }

        return vyspi51uCallArea;
    }

    public void setVyspi51uCallArea(Vyspi51uCallArea vyspi51uCallArea) {
        this.vyspi51uCallArea = vyspi51uCallArea;
    }
    public LsSaveRec1Clminf getLsSaveRec1Clminf() {
        if (lsSaveRec1Clminf == null) {
            lsSaveRec1Clminf = new LsSaveRec1Clminf();
        }

        return lsSaveRec1Clminf;
    }

    public void setLsSaveRec1Clminf(LsSaveRec1Clminf lsSaveRec1Clminf) {
        this.lsSaveRec1Clminf = lsSaveRec1Clminf;
    }
    public DsmCallArea getDsmCallArea() {
        if (dsmCallArea == null) {
            dsmCallArea = new DsmCallArea();
        }

        return dsmCallArea;
    }

    public void setDsmCallArea(DsmCallArea dsmCallArea) {
        this.dsmCallArea = dsmCallArea;
    }
    public GenTransSpiTableGroup getGenTransSpiTableGroup() {
        if (genTransSpiTableGroup == null) {
            genTransSpiTableGroup = new GenTransSpiTableGroup();
        }

        return genTransSpiTableGroup;
    }

    public void setGenTransSpiTableGroup(GenTransSpiTableGroup genTransSpiTableGroup) {
        this.genTransSpiTableGroup = genTransSpiTableGroup;
    }
    public CetCicsErrorTableGroup getCetCicsErrorTableGroup() {
        if (cetCicsErrorTableGroup == null) {
            cetCicsErrorTableGroup = new CetCicsErrorTableGroup();
        }

        return cetCicsErrorTableGroup;
    }

    public void setCetCicsErrorTableGroup(CetCicsErrorTableGroup cetCicsErrorTableGroup) {
        this.cetCicsErrorTableGroup = cetCicsErrorTableGroup;
    }

    public int getNewNdx() {
        return newNdx;
    }

    public void setNewNdx(int newNdx) {
        this.newNdx = newNdx;
    }
    public int getGenNdx() {
        return genNdx;
    }

    public void setGenNdx(int genNdx) {
        this.genNdx = genNdx;
    }
    public int getUTrnslNdx51() {
        return uTrnslNdx51;
    }

    public void setUTrnslNdx51(int uTrnslNdx51) {
        this.uTrnslNdx51 = uTrnslNdx51;
    }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += w02FnuLineRead.hashCode();
        str += csvcCodeGroup.hashCode();
        str += eqiRecord.hashCode();
        str += csvcProc.hashCode();
        str += lsSaveRecord4.hashCode();
        str += w02DsplMsgArea.hashCode();
        str += work.hashCode();
        str += w02FnuLineStartbr.hashCode();
        str += feSpiAltPlanRecord.hashCode();
        str += workFields.hashCode();
        str += frontendHdPmtIcnRecord.hashCode();
        str += lsSaveRecord3.hashCode();
        str += feSpiRulesRecord.hashCode();
        str += ddEqisAlt.hashCode();
        str += fesaKey1.hashCode();
        str += ioi02bInterface.hashCode();
        str += frontendMedPmtIcnRecord.hashCode();
        str += fesrKey.hashCode();
        str += w02FnuLineReadnext.hashCode();
        str += newTransSpiTableGroup.hashCode();
        str += dfhcommarea.hashCode();
        str += drstRestartDataArea.hashCode();
        str += lsSaveRecord1.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += lsSaveRec1Clminf.hashCode();
        str += dsmCallArea.hashCode();
        str += genTransSpiTableGroup.hashCode();
        str += cetCicsErrorTableGroup.hashCode();
       return str.hashCode();
    }

    public O529351uCtx clone() {
        O529351uCtx cloneObj = new O529351uCtx();
        cloneObj.w02FnuLineRead = new W02FnuLineRead();
        cloneObj.w02FnuLineRead.set(w02FnuLineRead.getClonedField());
        cloneObj.csvcCodeGroup = new CsvcCodeGroup();
        cloneObj.csvcCodeGroup.set(csvcCodeGroup.getClonedField());
        cloneObj.eqiRecord = new EqiRecord();
        cloneObj.eqiRecord.set(eqiRecord.getClonedField());
        cloneObj.csvcProc = new CsvcProc();
        cloneObj.csvcProc.set(csvcProc.getClonedField());
        cloneObj.lsSaveRecord4 = new LsSaveRecord4();
        cloneObj.lsSaveRecord4.set(lsSaveRecord4.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.w02FnuLineStartbr = new W02FnuLineStartbr();
        cloneObj.w02FnuLineStartbr.set(w02FnuLineStartbr.getClonedField());
        cloneObj.feSpiAltPlanRecord = new FeSpiAltPlanRecord();
        cloneObj.feSpiAltPlanRecord.set(feSpiAltPlanRecord.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.frontendHdPmtIcnRecord = new FrontendHdPmtIcnRecord();
        cloneObj.frontendHdPmtIcnRecord.set(frontendHdPmtIcnRecord.getClonedField());
        cloneObj.lsSaveRecord3 = new LsSaveRecord3();
        cloneObj.lsSaveRecord3.set(lsSaveRecord3.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        cloneObj.ddEqisAlt = new DdEqisAlt();
        cloneObj.ddEqisAlt.set(ddEqisAlt.getClonedField());
        cloneObj.fesaKey1 = new FesaKey1();
        cloneObj.fesaKey1.set(fesaKey1.getClonedField());
        cloneObj.ioi02bInterface = new Ioi02bInterface();
        cloneObj.ioi02bInterface.set(ioi02bInterface.getClonedField());
        cloneObj.frontendMedPmtIcnRecord = new FrontendMedPmtIcnRecord();
        cloneObj.frontendMedPmtIcnRecord.set(frontendMedPmtIcnRecord.getClonedField());
        cloneObj.fesrKey = new FesrKey();
        cloneObj.fesrKey.set(fesrKey.getClonedField());
        cloneObj.w02FnuLineReadnext = new W02FnuLineReadnext();
        cloneObj.w02FnuLineReadnext.set(w02FnuLineReadnext.getClonedField());
        cloneObj.newTransSpiTableGroup = new NewTransSpiTableGroup();
        cloneObj.newTransSpiTableGroup.set(newTransSpiTableGroup.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.drstRestartDataArea = new DrstRestartDataArea();
        cloneObj.drstRestartDataArea.set(drstRestartDataArea.getClonedField());
        cloneObj.lsSaveRecord1 = new LsSaveRecord1();
        cloneObj.lsSaveRecord1.set(lsSaveRecord1.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.lsSaveRec1Clminf = new LsSaveRec1Clminf();
        cloneObj.lsSaveRec1Clminf.set(lsSaveRec1Clminf.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.genTransSpiTableGroup = new GenTransSpiTableGroup();
        cloneObj.genTransSpiTableGroup.set(genTransSpiTableGroup.getClonedField());
        cloneObj.cetCicsErrorTableGroup = new CetCicsErrorTableGroup();
        cloneObj.cetCicsErrorTableGroup.set(cetCicsErrorTableGroup.getClonedField());
        return cloneObj;
    }

/**
 * Program method contexts
 *
 */
     public class ProcessInCtx implements Cloneable {
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public ProcessInCtx clone() {
        ProcessInCtx cloneObj = new ProcessInCtx();
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public ProcessInCtx getProcessInCtx() {
            return new ProcessInCtx();
    }
     public class MainLineInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of m51uFunctionFlag
	 *	@return m51uFunctionFlag
	 */
   public char[] getM51uFunctionFlag() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uFlags().getM51uFunctionFlag();
   }

  
	/**
	*  set variable m51uFunctionFlag
	*  @param value
	**/
   public void setM51uFunctionFlag(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uFunctionFlag(value);
   } 

     /**
	 * 	Update M51uFunctionFlag 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setM51uFunctionFlag(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uFunctionFlag(source, sourceIndex);
   	
   }
   
   public void setM51uFunctionFlag(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uFunctionFlag(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update M51uFunctionFlag 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setM51uFunctionFlag(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uFunctionFlag(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update M51uFunctionFlag with another Field
	 *	@param value
	 */
   public void setM51uFunctionFlag(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uFunctionFlag(source);
   }  
   
     /**
	 * 	Update M51uFunctionFlag 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setM51uFunctionFlag(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uFunctionFlag(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update M51uFunctionFlag 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setM51uFunctionFlag(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uFunctionFlag(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uIcn51
	 *	@return uIcn51
	 */
   public char[] getUIcn51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUIcn51();
   }

  
	/**
	*  set variable uIcn51
	*  @param value
	**/
   public void setUIcn51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcn51(value);
   } 

     /**
	 * 	Update UIcn51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUIcn51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcn51(source, sourceIndex);
   	
   }
   
   public void setUIcn51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcn51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UIcn51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUIcn51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcn51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UIcn51 with another Field
	 *	@param value
	 */
   public void setUIcn51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcn51(source);
   }  
   
     /**
	 * 	Update UIcn51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUIcn51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcn51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UIcn51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUIcn51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcn51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public short getUNbrOfLines51() throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUNbrOfLines51();
}
	/**
	 * 	Update UNbrOfLines51 with the passed value
	 *	@param number
	 */
	public void setUNbrOfLines51(short number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUNbrOfLines51(number);
	}

	public void setUNbrOfLines51(int number)  throws CFException{
	   dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUNbrOfLines51(number);
	}
	public void setUNbrOfLines51(long number)  throws CFException {
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUNbrOfLines51(number);
	}
	


	/**
	 *	Returns the value of m51uLinkage
	 *	@return m51uLinkage
	 */   
	 public M51uLinkage getM51uLinkage() {
   	return dfhcommarea.getLinkAreaM51u().getM51uLinkage();
   }

   /**
	* 	Update M51uLinkage with the passed value
	*	@param value
	*/
   public void setM51uLinkage(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().setM51uLinkage(value);
   }   

     /**
	 * 	Update M51uLinkage 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setM51uLinkage(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dfhcommarea.getLinkAreaM51u().setM51uLinkage(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update M51uLinkage 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setM51uLinkage(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dfhcommarea.getLinkAreaM51u().setM51uLinkage(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update M51uLinkage with another Field
	 *	@param value
	 */
   public void setM51uLinkage(Field source) {
   	dfhcommarea.getLinkAreaM51u().setM51uLinkage(source);
   }  
   
     /**
	 * 	Update M51uLinkage 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setM51uLinkage(Field source, int sourceIndex,int sourceLen) {
   	dfhcommarea.getLinkAreaM51u().setM51uLinkage(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update M51uLinkage 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setM51uLinkage(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dfhcommarea.getLinkAreaM51u().setM51uLinkage(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrOfLines
	 *	@return nbrOfLines
	 */
	public int getNbrOfLines() throws CFException {        
   		return workFields.getNbrOfLines();
	}
	
	/**
	 * 	Update NbrOfLines with the passed value
	 *	@param number
	 */
	public void setNbrOfLines(int number)  throws CFException{
		workFields.setNbrOfLines(number);
	}


	public void setNbrOfLines(long number)  throws CFException{
		workFields.setNbrOfLines((int)number);
	}


	/**
	 *	Returns the value of uOutLineCauseCd51
	 *	@return uOutLineCauseCd51
	 */
   public char[] getUOutLineCauseCd51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineCauseCd51();
   }

  
	/**
	*  set variable uOutLineCauseCd51
	*  @param value
	**/
   public void setUOutLineCauseCd51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(value);
   } 

     /**
	 * 	Update UOutLineCauseCd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex);
   	
   }
   
   public void setUOutLineCauseCd51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutLineCauseCd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutLineCauseCd51 with another Field
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source);
   }  
   
     /**
	 * 	Update UOutLineCauseCd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutLineCauseCd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uStopAutoSw51
	 *	@return uStopAutoSw51
	 */
   public char[] getUStopAutoSw51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUStopAutoSw51();
   }

  
	/**
	*  set variable uStopAutoSw51
	*  @param value
	**/
   public void setUStopAutoSw51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(value);
   } 

     /**
	 * 	Update UStopAutoSw51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUStopAutoSw51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex);
   	
   }
   
   public void setUStopAutoSw51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UStopAutoSw51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUStopAutoSw51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UStopAutoSw51 with another Field
	 *	@param value
	 */
   public void setUStopAutoSw51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source);
   }  
   
     /**
	 * 	Update UStopAutoSw51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUStopAutoSw51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UStopAutoSw51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUStopAutoSw51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}


	/**
	 *	Returns the value of m51uIllogicalCondSw
	 *	@return m51uIllogicalCondSw
	 */
   public char[] getM51uIllogicalCondSw() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uFlags().getM51uIllogicalCondSw();
   }

  
	/**
	*  set variable m51uIllogicalCondSw
	*  @param value
	**/
   public void setM51uIllogicalCondSw(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondSw(value);
   } 

     /**
	 * 	Update M51uIllogicalCondSw 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setM51uIllogicalCondSw(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondSw(source, sourceIndex);
   	
   }
   
   public void setM51uIllogicalCondSw(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondSw(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update M51uIllogicalCondSw 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setM51uIllogicalCondSw(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondSw(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update M51uIllogicalCondSw with another Field
	 *	@param value
	 */
   public void setM51uIllogicalCondSw(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondSw(source);
   }  
   
     /**
	 * 	Update M51uIllogicalCondSw 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setM51uIllogicalCondSw(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondSw(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update M51uIllogicalCondSw 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setM51uIllogicalCondSw(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondSw(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public MainLineOutCtx getMainLineOutCtx() {
            return new MainLineOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public MainLineInCtx clone() {
        MainLineInCtx cloneObj = new MainLineInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public MainLineInCtx getMainLineInCtx() {
            return new MainLineInCtx();
    }
     public class MainLineOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of w02DsplMsg
	 *	@return w02DsplMsg
	 */
   public char[] getW02DsplMsg() throws CFException  {              
   		return w02DsplMsgArea.getW02DsplMsg();
   }

  
	/**
	*  set variable w02DsplMsg
	*  @param value
	**/
   public void setW02DsplMsg(char[] value) throws CFException {
      w02DsplMsgArea.setW02DsplMsg(value);
   } 

     /**
	 * 	Update W02DsplMsg 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02DsplMsg(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex);
   	
   }
   
   public void setW02DsplMsg(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02DsplMsg 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplMsg(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02DsplMsg with another Field
	 *	@param value
	 */
   public void setW02DsplMsg(Field source) {
      w02DsplMsgArea.setW02DsplMsg(source);
   }  
   
     /**
	 * 	Update W02DsplMsg 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02DsplMsg(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02DsplMsg 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplMsg(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public short getUNbrOfLines51() throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUNbrOfLines51();
}
	/**
	 * 	Update UNbrOfLines51 with the passed value
	 *	@param number
	 */
	public void setUNbrOfLines51(short number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUNbrOfLines51(number);
	}

	public void setUNbrOfLines51(int number)  throws CFException{
	   dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUNbrOfLines51(number);
	}
	public void setUNbrOfLines51(long number)  throws CFException {
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUNbrOfLines51(number);
	}
	


	/**
	 *	Returns the value of w02FnuIcn
	 *	@return w02FnuIcn
	 */
   public char[] getW02FnuIcn() throws CFException  {              
   		return w02DsplMsgArea.getW02FnuIcn();
   }

  
	/**
	*  set variable w02FnuIcn
	*  @param value
	**/
   public void setW02FnuIcn(char[] value) throws CFException {
      w02DsplMsgArea.setW02FnuIcn(value);
   } 

     /**
	 * 	Update W02FnuIcn 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02FnuIcn(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02FnuIcn(source, sourceIndex);
   	
   }
   
   public void setW02FnuIcn(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02FnuIcn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02FnuIcn 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuIcn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02FnuIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02FnuIcn with another Field
	 *	@param value
	 */
   public void setW02FnuIcn(Field source) {
      w02DsplMsgArea.setW02FnuIcn(source);
   }  
   
     /**
	 * 	Update W02FnuIcn 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02FnuIcn(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02FnuIcn(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02FnuIcn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuIcn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02FnuIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrOfLines
	 *	@return nbrOfLines
	 */
	public int getNbrOfLines() throws CFException {        
   		return workFields.getNbrOfLines();
	}
	
	/**
	 * 	Update NbrOfLines with the passed value
	 *	@param number
	 */
	public void setNbrOfLines(int number)  throws CFException{
		workFields.setNbrOfLines(number);
	}


	public void setNbrOfLines(long number)  throws CFException{
		workFields.setNbrOfLines((int)number);
	}


	/**
	 *	Returns the value of w02DsplErrInd
	 *	@return w02DsplErrInd
	 */
   public char[] getW02DsplErrInd() throws CFException  {              
   		return w02DsplMsgArea.getW02DsplErrInd();
   }

  
	/**
	*  set variable w02DsplErrInd
	*  @param value
	**/
   public void setW02DsplErrInd(char[] value) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(value);
   } 

     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex);
   	
   }
   
   public void setW02DsplErrInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02DsplErrInd with another Field
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source) {
      w02DsplMsgArea.setW02DsplErrInd(source);
   }  
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uOutCauseCd51
	 *	@return uOutCauseCd51
	 */
   public char[] getUOutCauseCd51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutCauseCd51();
   }

  
	/**
	*  set variable uOutCauseCd51
	*  @param value
	**/
   public void setUOutCauseCd51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUOutCauseCd51(value);
   } 

     /**
	 * 	Update UOutCauseCd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutCauseCd51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUOutCauseCd51(source, sourceIndex);
   	
   }
   
   public void setUOutCauseCd51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUOutCauseCd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutCauseCd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutCauseCd51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUOutCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutCauseCd51 with another Field
	 *	@param value
	 */
   public void setUOutCauseCd51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUOutCauseCd51(source);
   }  
   
     /**
	 * 	Update UOutCauseCd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutCauseCd51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUOutCauseCd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutCauseCd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutCauseCd51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUOutCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uStopAutoSw51
	 *	@return uStopAutoSw51
	 */
   public char[] getUStopAutoSw51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUStopAutoSw51();
   }

  
	/**
	*  set variable uStopAutoSw51
	*  @param value
	**/
   public void setUStopAutoSw51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(value);
   } 

     /**
	 * 	Update UStopAutoSw51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUStopAutoSw51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex);
   	
   }
   
   public void setUStopAutoSw51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UStopAutoSw51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUStopAutoSw51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UStopAutoSw51 with another Field
	 *	@param value
	 */
   public void setUStopAutoSw51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source);
   }  
   
     /**
	 * 	Update UStopAutoSw51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUStopAutoSw51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UStopAutoSw51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUStopAutoSw51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isToCauseCdChanged1()
	 *	@return  Returns true if isToCauseCdChanged1() is "Y"
	 */
   public boolean isToCauseCdChanged1() throws CFException {
      return workFields.isToCauseCdChanged1();
   }

	/**
	*  set values "Y"
	*/
   	public void setToCauseCdChanged1True()  throws CFException{  			
    	workFields.setToCauseCdChanged1True();
   	}
	/**
	 *	Returns the value of chargeCombined
	 *	@return chargeCombined
	 */
   public char[] getChargeCombined() throws CFException  {              
   		return workFields.getChargeCombined();
   }

  
	/**
	*  set variable chargeCombined
	*  @param value
	**/
   public void setChargeCombined(char[] value) throws CFException {
      workFields.setChargeCombined(value);
   } 

     /**
	 * 	Update ChargeCombined 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setChargeCombined(char[] source, int sourceIndex) throws CFException {
      workFields.setChargeCombined(source, sourceIndex);
   	
   }
   
   public void setChargeCombined(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setChargeCombined(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ChargeCombined 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setChargeCombined(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setChargeCombined(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ChargeCombined with another Field
	 *	@param value
	 */
   public void setChargeCombined(Field source) {
      workFields.setChargeCombined(source);
   }  
   
     /**
	 * 	Update ChargeCombined 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setChargeCombined(Field source, int sourceIndex,int sourceLen) {
      workFields.setChargeCombined(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ChargeCombined 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setChargeCombined(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setChargeCombined(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of toCauseCdChanged
	 *	@return toCauseCdChanged
	 */
   public char[] getToCauseCdChanged() throws CFException  {              
   		return workFields.getToCauseCdChanged();
   }

  
	/**
	*  set variable toCauseCdChanged
	*  @param value
	**/
   public void setToCauseCdChanged(char[] value) throws CFException {
      workFields.setToCauseCdChanged(value);
   } 

     /**
	 * 	Update ToCauseCdChanged 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setToCauseCdChanged(char[] source, int sourceIndex) throws CFException {
      workFields.setToCauseCdChanged(source, sourceIndex);
   	
   }
   
   public void setToCauseCdChanged(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setToCauseCdChanged(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ToCauseCdChanged 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setToCauseCdChanged(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setToCauseCdChanged(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ToCauseCdChanged with another Field
	 *	@param value
	 */
   public void setToCauseCdChanged(Field source) {
      workFields.setToCauseCdChanged(source);
   }  
   
     /**
	 * 	Update ToCauseCdChanged 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setToCauseCdChanged(Field source, int sourceIndex,int sourceLen) {
      workFields.setToCauseCdChanged(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ToCauseCdChanged 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setToCauseCdChanged(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setToCauseCdChanged(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of m51uFunctionFlag
	 *	@return m51uFunctionFlag
	 */
   public char[] getM51uFunctionFlag() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uFlags().getM51uFunctionFlag();
   }

  
	/**
	*  set variable m51uFunctionFlag
	*  @param value
	**/
   public void setM51uFunctionFlag(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uFunctionFlag(value);
   } 

     /**
	 * 	Update M51uFunctionFlag 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setM51uFunctionFlag(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uFunctionFlag(source, sourceIndex);
   	
   }
   
   public void setM51uFunctionFlag(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uFunctionFlag(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update M51uFunctionFlag 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setM51uFunctionFlag(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uFunctionFlag(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update M51uFunctionFlag with another Field
	 *	@param value
	 */
   public void setM51uFunctionFlag(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uFunctionFlag(source);
   }  
   
     /**
	 * 	Update M51uFunctionFlag 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setM51uFunctionFlag(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uFunctionFlag(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update M51uFunctionFlag 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setM51uFunctionFlag(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uFunctionFlag(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uIcn51
	 *	@return uIcn51
	 */
   public char[] getUIcn51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUIcn51();
   }

  
	/**
	*  set variable uIcn51
	*  @param value
	**/
   public void setUIcn51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcn51(value);
   } 

     /**
	 * 	Update UIcn51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUIcn51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcn51(source, sourceIndex);
   	
   }
   
   public void setUIcn51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcn51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UIcn51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUIcn51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcn51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UIcn51 with another Field
	 *	@param value
	 */
   public void setUIcn51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcn51(source);
   }  
   
     /**
	 * 	Update UIcn51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUIcn51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcn51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UIcn51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUIcn51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcn51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of illogicalCond
	 *	@return illogicalCond
	 */
   public char[] getIllogicalCond() throws CFException  {              
   		return work.getIllogicalCond();
   }

  
	/**
	*  set variable illogicalCond
	*  @param value
	**/
   public void setIllogicalCond(char[] value) throws CFException {
      work.setIllogicalCond(value);
   } 

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02AbendingProg
	 *	@return w02AbendingProg
	 */
   public char[] getW02AbendingProg() throws CFException  {              
   		return w02DsplMsgArea.getW02AbendingProg();
   }

  
	/**
	*  set variable w02AbendingProg
	*  @param value
	**/
   public void setW02AbendingProg(char[] value) throws CFException {
      w02DsplMsgArea.setW02AbendingProg(value);
   } 

     /**
	 * 	Update W02AbendingProg 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02AbendingProg(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex);
   	
   }
   
   public void setW02AbendingProg(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02AbendingProg 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02AbendingProg(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02AbendingProg with another Field
	 *	@param value
	 */
   public void setW02AbendingProg(Field source) {
      w02DsplMsgArea.setW02AbendingProg(source);
   }  
   
     /**
	 * 	Update W02AbendingProg 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02AbendingProg(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02AbendingProg 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02AbendingProg(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "I" for isM51uIllogicalCond()
	 *	@return  Returns true if isM51uIllogicalCond() is "I"
	 */
   public boolean isM51uIllogicalCond() throws CFException {
      return dfhcommarea.getLinkAreaM51u().getM51uFlags().isM51uIllogicalCond();
   }

	/**
	*  set values "I"
	*/
   	public void setM51uIllogicalCondTrue()  throws CFException{  			
    	dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondTrue();
   	}
	/**
	 *	Returns the value of uOutLineCauseCd51
	 *	@return uOutLineCauseCd51
	 */
   public char[] getUOutLineCauseCd51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineCauseCd51();
   }

  
	/**
	*  set variable uOutLineCauseCd51
	*  @param value
	**/
   public void setUOutLineCauseCd51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(value);
   } 

     /**
	 * 	Update UOutLineCauseCd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex);
   	
   }
   
   public void setUOutLineCauseCd51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutLineCauseCd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutLineCauseCd51 with another Field
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source);
   }  
   
     /**
	 * 	Update UOutLineCauseCd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutLineCauseCd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of functionFlag
	 *	@return functionFlag
	 */
   public char[] getFunctionFlag() throws CFException  {              
   		return work.getFunctionFlag();
   }

  
	/**
	*  set variable functionFlag
	*  @param value
	**/
   public void setFunctionFlag(char[] value) throws CFException {
      work.setFunctionFlag(value);
   } 

	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}


	/**
	 *	Returns the value of m51uIllogicalCondSw
	 *	@return m51uIllogicalCondSw
	 */
   public char[] getM51uIllogicalCondSw() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uFlags().getM51uIllogicalCondSw();
   }

  
	/**
	*  set variable m51uIllogicalCondSw
	*  @param value
	**/
   public void setM51uIllogicalCondSw(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondSw(value);
   } 

     /**
	 * 	Update M51uIllogicalCondSw 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setM51uIllogicalCondSw(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondSw(source, sourceIndex);
   	
   }
   
   public void setM51uIllogicalCondSw(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondSw(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update M51uIllogicalCondSw 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setM51uIllogicalCondSw(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondSw(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update M51uIllogicalCondSw with another Field
	 *	@param value
	 */
   public void setM51uIllogicalCondSw(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondSw(source);
   }  
   
     /**
	 * 	Update M51uIllogicalCondSw 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setM51uIllogicalCondSw(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondSw(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update M51uIllogicalCondSw 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setM51uIllogicalCondSw(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondSw(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public MainLineOutCtx clone() {
        MainLineOutCtx cloneObj = new MainLineOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public MainLineOutCtx getMainLineOutCtx() {
            return new MainLineOutCtx();
    }
     public class InitializeInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public InitializeOutCtx getInitializeOutCtx() {
            return new InitializeOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public InitializeInCtx clone() {
        InitializeInCtx cloneObj = new InitializeInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public InitializeInCtx getInitializeInCtx() {
            return new InitializeInCtx();
    }
     public class InitializeOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of fesaSpiDiagElgInd
	 *	@return fesaSpiDiagElgInd
	 */
   public char[] getFesaSpiDiagElgInd(int index) throws CFException  {              
   		return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiDiagElgInd();
   }

  
	/**
	*  set variable fesaSpiDiagElgInd
	*  @param value
	**/
   public void setFesaSpiDiagElgInd(int index,char[] value) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(value);
   } 

     /**
	 * 	Update FesaSpiDiagElgInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,char[] source, int sourceIndex) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex);
   	
   }
   
   public void setFesaSpiDiagElgInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaSpiDiagElgInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaSpiDiagElgInd with another Field
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,Field source) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source);
   }  
   
     /**
	 * 	Update FesaSpiDiagElgInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,Field source, int sourceIndex,int sourceLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaSpiDiagElgInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cflgSvc
	 *	@return cflgSvc
	 */
   public char[] getCflgSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgSvc();
   }

  
	/**
	*  set variable cflgSvc
	*  @param value
	**/
   public void setCflgSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgSvc(value);
   } 

     /**
	 * 	Update CflgSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex);
   	
   }
   
   public void setCflgSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgSvc with another Field
	 *	@param value
	 */
   public void setCflgSvc(Field source) {
      workFields.getHoldTransData2().setCflgSvc(source);
   }  
   
     /**
	 * 	Update CflgSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaSvc
	 *	@return ripaSvc
	 */
   public char[] getRipaSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaSvc();
   }

  
	/**
	*  set variable ripaSvc
	*  @param value
	**/
   public void setRipaSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaSvc(value);
   } 

     /**
	 * 	Update RipaSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex);
   	
   }
   
   public void setRipaSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaSvc with another Field
	 *	@param value
	 */
   public void setRipaSvc(Field source) {
      workFields.getHoldTransData2().setRipaSvc(source);
   }  
   
     /**
	 * 	Update RipaSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cflgCauseCd
	 *	@return cflgCauseCd
	 */
   public char[] getCflgCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgCauseCd();
   }

  
	/**
	*  set variable cflgCauseCd
	*  @param value
	**/
   public void setCflgCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgCauseCd(value);
   } 

     /**
	 * 	Update CflgCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex);
   	
   }
   
   public void setCflgCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgCauseCd with another Field
	 *	@param value
	 */
   public void setCflgCauseCd(Field source) {
      workFields.getHoldTransData2().setCflgCauseCd(source);
   }  
   
     /**
	 * 	Update CflgCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uOutCauseCd51
	 *	@return uOutCauseCd51
	 */
   public char[] getUOutCauseCd51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutCauseCd51();
   }

  
	/**
	*  set variable uOutCauseCd51
	*  @param value
	**/
   public void setUOutCauseCd51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUOutCauseCd51(value);
   } 

     /**
	 * 	Update UOutCauseCd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutCauseCd51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUOutCauseCd51(source, sourceIndex);
   	
   }
   
   public void setUOutCauseCd51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUOutCauseCd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutCauseCd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutCauseCd51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUOutCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutCauseCd51 with another Field
	 *	@param value
	 */
   public void setUOutCauseCd51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUOutCauseCd51(source);
   }  
   
     /**
	 * 	Update UOutCauseCd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutCauseCd51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUOutCauseCd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutCauseCd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutCauseCd51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUOutCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getFesaEffDate01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaEffDate01();
}
	/**
	 * 	Update FesaEffDate01 with the passed value
	 *	@param number
	 */
	public void setFesaEffDate01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaEffDate01(number);
	}


	public void setFesaEffDate01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaEffDate01(number);
	}
	

	/**
	 *	Returns the value of ricdPs
	 *	@return ricdPs
	 */
   public char[] getRicdPs() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdPs();
   }

  
	/**
	*  set variable ricdPs
	*  @param value
	**/
   public void setRicdPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdPs(value);
   } 

     /**
	 * 	Update RicdPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex);
   	
   }
   
   public void setRicdPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdPs with another Field
	 *	@param value
	 */
   public void setRicdPs(Field source) {
      workFields.getHoldTransData2().setRicdPs(source);
   }  
   
     /**
	 * 	Update RicdPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdSvc
	 *	@return ricdSvc
	 */
   public char[] getRicdSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdSvc();
   }

  
	/**
	*  set variable ricdSvc
	*  @param value
	**/
   public void setRicdSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdSvc(value);
   } 

     /**
	 * 	Update RicdSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex);
   	
   }
   
   public void setRicdSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdSvc with another Field
	 *	@param value
	 */
   public void setRicdSvc(Field source) {
      workFields.getHoldTransData2().setRicdSvc(source);
   }  
   
     /**
	 * 	Update RicdSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndCauseCd
	 *	@return fcndCauseCd
	 */
   public char[] getFcndCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndCauseCd();
   }

  
	/**
	*  set variable fcndCauseCd
	*  @param value
	**/
   public void setFcndCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndCauseCd(value);
   } 

     /**
	 * 	Update FcndCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex);
   	
   }
   
   public void setFcndCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndCauseCd with another Field
	 *	@param value
	 */
   public void setFcndCauseCd(Field source) {
      workFields.getHoldTransData2().setFcndCauseCd(source);
   }  
   
     /**
	 * 	Update FcndCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypPs
	 *	@return ptypPs
	 */
   public char[] getPtypPs() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypPs();
   }

  
	/**
	*  set variable ptypPs
	*  @param value
	**/
   public void setPtypPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypPs(value);
   } 

     /**
	 * 	Update PtypPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex);
   	
   }
   
   public void setPtypPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypPs with another Field
	 *	@param value
	 */
   public void setPtypPs(Field source) {
      workFields.getHoldTransData2().setPtypPs(source);
   }  
   
     /**
	 * 	Update PtypPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of planVarFoundSw
	 *	@return planVarFoundSw
	 */
   public char[] getPlanVarFoundSw() throws CFException  {              
   		return work.getPlanVarFoundSw();
   }

  
	/**
	*  set variable planVarFoundSw
	*  @param value
	**/
   public void setPlanVarFoundSw(char[] value) throws CFException {
      work.setPlanVarFoundSw(value);
   } 

	/**
	 *	Returns the value of uOutLinePos51
	 *	@return uOutLinePos51
	 */
   public char[] getUOutLinePos51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLinePos51();
   }

  
	/**
	*  set variable uOutLinePos51
	*  @param value
	**/
   public void setUOutLinePos51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLinePos51(value);
   } 

     /**
	 * 	Update UOutLinePos51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutLinePos51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLinePos51(source, sourceIndex);
   	
   }
   
   public void setUOutLinePos51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLinePos51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutLinePos51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutLinePos51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLinePos51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutLinePos51 with another Field
	 *	@param value
	 */
   public void setUOutLinePos51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLinePos51(source);
   }  
   
     /**
	 * 	Update UOutLinePos51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutLinePos51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLinePos51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutLinePos51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutLinePos51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLinePos51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaPs
	 *	@return ripaPs
	 */
   public char[] getRipaPs() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaPs();
   }

  
	/**
	*  set variable ripaPs
	*  @param value
	**/
   public void setRipaPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaPs(value);
   } 

     /**
	 * 	Update RipaPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex);
   	
   }
   
   public void setRipaPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaPs with another Field
	 *	@param value
	 */
   public void setRipaPs(Field source) {
      workFields.getHoldTransData2().setRipaPs(source);
   }  
   
     /**
	 * 	Update RipaPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestValues
	 *	@return d51uTestValues
	 */   
	 public D51uTestValues getD51uTestValues() {
   	return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues();
   }

   /**
	* 	Update D51uTestValues with the passed value
	*	@param value
	*/
   public void setD51uTestValues(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().setD51uTestValues(value);
   }   

     /**
	 * 	Update D51uTestValues 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setD51uTestValues(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	vyspi51uCallArea.getD51uRequestFields().setD51uTestValues(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestValues 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestValues(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	vyspi51uCallArea.getD51uRequestFields().setD51uTestValues(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestValues with another Field
	 *	@param value
	 */
   public void setD51uTestValues(Field source) {
   	vyspi51uCallArea.getD51uRequestFields().setD51uTestValues(source);
   }  
   
     /**
	 * 	Update D51uTestValues 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setD51uTestValues(Field source, int sourceIndex,int sourceLen) {
   	vyspi51uCallArea.getD51uRequestFields().setD51uTestValues(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestValues 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestValues(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	vyspi51uCallArea.getD51uRequestFields().setD51uTestValues(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesaPolicy01
	 *	@return fesaPolicy01
	 */
   public char[] getFesaPolicy01(int index) throws CFException  {              
   		return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaPolicy01();
   }

  
	/**
	*  set variable fesaPolicy01
	*  @param value
	**/
   public void setFesaPolicy01(int index,char[] value) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(value);
   } 

     /**
	 * 	Update FesaPolicy01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaPolicy01(int index,char[] source, int sourceIndex) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex);
   	
   }
   
   public void setFesaPolicy01(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaPolicy01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy01(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaPolicy01 with another Field
	 *	@param value
	 */
   public void setFesaPolicy01(int index,Field source) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source);
   }  
   
     /**
	 * 	Update FesaPolicy01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaPolicy01(int index,Field source, int sourceIndex,int sourceLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaPolicy01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy01(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of endOfPlanAlt
	 *	@return endOfPlanAlt
	 */
   public char[] getEndOfPlanAlt() throws CFException  {              
   		return work.getEndOfPlanAlt();
   }

  
	/**
	*  set variable endOfPlanAlt
	*  @param value
	**/
   public void setEndOfPlanAlt(char[] value) throws CFException {
      work.setEndOfPlanAlt(value);
   } 

	/**
	 *	Returns the value of frtoCauseCd
	 *	@return frtoCauseCd
	 */
   public char[] getFrtoCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoCauseCd();
   }

  
	/**
	*  set variable frtoCauseCd
	*  @param value
	**/
   public void setFrtoCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoCauseCd(value);
   } 

     /**
	 * 	Update FrtoCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex);
   	
   }
   
   public void setFrtoCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoCauseCd with another Field
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source) {
      workFields.getHoldTransData2().setFrtoCauseCd(source);
   }  
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesaPosTierCd
	 *	@return fesaPosTierCd
	 */
   public char[] getFesaPosTierCd(int index) throws CFException  {              
   		return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaPosTierCd();
   }

  
	/**
	*  set variable fesaPosTierCd
	*  @param value
	**/
   public void setFesaPosTierCd(int index,char[] value) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(value);
   } 

     /**
	 * 	Update FesaPosTierCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,char[] source, int sourceIndex) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex);
   	
   }
   
   public void setFesaPosTierCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaPosTierCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaPosTierCd with another Field
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,Field source) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source);
   }  
   
     /**
	 * 	Update FesaPosTierCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,Field source, int sourceIndex,int sourceLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaPosTierCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of diagSub
	 *	@return diagSub
	 */
	public int getDiagSub() throws CFException {        
   		return work.getDiagSub();
	}
	
	/**
	 * 	Update DiagSub with the passed value
	 *	@param number
	 */
	public void setDiagSub(int number)  throws CFException{
		work.setDiagSub(number);
	}


	public void setDiagSub(long number)  throws CFException{
		work.setDiagSub((int)number);
	}


	/**
	 *	Returns the value of uOutLineServiceCode51
	 *	@return uOutLineServiceCode51
	 */
   public char[] getUOutLineServiceCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineServiceCode51();
   }

  
	/**
	*  set variable uOutLineServiceCode51
	*  @param value
	**/
   public void setUOutLineServiceCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(value);
   } 

     /**
	 * 	Update UOutLineServiceCode51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex);
   	
   }
   
   public void setUOutLineServiceCode51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutLineServiceCode51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutLineServiceCode51 with another Field
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source);
   }  
   
     /**
	 * 	Update UOutLineServiceCode51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutLineServiceCode51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of holdSvc
	 *	@return holdSvc
	 */
   public char[] getHoldSvc() throws CFException  {              
   		return workFields.getHoldTransData().getHoldSvc();
   }

  
	/**
	*  set variable holdSvc
	*  @param value
	**/
   public void setHoldSvc(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldSvc(value);
   } 

     /**
	 * 	Update HoldSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex);
   	
   }
   
   public void setHoldSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldSvc with another Field
	 *	@param value
	 */
   public void setHoldSvc(Field source) {
      workFields.getHoldTransData().setHoldSvc(source);
   }  
   
     /**
	 * 	Update HoldSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uStopAutoSw51
	 *	@return uStopAutoSw51
	 */
   public char[] getUStopAutoSw51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUStopAutoSw51();
   }

  
	/**
	*  set variable uStopAutoSw51
	*  @param value
	**/
   public void setUStopAutoSw51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(value);
   } 

     /**
	 * 	Update UStopAutoSw51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUStopAutoSw51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex);
   	
   }
   
   public void setUStopAutoSw51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UStopAutoSw51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUStopAutoSw51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UStopAutoSw51 with another Field
	 *	@param value
	 */
   public void setUStopAutoSw51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source);
   }  
   
     /**
	 * 	Update UStopAutoSw51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUStopAutoSw51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UStopAutoSw51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUStopAutoSw51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causeSub
	 *	@return causeSub
	 */
	public int getCauseSub() throws CFException {        
   		return work.getCauseSub();
	}
	
	/**
	 * 	Update CauseSub with the passed value
	 *	@param number
	 */
	public void setCauseSub(int number)  throws CFException{
		work.setCauseSub(number);
	}


	public void setCauseSub(long number)  throws CFException{
		work.setCauseSub((int)number);
	}


	public BigDecimal getUOutLineChargeAmt51(int index) throws CFException{      
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineChargeAmt51();
	}

    public char[] getUOutLineChargeAmt51String(int index) throws CFException {
          return  dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineChargeAmt51().toPlainString().toCharArray();
    }
	
	/**
	 * 	Update UOutLineChargeAmt51 with the passed number
	 *	@param number
	 */
	public void setUOutLineChargeAmt51(int index,BigDecimal number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineChargeAmt51(number);
   }

	/**
	 *	Returns the value of pvSub
	 *	@return pvSub
	 */
	public int getPvSub() throws CFException {        
   		return work.getPvSub();
	}
	
	/**
	 * 	Update PvSub with the passed value
	 *	@param number
	 */
	public void setPvSub(int number)  throws CFException{
		work.setPvSub(number);
	}


	public void setPvSub(long number)  throws CFException{
		work.setPvSub((int)number);
	}


public short getNbrOfNewPlanVar() throws CFException {  
        return workFields.getNbrOfNewPlanVar();
}
	/**
	 * 	Update NbrOfNewPlanVar with the passed value
	 *	@param number
	 */
	public void setNbrOfNewPlanVar(short number)  throws CFException{
		workFields.setNbrOfNewPlanVar(number);
	}

	public void setNbrOfNewPlanVar(int number)  throws CFException{
	   workFields.setNbrOfNewPlanVar(number);
	}
	public void setNbrOfNewPlanVar(long number)  throws CFException {
	    workFields.setNbrOfNewPlanVar(number);
	}
	


	/**
	 *	Returns the value of newPlanVarFoundSw
	 *	@return newPlanVarFoundSw
	 */
   public char[] getNewPlanVarFoundSw() throws CFException  {              
   		return work.getNewPlanVarFoundSw();
   }

  
	/**
	*  set variable newPlanVarFoundSw
	*  @param value
	**/
   public void setNewPlanVarFoundSw(char[] value) throws CFException {
      work.setNewPlanVarFoundSw(value);
   } 

	/**
	 *	Returns the value of nbrOfPlanVar
	 *	@return nbrOfPlanVar
	 */
	public int getNbrOfPlanVar() throws CFException {        
   		return workFields.getNbrOfPlanVar();
	}
	
	/**
	 * 	Update NbrOfPlanVar with the passed value
	 *	@param number
	 */
	public void setNbrOfPlanVar(int number)  throws CFException{
		workFields.setNbrOfPlanVar(number);
	}


	public void setNbrOfPlanVar(long number)  throws CFException{
		workFields.setNbrOfPlanVar((int)number);
	}


	/**
	 *	Returns the value of uOutLineRemarkCd51
	 *	@return uOutLineRemarkCd51
	 */
   public char[] getUOutLineRemarkCd51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineRemarkCd51();
   }

  
	/**
	*  set variable uOutLineRemarkCd51
	*  @param value
	**/
   public void setUOutLineRemarkCd51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineRemarkCd51(value);
   } 

     /**
	 * 	Update UOutLineRemarkCd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutLineRemarkCd51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineRemarkCd51(source, sourceIndex);
   	
   }
   
   public void setUOutLineRemarkCd51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineRemarkCd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutLineRemarkCd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineRemarkCd51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineRemarkCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutLineRemarkCd51 with another Field
	 *	@param value
	 */
   public void setUOutLineRemarkCd51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineRemarkCd51(source);
   }  
   
     /**
	 * 	Update UOutLineRemarkCd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutLineRemarkCd51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineRemarkCd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutLineRemarkCd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineRemarkCd51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineRemarkCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of holdPs
	 *	@return holdPs
	 */
   public char[] getHoldPs() throws CFException  {              
   		return workFields.getHoldTransData().getHoldPs();
   }

  
	/**
	*  set variable holdPs
	*  @param value
	**/
   public void setHoldPs(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldPs(value);
   } 

     /**
	 * 	Update HoldPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex);
   	
   }
   
   public void setHoldPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldPs with another Field
	 *	@param value
	 */
   public void setHoldPs(Field source) {
      workFields.getHoldTransData().setHoldPs(source);
   }  
   
     /**
	 * 	Update HoldPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uOutLineCauseCd51
	 *	@return uOutLineCauseCd51
	 */
   public char[] getUOutLineCauseCd51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineCauseCd51();
   }

  
	/**
	*  set variable uOutLineCauseCd51
	*  @param value
	**/
   public void setUOutLineCauseCd51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(value);
   } 

     /**
	 * 	Update UOutLineCauseCd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex);
   	
   }
   
   public void setUOutLineCauseCd51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutLineCauseCd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutLineCauseCd51 with another Field
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source);
   }  
   
     /**
	 * 	Update UOutLineCauseCd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutLineCauseCd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getUOutLineDosDate51(int index) throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineDosDate51();
}
	/**
	 * 	Update UOutLineDosDate51 with the passed value
	 *	@param number
	 */
	public void setUOutLineDosDate51(int index,int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineDosDate51(number);
	}


	public void setUOutLineDosDate51(int index,long number)  throws CFException{
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineDosDate51(number);
	}
	

	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}


	/**
	 *	Returns the value of holdDiagElgInd
	 *	@return holdDiagElgInd
	 */
   public char[] getHoldDiagElgInd() throws CFException  {              
   		return workFields.getHoldTransData().getHoldDiagElgInd();
   }

  
	/**
	*  set variable holdDiagElgInd
	*  @param value
	**/
   public void setHoldDiagElgInd(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldDiagElgInd(value);
   } 

     /**
	 * 	Update HoldDiagElgInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldDiagElgInd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex);
   	
   }
   
   public void setHoldDiagElgInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldDiagElgInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldDiagElgInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldDiagElgInd with another Field
	 *	@param value
	 */
   public void setHoldDiagElgInd(Field source) {
      workFields.getHoldTransData().setHoldDiagElgInd(source);
   }  
   
     /**
	 * 	Update HoldDiagElgInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldDiagElgInd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldDiagElgInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldDiagElgInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getUOutLineAppUnits51(int index) throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineAppUnits51();
}
	/**
	 * 	Update UOutLineAppUnits51 with the passed value
	 *	@param number
	 */
	public void setUOutLineAppUnits51(int index,int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineAppUnits51(number);
	}


	public void setUOutLineAppUnits51(int index,long number)  throws CFException{
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineAppUnits51(number);
	}
	

	/**
	 *	Returns the value of fcndSvc
	 *	@return fcndSvc
	 */
   public char[] getFcndSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndSvc();
   }

  
	/**
	*  set variable fcndSvc
	*  @param value
	**/
   public void setFcndSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndSvc(value);
   } 

     /**
	 * 	Update FcndSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex);
   	
   }
   
   public void setFcndSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndSvc with another Field
	 *	@param value
	 */
   public void setFcndSvc(Field source) {
      workFields.getHoldTransData2().setFcndSvc(source);
   }  
   
     /**
	 * 	Update FcndSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndPs
	 *	@return fcndPs
	 */
   public char[] getFcndPs() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndPs();
   }

  
	/**
	*  set variable fcndPs
	*  @param value
	**/
   public void setFcndPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndPs(value);
   } 

     /**
	 * 	Update FcndPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex);
   	
   }
   
   public void setFcndPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndPs with another Field
	 *	@param value
	 */
   public void setFcndPs(Field source) {
      workFields.getHoldTransData2().setFcndPs(source);
   }  
   
     /**
	 * 	Update FcndPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cflgPs
	 *	@return cflgPs
	 */
   public char[] getCflgPs() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgPs();
   }

  
	/**
	*  set variable cflgPs
	*  @param value
	**/
   public void setCflgPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgPs(value);
   } 

     /**
	 * 	Update CflgPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex);
   	
   }
   
   public void setCflgPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgPs with another Field
	 *	@param value
	 */
   public void setCflgPs(Field source) {
      workFields.getHoldTransData2().setCflgPs(source);
   }  
   
     /**
	 * 	Update CflgPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public short getNbrMatchedPrev() throws CFException {
   		return workFields.getNbrMatchedPrev();
	}

    /**
	 *	Returns the String value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public char[]  getNbrMatchedPrevActualString() {
		return workFields.getNbrMatchedPrevActualString();
	}

	/**
	 *	Returns String value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public char[]  getNbrMatchedPrevString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedPrevString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedPrevIsNumeric()  throws CFException{
	    return workFields.nbrMatchedPrevIsNumeric();
	}

	/**
	 * 	Update NbrMatchedPrev with the passed value
	 *	@param number
	 */
	public void setNbrMatchedPrev(short number)  throws CFException{
		workFields.setNbrMatchedPrev(number);
	}
	
	public void setNbrMatchedPrev(int number)  throws CFException{
	    workFields.setNbrMatchedPrev(number);
	}
	public void setNbrMatchedPrev(long number)  throws CFException{
	    workFields.setNbrMatchedPrev(number);
	}
	

	
	/**
	 * 	Update NbrMatchedPrev with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedPrev(char[] value)  throws CFException {
		workFields.setNbrMatchedPrev(value);
	}
	
	/**
	 * 	Update NbrMatchedPrev with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedPrevString(char[] value)  throws CFException{
		workFields.setNbrMatchedPrev(value);
	}	

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of ptypCauseCd
	 *	@return ptypCauseCd
	 */
   public char[] getPtypCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypCauseCd();
   }

  
	/**
	*  set variable ptypCauseCd
	*  @param value
	**/
   public void setPtypCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypCauseCd(value);
   } 

     /**
	 * 	Update PtypCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex);
   	
   }
   
   public void setPtypCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypCauseCd with another Field
	 *	@param value
	 */
   public void setPtypCauseCd(Field source) {
      workFields.getHoldTransData2().setPtypCauseCd(source);
   }  
   
     /**
	 * 	Update PtypCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of svcSub
	 *	@return svcSub
	 */
	public int getSvcSub() throws CFException {        
   		return work.getSvcSub();
	}
	
	/**
	 * 	Update SvcSub with the passed value
	 *	@param number
	 */
	public void setSvcSub(int number)  throws CFException{
		work.setSvcSub(number);
	}


	public void setSvcSub(long number)  throws CFException{
		work.setSvcSub((int)number);
	}


	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of polNo
	 *	@return polNo
	 */
   public char[] getPolNo() throws CFException  {              
   		return workFields.getPolNo();
   }

  
	/**
	*  set variable polNo
	*  @param value
	**/
   public void setPolNo(char[] value) throws CFException {
      workFields.setPolNo(value);
   } 

     /**
	 * 	Update PolNo 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPolNo(char[] source, int sourceIndex) throws CFException {
      workFields.setPolNo(source, sourceIndex);
   	
   }
   
   public void setPolNo(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setPolNo(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PolNo 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPolNo(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setPolNo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PolNo with another Field
	 *	@param value
	 */
   public void setPolNo(Field source) {
      workFields.setPolNo(source);
   }  
   
     /**
	 * 	Update PolNo 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPolNo(Field source, int sourceIndex,int sourceLen) {
      workFields.setPolNo(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PolNo 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPolNo(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setPolNo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of holdPosTierCd
	 *	@return holdPosTierCd
	 */
   public char[] getHoldPosTierCd() throws CFException  {              
   		return workFields.getHoldTransData().getHoldPosTierCd();
   }

  
	/**
	*  set variable holdPosTierCd
	*  @param value
	**/
   public void setHoldPosTierCd(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldPosTierCd(value);
   } 

     /**
	 * 	Update HoldPosTierCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldPosTierCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex);
   	
   }
   
   public void setHoldPosTierCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldPosTierCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldPosTierCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldPosTierCd with another Field
	 *	@param value
	 */
   public void setHoldPosTierCd(Field source) {
      workFields.getHoldTransData().setHoldPosTierCd(source);
   }  
   
     /**
	 * 	Update HoldPosTierCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldPosTierCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldPosTierCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldPosTierCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cflgSub
	 *	@return cflgSub
	 */
	public int getCflgSub() throws CFException {        
   		return work.getCflgSub();
	}
	
	/**
	 * 	Update CflgSub with the passed value
	 *	@param number
	 */
	public void setCflgSub(int number)  throws CFException{
		work.setCflgSub(number);
	}


	public void setCflgSub(long number)  throws CFException{
		work.setCflgSub((int)number);
	}


	/**
	 *	Returns the value of causSvc
	 *	@return causSvc
	 */
   public char[] getCausSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getCausSvc();
   }

  
	/**
	*  set variable causSvc
	*  @param value
	**/
   public void setCausSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausSvc(value);
   } 

     /**
	 * 	Update CausSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex);
   	
   }
   
   public void setCausSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausSvc with another Field
	 *	@param value
	 */
   public void setCausSvc(Field source) {
      workFields.getHoldTransData2().setCausSvc(source);
   }  
   
     /**
	 * 	Update CausSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	public BigDecimal getUOutLineNotcovAmt51(int index) throws CFException{      
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineNotcovAmt51();
	}

    public char[] getUOutLineNotcovAmt51String(int index) throws CFException {
          return  dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineNotcovAmt51().toPlainString().toCharArray();
    }
	
	/**
	 * 	Update UOutLineNotcovAmt51 with the passed number
	 *	@param number
	 */
	public void setUOutLineNotcovAmt51(int index,BigDecimal number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineNotcovAmt51(number);
   }

public int getFesaSpiNbr01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiNbr01();
}
	/**
	 * 	Update FesaSpiNbr01 with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}


	public void setFesaSpiNbr01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}
	

	/**
	 *	Returns the value of causPs
	 *	@return causPs
	 */
   public char[] getCausPs() throws CFException  {              
   		return workFields.getHoldTransData2().getCausPs();
   }

  
	/**
	*  set variable causPs
	*  @param value
	**/
   public void setCausPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausPs(value);
   } 

     /**
	 * 	Update CausPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex);
   	
   }
   
   public void setCausPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausPs with another Field
	 *	@param value
	 */
   public void setCausPs(Field source) {
      workFields.getHoldTransData2().setCausPs(source);
   }  
   
     /**
	 * 	Update CausPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of planVarPrev
	 *	@return planVarPrev
	 */
	public short getPlanVarPrev() throws CFException {        
   		return workFields.getPlanVarPrev();
	}
	
	/**
	 * 	Update PlanVarPrev with the passed value
	 *	@param number
	 */
	public void setPlanVarPrev(short number)  throws CFException{
		workFields.setPlanVarPrev(number);
	}

	public void setPlanVarPrev(int number)  throws CFException{
		workFields.setPlanVarPrev((short)number);
	}

	public void setPlanVarPrev(long number)  throws CFException{
		workFields.setPlanVarPrev((short)number);
	}



	/**
	 *	Returns the value of icd9Sub
	 *	@return icd9Sub
	 */
	public int getIcd9Sub() throws CFException {        
   		return work.getIcd9Sub();
	}
	
	/**
	 * 	Update Icd9Sub with the passed value
	 *	@param number
	 */
	public void setIcd9Sub(int number)  throws CFException{
		work.setIcd9Sub(number);
	}


	public void setIcd9Sub(long number)  throws CFException{
		work.setIcd9Sub((int)number);
	}


	/**
	 *	Returns the value of nbrOfLines
	 *	@return nbrOfLines
	 */
	public int getNbrOfLines() throws CFException {        
   		return workFields.getNbrOfLines();
	}
	
	/**
	 * 	Update NbrOfLines with the passed value
	 *	@param number
	 */
	public void setNbrOfLines(int number)  throws CFException{
		workFields.setNbrOfLines(number);
	}


	public void setNbrOfLines(long number)  throws CFException{
		workFields.setNbrOfLines((int)number);
	}


	/**
	 *	Returns the value of psSub
	 *	@return psSub
	 */
	public int getPsSub() throws CFException {        
   		return work.getPsSub();
	}
	
	/**
	 * 	Update PsSub with the passed value
	 *	@param number
	 */
	public void setPsSub(int number)  throws CFException{
		work.setPsSub(number);
	}


	public void setPsSub(long number)  throws CFException{
		work.setPsSub((int)number);
	}


	/**
	 *	Returns the value of fesaSpiPriDiagInd
	 *	@return fesaSpiPriDiagInd
	 */
   public char[] getFesaSpiPriDiagInd(int index) throws CFException  {              
   		return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiPriDiagInd();
   }

  
	/**
	*  set variable fesaSpiPriDiagInd
	*  @param value
	**/
   public void setFesaSpiPriDiagInd(int index,char[] value) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(value);
   } 

     /**
	 * 	Update FesaSpiPriDiagInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaSpiPriDiagInd(int index,char[] source, int sourceIndex) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source, sourceIndex);
   	
   }
   
   public void setFesaSpiPriDiagInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaSpiPriDiagInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaSpiPriDiagInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaSpiPriDiagInd with another Field
	 *	@param value
	 */
   public void setFesaSpiPriDiagInd(int index,Field source) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source);
   }  
   
     /**
	 * 	Update FesaSpiPriDiagInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaSpiPriDiagInd(int index,Field source, int sourceIndex,int sourceLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaSpiPriDiagInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaSpiPriDiagInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getFesaPlanVar01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaPlanVar01();
}
	/**
	 * 	Update FesaPlanVar01 with the passed value
	 *	@param number
	 */
	public void setFesaPlanVar01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPlanVar01(number);
	}


	public void setFesaPlanVar01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPlanVar01(number);
	}
	

	/**
	 *	Returns the value of ricdCauseCd
	 *	@return ricdCauseCd
	 */
   public char[] getRicdCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdCauseCd();
   }

  
	/**
	*  set variable ricdCauseCd
	*  @param value
	**/
   public void setRicdCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdCauseCd(value);
   } 

     /**
	 * 	Update RicdCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex);
   	
   }
   
   public void setRicdCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdCauseCd with another Field
	 *	@param value
	 */
   public void setRicdCauseCd(Field source) {
      workFields.getHoldTransData2().setRicdCauseCd(source);
   }  
   
     /**
	 * 	Update RicdCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of newPlanVarPrev
	 *	@return newPlanVarPrev
	 */
	public short getNewPlanVarPrev() throws CFException {        
   		return workFields.getNewPlanVarPrev();
	}
	
	/**
	 * 	Update NewPlanVarPrev with the passed value
	 *	@param number
	 */
	public void setNewPlanVarPrev(short number)  throws CFException{
		workFields.setNewPlanVarPrev(number);
	}

	public void setNewPlanVarPrev(int number)  throws CFException{
		workFields.setNewPlanVarPrev((short)number);
	}

	public void setNewPlanVarPrev(long number)  throws CFException{
		workFields.setNewPlanVarPrev((short)number);
	}



	/**
	 *	Returns the value of holdCauseCd
	 *	@return holdCauseCd
	 */
   public char[] getHoldCauseCd() throws CFException  {              
   		return workFields.getHoldTransData().getHoldCauseCd();
   }

  
	/**
	*  set variable holdCauseCd
	*  @param value
	**/
   public void setHoldCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldCauseCd(value);
   } 

     /**
	 * 	Update HoldCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex);
   	
   }
   
   public void setHoldCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldCauseCd with another Field
	 *	@param value
	 */
   public void setHoldCauseCd(Field source) {
      workFields.getHoldTransData().setHoldCauseCd(source);
   }  
   
     /**
	 * 	Update HoldCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaCauseCd
	 *	@return ripaCauseCd
	 */
   public char[] getRipaCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaCauseCd();
   }

  
	/**
	*  set variable ripaCauseCd
	*  @param value
	**/
   public void setRipaCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaCauseCd(value);
   } 

     /**
	 * 	Update RipaCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex);
   	
   }
   
   public void setRipaCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaCauseCd with another Field
	 *	@param value
	 */
   public void setRipaCauseCd(Field source) {
      workFields.getHoldTransData2().setRipaCauseCd(source);
   }  
   
     /**
	 * 	Update RipaCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of holdSpiTblId
	 *	@return holdSpiTblId
	 */
   public char[] getHoldSpiTblId() throws CFException  {              
   		return workFields.getHoldTransData().getHoldSpiTblId();
   }

  
	/**
	*  set variable holdSpiTblId
	*  @param value
	**/
   public void setHoldSpiTblId(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldSpiTblId(value);
   } 

     /**
	 * 	Update HoldSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldSpiTblId(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex);
   	
   }
   
   public void setHoldSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldSpiTblId with another Field
	 *	@param value
	 */
   public void setHoldSpiTblId(Field source) {
      workFields.getHoldTransData().setHoldSpiTblId(source);
   }  
   
     /**
	 * 	Update HoldSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldSpiTblId(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypSvc
	 *	@return ptypSvc
	 */
   public char[] getPtypSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypSvc();
   }

  
	/**
	*  set variable ptypSvc
	*  @param value
	**/
   public void setPtypSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypSvc(value);
   } 

     /**
	 * 	Update PtypSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex);
   	
   }
   
   public void setPtypSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypSvc with another Field
	 *	@param value
	 */
   public void setPtypSvc(Field source) {
      workFields.getHoldTransData2().setPtypSvc(source);
   }  
   
     /**
	 * 	Update PtypSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of endOfSpiRule
	 *	@return endOfSpiRule
	 */
   public char[] getEndOfSpiRule() throws CFException  {              
   		return work.getEndOfSpiRule();
   }

  
	/**
	*  set variable endOfSpiRule
	*  @param value
	**/
   public void setEndOfSpiRule(char[] value) throws CFException {
      work.setEndOfSpiRule(value);
   } 

	/**
	 *	Returns the value of frtoPs
	 *	@return frtoPs
	 */
   public char[] getFrtoPs() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoPs();
   }

  
	/**
	*  set variable frtoPs
	*  @param value
	**/
   public void setFrtoPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoPs(value);
   } 

     /**
	 * 	Update FrtoPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex);
   	
   }
   
   public void setFrtoPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoPs with another Field
	 *	@param value
	 */
   public void setFrtoPs(Field source) {
      workFields.getHoldTransData2().setFrtoPs(source);
   }  
   
     /**
	 * 	Update FrtoPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causCauseCd
	 *	@return causCauseCd
	 */
   public char[] getCausCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getCausCauseCd();
   }

  
	/**
	*  set variable causCauseCd
	*  @param value
	**/
   public void setCausCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausCauseCd(value);
   } 

     /**
	 * 	Update CausCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex);
   	
   }
   
   public void setCausCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausCauseCd with another Field
	 *	@param value
	 */
   public void setCausCauseCd(Field source) {
      workFields.getHoldTransData2().setCausCauseCd(source);
   }  
   
     /**
	 * 	Update CausCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}


	/**
	 *	Returns the value of frtoSvc
	 *	@return frtoSvc
	 */
   public char[] getFrtoSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoSvc();
   }

  
	/**
	*  set variable frtoSvc
	*  @param value
	**/
   public void setFrtoSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoSvc(value);
   } 

     /**
	 * 	Update FrtoSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex);
   	
   }
   
   public void setFrtoSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoSvc with another Field
	 *	@param value
	 */
   public void setFrtoSvc(Field source) {
      workFields.getHoldTransData2().setFrtoSvc(source);
   }  
   
     /**
	 * 	Update FrtoSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public InitializeOutCtx clone() {
        InitializeOutCtx cloneObj = new InitializeOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public InitializeOutCtx getInitializeOutCtx() {
            return new InitializeOutCtx();
    }
     public class ReadEqiInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     DdEqisAlt ddEqisAlt = O529351uCtx.this.getDdEqisAlt();
     EqiRecord eqiRecord = O529351uCtx.this.getEqiRecord();

	/**
	 *	Returns the value of sceAltKey
	 *	@return sceAltKey
	 */   
	 public SceAltKey getSceAltKey() {
   	return eqiRecord.getSceRecord().getSceAltKey();
   }

   /**
	* 	Update SceAltKey with the passed value
	*	@param value
	*/
   public void setSceAltKey(char[] value) throws CFException {
      eqiRecord.getSceRecord().setSceAltKey(value);
   }   

     /**
	 * 	Update SceAltKey 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSceAltKey(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	eqiRecord.getSceRecord().setSceAltKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SceAltKey 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSceAltKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	eqiRecord.getSceRecord().setSceAltKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update SceAltKey with another Field
	 *	@param value
	 */
   public void setSceAltKey(Field source) {
   	eqiRecord.getSceRecord().setSceAltKey(source);
   }  
   
     /**
	 * 	Update SceAltKey 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSceAltKey(Field source, int sourceIndex,int sourceLen) {
   	eqiRecord.getSceRecord().setSceAltKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SceAltKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSceAltKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	eqiRecord.getSceRecord().setSceAltKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ddEqisAlt
	 *	@return ddEqisAlt
	 */   
	 public DdEqisAlt getDdEqisAlt() {
   	return ddEqisAlt;
   }


	/**
	 *	Returns the value of lsEqiRecord
	 *	@return lsEqiRecord
	 */
   public char[] getLsEqiRecord() throws CFException  {              
   		return work.getLsEqiRecord();
   }

  
	/**
	*  set variable lsEqiRecord
	*  @param value
	**/
   public void setLsEqiRecord(char[] value) throws CFException {
      work.setLsEqiRecord(value);
   } 


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public ReadEqiOutCtx getReadEqiOutCtx() {
            return new ReadEqiOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += ddEqisAlt.hashCode();
        str += eqiRecord.hashCode();
       return str.hashCode();
    }

    public ReadEqiInCtx clone() {
        ReadEqiInCtx cloneObj = new ReadEqiInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.ddEqisAlt = new DdEqisAlt();
        cloneObj.ddEqisAlt.set(ddEqisAlt.getClonedField());
        cloneObj.eqiRecord = new EqiRecord();
        cloneObj.eqiRecord.set(eqiRecord.getClonedField());
        return cloneObj;
    }

    }

    public ReadEqiInCtx getReadEqiInCtx() {
            return new ReadEqiInCtx();
    }
     public class ReadEqiOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     DdEqisAlt ddEqisAlt = O529351uCtx.this.getDdEqisAlt();
     EqiRecord eqiRecord = O529351uCtx.this.getEqiRecord();

	/**
	 *	Returns the value of eqiRecord
	 *	@return eqiRecord
	 */   
	 public EqiRecord getEqiRecord() {
   	return eqiRecord;
   }


	/**
	 *	Returns the value of dfhb0020
	 *	@return dfhb0020
	 */
	public int getDfhb0020() throws CFException {        
   		return work.getDfhb0020();
	}
	
	/**
	 * 	Update Dfhb0020 with the passed value
	 *	@param number
	 */
	public void setDfhb0020(int number)  throws CFException{
		work.setDfhb0020(number);
	}


	public void setDfhb0020(long number)  throws CFException{
		work.setDfhb0020((int)number);
	}


	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}


	/**
	 *	Test condition 0 for isCicsNormal()
	 *	@return  Returns true if isCicsNormal() is 0
	 */
   public boolean isCicsNormal() throws CFException {
      return work.isCicsNormal();
   }

	/**
	*  set values 0
	*/
   	public void setCicsNormalTrue()  throws CFException{  			
    	work.setCicsNormalTrue();
   	}
	/**
	 *	Returns the value of lsEqiRecord
	 *	@return lsEqiRecord
	 */
   public char[] getLsEqiRecord() throws CFException  {              
   		return work.getLsEqiRecord();
   }

  
	/**
	*  set variable lsEqiRecord
	*  @param value
	**/
   public void setLsEqiRecord(char[] value) throws CFException {
      work.setLsEqiRecord(value);
   } 

	/**
	 *	Returns the value of dfhb0021
	 *	@return dfhb0021
	 */
	public int getDfhb0021() throws CFException {        
   		return work.getDfhb0021();
	}
	
	/**
	 * 	Update Dfhb0021 with the passed value
	 *	@param number
	 */
	public void setDfhb0021(int number)  throws CFException{
		work.setDfhb0021(number);
	}


	public void setDfhb0021(long number)  throws CFException{
		work.setDfhb0021((int)number);
	}


	/**
	 *	Returns the value of eqiAltId
	 *	@return eqiAltId
	 */
   public char[] getEqiAltId() throws CFException  {              
   		return ddEqisAlt.getEqiAltId();
   }

  
	/**
	*  set variable eqiAltId
	*  @param value
	**/
   public void setEqiAltId(char[] value) throws CFException {
      ddEqisAlt.setEqiAltId(value);
   } 

     /**
	 * 	Update EqiAltId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setEqiAltId(char[] source, int sourceIndex) throws CFException {
      ddEqisAlt.setEqiAltId(source, sourceIndex);
   	
   }
   
   public void setEqiAltId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      ddEqisAlt.setEqiAltId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update EqiAltId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setEqiAltId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      ddEqisAlt.setEqiAltId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update EqiAltId with another Field
	 *	@param value
	 */
   public void setEqiAltId(Field source) {
      ddEqisAlt.setEqiAltId(source);
   }  
   
     /**
	 * 	Update EqiAltId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setEqiAltId(Field source, int sourceIndex,int sourceLen) {
      ddEqisAlt.setEqiAltId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update EqiAltId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setEqiAltId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      ddEqisAlt.setEqiAltId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += ddEqisAlt.hashCode();
        str += eqiRecord.hashCode();
       return str.hashCode();
    }

    public ReadEqiOutCtx clone() {
        ReadEqiOutCtx cloneObj = new ReadEqiOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.ddEqisAlt = new DdEqisAlt();
        cloneObj.ddEqisAlt.set(ddEqisAlt.getClonedField());
        cloneObj.eqiRecord = new EqiRecord();
        cloneObj.eqiRecord.set(eqiRecord.getClonedField());
        return cloneObj;
    }

    }

    public ReadEqiOutCtx getReadEqiOutCtx() {
            return new ReadEqiOutCtx();
    }
     public class MainProcessingInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of uSlotPlanVar51
	 *	@return uSlotPlanVar51
	 */
	public short getUSlotPlanVar51() throws CFException {        
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUSlotPlanVar51();
	}
	
	/**
	 * 	Update USlotPlanVar51 with the passed value
	 *	@param number
	 */
	public void setUSlotPlanVar51(short number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSlotPlanVar51(number);
	}

	public void setUSlotPlanVar51(int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSlotPlanVar51((short)number);
	}

	public void setUSlotPlanVar51(long number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSlotPlanVar51((short)number);
	}



	/**
	 *	Returns the value of cls15
	 *	@return cls15
	 */
	public long getCls15() throws CFException {
   		return workFields.getCkServCls().getCls15();
	}


	/**
	 *	Returns String value of cls15
	 *	@return cls15
	 */
	public char[]  getCls15String() throws CFException {
	     return String.valueOf(workFields.getCkServCls().getCls15String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean cls15IsNumeric()  throws CFException{
	    return workFields.getCkServCls().cls15IsNumeric();
	}

	/**
	 * 	Update Cls15 with the passed value
	 *	@param number
	 */
	public void setCls15(long number)  throws CFException{
		workFields.getCkServCls().setCls15(number);
	}
	

	
	/**
	 * 	Update Cls15 with the passed value
	 *	@param value (String or char[])
	 */
	public void setCls15(char[] value)  throws CFException {
		workFields.getCkServCls().setCls15(value);
	}
	
	/**
	 * 	Update Cls15 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setCls15String(char[] value)  throws CFException{
		workFields.getCkServCls().setCls15(value);
	}	

	/**
	 *	Returns the value of uPolicyNo51
	 *	@return uPolicyNo51
	 */
   public char[] getUPolicyNo51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUPolicyNo51();
   }

  
	/**
	*  set variable uPolicyNo51
	*  @param value
	**/
   public void setUPolicyNo51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(value);
   } 

     /**
	 * 	Update UPolicyNo51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUPolicyNo51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex);
   	
   }
   
   public void setUPolicyNo51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UPolicyNo51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUPolicyNo51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UPolicyNo51 with another Field
	 *	@param value
	 */
   public void setUPolicyNo51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source);
   }  
   
     /**
	 * 	Update UPolicyNo51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUPolicyNo51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UPolicyNo51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUPolicyNo51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	public BigDecimal getULineChargeAmt51(int index) throws CFException{      
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineChargeAmt51();
	}

    public char[] getULineChargeAmt51String(int index) throws CFException {
          return  dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineChargeAmt51().toPlainString().toCharArray();
    }
	
	/**
	 * 	Update ULineChargeAmt51 with the passed number
	 *	@param number
	 */
	public void setULineChargeAmt51(int index,BigDecimal number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineChargeAmt51(number);
   }

	/**
	 *	Test condition "N" for isFePrimeSpiTurnedOff()
	 *	@return  Returns true if isFePrimeSpiTurnedOff() is "N"
	 */
   public boolean isFePrimeSpiTurnedOff() throws CFException {
      return work.isFePrimeSpiTurnedOff();
   }

	/**
	*  set values "N"
	*/
   	public void setFePrimeSpiTurnedOffTrue()  throws CFException{  			
    	work.setFePrimeSpiTurnedOffTrue();
   	}
public int getULineDosDate51(int index) throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineDosDate51();
}
	/**
	 * 	Update ULineDosDate51 with the passed value
	 *	@param number
	 */
	public void setULineDosDate51(int index,int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDosDate51(number);
	}


	public void setULineDosDate51(int index,long number)  throws CFException{
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDosDate51(number);
	}
	

	/**
	 *	Returns the value of polNo
	 *	@return polNo
	 */
   public char[] getPolNo() throws CFException  {              
   		return workFields.getPolNo();
   }

  
	/**
	*  set variable polNo
	*  @param value
	**/
   public void setPolNo(char[] value) throws CFException {
      workFields.setPolNo(value);
   } 

     /**
	 * 	Update PolNo 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPolNo(char[] source, int sourceIndex) throws CFException {
      workFields.setPolNo(source, sourceIndex);
   	
   }
   
   public void setPolNo(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setPolNo(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PolNo 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPolNo(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setPolNo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PolNo with another Field
	 *	@param value
	 */
   public void setPolNo(Field source) {
      workFields.setPolNo(source);
   }  
   
     /**
	 * 	Update PolNo 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPolNo(Field source, int sourceIndex,int sourceLen) {
      workFields.setPolNo(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PolNo 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPolNo(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setPolNo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of holdPosTierCd
	 *	@return holdPosTierCd
	 */
   public char[] getHoldPosTierCd() throws CFException  {              
   		return workFields.getHoldTransData().getHoldPosTierCd();
   }

  
	/**
	*  set variable holdPosTierCd
	*  @param value
	**/
   public void setHoldPosTierCd(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldPosTierCd(value);
   } 

     /**
	 * 	Update HoldPosTierCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldPosTierCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex);
   	
   }
   
   public void setHoldPosTierCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldPosTierCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldPosTierCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldPosTierCd with another Field
	 *	@param value
	 */
   public void setHoldPosTierCd(Field source) {
      workFields.getHoldTransData().setHoldPosTierCd(source);
   }  
   
     /**
	 * 	Update HoldPosTierCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldPosTierCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldPosTierCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldPosTierCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isPlanVarFound()
	 *	@return  Returns true if isPlanVarFound() is "Y"
	 */
   public boolean isPlanVarFound() throws CFException {
      return work.isPlanVarFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setPlanVarFoundTrue()  throws CFException{  			
    	work.setPlanVarFoundTrue();
   	}
	/**
	 *	Returns the value of uLineServiceCode51
	 *	@return uLineServiceCode51
	 */
   public char[] getULineServiceCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineServiceCode51();
   }

  
	/**
	*  set variable uLineServiceCode51
	*  @param value
	**/
   public void setULineServiceCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(value);
   } 

     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex);
   	
   }
   
   public void setULineServiceCode51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULineServiceCode51 with another Field
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source);
   }  
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of planVarPrev
	 *	@return planVarPrev
	 */
	public short getPlanVarPrev() throws CFException {        
   		return workFields.getPlanVarPrev();
	}
	
	/**
	 * 	Update PlanVarPrev with the passed value
	 *	@param number
	 */
	public void setPlanVarPrev(short number)  throws CFException{
		workFields.setPlanVarPrev(number);
	}

	public void setPlanVarPrev(int number)  throws CFException{
		workFields.setPlanVarPrev((short)number);
	}

	public void setPlanVarPrev(long number)  throws CFException{
		workFields.setPlanVarPrev((short)number);
	}



	/**
	 *	Returns the value of ckServCls
	 *	@return ckServCls
	 */   
	 public CkServCls getCkServCls() {
   	return workFields.getCkServCls();
   }

   /**
	* 	Update CkServCls with the passed value
	*	@param value
	*/
   public void setCkServCls(char[] value) throws CFException {
      workFields.setCkServCls(value);
   }   

     /**
	 * 	Update CkServCls 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setCkServCls(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	workFields.setCkServCls(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CkServCls 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCkServCls(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setCkServCls(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CkServCls with another Field
	 *	@param value
	 */
   public void setCkServCls(Field source) {
   	workFields.setCkServCls(source);
   }  
   
     /**
	 * 	Update CkServCls 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setCkServCls(Field source, int sourceIndex,int sourceLen) {
   	workFields.setCkServCls(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CkServCls 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCkServCls(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setCkServCls(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "N" for isPlanVarNotFound()
	 *	@return  Returns true if isPlanVarNotFound() is "N"
	 */
   public boolean isPlanVarNotFound() throws CFException {
      return work.isPlanVarNotFound();
   }

	/**
	*  set values "N"
	*/
   	public void setPlanVarNotFoundTrue()  throws CFException{  			
    	work.setPlanVarNotFoundTrue();
   	}
	/**
	 *	Returns the value of nbrOfLines
	 *	@return nbrOfLines
	 */
	public int getNbrOfLines() throws CFException {        
   		return workFields.getNbrOfLines();
	}
	
	/**
	 * 	Update NbrOfLines with the passed value
	 *	@param number
	 */
	public void setNbrOfLines(int number)  throws CFException{
		workFields.setNbrOfLines(number);
	}


	public void setNbrOfLines(long number)  throws CFException{
		workFields.setNbrOfLines((int)number);
	}


	public BigDecimal getULineNotcovAmt51(int index) throws CFException{      
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineNotcovAmt51();
	}

    public char[] getULineNotcovAmt51String(int index) throws CFException {
          return  dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineNotcovAmt51().toPlainString().toCharArray();
    }
	
	/**
	 * 	Update ULineNotcovAmt51 with the passed number
	 *	@param number
	 */
	public void setULineNotcovAmt51(int index,BigDecimal number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineNotcovAmt51(number);
   }

	/**
	 *	Test condition "Y" for isFeSpiTurnedOn()
	 *	@return  Returns true if isFeSpiTurnedOn() is "Y"
	 */
   public boolean isFeSpiTurnedOn() throws CFException {
      return work.isFeSpiTurnedOn();
   }

	/**
	*  set values "Y"
	*/
   	public void setFeSpiTurnedOnTrue()  throws CFException{  			
    	work.setFeSpiTurnedOnTrue();
   	}
public int getULineAppUnits51(int index) throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineAppUnits51();
}
	/**
	 * 	Update ULineAppUnits51 with the passed value
	 *	@param number
	 */
	public void setULineAppUnits51(int index,int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineAppUnits51(number);
	}


	public void setULineAppUnits51(int index,long number)  throws CFException{
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineAppUnits51(number);
	}
	

	/**
	 *	Returns the value of xrfDivCm
	 *	@return xrfDivCm
	 */
	public short getXrfDivCm() throws CFException {        
   		return dfhcommarea.getXrefCmInfo().getXrfCmInfo().getXrfDivCm();
	}
	
	/**
	 * 	Update XrfDivCm with the passed value
	 *	@param number
	 */
	public void setXrfDivCm(short number)  throws CFException{
		dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfDivCm(number);
	}

	public void setXrfDivCm(int number)  throws CFException{
		dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfDivCm((short)number);
	}

	public void setXrfDivCm(long number)  throws CFException{
		dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfDivCm((short)number);
	}



	/**
	 *	Returns the value of holdSvc
	 *	@return holdSvc
	 */
   public char[] getHoldSvc() throws CFException  {              
   		return workFields.getHoldTransData().getHoldSvc();
   }

  
	/**
	*  set variable holdSvc
	*  @param value
	**/
   public void setHoldSvc(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldSvc(value);
   } 

     /**
	 * 	Update HoldSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex);
   	
   }
   
   public void setHoldSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldSvc with another Field
	 *	@param value
	 */
   public void setHoldSvc(Field source) {
      workFields.getHoldTransData().setHoldSvc(source);
   }  
   
     /**
	 * 	Update HoldSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of xrfPlcyCm
	 *	@return xrfPlcyCm
	 */
   public char[] getXrfPlcyCm() throws CFException  {              
   		return dfhcommarea.getXrefCmInfo().getXrfCmInfo().getXrfPlcyCm();
   }

  
	/**
	*  set variable xrfPlcyCm
	*  @param value
	**/
   public void setXrfPlcyCm(char[] value) throws CFException {
      dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfPlcyCm(value);
   } 

     /**
	 * 	Update XrfPlcyCm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setXrfPlcyCm(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfPlcyCm(source, sourceIndex);
   	
   }
   
   public void setXrfPlcyCm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfPlcyCm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update XrfPlcyCm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setXrfPlcyCm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfPlcyCm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update XrfPlcyCm with another Field
	 *	@param value
	 */
   public void setXrfPlcyCm(Field source) {
      dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfPlcyCm(source);
   }  
   
     /**
	 * 	Update XrfPlcyCm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setXrfPlcyCm(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfPlcyCm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update XrfPlcyCm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setXrfPlcyCm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfPlcyCm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uPlanVar51
	 *	@return uPlanVar51
	 */
	public short getUPlanVar51() throws CFException {        
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUPlanVar51();
	}
	
	/**
	 * 	Update UPlanVar51 with the passed value
	 *	@param number
	 */
	public void setUPlanVar51(short number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51(number);
	}

	public void setUPlanVar51(int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51((short)number);
	}

	public void setUPlanVar51(long number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51((short)number);
	}



	/**
	 *	Returns the value of holdCauseCd
	 *	@return holdCauseCd
	 */
   public char[] getHoldCauseCd() throws CFException  {              
   		return workFields.getHoldTransData().getHoldCauseCd();
   }

  
	/**
	*  set variable holdCauseCd
	*  @param value
	**/
   public void setHoldCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldCauseCd(value);
   } 

     /**
	 * 	Update HoldCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex);
   	
   }
   
   public void setHoldCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldCauseCd with another Field
	 *	@param value
	 */
   public void setHoldCauseCd(Field source) {
      workFields.getHoldTransData().setHoldCauseCd(source);
   }  
   
     /**
	 * 	Update HoldCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of medSvc
	 *	@return medSvc
	 */
   public char[] getMedSvc() throws CFException  {              
   		return work.getMedSvc();
   }

  
	/**
	*  set variable medSvc
	*  @param value
	**/
   public void setMedSvc(char[] value) throws CFException {
      work.setMedSvc(value);
   } 

	/**
	 *	Returns the value of holdSpiTblId
	 *	@return holdSpiTblId
	 */
   public char[] getHoldSpiTblId() throws CFException  {              
   		return workFields.getHoldTransData().getHoldSpiTblId();
   }

  
	/**
	*  set variable holdSpiTblId
	*  @param value
	**/
   public void setHoldSpiTblId(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldSpiTblId(value);
   } 

     /**
	 * 	Update HoldSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldSpiTblId(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex);
   	
   }
   
   public void setHoldSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldSpiTblId with another Field
	 *	@param value
	 */
   public void setHoldSpiTblId(Field source) {
      workFields.getHoldTransData().setHoldSpiTblId(source);
   }  
   
     /**
	 * 	Update HoldSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldSpiTblId(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrOfPlanVar
	 *	@return nbrOfPlanVar
	 */
	public int getNbrOfPlanVar() throws CFException {        
   		return workFields.getNbrOfPlanVar();
	}
	
	/**
	 * 	Update NbrOfPlanVar with the passed value
	 *	@param number
	 */
	public void setNbrOfPlanVar(int number)  throws CFException{
		workFields.setNbrOfPlanVar(number);
	}


	public void setNbrOfPlanVar(long number)  throws CFException{
		workFields.setNbrOfPlanVar((int)number);
	}


	/**
	 *	Returns the value of uCcmNOSvcInd51
	 *	@return uCcmNOSvcInd51
	 */
   public char[] getUCcmNOSvcInd51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getUCcmNOSvcInd51();
   }

  
	/**
	*  set variable uCcmNOSvcInd51
	*  @param value
	**/
   public void setUCcmNOSvcInd51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().setUCcmNOSvcInd51(value);
   } 

     /**
	 * 	Update UCcmNOSvcInd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUCcmNOSvcInd51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().setUCcmNOSvcInd51(source, sourceIndex);
   	
   }
   
   public void setUCcmNOSvcInd51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().setUCcmNOSvcInd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UCcmNOSvcInd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUCcmNOSvcInd51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().setUCcmNOSvcInd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UCcmNOSvcInd51 with another Field
	 *	@param value
	 */
   public void setUCcmNOSvcInd51(Field source) {
      dfhcommarea.getLinkAreaM51u().setUCcmNOSvcInd51(source);
   }  
   
     /**
	 * 	Update UCcmNOSvcInd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUCcmNOSvcInd51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().setUCcmNOSvcInd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UCcmNOSvcInd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUCcmNOSvcInd51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().setUCcmNOSvcInd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of holdPs
	 *	@return holdPs
	 */
   public char[] getHoldPs() throws CFException  {              
   		return workFields.getHoldTransData().getHoldPs();
   }

  
	/**
	*  set variable holdPs
	*  @param value
	**/
   public void setHoldPs(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldPs(value);
   } 

     /**
	 * 	Update HoldPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex);
   	
   }
   
   public void setHoldPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldPs with another Field
	 *	@param value
	 */
   public void setHoldPs(Field source) {
      workFields.getHoldTransData().setHoldPs(source);
   }  
   
     /**
	 * 	Update HoldPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}


	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}


	/**
	 *	Returns the value of holdDiagElgInd
	 *	@return holdDiagElgInd
	 */
   public char[] getHoldDiagElgInd() throws CFException  {              
   		return workFields.getHoldTransData().getHoldDiagElgInd();
   }

  
	/**
	*  set variable holdDiagElgInd
	*  @param value
	**/
   public void setHoldDiagElgInd(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldDiagElgInd(value);
   } 

     /**
	 * 	Update HoldDiagElgInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldDiagElgInd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex);
   	
   }
   
   public void setHoldDiagElgInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldDiagElgInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldDiagElgInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldDiagElgInd with another Field
	 *	@param value
	 */
   public void setHoldDiagElgInd(Field source) {
      workFields.getHoldTransData().setHoldDiagElgInd(source);
   }  
   
     /**
	 * 	Update HoldDiagElgInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldDiagElgInd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldDiagElgInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldDiagElgInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public MainProcessingOutCtx getMainProcessingOutCtx() {
            return new MainProcessingOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public MainProcessingInCtx clone() {
        MainProcessingInCtx cloneObj = new MainProcessingInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public MainProcessingInCtx getMainProcessingInCtx() {
            return new MainProcessingInCtx();
    }
     public class MainProcessingOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of cflgSvc
	 *	@return cflgSvc
	 */
   public char[] getCflgSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgSvc();
   }

  
	/**
	*  set variable cflgSvc
	*  @param value
	**/
   public void setCflgSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgSvc(value);
   } 

     /**
	 * 	Update CflgSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex);
   	
   }
   
   public void setCflgSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgSvc with another Field
	 *	@param value
	 */
   public void setCflgSvc(Field source) {
      workFields.getHoldTransData2().setCflgSvc(source);
   }  
   
     /**
	 * 	Update CflgSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaSvc
	 *	@return ripaSvc
	 */
   public char[] getRipaSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaSvc();
   }

  
	/**
	*  set variable ripaSvc
	*  @param value
	**/
   public void setRipaSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaSvc(value);
   } 

     /**
	 * 	Update RipaSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex);
   	
   }
   
   public void setRipaSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaSvc with another Field
	 *	@param value
	 */
   public void setRipaSvc(Field source) {
      workFields.getHoldTransData2().setRipaSvc(source);
   }  
   
     /**
	 * 	Update RipaSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cflgCauseCd
	 *	@return cflgCauseCd
	 */
   public char[] getCflgCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgCauseCd();
   }

  
	/**
	*  set variable cflgCauseCd
	*  @param value
	**/
   public void setCflgCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgCauseCd(value);
   } 

     /**
	 * 	Update CflgCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex);
   	
   }
   
   public void setCflgCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgCauseCd with another Field
	 *	@param value
	 */
   public void setCflgCauseCd(Field source) {
      workFields.getHoldTransData2().setCflgCauseCd(source);
   }  
   
     /**
	 * 	Update CflgCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uSlotPlanVar51
	 *	@return uSlotPlanVar51
	 */
	public short getUSlotPlanVar51() throws CFException {        
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUSlotPlanVar51();
	}
	
	/**
	 * 	Update USlotPlanVar51 with the passed value
	 *	@param number
	 */
	public void setUSlotPlanVar51(short number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSlotPlanVar51(number);
	}

	public void setUSlotPlanVar51(int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSlotPlanVar51((short)number);
	}

	public void setUSlotPlanVar51(long number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSlotPlanVar51((short)number);
	}



	/**
	 *	Test condition "Y" for isMmiAltNotFound()
	 *	@return  Returns true if isMmiAltNotFound() is "Y"
	 */
   public boolean isMmiAltNotFound() throws CFException {
      return work.isMmiAltNotFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setMmiAltNotFoundTrue()  throws CFException{  			
    	work.setMmiAltNotFoundTrue();
   	}
	/**
	 *	Returns the value of ricdPs
	 *	@return ricdPs
	 */
   public char[] getRicdPs() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdPs();
   }

  
	/**
	*  set variable ricdPs
	*  @param value
	**/
   public void setRicdPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdPs(value);
   } 

     /**
	 * 	Update RicdPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex);
   	
   }
   
   public void setRicdPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdPs with another Field
	 *	@param value
	 */
   public void setRicdPs(Field source) {
      workFields.getHoldTransData2().setRicdPs(source);
   }  
   
     /**
	 * 	Update RicdPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uPolicyNo51
	 *	@return uPolicyNo51
	 */
   public char[] getUPolicyNo51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUPolicyNo51();
   }

  
	/**
	*  set variable uPolicyNo51
	*  @param value
	**/
   public void setUPolicyNo51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(value);
   } 

     /**
	 * 	Update UPolicyNo51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUPolicyNo51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex);
   	
   }
   
   public void setUPolicyNo51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UPolicyNo51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUPolicyNo51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UPolicyNo51 with another Field
	 *	@param value
	 */
   public void setUPolicyNo51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source);
   }  
   
     /**
	 * 	Update UPolicyNo51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUPolicyNo51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UPolicyNo51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUPolicyNo51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	public BigDecimal getULineChargeAmt51(int index) throws CFException{      
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineChargeAmt51();
	}

    public char[] getULineChargeAmt51String(int index) throws CFException {
          return  dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineChargeAmt51().toPlainString().toCharArray();
    }
	
	/**
	 * 	Update ULineChargeAmt51 with the passed number
	 *	@param number
	 */
	public void setULineChargeAmt51(int index,BigDecimal number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineChargeAmt51(number);
   }

	/**
	 *	Returns the value of uSlotPolicyNo51
	 *	@return uSlotPolicyNo51
	 */
   public char[] getUSlotPolicyNo51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUSlotPolicyNo51();
   }

  
	/**
	*  set variable uSlotPolicyNo51
	*  @param value
	**/
   public void setUSlotPolicyNo51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSlotPolicyNo51(value);
   } 

     /**
	 * 	Update USlotPolicyNo51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUSlotPolicyNo51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSlotPolicyNo51(source, sourceIndex);
   	
   }
   
   public void setUSlotPolicyNo51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSlotPolicyNo51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update USlotPolicyNo51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUSlotPolicyNo51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSlotPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update USlotPolicyNo51 with another Field
	 *	@param value
	 */
   public void setUSlotPolicyNo51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSlotPolicyNo51(source);
   }  
   
     /**
	 * 	Update USlotPolicyNo51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUSlotPolicyNo51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSlotPolicyNo51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update USlotPolicyNo51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUSlotPolicyNo51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSlotPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdSvc
	 *	@return ricdSvc
	 */
   public char[] getRicdSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdSvc();
   }

  
	/**
	*  set variable ricdSvc
	*  @param value
	**/
   public void setRicdSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdSvc(value);
   } 

     /**
	 * 	Update RicdSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex);
   	
   }
   
   public void setRicdSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdSvc with another Field
	 *	@param value
	 */
   public void setRicdSvc(Field source) {
      workFields.getHoldTransData2().setRicdSvc(source);
   }  
   
     /**
	 * 	Update RicdSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndCauseCd
	 *	@return fcndCauseCd
	 */
   public char[] getFcndCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndCauseCd();
   }

  
	/**
	*  set variable fcndCauseCd
	*  @param value
	**/
   public void setFcndCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndCauseCd(value);
   } 

     /**
	 * 	Update FcndCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex);
   	
   }
   
   public void setFcndCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndCauseCd with another Field
	 *	@param value
	 */
   public void setFcndCauseCd(Field source) {
      workFields.getHoldTransData2().setFcndCauseCd(source);
   }  
   
     /**
	 * 	Update FcndCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypPs
	 *	@return ptypPs
	 */
   public char[] getPtypPs() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypPs();
   }

  
	/**
	*  set variable ptypPs
	*  @param value
	**/
   public void setPtypPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypPs(value);
   } 

     /**
	 * 	Update PtypPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex);
   	
   }
   
   public void setPtypPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypPs with another Field
	 *	@param value
	 */
   public void setPtypPs(Field source) {
      workFields.getHoldTransData2().setPtypPs(source);
   }  
   
     /**
	 * 	Update PtypPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of holdServCd
	 *	@return holdServCd
	 */
   public char[] getHoldServCd() throws CFException  {              
   		return workFields.getHoldServCd();
   }

  
	/**
	*  set variable holdServCd
	*  @param value
	**/
   public void setHoldServCd(char[] value) throws CFException {
      workFields.setHoldServCd(value);
   } 

     /**
	 * 	Update HoldServCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldServCd(char[] source, int sourceIndex) throws CFException {
      workFields.setHoldServCd(source, sourceIndex);
   	
   }
   
   public void setHoldServCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setHoldServCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldServCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldServCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setHoldServCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldServCd with another Field
	 *	@param value
	 */
   public void setHoldServCd(Field source) {
      workFields.setHoldServCd(source);
   }  
   
     /**
	 * 	Update HoldServCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldServCd(Field source, int sourceIndex,int sourceLen) {
      workFields.setHoldServCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldServCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldServCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setHoldServCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uOutLinePos51
	 *	@return uOutLinePos51
	 */
   public char[] getUOutLinePos51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLinePos51();
   }

  
	/**
	*  set variable uOutLinePos51
	*  @param value
	**/
   public void setUOutLinePos51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLinePos51(value);
   } 

     /**
	 * 	Update UOutLinePos51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutLinePos51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLinePos51(source, sourceIndex);
   	
   }
   
   public void setUOutLinePos51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLinePos51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutLinePos51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutLinePos51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLinePos51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutLinePos51 with another Field
	 *	@param value
	 */
   public void setUOutLinePos51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLinePos51(source);
   }  
   
     /**
	 * 	Update UOutLinePos51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutLinePos51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLinePos51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutLinePos51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutLinePos51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLinePos51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaPs
	 *	@return ripaPs
	 */
   public char[] getRipaPs() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaPs();
   }

  
	/**
	*  set variable ripaPs
	*  @param value
	**/
   public void setRipaPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaPs(value);
   } 

     /**
	 * 	Update RipaPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex);
   	
   }
   
   public void setRipaPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaPs with another Field
	 *	@param value
	 */
   public void setRipaPs(Field source) {
      workFields.getHoldTransData2().setRipaPs(source);
   }  
   
     /**
	 * 	Update RipaPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of newServiceCode
	 *	@return newServiceCode
	 */
   public char[] getNewServiceCode() throws CFException  {              
   		return workFields.getNewServiceCode();
   }

  
	/**
	*  set variable newServiceCode
	*  @param value
	**/
   public void setNewServiceCode(char[] value) throws CFException {
      workFields.setNewServiceCode(value);
   } 

     /**
	 * 	Update NewServiceCode 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNewServiceCode(char[] source, int sourceIndex) throws CFException {
      workFields.setNewServiceCode(source, sourceIndex);
   	
   }
   
   public void setNewServiceCode(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setNewServiceCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NewServiceCode 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNewServiceCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setNewServiceCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NewServiceCode with another Field
	 *	@param value
	 */
   public void setNewServiceCode(Field source) {
      workFields.setNewServiceCode(source);
   }  
   
     /**
	 * 	Update NewServiceCode 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNewServiceCode(Field source, int sourceIndex,int sourceLen) {
      workFields.setNewServiceCode(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NewServiceCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNewServiceCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setNewServiceCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of frtoCauseCd
	 *	@return frtoCauseCd
	 */
   public char[] getFrtoCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoCauseCd();
   }

  
	/**
	*  set variable frtoCauseCd
	*  @param value
	**/
   public void setFrtoCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoCauseCd(value);
   } 

     /**
	 * 	Update FrtoCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex);
   	
   }
   
   public void setFrtoCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoCauseCd with another Field
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source) {
      workFields.getHoldTransData2().setFrtoCauseCd(source);
   }  
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uOutPosTierCd51
	 *	@return uOutPosTierCd51
	 */
   public char[] getUOutPosTierCd51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutPosTierCd51();
   }

  
	/**
	*  set variable uOutPosTierCd51
	*  @param value
	**/
   public void setUOutPosTierCd51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutPosTierCd51(value);
   } 

     /**
	 * 	Update UOutPosTierCd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutPosTierCd51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutPosTierCd51(source, sourceIndex);
   	
   }
   
   public void setUOutPosTierCd51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutPosTierCd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutPosTierCd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutPosTierCd51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutPosTierCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutPosTierCd51 with another Field
	 *	@param value
	 */
   public void setUOutPosTierCd51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutPosTierCd51(source);
   }  
   
     /**
	 * 	Update UOutPosTierCd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutPosTierCd51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutPosTierCd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutPosTierCd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutPosTierCd51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutPosTierCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isNbrEqual1()
	 *	@return  Returns true if isNbrEqual1() is "Y"
	 */
   public boolean isNbrEqual1() throws CFException {
      return work.isNbrEqual1();
   }

	/**
	*  set values "Y"
	*/
   	public void setNbrEqual1True()  throws CFException{  			
    	work.setNbrEqual1True();
   	}
	/**
	 *	Returns the value of xrfDivCm
	 *	@return xrfDivCm
	 */
	public short getXrfDivCm() throws CFException {        
   		return dfhcommarea.getXrefCmInfo().getXrfCmInfo().getXrfDivCm();
	}
	
	/**
	 * 	Update XrfDivCm with the passed value
	 *	@param number
	 */
	public void setXrfDivCm(short number)  throws CFException{
		dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfDivCm(number);
	}

	public void setXrfDivCm(int number)  throws CFException{
		dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfDivCm((short)number);
	}

	public void setXrfDivCm(long number)  throws CFException{
		dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfDivCm((short)number);
	}



	/**
	 *	Returns the value of uOutLineServiceCode51
	 *	@return uOutLineServiceCode51
	 */
   public char[] getUOutLineServiceCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineServiceCode51();
   }

  
	/**
	*  set variable uOutLineServiceCode51
	*  @param value
	**/
   public void setUOutLineServiceCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(value);
   } 

     /**
	 * 	Update UOutLineServiceCode51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex);
   	
   }
   
   public void setUOutLineServiceCode51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutLineServiceCode51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutLineServiceCode51 with another Field
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source);
   }  
   
     /**
	 * 	Update UOutLineServiceCode51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutLineServiceCode51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of holdSvc
	 *	@return holdSvc
	 */
   public char[] getHoldSvc() throws CFException  {              
   		return workFields.getHoldTransData().getHoldSvc();
   }

  
	/**
	*  set variable holdSvc
	*  @param value
	**/
   public void setHoldSvc(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldSvc(value);
   } 

     /**
	 * 	Update HoldSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex);
   	
   }
   
   public void setHoldSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldSvc with another Field
	 *	@param value
	 */
   public void setHoldSvc(Field source) {
      workFields.getHoldTransData().setHoldSvc(source);
   }  
   
     /**
	 * 	Update HoldSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uStopAutoSw51
	 *	@return uStopAutoSw51
	 */
   public char[] getUStopAutoSw51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUStopAutoSw51();
   }

  
	/**
	*  set variable uStopAutoSw51
	*  @param value
	**/
   public void setUStopAutoSw51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(value);
   } 

     /**
	 * 	Update UStopAutoSw51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUStopAutoSw51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex);
   	
   }
   
   public void setUStopAutoSw51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UStopAutoSw51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUStopAutoSw51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UStopAutoSw51 with another Field
	 *	@param value
	 */
   public void setUStopAutoSw51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source);
   }  
   
     /**
	 * 	Update UStopAutoSw51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUStopAutoSw51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UStopAutoSw51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUStopAutoSw51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUStopAutoSw51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "N" for isNotNbrEqual()
	 *	@return  Returns true if isNotNbrEqual() is "N"
	 */
   public boolean isNotNbrEqual() throws CFException {
      return work.isNotNbrEqual();
   }

	/**
	*  set values "N"
	*/
   	public void setNotNbrEqualTrue()  throws CFException{  			
    	work.setNotNbrEqualTrue();
   	}
	public BigDecimal getUOutLineChargeAmt51(int index) throws CFException{      
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineChargeAmt51();
	}

    public char[] getUOutLineChargeAmt51String(int index) throws CFException {
          return  dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineChargeAmt51().toPlainString().toCharArray();
    }
	
	/**
	 * 	Update UOutLineChargeAmt51 with the passed number
	 *	@param number
	 */
	public void setUOutLineChargeAmt51(int index,BigDecimal number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineChargeAmt51(number);
   }

	/**
	 *	Returns the value of uPlanVar51
	 *	@return uPlanVar51
	 */
	public short getUPlanVar51() throws CFException {        
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUPlanVar51();
	}
	
	/**
	 * 	Update UPlanVar51 with the passed value
	 *	@param number
	 */
	public void setUPlanVar51(short number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51(number);
	}

	public void setUPlanVar51(int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51((short)number);
	}

	public void setUPlanVar51(long number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51((short)number);
	}



public long getHold51uPlan() throws CFException {  
        return workFields.getHold51uPlan();
}
	/**
	 * 	Update Hold51uPlan with the passed value
	 *	@param number
	 */
	public void setHold51uPlan(long number)  throws CFException{
		workFields.setHold51uPlan(number);
	}



	/**
	 *	Returns the value of hold51uPolicy
	 *	@return hold51uPolicy
	 */
   public char[] getHold51uPolicy() throws CFException  {              
   		return workFields.getHold51uPolicy();
   }

  
	/**
	*  set variable hold51uPolicy
	*  @param value
	**/
   public void setHold51uPolicy(char[] value) throws CFException {
      workFields.setHold51uPolicy(value);
   } 

     /**
	 * 	Update Hold51uPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHold51uPolicy(char[] source, int sourceIndex) throws CFException {
      workFields.setHold51uPolicy(source, sourceIndex);
   	
   }
   
   public void setHold51uPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setHold51uPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Hold51uPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHold51uPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setHold51uPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Hold51uPolicy with another Field
	 *	@param value
	 */
   public void setHold51uPolicy(Field source) {
      workFields.setHold51uPolicy(source);
   }  
   
     /**
	 * 	Update Hold51uPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHold51uPolicy(Field source, int sourceIndex,int sourceLen) {
      workFields.setHold51uPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Hold51uPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHold51uPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setHold51uPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of holdPs
	 *	@return holdPs
	 */
   public char[] getHoldPs() throws CFException  {              
   		return workFields.getHoldTransData().getHoldPs();
   }

  
	/**
	*  set variable holdPs
	*  @param value
	**/
   public void setHoldPs(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldPs(value);
   } 

     /**
	 * 	Update HoldPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex);
   	
   }
   
   public void setHoldPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldPs with another Field
	 *	@param value
	 */
   public void setHoldPs(Field source) {
      workFields.getHoldTransData().setHoldPs(source);
   }  
   
     /**
	 * 	Update HoldPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uOutLineCauseCd51
	 *	@return uOutLineCauseCd51
	 */
   public char[] getUOutLineCauseCd51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineCauseCd51();
   }

  
	/**
	*  set variable uOutLineCauseCd51
	*  @param value
	**/
   public void setUOutLineCauseCd51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(value);
   } 

     /**
	 * 	Update UOutLineCauseCd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex);
   	
   }
   
   public void setUOutLineCauseCd51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutLineCauseCd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutLineCauseCd51 with another Field
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source);
   }  
   
     /**
	 * 	Update UOutLineCauseCd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutLineCauseCd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineCauseCd51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}


public int getUOutLineDosDate51(int index) throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineDosDate51();
}
	/**
	 * 	Update UOutLineDosDate51 with the passed value
	 *	@param number
	 */
	public void setUOutLineDosDate51(int index,int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineDosDate51(number);
	}


	public void setUOutLineDosDate51(int index,long number)  throws CFException{
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineDosDate51(number);
	}
	

	/**
	 *	Returns the value of uOutSpiTblId51
	 *	@return uOutSpiTblId51
	 */
   public char[] getUOutSpiTblId51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutSpiTblId51();
   }

  
	/**
	*  set variable uOutSpiTblId51
	*  @param value
	**/
   public void setUOutSpiTblId51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutSpiTblId51(value);
   } 

     /**
	 * 	Update UOutSpiTblId51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutSpiTblId51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutSpiTblId51(source, sourceIndex);
   	
   }
   
   public void setUOutSpiTblId51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutSpiTblId51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutSpiTblId51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutSpiTblId51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutSpiTblId51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutSpiTblId51 with another Field
	 *	@param value
	 */
   public void setUOutSpiTblId51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutSpiTblId51(source);
   }  
   
     /**
	 * 	Update UOutSpiTblId51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutSpiTblId51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutSpiTblId51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutSpiTblId51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutSpiTblId51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutSpiTblId51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of holdDiagElgInd
	 *	@return holdDiagElgInd
	 */
   public char[] getHoldDiagElgInd() throws CFException  {              
   		return workFields.getHoldTransData().getHoldDiagElgInd();
   }

  
	/**
	*  set variable holdDiagElgInd
	*  @param value
	**/
   public void setHoldDiagElgInd(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldDiagElgInd(value);
   } 

     /**
	 * 	Update HoldDiagElgInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldDiagElgInd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex);
   	
   }
   
   public void setHoldDiagElgInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldDiagElgInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldDiagElgInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldDiagElgInd with another Field
	 *	@param value
	 */
   public void setHoldDiagElgInd(Field source) {
      workFields.getHoldTransData().setHoldDiagElgInd(source);
   }  
   
     /**
	 * 	Update HoldDiagElgInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldDiagElgInd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldDiagElgInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldDiagElgInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of mmiFoundSw
	 *	@return mmiFoundSw
	 */
   public char[] getMmiFoundSw() throws CFException  {              
   		return work.getMmiFoundSw();
   }

  
	/**
	*  set variable mmiFoundSw
	*  @param value
	**/
   public void setMmiFoundSw(char[] value) throws CFException {
      work.setMmiFoundSw(value);
   } 

public int getUOutLineAppUnits51(int index) throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineAppUnits51();
}
	/**
	 * 	Update UOutLineAppUnits51 with the passed value
	 *	@param number
	 */
	public void setUOutLineAppUnits51(int index,int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineAppUnits51(number);
	}


	public void setUOutLineAppUnits51(int index,long number)  throws CFException{
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineAppUnits51(number);
	}
	

	/**
	 *	Returns the value of fcndSvc
	 *	@return fcndSvc
	 */
   public char[] getFcndSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndSvc();
   }

  
	/**
	*  set variable fcndSvc
	*  @param value
	**/
   public void setFcndSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndSvc(value);
   } 

     /**
	 * 	Update FcndSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex);
   	
   }
   
   public void setFcndSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndSvc with another Field
	 *	@param value
	 */
   public void setFcndSvc(Field source) {
      workFields.getHoldTransData2().setFcndSvc(source);
   }  
   
     /**
	 * 	Update FcndSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndPs
	 *	@return fcndPs
	 */
   public char[] getFcndPs() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndPs();
   }

  
	/**
	*  set variable fcndPs
	*  @param value
	**/
   public void setFcndPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndPs(value);
   } 

     /**
	 * 	Update FcndPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex);
   	
   }
   
   public void setFcndPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndPs with another Field
	 *	@param value
	 */
   public void setFcndPs(Field source) {
      workFields.getHoldTransData2().setFcndPs(source);
   }  
   
     /**
	 * 	Update FcndPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uSpiTblId51
	 *	@return uSpiTblId51
	 */
   public char[] getUSpiTblId51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getUSpiTblId51();
   }

  
	/**
	*  set variable uSpiTblId51
	*  @param value
	**/
   public void setUSpiTblId51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().setUSpiTblId51(value);
   } 

     /**
	 * 	Update USpiTblId51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUSpiTblId51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().setUSpiTblId51(source, sourceIndex);
   	
   }
   
   public void setUSpiTblId51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().setUSpiTblId51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update USpiTblId51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUSpiTblId51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().setUSpiTblId51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update USpiTblId51 with another Field
	 *	@param value
	 */
   public void setUSpiTblId51(Field source) {
      dfhcommarea.getLinkAreaM51u().setUSpiTblId51(source);
   }  
   
     /**
	 * 	Update USpiTblId51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUSpiTblId51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().setUSpiTblId51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update USpiTblId51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUSpiTblId51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().setUSpiTblId51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public short getNbrMatchedPrev() throws CFException {
   		return workFields.getNbrMatchedPrev();
	}

    /**
	 *	Returns the String value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public char[]  getNbrMatchedPrevActualString() {
		return workFields.getNbrMatchedPrevActualString();
	}

	/**
	 *	Returns String value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public char[]  getNbrMatchedPrevString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedPrevString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedPrevIsNumeric()  throws CFException{
	    return workFields.nbrMatchedPrevIsNumeric();
	}

	/**
	 * 	Update NbrMatchedPrev with the passed value
	 *	@param number
	 */
	public void setNbrMatchedPrev(short number)  throws CFException{
		workFields.setNbrMatchedPrev(number);
	}
	
	public void setNbrMatchedPrev(int number)  throws CFException{
	    workFields.setNbrMatchedPrev(number);
	}
	public void setNbrMatchedPrev(long number)  throws CFException{
	    workFields.setNbrMatchedPrev(number);
	}
	

	
	/**
	 * 	Update NbrMatchedPrev with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedPrev(char[] value)  throws CFException {
		workFields.setNbrMatchedPrev(value);
	}
	
	/**
	 * 	Update NbrMatchedPrev with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedPrevString(char[] value)  throws CFException{
		workFields.setNbrMatchedPrev(value);
	}	

	/**
	 *	Returns the value of cflgPs
	 *	@return cflgPs
	 */
   public char[] getCflgPs() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgPs();
   }

  
	/**
	*  set variable cflgPs
	*  @param value
	**/
   public void setCflgPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgPs(value);
   } 

     /**
	 * 	Update CflgPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex);
   	
   }
   
   public void setCflgPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgPs with another Field
	 *	@param value
	 */
   public void setCflgPs(Field source) {
      workFields.getHoldTransData2().setCflgPs(source);
   }  
   
     /**
	 * 	Update CflgPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of ptypCauseCd
	 *	@return ptypCauseCd
	 */
   public char[] getPtypCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypCauseCd();
   }

  
	/**
	*  set variable ptypCauseCd
	*  @param value
	**/
   public void setPtypCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypCauseCd(value);
   } 

     /**
	 * 	Update PtypCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex);
   	
   }
   
   public void setPtypCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypCauseCd with another Field
	 *	@param value
	 */
   public void setPtypCauseCd(Field source) {
      workFields.getHoldTransData2().setPtypCauseCd(source);
   }  
   
     /**
	 * 	Update PtypCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getULineDosDate51(int index) throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineDosDate51();
}
	/**
	 * 	Update ULineDosDate51 with the passed value
	 *	@param number
	 */
	public void setULineDosDate51(int index,int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDosDate51(number);
	}


	public void setULineDosDate51(int index,long number)  throws CFException{
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDosDate51(number);
	}
	

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of polNo
	 *	@return polNo
	 */
   public char[] getPolNo() throws CFException  {              
   		return workFields.getPolNo();
   }

  
	/**
	*  set variable polNo
	*  @param value
	**/
   public void setPolNo(char[] value) throws CFException {
      workFields.setPolNo(value);
   } 

     /**
	 * 	Update PolNo 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPolNo(char[] source, int sourceIndex) throws CFException {
      workFields.setPolNo(source, sourceIndex);
   	
   }
   
   public void setPolNo(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setPolNo(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PolNo 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPolNo(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setPolNo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PolNo with another Field
	 *	@param value
	 */
   public void setPolNo(Field source) {
      workFields.setPolNo(source);
   }  
   
     /**
	 * 	Update PolNo 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPolNo(Field source, int sourceIndex,int sourceLen) {
      workFields.setPolNo(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PolNo 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPolNo(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setPolNo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of holdPosTierCd
	 *	@return holdPosTierCd
	 */
   public char[] getHoldPosTierCd() throws CFException  {              
   		return workFields.getHoldTransData().getHoldPosTierCd();
   }

  
	/**
	*  set variable holdPosTierCd
	*  @param value
	**/
   public void setHoldPosTierCd(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldPosTierCd(value);
   } 

     /**
	 * 	Update HoldPosTierCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldPosTierCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex);
   	
   }
   
   public void setHoldPosTierCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldPosTierCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldPosTierCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldPosTierCd with another Field
	 *	@param value
	 */
   public void setHoldPosTierCd(Field source) {
      workFields.getHoldTransData().setHoldPosTierCd(source);
   }  
   
     /**
	 * 	Update HoldPosTierCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldPosTierCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldPosTierCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldPosTierCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causSvc
	 *	@return causSvc
	 */
   public char[] getCausSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getCausSvc();
   }

  
	/**
	*  set variable causSvc
	*  @param value
	**/
   public void setCausSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausSvc(value);
   } 

     /**
	 * 	Update CausSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex);
   	
   }
   
   public void setCausSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausSvc with another Field
	 *	@param value
	 */
   public void setCausSvc(Field source) {
      workFields.getHoldTransData2().setCausSvc(source);
   }  
   
     /**
	 * 	Update CausSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "SC76  " THRU "SC99  " for isNewSvcCd()
	 *	@return  Returns true if isNewSvcCd() is "SC76  " THRU "SC99  "
	 */
   public boolean isNewSvcCd() throws CFException {
      return workFields.isNewSvcCd();
   }

	/**
	*  set values "SC76  " THRU "SC99  "
	*/
   	public void setNewSvcCdTrue()  throws CFException{  			
    	workFields.setNewSvcCdTrue();
   	}
	public BigDecimal getUOutLineNotcovAmt51(int index) throws CFException{      
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineNotcovAmt51();
	}

    public char[] getUOutLineNotcovAmt51String(int index) throws CFException {
          return  dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineNotcovAmt51().toPlainString().toCharArray();
    }
	
	/**
	 * 	Update UOutLineNotcovAmt51 with the passed number
	 *	@param number
	 */
	public void setUOutLineNotcovAmt51(int index,BigDecimal number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineNotcovAmt51(number);
   }

	/**
	 *	Returns the value of uLineServiceCode51
	 *	@return uLineServiceCode51
	 */
   public char[] getULineServiceCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineServiceCode51();
   }

  
	/**
	*  set variable uLineServiceCode51
	*  @param value
	**/
   public void setULineServiceCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(value);
   } 

     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex);
   	
   }
   
   public void setULineServiceCode51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULineServiceCode51 with another Field
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source);
   }  
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of planVarPrev
	 *	@return planVarPrev
	 */
	public short getPlanVarPrev() throws CFException {        
   		return workFields.getPlanVarPrev();
	}
	
	/**
	 * 	Update PlanVarPrev with the passed value
	 *	@param number
	 */
	public void setPlanVarPrev(short number)  throws CFException{
		workFields.setPlanVarPrev(number);
	}

	public void setPlanVarPrev(int number)  throws CFException{
		workFields.setPlanVarPrev((short)number);
	}

	public void setPlanVarPrev(long number)  throws CFException{
		workFields.setPlanVarPrev((short)number);
	}



	/**
	 *	Returns the value of causPs
	 *	@return causPs
	 */
   public char[] getCausPs() throws CFException  {              
   		return workFields.getHoldTransData2().getCausPs();
   }

  
	/**
	*  set variable causPs
	*  @param value
	**/
   public void setCausPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausPs(value);
   } 

     /**
	 * 	Update CausPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex);
   	
   }
   
   public void setCausPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausPs with another Field
	 *	@param value
	 */
   public void setCausPs(Field source) {
      workFields.getHoldTransData2().setCausPs(source);
   }  
   
     /**
	 * 	Update CausPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uOutDiagElgInd51
	 *	@return uOutDiagElgInd51
	 */
   public char[] getUOutDiagElgInd51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutDiagElgInd51();
   }

  
	/**
	*  set variable uOutDiagElgInd51
	*  @param value
	**/
   public void setUOutDiagElgInd51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutDiagElgInd51(value);
   } 

     /**
	 * 	Update UOutDiagElgInd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutDiagElgInd51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutDiagElgInd51(source, sourceIndex);
   	
   }
   
   public void setUOutDiagElgInd51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutDiagElgInd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutDiagElgInd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutDiagElgInd51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutDiagElgInd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutDiagElgInd51 with another Field
	 *	@param value
	 */
   public void setUOutDiagElgInd51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutDiagElgInd51(source);
   }  
   
     /**
	 * 	Update UOutDiagElgInd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutDiagElgInd51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutDiagElgInd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutDiagElgInd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutDiagElgInd51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutDiagElgInd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrOfLines
	 *	@return nbrOfLines
	 */
	public int getNbrOfLines() throws CFException {        
   		return workFields.getNbrOfLines();
	}
	
	/**
	 * 	Update NbrOfLines with the passed value
	 *	@param number
	 */
	public void setNbrOfLines(int number)  throws CFException{
		workFields.setNbrOfLines(number);
	}


	public void setNbrOfLines(long number)  throws CFException{
		workFields.setNbrOfLines((int)number);
	}


	public BigDecimal getULineNotcovAmt51(int index) throws CFException{      
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineNotcovAmt51();
	}

    public char[] getULineNotcovAmt51String(int index) throws CFException {
          return  dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineNotcovAmt51().toPlainString().toCharArray();
    }
	
	/**
	 * 	Update ULineNotcovAmt51 with the passed number
	 *	@param number
	 */
	public void setULineNotcovAmt51(int index,BigDecimal number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineNotcovAmt51(number);
   }

public int getULineAppUnits51(int index) throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineAppUnits51();
}
	/**
	 * 	Update ULineAppUnits51 with the passed value
	 *	@param number
	 */
	public void setULineAppUnits51(int index,int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineAppUnits51(number);
	}


	public void setULineAppUnits51(int index,long number)  throws CFException{
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineAppUnits51(number);
	}
	

	/**
	 *	Returns the value of ricdCauseCd
	 *	@return ricdCauseCd
	 */
   public char[] getRicdCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdCauseCd();
   }

  
	/**
	*  set variable ricdCauseCd
	*  @param value
	**/
   public void setRicdCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdCauseCd(value);
   } 

     /**
	 * 	Update RicdCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex);
   	
   }
   
   public void setRicdCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdCauseCd with another Field
	 *	@param value
	 */
   public void setRicdCauseCd(Field source) {
      workFields.getHoldTransData2().setRicdCauseCd(source);
   }  
   
     /**
	 * 	Update RicdCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isWithMmiPol2010()
	 *	@return  Returns true if isWithMmiPol2010() is "Y"
	 */
   public boolean isWithMmiPol2010() throws CFException {
      return work.isWithMmiPol2010();
   }

	/**
	*  set values "Y"
	*/
   	public void setWithMmiPol2010True()  throws CFException{  			
    	work.setWithMmiPol2010True();
   	}
	/**
	 *	Returns the value of xrfPlcyCm
	 *	@return xrfPlcyCm
	 */
   public char[] getXrfPlcyCm() throws CFException  {              
   		return dfhcommarea.getXrefCmInfo().getXrfCmInfo().getXrfPlcyCm();
   }

  
	/**
	*  set variable xrfPlcyCm
	*  @param value
	**/
   public void setXrfPlcyCm(char[] value) throws CFException {
      dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfPlcyCm(value);
   } 

     /**
	 * 	Update XrfPlcyCm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setXrfPlcyCm(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfPlcyCm(source, sourceIndex);
   	
   }
   
   public void setXrfPlcyCm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfPlcyCm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update XrfPlcyCm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setXrfPlcyCm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfPlcyCm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update XrfPlcyCm with another Field
	 *	@param value
	 */
   public void setXrfPlcyCm(Field source) {
      dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfPlcyCm(source);
   }  
   
     /**
	 * 	Update XrfPlcyCm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setXrfPlcyCm(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfPlcyCm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update XrfPlcyCm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setXrfPlcyCm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getXrefCmInfo().getXrfCmInfo().setXrfPlcyCm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrEqual
	 *	@return nbrEqual
	 */
   public char[] getNbrEqual() throws CFException  {              
   		return work.getNbrEqual();
   }

  
	/**
	*  set variable nbrEqual
	*  @param value
	**/
   public void setNbrEqual(char[] value) throws CFException {
      work.setNbrEqual(value);
   } 

	/**
	 *	Returns the value of withMmiSw2010
	 *	@return withMmiSw2010
	 */
   public char[] getWithMmiSw2010() throws CFException  {              
   		return work.getWithMmiSw2010();
   }

  
	/**
	*  set variable withMmiSw2010
	*  @param value
	**/
   public void setWithMmiSw2010(char[] value) throws CFException {
      work.setWithMmiSw2010(value);
   } 

	/**
	 *	Returns the value of holdCauseCd
	 *	@return holdCauseCd
	 */
   public char[] getHoldCauseCd() throws CFException  {              
   		return workFields.getHoldTransData().getHoldCauseCd();
   }

  
	/**
	*  set variable holdCauseCd
	*  @param value
	**/
   public void setHoldCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldCauseCd(value);
   } 

     /**
	 * 	Update HoldCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex);
   	
   }
   
   public void setHoldCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldCauseCd with another Field
	 *	@param value
	 */
   public void setHoldCauseCd(Field source) {
      workFields.getHoldTransData().setHoldCauseCd(source);
   }  
   
     /**
	 * 	Update HoldCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "      " "PARS  " "COBDT " "SSO   " "COPAY " "NCOPAY" "PCOPAY" "ACPD  " "TDPD  " "POD   " "PRE   " "OI    " "FW    " "EMER  " "CFPD  " "COMAC " "MATDC " "OIM   " "OIMEDI" "PLPRE " "CXINT " "CXMED " "CXLEG " "CXMISC" "CXAUDT" "DISCO " "DRGIN " "DRGOUT" "CB0   " "CB1   " "CB2   " "CB3   " "CB4   " "CB5   " "CB6   " "CB7   " "CB8   " "CB9   " for isInformationalServCd()
	 *	@return  Returns true if isInformationalServCd() is "      " "PARS  " "COBDT " "SSO   " "COPAY " "NCOPAY" "PCOPAY" "ACPD  " "TDPD  " "POD   " "PRE   " "OI    " "FW    " "EMER  " "CFPD  " "COMAC " "MATDC " "OIM   " "OIMEDI" "PLPRE " "CXINT " "CXMED " "CXLEG " "CXMISC" "CXAUDT" "DISCO " "DRGIN " "DRGOUT" "CB0   " "CB1   " "CB2   " "CB3   " "CB4   " "CB5   " "CB6   " "CB7   " "CB8   " "CB9   "
	 */
   public boolean isInformationalServCd() throws CFException {
      return workFields.isInformationalServCd();
   }

	/**
	*  set values "      " "PARS  " "COBDT " "SSO   " "COPAY " "NCOPAY" "PCOPAY" "ACPD  " "TDPD  " "POD   " "PRE   " "OI    " "FW    " "EMER  " "CFPD  " "COMAC " "MATDC " "OIM   " "OIMEDI" "PLPRE " "CXINT " "CXMED " "CXLEG " "CXMISC" "CXAUDT" "DISCO " "DRGIN " "DRGOUT" "CB0   " "CB1   " "CB2   " "CB3   " "CB4   " "CB5   " "CB6   " "CB7   " "CB8   " "CB9   "
	*/
   	public void setInformationalServCdTrue()  throws CFException{  			
    	workFields.setInformationalServCdTrue();
   	}
	/**
	 *	Returns the value of ripaCauseCd
	 *	@return ripaCauseCd
	 */
   public char[] getRipaCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaCauseCd();
   }

  
	/**
	*  set variable ripaCauseCd
	*  @param value
	**/
   public void setRipaCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaCauseCd(value);
   } 

     /**
	 * 	Update RipaCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex);
   	
   }
   
   public void setRipaCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaCauseCd with another Field
	 *	@param value
	 */
   public void setRipaCauseCd(Field source) {
      workFields.getHoldTransData2().setRipaCauseCd(source);
   }  
   
     /**
	 * 	Update RipaCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of holdSpiTblId
	 *	@return holdSpiTblId
	 */
   public char[] getHoldSpiTblId() throws CFException  {              
   		return workFields.getHoldTransData().getHoldSpiTblId();
   }

  
	/**
	*  set variable holdSpiTblId
	*  @param value
	**/
   public void setHoldSpiTblId(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldSpiTblId(value);
   } 

     /**
	 * 	Update HoldSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldSpiTblId(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex);
   	
   }
   
   public void setHoldSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldSpiTblId with another Field
	 *	@param value
	 */
   public void setHoldSpiTblId(Field source) {
      workFields.getHoldTransData().setHoldSpiTblId(source);
   }  
   
     /**
	 * 	Update HoldSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldSpiTblId(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypSvc
	 *	@return ptypSvc
	 */
   public char[] getPtypSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypSvc();
   }

  
	/**
	*  set variable ptypSvc
	*  @param value
	**/
   public void setPtypSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypSvc(value);
   } 

     /**
	 * 	Update PtypSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex);
   	
   }
   
   public void setPtypSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypSvc with another Field
	 *	@param value
	 */
   public void setPtypSvc(Field source) {
      workFields.getHoldTransData2().setPtypSvc(source);
   }  
   
     /**
	 * 	Update PtypSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of endOfSpiRule
	 *	@return endOfSpiRule
	 */
   public char[] getEndOfSpiRule() throws CFException  {              
   		return work.getEndOfSpiRule();
   }

  
	/**
	*  set variable endOfSpiRule
	*  @param value
	**/
   public void setEndOfSpiRule(char[] value) throws CFException {
      work.setEndOfSpiRule(value);
   } 

	/**
	 *	Returns the value of frtoPs
	 *	@return frtoPs
	 */
   public char[] getFrtoPs() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoPs();
   }

  
	/**
	*  set variable frtoPs
	*  @param value
	**/
   public void setFrtoPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoPs(value);
   } 

     /**
	 * 	Update FrtoPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex);
   	
   }
   
   public void setFrtoPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoPs with another Field
	 *	@param value
	 */
   public void setFrtoPs(Field source) {
      workFields.getHoldTransData2().setFrtoPs(source);
   }  
   
     /**
	 * 	Update FrtoPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causCauseCd
	 *	@return causCauseCd
	 */
   public char[] getCausCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getCausCauseCd();
   }

  
	/**
	*  set variable causCauseCd
	*  @param value
	**/
   public void setCausCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausCauseCd(value);
   } 

     /**
	 * 	Update CausCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex);
   	
   }
   
   public void setCausCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausCauseCd with another Field
	 *	@param value
	 */
   public void setCausCauseCd(Field source) {
      workFields.getHoldTransData2().setCausCauseCd(source);
   }  
   
     /**
	 * 	Update CausCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}


	/**
	 *	Returns the value of frtoSvc
	 *	@return frtoSvc
	 */
   public char[] getFrtoSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoSvc();
   }

  
	/**
	*  set variable frtoSvc
	*  @param value
	**/
   public void setFrtoSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoSvc(value);
   } 

     /**
	 * 	Update FrtoSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex);
   	
   }
   
   public void setFrtoSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoSvc with another Field
	 *	@param value
	 */
   public void setFrtoSvc(Field source) {
      workFields.getHoldTransData2().setFrtoSvc(source);
   }  
   
     /**
	 * 	Update FrtoSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public MainProcessingOutCtx clone() {
        MainProcessingOutCtx cloneObj = new MainProcessingOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public MainProcessingOutCtx getMainProcessingOutCtx() {
            return new MainProcessingOutCtx();
    }
     public class ReadPlanAltFileInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     W02FnuLineStartbr w02FnuLineStartbr = O529351uCtx.this.getW02FnuLineStartbr();
     FeSpiAltPlanRecord feSpiAltPlanRecord = O529351uCtx.this.getFeSpiAltPlanRecord();
     FesaKey1 fesaKey1 = O529351uCtx.this.getFesaKey1();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Test condition 20 for isCicsEndfile()
	 *	@return  Returns true if isCicsEndfile() is 20
	 */
   public boolean isCicsEndfile() throws CFException {
      return work.isCicsEndfile();
   }

	/**
	*  set values 20
	*/
   	public void setCicsEndfileTrue()  throws CFException{  			
    	work.setCicsEndfileTrue();
   	}
	/**
	 *	Returns the value of fesaKey1
	 *	@return fesaKey1
	 */   
	 public FesaKey1 getFesaKey1() {
   	return fesaKey1;
   }


	/**
	 *	Test condition "Y" for isFeSpiTurnedOn()
	 *	@return  Returns true if isFeSpiTurnedOn() is "Y"
	 */
   public boolean isFeSpiTurnedOn() throws CFException {
      return work.isFeSpiTurnedOn();
   }

	/**
	*  set values "Y"
	*/
   	public void setFeSpiTurnedOnTrue()  throws CFException{  			
    	work.setFeSpiTurnedOnTrue();
   	}
	/**
	 *	Returns the value of uPolicyNo51
	 *	@return uPolicyNo51
	 */
   public char[] getUPolicyNo51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUPolicyNo51();
   }

  
	/**
	*  set variable uPolicyNo51
	*  @param value
	**/
   public void setUPolicyNo51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(value);
   } 

     /**
	 * 	Update UPolicyNo51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUPolicyNo51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex);
   	
   }
   
   public void setUPolicyNo51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UPolicyNo51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUPolicyNo51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UPolicyNo51 with another Field
	 *	@param value
	 */
   public void setUPolicyNo51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source);
   }  
   
     /**
	 * 	Update UPolicyNo51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUPolicyNo51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UPolicyNo51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUPolicyNo51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isWithMmiPol2010()
	 *	@return  Returns true if isWithMmiPol2010() is "Y"
	 */
   public boolean isWithMmiPol2010() throws CFException {
      return work.isWithMmiPol2010();
   }

	/**
	*  set values "Y"
	*/
   	public void setWithMmiPol2010True()  throws CFException{  			
    	work.setWithMmiPol2010True();
   	}
	/**
	 *	Test condition "Y" for isEndOfPlanAlt1()
	 *	@return  Returns true if isEndOfPlanAlt1() is "Y"
	 */
   public boolean isEndOfPlanAlt1() throws CFException {
      return work.isEndOfPlanAlt1();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfPlanAlt1True()  throws CFException{  			
    	work.setEndOfPlanAlt1True();
   	}
	/**
	 *	Returns the value of uPlanVar51
	 *	@return uPlanVar51
	 */
	public short getUPlanVar51() throws CFException {        
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUPlanVar51();
	}
	
	/**
	 * 	Update UPlanVar51 with the passed value
	 *	@param number
	 */
	public void setUPlanVar51(short number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51(number);
	}

	public void setUPlanVar51(int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51((short)number);
	}

	public void setUPlanVar51(long number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51((short)number);
	}



	/**
	 *	Returns the value of w02FnuLineStartbr
	 *	@return w02FnuLineStartbr
	 */   
	 public W02FnuLineStartbr getW02FnuLineStartbr() {
   	return w02FnuLineStartbr;
   }


	/**
	 *	Returns the value of ddPlanvara
	 *	@return ddPlanvara
	 */
   public char[] getDdPlanvara() throws CFException  {              
   		return work.getDdPlanvara();
   }

  
	/**
	*  set variable ddPlanvara
	*  @param value
	**/
   public void setDdPlanvara(char[] value) throws CFException {
      work.setDdPlanvara(value);
   } 

	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}


	/**
	 *	Test condition 0 for isCicsNormal()
	 *	@return  Returns true if isCicsNormal() is 0
	 */
   public boolean isCicsNormal() throws CFException {
      return work.isCicsNormal();
   }

	/**
	*  set values 0
	*/
   	public void setCicsNormalTrue()  throws CFException{  			
    	work.setCicsNormalTrue();
   	}
	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}


	/**
	 *	Test condition 13 for isCicsNotfnd()
	 *	@return  Returns true if isCicsNotfnd() is 13
	 */
   public boolean isCicsNotfnd() throws CFException {
      return work.isCicsNotfnd();
   }

	/**
	*  set values 13
	*/
   	public void setCicsNotfndTrue()  throws CFException{  			
    	work.setCicsNotfndTrue();
   	}

        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public ReadPlanAltFileOutCtx getReadPlanAltFileOutCtx() {
            return new ReadPlanAltFileOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += w02FnuLineStartbr.hashCode();
        str += feSpiAltPlanRecord.hashCode();
        str += fesaKey1.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public ReadPlanAltFileInCtx clone() {
        ReadPlanAltFileInCtx cloneObj = new ReadPlanAltFileInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.w02FnuLineStartbr = new W02FnuLineStartbr();
        cloneObj.w02FnuLineStartbr.set(w02FnuLineStartbr.getClonedField());
        cloneObj.feSpiAltPlanRecord = new FeSpiAltPlanRecord();
        cloneObj.feSpiAltPlanRecord.set(feSpiAltPlanRecord.getClonedField());
        cloneObj.fesaKey1 = new FesaKey1();
        cloneObj.fesaKey1.set(fesaKey1.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public ReadPlanAltFileInCtx getReadPlanAltFileInCtx() {
            return new ReadPlanAltFileInCtx();
    }
     public class ReadPlanAltFileOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     W02FnuLineStartbr w02FnuLineStartbr = O529351uCtx.this.getW02FnuLineStartbr();
     FeSpiAltPlanRecord feSpiAltPlanRecord = O529351uCtx.this.getFeSpiAltPlanRecord();
     FesaKey1 fesaKey1 = O529351uCtx.this.getFesaKey1();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of fesaPlanVar1
	 *	@return fesaPlanVar1
	 */
	public int getFesaPlanVar1() throws CFException {
   		return fesaKey1.getFesaPlanVar1();
	}

    /**
	 *	Returns the String value of fesaPlanVar1
	 *	@return fesaPlanVar1
	 */
	public char[]  getFesaPlanVar1ActualString() {
		return fesaKey1.getFesaPlanVar1ActualString();
	}

	/**
	 *	Returns String value of fesaPlanVar1
	 *	@return fesaPlanVar1
	 */
	public char[]  getFesaPlanVar1String() throws CFException {
	     return String.valueOf(fesaKey1.getFesaPlanVar1String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean fesaPlanVar1IsNumeric()  throws CFException{
	    return fesaKey1.fesaPlanVar1IsNumeric();
	}

	/**
	 * 	Update FesaPlanVar1 with the passed value
	 *	@param number
	 */
	public void setFesaPlanVar1(int number)  throws CFException{
		fesaKey1.setFesaPlanVar1(number);
	}
	

	public void setFesaPlanVar1(long number)  throws CFException{
	    fesaKey1.setFesaPlanVar1(number);
	}
	
	
	/**
	 * 	Update FesaPlanVar1 with the passed value
	 *	@param value (String or char[])
	 */
	public void setFesaPlanVar1(char[] value)  throws CFException {
		fesaKey1.setFesaPlanVar1(value);
	}
	
	/**
	 * 	Update FesaPlanVar1 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setFesaPlanVar1String(char[] value)  throws CFException{
		fesaKey1.setFesaPlanVar1(value);
	}	

public int getFesaSpiNbr() throws CFException {  
        return feSpiAltPlanRecord.getFesaKey().getFesaSpiNbr();
}
	/**
	 * 	Update FesaSpiNbr with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr(int number)  throws CFException{
		feSpiAltPlanRecord.getFesaKey().setFesaSpiNbr(number);
	}


	public void setFesaSpiNbr(long number)  throws CFException{
	    feSpiAltPlanRecord.getFesaKey().setFesaSpiNbr(number);
	}
	

	/**
	 *	Returns the value of w02DsplMsg
	 *	@return w02DsplMsg
	 */
   public char[] getW02DsplMsg() throws CFException  {              
   		return w02DsplMsgArea.getW02DsplMsg();
   }

  
	/**
	*  set variable w02DsplMsg
	*  @param value
	**/
   public void setW02DsplMsg(char[] value) throws CFException {
      w02DsplMsgArea.setW02DsplMsg(value);
   } 

     /**
	 * 	Update W02DsplMsg 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02DsplMsg(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex);
   	
   }
   
   public void setW02DsplMsg(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02DsplMsg 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplMsg(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02DsplMsg with another Field
	 *	@param value
	 */
   public void setW02DsplMsg(Field source) {
      w02DsplMsgArea.setW02DsplMsg(source);
   }  
   
     /**
	 * 	Update W02DsplMsg 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02DsplMsg(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02DsplMsg 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplMsg(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getFesaPlanVar() throws CFException {  
        return feSpiAltPlanRecord.getFesaKey().getFesaPlanVar();
}
	/**
	 * 	Update FesaPlanVar with the passed value
	 *	@param number
	 */
	public void setFesaPlanVar(int number)  throws CFException{
		feSpiAltPlanRecord.getFesaKey().setFesaPlanVar(number);
	}


	public void setFesaPlanVar(long number)  throws CFException{
	    feSpiAltPlanRecord.getFesaKey().setFesaPlanVar(number);
	}
	

	/**
	 *	Returns the value of w02FnuFileStbr
	 *	@return w02FnuFileStbr
	 */
   public char[] getW02FnuFileStbr() throws CFException  {              
   		return w02FnuLineStartbr.getW02FnuFileStbr();
   }

  
	/**
	*  set variable w02FnuFileStbr
	*  @param value
	**/
   public void setW02FnuFileStbr(char[] value) throws CFException {
      w02FnuLineStartbr.setW02FnuFileStbr(value);
   } 

     /**
	 * 	Update W02FnuFileStbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02FnuFileStbr(char[] source, int sourceIndex) throws CFException {
      w02FnuLineStartbr.setW02FnuFileStbr(source, sourceIndex);
   	
   }
   
   public void setW02FnuFileStbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02FnuLineStartbr.setW02FnuFileStbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02FnuFileStbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuFileStbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineStartbr.setW02FnuFileStbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02FnuFileStbr with another Field
	 *	@param value
	 */
   public void setW02FnuFileStbr(Field source) {
      w02FnuLineStartbr.setW02FnuFileStbr(source);
   }  
   
     /**
	 * 	Update W02FnuFileStbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02FnuFileStbr(Field source, int sourceIndex,int sourceLen) {
      w02FnuLineStartbr.setW02FnuFileStbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02FnuFileStbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuFileStbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineStartbr.setW02FnuFileStbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesaKey1
	 *	@return fesaKey1
	 */   
	 public FesaKey1 getFesaKey1() {
   	return fesaKey1;
   }


	/**
	 *	Returns the value of w02FnuKeyStbr
	 *	@return w02FnuKeyStbr
	 */
   public char[] getW02FnuKeyStbr() throws CFException  {              
   		return w02FnuLineStartbr.getW02FnuKeyStbr();
   }

  
	/**
	*  set variable w02FnuKeyStbr
	*  @param value
	**/
   public void setW02FnuKeyStbr(char[] value) throws CFException {
      w02FnuLineStartbr.setW02FnuKeyStbr(value);
   } 

     /**
	 * 	Update W02FnuKeyStbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02FnuKeyStbr(char[] source, int sourceIndex) throws CFException {
      w02FnuLineStartbr.setW02FnuKeyStbr(source, sourceIndex);
   	
   }
   
   public void setW02FnuKeyStbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02FnuLineStartbr.setW02FnuKeyStbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02FnuKeyStbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuKeyStbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineStartbr.setW02FnuKeyStbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02FnuKeyStbr with another Field
	 *	@param value
	 */
   public void setW02FnuKeyStbr(Field source) {
      w02FnuLineStartbr.setW02FnuKeyStbr(source);
   }  
   
     /**
	 * 	Update W02FnuKeyStbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02FnuKeyStbr(Field source, int sourceIndex,int sourceLen) {
      w02FnuLineStartbr.setW02FnuKeyStbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02FnuKeyStbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuKeyStbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineStartbr.setW02FnuKeyStbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesaPolicy
	 *	@return fesaPolicy
	 */
   public char[] getFesaPolicy() throws CFException  {              
   		return feSpiAltPlanRecord.getFesaKey().getFesaPolicy();
   }

  
	/**
	*  set variable fesaPolicy
	*  @param value
	**/
   public void setFesaPolicy(char[] value) throws CFException {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(value);
   } 

     /**
	 * 	Update FesaPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaPolicy(char[] source, int sourceIndex) throws CFException {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex);
   	
   }
   
   public void setFesaPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaPolicy with another Field
	 *	@param value
	 */
   public void setFesaPolicy(Field source) {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source);
   }  
   
     /**
	 * 	Update FesaPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaPolicy(Field source, int sourceIndex,int sourceLen) {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02DsplErrInd
	 *	@return w02DsplErrInd
	 */
   public char[] getW02DsplErrInd() throws CFException  {              
   		return w02DsplMsgArea.getW02DsplErrInd();
   }

  
	/**
	*  set variable w02DsplErrInd
	*  @param value
	**/
   public void setW02DsplErrInd(char[] value) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(value);
   } 

     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex);
   	
   }
   
   public void setW02DsplErrInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02DsplErrInd with another Field
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source) {
      w02DsplMsgArea.setW02DsplErrInd(source);
   }  
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isMmiAltNotFound()
	 *	@return  Returns true if isMmiAltNotFound() is "Y"
	 */
   public boolean isMmiAltNotFound() throws CFException {
      return work.isMmiAltNotFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setMmiAltNotFoundTrue()  throws CFException{  			
    	work.setMmiAltNotFoundTrue();
   	}
	/**
	 *	Returns the value of uPolicyNo51
	 *	@return uPolicyNo51
	 */
   public char[] getUPolicyNo51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUPolicyNo51();
   }

  
	/**
	*  set variable uPolicyNo51
	*  @param value
	**/
   public void setUPolicyNo51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(value);
   } 

     /**
	 * 	Update UPolicyNo51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUPolicyNo51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex);
   	
   }
   
   public void setUPolicyNo51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UPolicyNo51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUPolicyNo51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UPolicyNo51 with another Field
	 *	@param value
	 */
   public void setUPolicyNo51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source);
   }  
   
     /**
	 * 	Update UPolicyNo51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUPolicyNo51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UPolicyNo51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUPolicyNo51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesaPolicy1
	 *	@return fesaPolicy1
	 */
   public char[] getFesaPolicy1() throws CFException  {              
   		return fesaKey1.getFesaPolicy1();
   }

  
	/**
	*  set variable fesaPolicy1
	*  @param value
	**/
   public void setFesaPolicy1(char[] value) throws CFException {
      fesaKey1.setFesaPolicy1(value);
   } 

     /**
	 * 	Update FesaPolicy1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaPolicy1(char[] source, int sourceIndex) throws CFException {
      fesaKey1.setFesaPolicy1(source, sourceIndex);
   	
   }
   
   public void setFesaPolicy1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      fesaKey1.setFesaPolicy1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaPolicy1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      fesaKey1.setFesaPolicy1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaPolicy1 with another Field
	 *	@param value
	 */
   public void setFesaPolicy1(Field source) {
      fesaKey1.setFesaPolicy1(source);
   }  
   
     /**
	 * 	Update FesaPolicy1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaPolicy1(Field source, int sourceIndex,int sourceLen) {
      fesaKey1.setFesaPolicy1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaPolicy1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      fesaKey1.setFesaPolicy1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getFesaEffDate() throws CFException {  
        return feSpiAltPlanRecord.getFesaKey().getFesaEffDate();
}
	/**
	 * 	Update FesaEffDate with the passed value
	 *	@param number
	 */
	public void setFesaEffDate(int number)  throws CFException{
		feSpiAltPlanRecord.getFesaKey().setFesaEffDate(number);
	}


	public void setFesaEffDate(long number)  throws CFException{
	    feSpiAltPlanRecord.getFesaKey().setFesaEffDate(number);
	}
	

	/**
	 *	Returns the value of uPlanVar51
	 *	@return uPlanVar51
	 */
	public short getUPlanVar51() throws CFException {        
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUPlanVar51();
	}
	
	/**
	 * 	Update UPlanVar51 with the passed value
	 *	@param number
	 */
	public void setUPlanVar51(short number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51(number);
	}

	public void setUPlanVar51(int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51((short)number);
	}

	public void setUPlanVar51(long number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51((short)number);
	}



	/**
	 *	Returns the value of w02FnuLineStartbr
	 *	@return w02FnuLineStartbr
	 */   
	 public W02FnuLineStartbr getW02FnuLineStartbr() {
   	return w02FnuLineStartbr;
   }


	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesaEffDate1
	 *	@return fesaEffDate1
	 */
	public int getFesaEffDate1() throws CFException {
   		return fesaKey1.getFesaEffDate1();
	}

    /**
	 *	Returns the String value of fesaEffDate1
	 *	@return fesaEffDate1
	 */
	public char[]  getFesaEffDate1ActualString() {
		return fesaKey1.getFesaEffDate1ActualString();
	}

	/**
	 *	Returns String value of fesaEffDate1
	 *	@return fesaEffDate1
	 */
	public char[]  getFesaEffDate1String() throws CFException {
	     return String.valueOf(fesaKey1.getFesaEffDate1String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean fesaEffDate1IsNumeric()  throws CFException{
	    return fesaKey1.fesaEffDate1IsNumeric();
	}

	/**
	 * 	Update FesaEffDate1 with the passed value
	 *	@param number
	 */
	public void setFesaEffDate1(int number)  throws CFException{
		fesaKey1.setFesaEffDate1(number);
	}
	

	public void setFesaEffDate1(long number)  throws CFException{
	    fesaKey1.setFesaEffDate1(number);
	}
	
	
	/**
	 * 	Update FesaEffDate1 with the passed value
	 *	@param value (String or char[])
	 */
	public void setFesaEffDate1(char[] value)  throws CFException {
		fesaKey1.setFesaEffDate1(value);
	}
	
	/**
	 * 	Update FesaEffDate1 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setFesaEffDate1String(char[] value)  throws CFException{
		fesaKey1.setFesaEffDate1(value);
	}	

	/**
	 *	Returns the value of fesaSpiNbr1
	 *	@return fesaSpiNbr1
	 */
	public int getFesaSpiNbr1() throws CFException {
   		return fesaKey1.getFesaSpiNbr1();
	}

    /**
	 *	Returns the String value of fesaSpiNbr1
	 *	@return fesaSpiNbr1
	 */
	public char[]  getFesaSpiNbr1ActualString() {
		return fesaKey1.getFesaSpiNbr1ActualString();
	}

	/**
	 *	Returns String value of fesaSpiNbr1
	 *	@return fesaSpiNbr1
	 */
	public char[]  getFesaSpiNbr1String() throws CFException {
	     return String.valueOf(fesaKey1.getFesaSpiNbr1String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean fesaSpiNbr1IsNumeric()  throws CFException{
	    return fesaKey1.fesaSpiNbr1IsNumeric();
	}

	/**
	 * 	Update FesaSpiNbr1 with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr1(int number)  throws CFException{
		fesaKey1.setFesaSpiNbr1(number);
	}
	

	public void setFesaSpiNbr1(long number)  throws CFException{
	    fesaKey1.setFesaSpiNbr1(number);
	}
	
	
	/**
	 * 	Update FesaSpiNbr1 with the passed value
	 *	@param value (String or char[])
	 */
	public void setFesaSpiNbr1(char[] value)  throws CFException {
		fesaKey1.setFesaSpiNbr1(value);
	}
	
	/**
	 * 	Update FesaSpiNbr1 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setFesaSpiNbr1String(char[] value)  throws CFException{
		fesaKey1.setFesaSpiNbr1(value);
	}	

	/**
	 *	Returns the value of planVarFoundSw
	 *	@return planVarFoundSw
	 */
   public char[] getPlanVarFoundSw() throws CFException  {              
   		return work.getPlanVarFoundSw();
   }

  
	/**
	*  set variable planVarFoundSw
	*  @param value
	**/
   public void setPlanVarFoundSw(char[] value) throws CFException {
      work.setPlanVarFoundSw(value);
   } 

	/**
	 *	Test condition "I" for isM51uIllogicalCond()
	 *	@return  Returns true if isM51uIllogicalCond() is "I"
	 */
   public boolean isM51uIllogicalCond() throws CFException {
      return dfhcommarea.getLinkAreaM51u().getM51uFlags().isM51uIllogicalCond();
   }

	/**
	*  set values "I"
	*/
   	public void setM51uIllogicalCondTrue()  throws CFException{  			
    	dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondTrue();
   	}
	/**
	 *	Returns the value of ddPlanvara
	 *	@return ddPlanvara
	 */
   public char[] getDdPlanvara() throws CFException  {              
   		return work.getDdPlanvara();
   }

  
	/**
	*  set variable ddPlanvara
	*  @param value
	**/
   public void setDdPlanvara(char[] value) throws CFException {
      work.setDdPlanvara(value);
   } 

	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}


	/**
	 *	Returns the value of w02RespCd
	 *	@return w02RespCd
	 */
	public long getW02RespCd() throws CFException {
   		return w02DsplMsgArea.getW02RespCd();
	}


	/**
	 *	Returns String value of w02RespCd
	 *	@return w02RespCd
	 */
	public char[]  getW02RespCdString() throws CFException {
	     return String.valueOf(w02DsplMsgArea.getW02RespCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean w02RespCdIsNumeric()  throws CFException{
	    return w02DsplMsgArea.w02RespCdIsNumeric();
	}

	/**
	 * 	Update W02RespCd with the passed value
	 *	@param number
	 */
	public void setW02RespCd(long number)  throws CFException{
		w02DsplMsgArea.setW02RespCd(number);
	}
	

	
	/**
	 * 	Update W02RespCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setW02RespCd(char[] value)  throws CFException {
		w02DsplMsgArea.setW02RespCd(value);
	}
	
	/**
	 * 	Update W02RespCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setW02RespCdString(char[] value)  throws CFException{
		w02DsplMsgArea.setW02RespCd(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += w02FnuLineStartbr.hashCode();
        str += feSpiAltPlanRecord.hashCode();
        str += fesaKey1.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public ReadPlanAltFileOutCtx clone() {
        ReadPlanAltFileOutCtx cloneObj = new ReadPlanAltFileOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.w02FnuLineStartbr = new W02FnuLineStartbr();
        cloneObj.w02FnuLineStartbr.set(w02FnuLineStartbr.getClonedField());
        cloneObj.feSpiAltPlanRecord = new FeSpiAltPlanRecord();
        cloneObj.feSpiAltPlanRecord.set(feSpiAltPlanRecord.getClonedField());
        cloneObj.fesaKey1 = new FesaKey1();
        cloneObj.fesaKey1.set(fesaKey1.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public ReadPlanAltFileOutCtx getReadPlanAltFileOutCtx() {
            return new ReadPlanAltFileOutCtx();
    }
     public class NewSpiTranslationInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     NewTransSpiTableGroup newTransSpiTableGroup = O529351uCtx.this.getNewTransSpiTableGroup();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of uGenericTrnsl51
	 *	@return uGenericTrnsl51
	 */
   public char[] getUGenericTrnsl51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getUGenericTranslation51().getUGenericTrnslGroup51(index).getUGenericTrnsl51();
   }

  
	/**
	*  set variable uGenericTrnsl51
	*  @param value
	**/
   public void setUGenericTrnsl51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getUGenericTranslation51().getUGenericTrnslGroup51(index).setUGenericTrnsl51(value);
   } 

     /**
	 * 	Update UGenericTrnsl51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUGenericTrnsl51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getUGenericTranslation51().getUGenericTrnslGroup51(index).setUGenericTrnsl51(source, sourceIndex);
   	
   }
   
   public void setUGenericTrnsl51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getUGenericTranslation51().getUGenericTrnslGroup51(index).setUGenericTrnsl51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UGenericTrnsl51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUGenericTrnsl51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getUGenericTranslation51().getUGenericTrnslGroup51(index).setUGenericTrnsl51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UGenericTrnsl51 with another Field
	 *	@param value
	 */
   public void setUGenericTrnsl51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getUGenericTranslation51().getUGenericTrnslGroup51(index).setUGenericTrnsl51(source);
   }  
   
     /**
	 * 	Update UGenericTrnsl51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUGenericTrnsl51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getUGenericTranslation51().getUGenericTrnslGroup51(index).setUGenericTrnsl51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UGenericTrnsl51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUGenericTrnsl51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getUGenericTranslation51().getUGenericTrnslGroup51(index).setUGenericTrnsl51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


public void setUTrnslNdx51(int uTrnslNdx51) { 
    O529351uCtx.this.uTrnslNdx51 = uTrnslNdx51;
}

public int getUTrnslNdx51() { 
    return O529351uCtx.this.uTrnslNdx51;
}
	/**
	 *	Returns the value of newSub
	 *	@return newSub
	 */
	public int getNewSub() throws CFException {        
   		return work.getNewSub();
	}
	
	/**
	 * 	Update NewSub with the passed value
	 *	@param number
	 */
	public void setNewSub(int number)  throws CFException{
		work.setNewSub(number);
	}


	public void setNewSub(long number)  throws CFException{
		work.setNewSub((int)number);
	}



public void setNewNdx(int newNdx) { 
    O529351uCtx.this.newNdx = newNdx;
}

public int getNewNdx() { 
    return O529351uCtx.this.newNdx;
}
	/**
	 *	Returns the value of nbrOfPlanVar
	 *	@return nbrOfPlanVar
	 */
	public int getNbrOfPlanVar() throws CFException {        
   		return workFields.getNbrOfPlanVar();
	}
	
	/**
	 * 	Update NbrOfPlanVar with the passed value
	 *	@param number
	 */
	public void setNbrOfPlanVar(int number)  throws CFException{
		workFields.setNbrOfPlanVar(number);
	}


	public void setNbrOfPlanVar(long number)  throws CFException{
		workFields.setNbrOfPlanVar((int)number);
	}


	/**
	 *	Returns the value of newTransl
	 *	@return newTransl
	 */
	public long getNewTransl(int index) throws CFException {
   		return newTransSpiTableGroup.getNewTransSpiTableR().getTabItem(index).getNewTransl();
	}


	/**
	 *	Returns String value of newTransl
	 *	@return newTransl
	 */
	public char[]  getNewTranslString(int index) throws CFException {
	     return String.valueOf(newTransSpiTableGroup.getNewTransSpiTableR().getTabItem(index).getNewTranslString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean newTranslIsNumeric(int index)  throws CFException{
	    return newTransSpiTableGroup.getNewTransSpiTableR().getTabItem(index - 1).newTranslIsNumeric();
	}

	/**
	 * 	Update NewTransl with the passed value
	 *	@param number
	 */
	public void setNewTransl(int index,long number)  throws CFException{
		newTransSpiTableGroup.getNewTransSpiTableR().getTabItem(index).setNewTransl(number);
	}
	

	
	/**
	 * 	Update NewTransl with the passed value
	 *	@param value (String or char[])
	 */
	public void setNewTransl(int index,char[] value)  throws CFException {
		newTransSpiTableGroup.getNewTransSpiTableR().getTabItem(index).setNewTransl(value);
	}
	
	/**
	 * 	Update NewTransl with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNewTranslString(int index,char[] value)  throws CFException{
		newTransSpiTableGroup.getNewTransSpiTableR().getTabItem(index).setNewTransl(value);
	}	

	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public NewSpiTranslationOutCtx getNewSpiTranslationOutCtx() {
            return new NewSpiTranslationOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += newTransSpiTableGroup.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public NewSpiTranslationInCtx clone() {
        NewSpiTranslationInCtx cloneObj = new NewSpiTranslationInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.newTransSpiTableGroup = new NewTransSpiTableGroup();
        cloneObj.newTransSpiTableGroup.set(newTransSpiTableGroup.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public NewSpiTranslationInCtx getNewSpiTranslationInCtx() {
            return new NewSpiTranslationInCtx();
    }
     public class NewSpiTranslationOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     NewTransSpiTableGroup newTransSpiTableGroup = O529351uCtx.this.getNewTransSpiTableGroup();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of fesaPolicy01
	 *	@return fesaPolicy01
	 */
   public char[] getFesaPolicy01(int index) throws CFException  {              
   		return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaPolicy01();
   }

  
	/**
	*  set variable fesaPolicy01
	*  @param value
	**/
   public void setFesaPolicy01(int index,char[] value) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(value);
   } 

     /**
	 * 	Update FesaPolicy01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaPolicy01(int index,char[] source, int sourceIndex) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex);
   	
   }
   
   public void setFesaPolicy01(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaPolicy01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy01(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaPolicy01 with another Field
	 *	@param value
	 */
   public void setFesaPolicy01(int index,Field source) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source);
   }  
   
     /**
	 * 	Update FesaPolicy01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaPolicy01(int index,Field source, int sourceIndex,int sourceLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaPolicy01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy01(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


public void setUTrnslNdx51(int uTrnslNdx51) { 
    O529351uCtx.this.uTrnslNdx51 = uTrnslNdx51;
}

public int getUTrnslNdx51() { 
    return O529351uCtx.this.uTrnslNdx51;
}
	/**
	 *	Returns the value of newSub
	 *	@return newSub
	 */
	public int getNewSub() throws CFException {        
   		return work.getNewSub();
	}
	
	/**
	 * 	Update NewSub with the passed value
	 *	@param number
	 */
	public void setNewSub(int number)  throws CFException{
		work.setNewSub(number);
	}


	public void setNewSub(long number)  throws CFException{
		work.setNewSub((int)number);
	}



public void setNewNdx(int newNdx) { 
    O529351uCtx.this.newNdx = newNdx;
}

public int getNewNdx() { 
    return O529351uCtx.this.newNdx;
}
	/**
	 *	Returns the value of planVarFoundSw
	 *	@return planVarFoundSw
	 */
   public char[] getPlanVarFoundSw() throws CFException  {              
   		return work.getPlanVarFoundSw();
   }

  
	/**
	*  set variable planVarFoundSw
	*  @param value
	**/
   public void setPlanVarFoundSw(char[] value) throws CFException {
      work.setPlanVarFoundSw(value);
   } 

	/**
	 *	Returns the value of nbrOfPlanVar
	 *	@return nbrOfPlanVar
	 */
	public int getNbrOfPlanVar() throws CFException {        
   		return workFields.getNbrOfPlanVar();
	}
	
	/**
	 * 	Update NbrOfPlanVar with the passed value
	 *	@param number
	 */
	public void setNbrOfPlanVar(int number)  throws CFException{
		workFields.setNbrOfPlanVar(number);
	}


	public void setNbrOfPlanVar(long number)  throws CFException{
		workFields.setNbrOfPlanVar((int)number);
	}


public int getFesaPlanVar01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaPlanVar01();
}
	/**
	 * 	Update FesaPlanVar01 with the passed value
	 *	@param number
	 */
	public void setFesaPlanVar01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPlanVar01(number);
	}


	public void setFesaPlanVar01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPlanVar01(number);
	}
	

	/**
	 *	Returns the value of newTransl
	 *	@return newTransl
	 */
	public long getNewTransl(int index) throws CFException {
   		return newTransSpiTableGroup.getNewTransSpiTableR().getTabItem(index).getNewTransl();
	}


	/**
	 *	Returns String value of newTransl
	 *	@return newTransl
	 */
	public char[]  getNewTranslString(int index) throws CFException {
	     return String.valueOf(newTransSpiTableGroup.getNewTransSpiTableR().getTabItem(index).getNewTranslString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean newTranslIsNumeric(int index)  throws CFException{
	    return newTransSpiTableGroup.getNewTransSpiTableR().getTabItem(index - 1).newTranslIsNumeric();
	}

	/**
	 * 	Update NewTransl with the passed value
	 *	@param number
	 */
	public void setNewTransl(int index,long number)  throws CFException{
		newTransSpiTableGroup.getNewTransSpiTableR().getTabItem(index).setNewTransl(number);
	}
	

	
	/**
	 * 	Update NewTransl with the passed value
	 *	@param value (String or char[])
	 */
	public void setNewTransl(int index,char[] value)  throws CFException {
		newTransSpiTableGroup.getNewTransSpiTableR().getTabItem(index).setNewTransl(value);
	}
	
	/**
	 * 	Update NewTransl with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNewTranslString(int index,char[] value)  throws CFException{
		newTransSpiTableGroup.getNewTransSpiTableR().getTabItem(index).setNewTransl(value);
	}	

public int getFesaEffDate01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaEffDate01();
}
	/**
	 * 	Update FesaEffDate01 with the passed value
	 *	@param number
	 */
	public void setFesaEffDate01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaEffDate01(number);
	}


	public void setFesaEffDate01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaEffDate01(number);
	}
	

public int getFesaSpiNbr01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiNbr01();
}
	/**
	 * 	Update FesaSpiNbr01 with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}


	public void setFesaSpiNbr01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}
	

	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += newTransSpiTableGroup.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public NewSpiTranslationOutCtx clone() {
        NewSpiTranslationOutCtx cloneObj = new NewSpiTranslationOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.newTransSpiTableGroup = new NewTransSpiTableGroup();
        cloneObj.newTransSpiTableGroup.set(newTransSpiTableGroup.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public NewSpiTranslationOutCtx getNewSpiTranslationOutCtx() {
            return new NewSpiTranslationOutCtx();
    }
     public class GenericTranslationInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     GenTransSpiTableGroup genTransSpiTableGroup = O529351uCtx.this.getGenTransSpiTableGroup();


public void setGenNdx(int genNdx) { 
    O529351uCtx.this.genNdx = genNdx;
}

public int getGenNdx() { 
    return O529351uCtx.this.genNdx;
}
	/**
	 *	Returns the value of uGenericTrnsl51
	 *	@return uGenericTrnsl51
	 */
   public char[] getUGenericTrnsl51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getUGenericTranslation51().getUGenericTrnslGroup51(index).getUGenericTrnsl51();
   }

  
	/**
	*  set variable uGenericTrnsl51
	*  @param value
	**/
   public void setUGenericTrnsl51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getUGenericTranslation51().getUGenericTrnslGroup51(index).setUGenericTrnsl51(value);
   } 

     /**
	 * 	Update UGenericTrnsl51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUGenericTrnsl51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getUGenericTranslation51().getUGenericTrnslGroup51(index).setUGenericTrnsl51(source, sourceIndex);
   	
   }
   
   public void setUGenericTrnsl51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getUGenericTranslation51().getUGenericTrnslGroup51(index).setUGenericTrnsl51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UGenericTrnsl51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUGenericTrnsl51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getUGenericTranslation51().getUGenericTrnslGroup51(index).setUGenericTrnsl51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UGenericTrnsl51 with another Field
	 *	@param value
	 */
   public void setUGenericTrnsl51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getUGenericTranslation51().getUGenericTrnslGroup51(index).setUGenericTrnsl51(source);
   }  
   
     /**
	 * 	Update UGenericTrnsl51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUGenericTrnsl51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getUGenericTranslation51().getUGenericTrnslGroup51(index).setUGenericTrnsl51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UGenericTrnsl51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUGenericTrnsl51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getUGenericTranslation51().getUGenericTrnslGroup51(index).setUGenericTrnsl51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


public void setUTrnslNdx51(int uTrnslNdx51) { 
    O529351uCtx.this.uTrnslNdx51 = uTrnslNdx51;
}

public int getUTrnslNdx51() { 
    return O529351uCtx.this.uTrnslNdx51;
}
	/**
	 *	Returns the value of uPlanVar51
	 *	@return uPlanVar51
	 */
	public short getUPlanVar51() throws CFException {        
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUPlanVar51();
	}
	
	/**
	 * 	Update UPlanVar51 with the passed value
	 *	@param number
	 */
	public void setUPlanVar51(short number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51(number);
	}

	public void setUPlanVar51(int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51((short)number);
	}

	public void setUPlanVar51(long number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51((short)number);
	}



	/**
	 *	Returns the value of newSub
	 *	@return newSub
	 */
	public int getNewSub() throws CFException {        
   		return work.getNewSub();
	}
	
	/**
	 * 	Update NewSub with the passed value
	 *	@param number
	 */
	public void setNewSub(int number)  throws CFException{
		work.setNewSub(number);
	}


	public void setNewSub(long number)  throws CFException{
		work.setNewSub((int)number);
	}


	/**
	 *	Returns the value of genericTransl
	 *	@return genericTransl
	 */
	public long getGenericTransl(int index) throws CFException {
   		return genTransSpiTableGroup.getGenTransSpiTableR().getTableItem(index).getGenericTransl();
	}


	/**
	 *	Returns String value of genericTransl
	 *	@return genericTransl
	 */
	public char[]  getGenericTranslString(int index) throws CFException {
	     return String.valueOf(genTransSpiTableGroup.getGenTransSpiTableR().getTableItem(index).getGenericTranslString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean genericTranslIsNumeric(int index)  throws CFException{
	    return genTransSpiTableGroup.getGenTransSpiTableR().getTableItem(index - 1).genericTranslIsNumeric();
	}

	/**
	 * 	Update GenericTransl with the passed value
	 *	@param number
	 */
	public void setGenericTransl(int index,long number)  throws CFException{
		genTransSpiTableGroup.getGenTransSpiTableR().getTableItem(index).setGenericTransl(number);
	}
	

	
	/**
	 * 	Update GenericTransl with the passed value
	 *	@param value (String or char[])
	 */
	public void setGenericTransl(int index,char[] value)  throws CFException {
		genTransSpiTableGroup.getGenTransSpiTableR().getTableItem(index).setGenericTransl(value);
	}
	
	/**
	 * 	Update GenericTransl with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setGenericTranslString(int index,char[] value)  throws CFException{
		genTransSpiTableGroup.getGenTransSpiTableR().getTableItem(index).setGenericTransl(value);
	}	

	/**
	 *	Returns the value of nbrOfPlanVar
	 *	@return nbrOfPlanVar
	 */
	public int getNbrOfPlanVar() throws CFException {        
   		return workFields.getNbrOfPlanVar();
	}
	
	/**
	 * 	Update NbrOfPlanVar with the passed value
	 *	@param number
	 */
	public void setNbrOfPlanVar(int number)  throws CFException{
		workFields.setNbrOfPlanVar(number);
	}


	public void setNbrOfPlanVar(long number)  throws CFException{
		workFields.setNbrOfPlanVar((int)number);
	}


	/**
	 *	Returns the value of genSub
	 *	@return genSub
	 */
	public int getGenSub() throws CFException {        
   		return work.getGenSub();
	}
	
	/**
	 * 	Update GenSub with the passed value
	 *	@param number
	 */
	public void setGenSub(int number)  throws CFException{
		work.setGenSub(number);
	}


	public void setGenSub(long number)  throws CFException{
		work.setGenSub((int)number);
	}


	/**
	 *	Returns the value of uPolicyNo51
	 *	@return uPolicyNo51
	 */
   public char[] getUPolicyNo51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUPolicyNo51();
   }

  
	/**
	*  set variable uPolicyNo51
	*  @param value
	**/
   public void setUPolicyNo51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(value);
   } 

     /**
	 * 	Update UPolicyNo51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUPolicyNo51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex);
   	
   }
   
   public void setUPolicyNo51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UPolicyNo51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUPolicyNo51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UPolicyNo51 with another Field
	 *	@param value
	 */
   public void setUPolicyNo51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source);
   }  
   
     /**
	 * 	Update UPolicyNo51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUPolicyNo51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UPolicyNo51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUPolicyNo51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public GenericTranslationOutCtx getGenericTranslationOutCtx() {
            return new GenericTranslationOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
        str += genTransSpiTableGroup.hashCode();
       return str.hashCode();
    }

    public GenericTranslationInCtx clone() {
        GenericTranslationInCtx cloneObj = new GenericTranslationInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.genTransSpiTableGroup = new GenTransSpiTableGroup();
        cloneObj.genTransSpiTableGroup.set(genTransSpiTableGroup.getClonedField());
        return cloneObj;
    }

    }

    public GenericTranslationInCtx getGenericTranslationInCtx() {
            return new GenericTranslationInCtx();
    }
     public class GenericTranslationOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     GenTransSpiTableGroup genTransSpiTableGroup = O529351uCtx.this.getGenTransSpiTableGroup();

	/**
	 *	Returns the value of fesaPolicy01
	 *	@return fesaPolicy01
	 */
   public char[] getFesaPolicy01(int index) throws CFException  {              
   		return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaPolicy01();
   }

  
	/**
	*  set variable fesaPolicy01
	*  @param value
	**/
   public void setFesaPolicy01(int index,char[] value) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(value);
   } 

     /**
	 * 	Update FesaPolicy01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaPolicy01(int index,char[] source, int sourceIndex) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex);
   	
   }
   
   public void setFesaPolicy01(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaPolicy01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy01(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaPolicy01 with another Field
	 *	@param value
	 */
   public void setFesaPolicy01(int index,Field source) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source);
   }  
   
     /**
	 * 	Update FesaPolicy01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaPolicy01(int index,Field source, int sourceIndex,int sourceLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaPolicy01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy01(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


public void setUTrnslNdx51(int uTrnslNdx51) { 
    O529351uCtx.this.uTrnslNdx51 = uTrnslNdx51;
}

public int getUTrnslNdx51() { 
    return O529351uCtx.this.uTrnslNdx51;
}
	/**
	 *	Returns the value of genericTransl
	 *	@return genericTransl
	 */
	public long getGenericTransl(int index) throws CFException {
   		return genTransSpiTableGroup.getGenTransSpiTableR().getTableItem(index).getGenericTransl();
	}


	/**
	 *	Returns String value of genericTransl
	 *	@return genericTransl
	 */
	public char[]  getGenericTranslString(int index) throws CFException {
	     return String.valueOf(genTransSpiTableGroup.getGenTransSpiTableR().getTableItem(index).getGenericTranslString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean genericTranslIsNumeric(int index)  throws CFException{
	    return genTransSpiTableGroup.getGenTransSpiTableR().getTableItem(index - 1).genericTranslIsNumeric();
	}

	/**
	 * 	Update GenericTransl with the passed value
	 *	@param number
	 */
	public void setGenericTransl(int index,long number)  throws CFException{
		genTransSpiTableGroup.getGenTransSpiTableR().getTableItem(index).setGenericTransl(number);
	}
	

	
	/**
	 * 	Update GenericTransl with the passed value
	 *	@param value (String or char[])
	 */
	public void setGenericTransl(int index,char[] value)  throws CFException {
		genTransSpiTableGroup.getGenTransSpiTableR().getTableItem(index).setGenericTransl(value);
	}
	
	/**
	 * 	Update GenericTransl with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setGenericTranslString(int index,char[] value)  throws CFException{
		genTransSpiTableGroup.getGenTransSpiTableR().getTableItem(index).setGenericTransl(value);
	}	

public int getFesaPlanVar01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaPlanVar01();
}
	/**
	 * 	Update FesaPlanVar01 with the passed value
	 *	@param number
	 */
	public void setFesaPlanVar01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPlanVar01(number);
	}


	public void setFesaPlanVar01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPlanVar01(number);
	}
	

	/**
	 *	Returns the value of genSub
	 *	@return genSub
	 */
	public int getGenSub() throws CFException {        
   		return work.getGenSub();
	}
	
	/**
	 * 	Update GenSub with the passed value
	 *	@param number
	 */
	public void setGenSub(int number)  throws CFException{
		work.setGenSub(number);
	}


	public void setGenSub(long number)  throws CFException{
		work.setGenSub((int)number);
	}


public int getFesaEffDate01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaEffDate01();
}
	/**
	 * 	Update FesaEffDate01 with the passed value
	 *	@param number
	 */
	public void setFesaEffDate01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaEffDate01(number);
	}


	public void setFesaEffDate01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaEffDate01(number);
	}
	

	/**
	 *	Returns the value of uPolicyNo51
	 *	@return uPolicyNo51
	 */
   public char[] getUPolicyNo51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUPolicyNo51();
   }

  
	/**
	*  set variable uPolicyNo51
	*  @param value
	**/
   public void setUPolicyNo51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(value);
   } 

     /**
	 * 	Update UPolicyNo51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUPolicyNo51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex);
   	
   }
   
   public void setUPolicyNo51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UPolicyNo51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUPolicyNo51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UPolicyNo51 with another Field
	 *	@param value
	 */
   public void setUPolicyNo51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source);
   }  
   
     /**
	 * 	Update UPolicyNo51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUPolicyNo51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UPolicyNo51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUPolicyNo51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


public void setGenNdx(int genNdx) { 
    O529351uCtx.this.genNdx = genNdx;
}

public int getGenNdx() { 
    return O529351uCtx.this.genNdx;
}
	/**
	 *	Returns the value of uPlanVar51
	 *	@return uPlanVar51
	 */
	public short getUPlanVar51() throws CFException {        
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUPlanVar51();
	}
	
	/**
	 * 	Update UPlanVar51 with the passed value
	 *	@param number
	 */
	public void setUPlanVar51(short number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51(number);
	}

	public void setUPlanVar51(int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51((short)number);
	}

	public void setUPlanVar51(long number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51((short)number);
	}



	/**
	 *	Returns the value of newSub
	 *	@return newSub
	 */
	public int getNewSub() throws CFException {        
   		return work.getNewSub();
	}
	
	/**
	 * 	Update NewSub with the passed value
	 *	@param number
	 */
	public void setNewSub(int number)  throws CFException{
		work.setNewSub(number);
	}


	public void setNewSub(long number)  throws CFException{
		work.setNewSub((int)number);
	}


	/**
	 *	Returns the value of planVarFoundSw
	 *	@return planVarFoundSw
	 */
   public char[] getPlanVarFoundSw() throws CFException  {              
   		return work.getPlanVarFoundSw();
   }

  
	/**
	*  set variable planVarFoundSw
	*  @param value
	**/
   public void setPlanVarFoundSw(char[] value) throws CFException {
      work.setPlanVarFoundSw(value);
   } 

	/**
	 *	Returns the value of nbrOfPlanVar
	 *	@return nbrOfPlanVar
	 */
	public int getNbrOfPlanVar() throws CFException {        
   		return workFields.getNbrOfPlanVar();
	}
	
	/**
	 * 	Update NbrOfPlanVar with the passed value
	 *	@param number
	 */
	public void setNbrOfPlanVar(int number)  throws CFException{
		workFields.setNbrOfPlanVar(number);
	}


	public void setNbrOfPlanVar(long number)  throws CFException{
		workFields.setNbrOfPlanVar((int)number);
	}


public int getFesaSpiNbr01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiNbr01();
}
	/**
	 * 	Update FesaSpiNbr01 with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}


	public void setFesaSpiNbr01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}
	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
        str += genTransSpiTableGroup.hashCode();
       return str.hashCode();
    }

    public GenericTranslationOutCtx clone() {
        GenericTranslationOutCtx cloneObj = new GenericTranslationOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.genTransSpiTableGroup = new GenTransSpiTableGroup();
        cloneObj.genTransSpiTableGroup.set(genTransSpiTableGroup.getClonedField());
        return cloneObj;
    }

    }

    public GenericTranslationOutCtx getGenericTranslationOutCtx() {
            return new GenericTranslationOutCtx();
    }
     public class StartBrowsePlanvaraInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     FeSpiAltPlanRecord feSpiAltPlanRecord = O529351uCtx.this.getFeSpiAltPlanRecord();
     CetCicsErrorTableGroup cetCicsErrorTableGroup = O529351uCtx.this.getCetCicsErrorTableGroup();

	/**
	 *	Returns the value of ddPlanvara
	 *	@return ddPlanvara
	 */
   public char[] getDdPlanvara() throws CFException  {              
   		return work.getDdPlanvara();
   }

  
	/**
	*  set variable ddPlanvara
	*  @param value
	**/
   public void setDdPlanvara(char[] value) throws CFException {
      work.setDdPlanvara(value);
   } 

	/**
	 *	Returns the value of fesaKey
	 *	@return fesaKey
	 */   
	 public FesaKey getFesaKey() {
   	return feSpiAltPlanRecord.getFesaKey();
   }

   /**
	* 	Update FesaKey with the passed value
	*	@param value
	*/
   public void setFesaKey(char[] value) throws CFException {
      feSpiAltPlanRecord.setFesaKey(value);
   }   

     /**
	 * 	Update FesaKey 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setFesaKey(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	feSpiAltPlanRecord.setFesaKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaKey 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	feSpiAltPlanRecord.setFesaKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaKey with another Field
	 *	@param value
	 */
   public void setFesaKey(Field source) {
   	feSpiAltPlanRecord.setFesaKey(source);
   }  
   
     /**
	 * 	Update FesaKey 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setFesaKey(Field source, int sourceIndex,int sourceLen) {
   	feSpiAltPlanRecord.setFesaKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	feSpiAltPlanRecord.setFesaKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public StartBrowsePlanvaraOutCtx getStartBrowsePlanvaraOutCtx() {
            return new StartBrowsePlanvaraOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += feSpiAltPlanRecord.hashCode();
        str += cetCicsErrorTableGroup.hashCode();
       return str.hashCode();
    }

    public StartBrowsePlanvaraInCtx clone() {
        StartBrowsePlanvaraInCtx cloneObj = new StartBrowsePlanvaraInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.feSpiAltPlanRecord = new FeSpiAltPlanRecord();
        cloneObj.feSpiAltPlanRecord.set(feSpiAltPlanRecord.getClonedField());
        cloneObj.cetCicsErrorTableGroup = new CetCicsErrorTableGroup();
        cloneObj.cetCicsErrorTableGroup.set(cetCicsErrorTableGroup.getClonedField());
        return cloneObj;
    }

    }

    public StartBrowsePlanvaraInCtx getStartBrowsePlanvaraInCtx() {
            return new StartBrowsePlanvaraInCtx();
    }
     public class StartBrowsePlanvaraOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     FeSpiAltPlanRecord feSpiAltPlanRecord = O529351uCtx.this.getFeSpiAltPlanRecord();
     CetCicsErrorTableGroup cetCicsErrorTableGroup = O529351uCtx.this.getCetCicsErrorTableGroup();

	/**
	 *	Returns the value of dfhb0020
	 *	@return dfhb0020
	 */
	public int getDfhb0020() throws CFException {        
   		return work.getDfhb0020();
	}
	
	/**
	 * 	Update Dfhb0020 with the passed value
	 *	@param number
	 */
	public void setDfhb0020(int number)  throws CFException{
		work.setDfhb0020(number);
	}


	public void setDfhb0020(long number)  throws CFException{
		work.setDfhb0020((int)number);
	}


	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}


	/**
	 *	Returns the value of cetEibrcd
	 *	@return cetEibrcd
	 */
   public char[] getCetEibrcd() throws CFException  {              
   		return cetCicsErrorTableGroup.getCetCicsErrorTable().getCetEibrcd();
   }

  
	/**
	*  set variable cetEibrcd
	*  @param value
	**/
   public void setCetEibrcd(char[] value) throws CFException {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(value);
   } 

     /**
	 * 	Update CetEibrcd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCetEibrcd(char[] source, int sourceIndex) throws CFException {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex);
   	
   }
   
   public void setCetEibrcd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CetEibrcd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCetEibrcd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CetEibrcd with another Field
	 *	@param value
	 */
   public void setCetEibrcd(Field source) {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source);
   }  
   
     /**
	 * 	Update CetEibrcd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCetEibrcd(Field source, int sourceIndex,int sourceLen) {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CetEibrcd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCetEibrcd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += feSpiAltPlanRecord.hashCode();
        str += cetCicsErrorTableGroup.hashCode();
       return str.hashCode();
    }

    public StartBrowsePlanvaraOutCtx clone() {
        StartBrowsePlanvaraOutCtx cloneObj = new StartBrowsePlanvaraOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.feSpiAltPlanRecord = new FeSpiAltPlanRecord();
        cloneObj.feSpiAltPlanRecord.set(feSpiAltPlanRecord.getClonedField());
        cloneObj.cetCicsErrorTableGroup = new CetCicsErrorTableGroup();
        cloneObj.cetCicsErrorTableGroup.set(cetCicsErrorTableGroup.getClonedField());
        return cloneObj;
    }

    }

    public StartBrowsePlanvaraOutCtx getStartBrowsePlanvaraOutCtx() {
            return new StartBrowsePlanvaraOutCtx();
    }
     public class ReadNextPlanvaraInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     FeSpiAltPlanRecord feSpiAltPlanRecord = O529351uCtx.this.getFeSpiAltPlanRecord();
     CetCicsErrorTableGroup cetCicsErrorTableGroup = O529351uCtx.this.getCetCicsErrorTableGroup();

	/**
	 *	Returns the value of feSpiAltPlanRecord
	 *	@return feSpiAltPlanRecord
	 */   
	 public FeSpiAltPlanRecord getFeSpiAltPlanRecord() {
   	return feSpiAltPlanRecord;
   }


	/**
	 *	Returns the value of ddPlanvara
	 *	@return ddPlanvara
	 */
   public char[] getDdPlanvara() throws CFException  {              
   		return work.getDdPlanvara();
   }

  
	/**
	*  set variable ddPlanvara
	*  @param value
	**/
   public void setDdPlanvara(char[] value) throws CFException {
      work.setDdPlanvara(value);
   } 

	/**
	 *	Returns the value of fesaKey
	 *	@return fesaKey
	 */   
	 public FesaKey getFesaKey() {
   	return feSpiAltPlanRecord.getFesaKey();
   }

   /**
	* 	Update FesaKey with the passed value
	*	@param value
	*/
   public void setFesaKey(char[] value) throws CFException {
      feSpiAltPlanRecord.setFesaKey(value);
   }   

     /**
	 * 	Update FesaKey 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setFesaKey(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	feSpiAltPlanRecord.setFesaKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaKey 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	feSpiAltPlanRecord.setFesaKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaKey with another Field
	 *	@param value
	 */
   public void setFesaKey(Field source) {
   	feSpiAltPlanRecord.setFesaKey(source);
   }  
   
     /**
	 * 	Update FesaKey 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setFesaKey(Field source, int sourceIndex,int sourceLen) {
   	feSpiAltPlanRecord.setFesaKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	feSpiAltPlanRecord.setFesaKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public ReadNextPlanvaraOutCtx getReadNextPlanvaraOutCtx() {
            return new ReadNextPlanvaraOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += feSpiAltPlanRecord.hashCode();
        str += cetCicsErrorTableGroup.hashCode();
       return str.hashCode();
    }

    public ReadNextPlanvaraInCtx clone() {
        ReadNextPlanvaraInCtx cloneObj = new ReadNextPlanvaraInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.feSpiAltPlanRecord = new FeSpiAltPlanRecord();
        cloneObj.feSpiAltPlanRecord.set(feSpiAltPlanRecord.getClonedField());
        cloneObj.cetCicsErrorTableGroup = new CetCicsErrorTableGroup();
        cloneObj.cetCicsErrorTableGroup.set(cetCicsErrorTableGroup.getClonedField());
        return cloneObj;
    }

    }

    public ReadNextPlanvaraInCtx getReadNextPlanvaraInCtx() {
            return new ReadNextPlanvaraInCtx();
    }
     public class ReadNextPlanvaraOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     FeSpiAltPlanRecord feSpiAltPlanRecord = O529351uCtx.this.getFeSpiAltPlanRecord();
     CetCicsErrorTableGroup cetCicsErrorTableGroup = O529351uCtx.this.getCetCicsErrorTableGroup();

	/**
	 *	Returns the value of dfhb0020
	 *	@return dfhb0020
	 */
	public int getDfhb0020() throws CFException {        
   		return work.getDfhb0020();
	}
	
	/**
	 * 	Update Dfhb0020 with the passed value
	 *	@param number
	 */
	public void setDfhb0020(int number)  throws CFException{
		work.setDfhb0020(number);
	}


	public void setDfhb0020(long number)  throws CFException{
		work.setDfhb0020((int)number);
	}


	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}


	/**
	 *	Returns the value of cetEibrcd
	 *	@return cetEibrcd
	 */
   public char[] getCetEibrcd() throws CFException  {              
   		return cetCicsErrorTableGroup.getCetCicsErrorTable().getCetEibrcd();
   }

  
	/**
	*  set variable cetEibrcd
	*  @param value
	**/
   public void setCetEibrcd(char[] value) throws CFException {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(value);
   } 

     /**
	 * 	Update CetEibrcd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCetEibrcd(char[] source, int sourceIndex) throws CFException {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex);
   	
   }
   
   public void setCetEibrcd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CetEibrcd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCetEibrcd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CetEibrcd with another Field
	 *	@param value
	 */
   public void setCetEibrcd(Field source) {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source);
   }  
   
     /**
	 * 	Update CetEibrcd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCetEibrcd(Field source, int sourceIndex,int sourceLen) {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CetEibrcd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCetEibrcd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dfhb0021
	 *	@return dfhb0021
	 */
	public int getDfhb0021() throws CFException {        
   		return work.getDfhb0021();
	}
	
	/**
	 * 	Update Dfhb0021 with the passed value
	 *	@param number
	 */
	public void setDfhb0021(int number)  throws CFException{
		work.setDfhb0021(number);
	}


	public void setDfhb0021(long number)  throws CFException{
		work.setDfhb0021((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += feSpiAltPlanRecord.hashCode();
        str += cetCicsErrorTableGroup.hashCode();
       return str.hashCode();
    }

    public ReadNextPlanvaraOutCtx clone() {
        ReadNextPlanvaraOutCtx cloneObj = new ReadNextPlanvaraOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.feSpiAltPlanRecord = new FeSpiAltPlanRecord();
        cloneObj.feSpiAltPlanRecord.set(feSpiAltPlanRecord.getClonedField());
        cloneObj.cetCicsErrorTableGroup = new CetCicsErrorTableGroup();
        cloneObj.cetCicsErrorTableGroup.set(cetCicsErrorTableGroup.getClonedField());
        return cloneObj;
    }

    }

    public ReadNextPlanvaraOutCtx getReadNextPlanvaraOutCtx() {
            return new ReadNextPlanvaraOutCtx();
    }
     public class EndBrowsePlanvaraInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();

	/**
	 *	Returns the value of ddPlanvara
	 *	@return ddPlanvara
	 */
   public char[] getDdPlanvara() throws CFException  {              
   		return work.getDdPlanvara();
   }

  
	/**
	*  set variable ddPlanvara
	*  @param value
	**/
   public void setDdPlanvara(char[] value) throws CFException {
      work.setDdPlanvara(value);
   } 


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public EndBrowsePlanvaraOutCtx getEndBrowsePlanvaraOutCtx() {
            return new EndBrowsePlanvaraOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
       return str.hashCode();
    }

    public EndBrowsePlanvaraInCtx clone() {
        EndBrowsePlanvaraInCtx cloneObj = new EndBrowsePlanvaraInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public EndBrowsePlanvaraInCtx getEndBrowsePlanvaraInCtx() {
            return new EndBrowsePlanvaraInCtx();
    }
     public class EndBrowsePlanvaraOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();

	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
       return str.hashCode();
    }

    public EndBrowsePlanvaraOutCtx clone() {
        EndBrowsePlanvaraOutCtx cloneObj = new EndBrowsePlanvaraOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public EndBrowsePlanvaraOutCtx getEndBrowsePlanvaraOutCtx() {
            return new EndBrowsePlanvaraOutCtx();
    }
     public class BuildPlanAltTableInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     FeSpiAltPlanRecord feSpiAltPlanRecord = O529351uCtx.this.getFeSpiAltPlanRecord();
     FesaKey1 fesaKey1 = O529351uCtx.this.getFesaKey1();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     W02FnuLineReadnext w02FnuLineReadnext = O529351uCtx.this.getW02FnuLineReadnext();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

public int getFesaSpiNbr() throws CFException {  
        return feSpiAltPlanRecord.getFesaKey().getFesaSpiNbr();
}
	/**
	 * 	Update FesaSpiNbr with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr(int number)  throws CFException{
		feSpiAltPlanRecord.getFesaKey().setFesaSpiNbr(number);
	}


	public void setFesaSpiNbr(long number)  throws CFException{
	    feSpiAltPlanRecord.getFesaKey().setFesaSpiNbr(number);
	}
	

public int getFesaPlanVar() throws CFException {  
        return feSpiAltPlanRecord.getFesaKey().getFesaPlanVar();
}
	/**
	 * 	Update FesaPlanVar with the passed value
	 *	@param number
	 */
	public void setFesaPlanVar(int number)  throws CFException{
		feSpiAltPlanRecord.getFesaKey().setFesaPlanVar(number);
	}


	public void setFesaPlanVar(long number)  throws CFException{
	    feSpiAltPlanRecord.getFesaKey().setFesaPlanVar(number);
	}
	

	/**
	 *	Returns the value of planDosYy
	 *	@return planDosYy
	 */
	public int getPlanDosYy() throws CFException {
   		return workFields.getPlanDosDt().getPlanDosYy();
	}


	/**
	 *	Returns String value of planDosYy
	 *	@return planDosYy
	 */
	public char[]  getPlanDosYyString() throws CFException {
	     return String.valueOf(workFields.getPlanDosDt().getPlanDosYyString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDosYyIsNumeric()  throws CFException{
	    return workFields.getPlanDosDt().planDosYyIsNumeric();
	}

	/**
	 * 	Update PlanDosYy with the passed value
	 *	@param number
	 */
	public void setPlanDosYy(int number)  throws CFException{
		workFields.getPlanDosDt().setPlanDosYy(number);
	}
	

	public void setPlanDosYy(long number)  throws CFException{
	    workFields.getPlanDosDt().setPlanDosYy(number);
	}
	
	
	/**
	 * 	Update PlanDosYy with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDosYy(char[] value)  throws CFException {
		workFields.getPlanDosDt().setPlanDosYy(value);
	}
	
	/**
	 * 	Update PlanDosYy with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDosYyString(char[] value)  throws CFException{
		workFields.getPlanDosDt().setPlanDosYy(value);
	}	

	/**
	 *	Test condition 20 for isCicsEndfile()
	 *	@return  Returns true if isCicsEndfile() is 20
	 */
   public boolean isCicsEndfile() throws CFException {
      return work.isCicsEndfile();
   }

	/**
	*  set values 20
	*/
   	public void setCicsEndfileTrue()  throws CFException{  			
    	work.setCicsEndfileTrue();
   	}
	/**
	 *	Returns the value of planEffDate
	 *	@return planEffDate
	 */
	public long getPlanEffDate() throws CFException {
   		return workFields.getPlanEffDate();
	}


	/**
	 *	Returns String value of planEffDate
	 *	@return planEffDate
	 */
	public char[]  getPlanEffDateString() throws CFException {
	     return String.valueOf(workFields.getPlanEffDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planEffDateIsNumeric()  throws CFException{
	    return workFields.planEffDateIsNumeric();
	}

	/**
	 * 	Update PlanEffDate with the passed value
	 *	@param number
	 */
	public void setPlanEffDate(long number)  throws CFException{
		workFields.setPlanEffDate(number);
	}
	

	
	/**
	 * 	Update PlanEffDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanEffDate(char[] value)  throws CFException {
		workFields.setPlanEffDate(value);
	}
	
	/**
	 * 	Update PlanEffDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanEffDateString(char[] value)  throws CFException{
		workFields.setPlanEffDate(value);
	}	

	/**
	 *	Returns the value of fesaKey1
	 *	@return fesaKey1
	 */   
	 public FesaKey1 getFesaKey1() {
   	return fesaKey1;
   }


	/**
	 *	Returns the value of fesaPolicy
	 *	@return fesaPolicy
	 */
   public char[] getFesaPolicy() throws CFException  {              
   		return feSpiAltPlanRecord.getFesaKey().getFesaPolicy();
   }

  
	/**
	*  set variable fesaPolicy
	*  @param value
	**/
   public void setFesaPolicy(char[] value) throws CFException {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(value);
   } 

     /**
	 * 	Update FesaPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaPolicy(char[] source, int sourceIndex) throws CFException {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex);
   	
   }
   
   public void setFesaPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaPolicy with another Field
	 *	@param value
	 */
   public void setFesaPolicy(Field source) {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source);
   }  
   
     /**
	 * 	Update FesaPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaPolicy(Field source, int sourceIndex,int sourceLen) {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getFesaCanDt() throws CFException {  
        return feSpiAltPlanRecord.getFesaCanDt();
}
	/**
	 * 	Update FesaCanDt with the passed value
	 *	@param number
	 */
	public void setFesaCanDt(int number)  throws CFException{
		feSpiAltPlanRecord.setFesaCanDt(number);
	}


	public void setFesaCanDt(long number)  throws CFException{
	    feSpiAltPlanRecord.setFesaCanDt(number);
	}
	

	/**
	 *	Returns the value of planDosDd
	 *	@return planDosDd
	 */
	public int getPlanDosDd() throws CFException {
   		return workFields.getPlanDosDt().getPlanDosDd();
	}


	/**
	 *	Returns String value of planDosDd
	 *	@return planDosDd
	 */
	public char[]  getPlanDosDdString() throws CFException {
	     return String.valueOf(workFields.getPlanDosDt().getPlanDosDdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDosDdIsNumeric()  throws CFException{
	    return workFields.getPlanDosDt().planDosDdIsNumeric();
	}

	/**
	 * 	Update PlanDosDd with the passed value
	 *	@param number
	 */
	public void setPlanDosDd(int number)  throws CFException{
		workFields.getPlanDosDt().setPlanDosDd(number);
	}
	

	public void setPlanDosDd(long number)  throws CFException{
	    workFields.getPlanDosDt().setPlanDosDd(number);
	}
	
	
	/**
	 * 	Update PlanDosDd with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDosDd(char[] value)  throws CFException {
		workFields.getPlanDosDt().setPlanDosDd(value);
	}
	
	/**
	 * 	Update PlanDosDd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDosDdString(char[] value)  throws CFException{
		workFields.getPlanDosDt().setPlanDosDd(value);
	}	

	/**
	 *	Returns the value of planDate
	 *	@return planDate
	 */
	public long getPlanDate() throws CFException {
   		return workFields.getPlanDate();
	}


	/**
	 *	Returns String value of planDate
	 *	@return planDate
	 */
	public char[]  getPlanDateString() throws CFException {
	     return String.valueOf(workFields.getPlanDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDateIsNumeric()  throws CFException{
	    return workFields.planDateIsNumeric();
	}

	/**
	 * 	Update PlanDate with the passed value
	 *	@param number
	 */
	public void setPlanDate(long number)  throws CFException{
		workFields.setPlanDate(number);
	}
	

	
	/**
	 * 	Update PlanDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDate(char[] value)  throws CFException {
		workFields.setPlanDate(value);
	}
	
	/**
	 * 	Update PlanDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDateString(char[] value)  throws CFException{
		workFields.setPlanDate(value);
	}	

	/**
	 *	Returns the value of w02FnuLineReadnext
	 *	@return w02FnuLineReadnext
	 */   
	 public W02FnuLineReadnext getW02FnuLineReadnext() {
   	return w02FnuLineReadnext;
   }


public int getFesaEffDate() throws CFException {  
        return feSpiAltPlanRecord.getFesaKey().getFesaEffDate();
}
	/**
	 * 	Update FesaEffDate with the passed value
	 *	@param number
	 */
	public void setFesaEffDate(int number)  throws CFException{
		feSpiAltPlanRecord.getFesaKey().setFesaEffDate(number);
	}


	public void setFesaEffDate(long number)  throws CFException{
	    feSpiAltPlanRecord.getFesaKey().setFesaEffDate(number);
	}
	

public int getULineDosDate51(int index) throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineDosDate51();
}
	/**
	 * 	Update ULineDosDate51 with the passed value
	 *	@param number
	 */
	public void setULineDosDate51(int index,int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDosDate51(number);
	}


	public void setULineDosDate51(int index,long number)  throws CFException{
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDosDate51(number);
	}
	

	/**
	 *	Test condition 4 for isCicsEof()
	 *	@return  Returns true if isCicsEof() is 4
	 */
   public boolean isCicsEof() throws CFException {
      return work.isCicsEof();
   }

	/**
	*  set values 4
	*/
   	public void setCicsEofTrue()  throws CFException{  			
    	work.setCicsEofTrue();
   	}
	/**
	 *	Returns the value of polNo
	 *	@return polNo
	 */
   public char[] getPolNo() throws CFException  {              
   		return workFields.getPolNo();
   }

  
	/**
	*  set variable polNo
	*  @param value
	**/
   public void setPolNo(char[] value) throws CFException {
      workFields.setPolNo(value);
   } 

     /**
	 * 	Update PolNo 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPolNo(char[] source, int sourceIndex) throws CFException {
      workFields.setPolNo(source, sourceIndex);
   	
   }
   
   public void setPolNo(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setPolNo(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PolNo 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPolNo(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setPolNo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PolNo with another Field
	 *	@param value
	 */
   public void setPolNo(Field source) {
      workFields.setPolNo(source);
   }  
   
     /**
	 * 	Update PolNo 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPolNo(Field source, int sourceIndex,int sourceLen) {
      workFields.setPolNo(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PolNo 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPolNo(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setPolNo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of planCanDate
	 *	@return planCanDate
	 */
	public long getPlanCanDate() throws CFException {
   		return workFields.getPlanCanDate();
	}


	/**
	 *	Returns String value of planCanDate
	 *	@return planCanDate
	 */
	public char[]  getPlanCanDateString() throws CFException {
	     return String.valueOf(workFields.getPlanCanDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planCanDateIsNumeric()  throws CFException{
	    return workFields.planCanDateIsNumeric();
	}

	/**
	 * 	Update PlanCanDate with the passed value
	 *	@param number
	 */
	public void setPlanCanDate(long number)  throws CFException{
		workFields.setPlanCanDate(number);
	}
	

	
	/**
	 * 	Update PlanCanDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanCanDate(char[] value)  throws CFException {
		workFields.setPlanCanDate(value);
	}
	
	/**
	 * 	Update PlanCanDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanCanDateString(char[] value)  throws CFException{
		workFields.setPlanCanDate(value);
	}	

	/**
	 *	Returns the value of nbrOfPlanVar
	 *	@return nbrOfPlanVar
	 */
	public int getNbrOfPlanVar() throws CFException {        
   		return workFields.getNbrOfPlanVar();
	}
	
	/**
	 * 	Update NbrOfPlanVar with the passed value
	 *	@param number
	 */
	public void setNbrOfPlanVar(int number)  throws CFException{
		workFields.setNbrOfPlanVar(number);
	}


	public void setNbrOfPlanVar(long number)  throws CFException{
		workFields.setNbrOfPlanVar((int)number);
	}


	/**
	 *	Returns the value of planDosMm
	 *	@return planDosMm
	 */
	public int getPlanDosMm() throws CFException {
   		return workFields.getPlanDosDt().getPlanDosMm();
	}


	/**
	 *	Returns String value of planDosMm
	 *	@return planDosMm
	 */
	public char[]  getPlanDosMmString() throws CFException {
	     return String.valueOf(workFields.getPlanDosDt().getPlanDosMmString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDosMmIsNumeric()  throws CFException{
	    return workFields.getPlanDosDt().planDosMmIsNumeric();
	}

	/**
	 * 	Update PlanDosMm with the passed value
	 *	@param number
	 */
	public void setPlanDosMm(int number)  throws CFException{
		workFields.getPlanDosDt().setPlanDosMm(number);
	}
	

	public void setPlanDosMm(long number)  throws CFException{
	    workFields.getPlanDosDt().setPlanDosMm(number);
	}
	
	
	/**
	 * 	Update PlanDosMm with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDosMm(char[] value)  throws CFException {
		workFields.getPlanDosDt().setPlanDosMm(value);
	}
	
	/**
	 * 	Update PlanDosMm with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDosMmString(char[] value)  throws CFException{
		workFields.getPlanDosDt().setPlanDosMm(value);
	}	

	/**
	 *	Returns the value of ddPlanvara
	 *	@return ddPlanvara
	 */
   public char[] getDdPlanvara() throws CFException  {              
   		return work.getDdPlanvara();
   }

  
	/**
	*  set variable ddPlanvara
	*  @param value
	**/
   public void setDdPlanvara(char[] value) throws CFException {
      work.setDdPlanvara(value);
   } 

	/**
	 *	Returns the value of planVarPrev
	 *	@return planVarPrev
	 */
	public short getPlanVarPrev() throws CFException {        
   		return workFields.getPlanVarPrev();
	}
	
	/**
	 * 	Update PlanVarPrev with the passed value
	 *	@param number
	 */
	public void setPlanVarPrev(short number)  throws CFException{
		workFields.setPlanVarPrev(number);
	}

	public void setPlanVarPrev(int number)  throws CFException{
		workFields.setPlanVarPrev((short)number);
	}

	public void setPlanVarPrev(long number)  throws CFException{
		workFields.setPlanVarPrev((short)number);
	}



	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}


	/**
	 *	Test condition 0 for isCicsNormal()
	 *	@return  Returns true if isCicsNormal() is 0
	 */
   public boolean isCicsNormal() throws CFException {
      return work.isCicsNormal();
   }

	/**
	*  set values 0
	*/
   	public void setCicsNormalTrue()  throws CFException{  			
    	work.setCicsNormalTrue();
   	}
	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}


	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public BuildPlanAltTableOutCtx getBuildPlanAltTableOutCtx() {
            return new BuildPlanAltTableOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += feSpiAltPlanRecord.hashCode();
        str += fesaKey1.hashCode();
        str += workFields.hashCode();
        str += w02FnuLineReadnext.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public BuildPlanAltTableInCtx clone() {
        BuildPlanAltTableInCtx cloneObj = new BuildPlanAltTableInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.feSpiAltPlanRecord = new FeSpiAltPlanRecord();
        cloneObj.feSpiAltPlanRecord.set(feSpiAltPlanRecord.getClonedField());
        cloneObj.fesaKey1 = new FesaKey1();
        cloneObj.fesaKey1.set(fesaKey1.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.w02FnuLineReadnext = new W02FnuLineReadnext();
        cloneObj.w02FnuLineReadnext.set(w02FnuLineReadnext.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public BuildPlanAltTableInCtx getBuildPlanAltTableInCtx() {
            return new BuildPlanAltTableInCtx();
    }
     public class BuildPlanAltTableOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     FeSpiAltPlanRecord feSpiAltPlanRecord = O529351uCtx.this.getFeSpiAltPlanRecord();
     FesaKey1 fesaKey1 = O529351uCtx.this.getFesaKey1();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     W02FnuLineReadnext w02FnuLineReadnext = O529351uCtx.this.getW02FnuLineReadnext();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of fesaPlanVar1
	 *	@return fesaPlanVar1
	 */
	public int getFesaPlanVar1() throws CFException {
   		return fesaKey1.getFesaPlanVar1();
	}

    /**
	 *	Returns the String value of fesaPlanVar1
	 *	@return fesaPlanVar1
	 */
	public char[]  getFesaPlanVar1ActualString() {
		return fesaKey1.getFesaPlanVar1ActualString();
	}

	/**
	 *	Returns String value of fesaPlanVar1
	 *	@return fesaPlanVar1
	 */
	public char[]  getFesaPlanVar1String() throws CFException {
	     return String.valueOf(fesaKey1.getFesaPlanVar1String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean fesaPlanVar1IsNumeric()  throws CFException{
	    return fesaKey1.fesaPlanVar1IsNumeric();
	}

	/**
	 * 	Update FesaPlanVar1 with the passed value
	 *	@param number
	 */
	public void setFesaPlanVar1(int number)  throws CFException{
		fesaKey1.setFesaPlanVar1(number);
	}
	

	public void setFesaPlanVar1(long number)  throws CFException{
	    fesaKey1.setFesaPlanVar1(number);
	}
	
	
	/**
	 * 	Update FesaPlanVar1 with the passed value
	 *	@param value (String or char[])
	 */
	public void setFesaPlanVar1(char[] value)  throws CFException {
		fesaKey1.setFesaPlanVar1(value);
	}
	
	/**
	 * 	Update FesaPlanVar1 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setFesaPlanVar1String(char[] value)  throws CFException{
		fesaKey1.setFesaPlanVar1(value);
	}	

public int getFesaCanDt() throws CFException {  
        return feSpiAltPlanRecord.getFesaCanDt();
}
	/**
	 * 	Update FesaCanDt with the passed value
	 *	@param number
	 */
	public void setFesaCanDt(int number)  throws CFException{
		feSpiAltPlanRecord.setFesaCanDt(number);
	}


	public void setFesaCanDt(long number)  throws CFException{
	    feSpiAltPlanRecord.setFesaCanDt(number);
	}
	

	/**
	 *	Returns the value of planDosDd
	 *	@return planDosDd
	 */
	public int getPlanDosDd() throws CFException {
   		return workFields.getPlanDosDt().getPlanDosDd();
	}


	/**
	 *	Returns String value of planDosDd
	 *	@return planDosDd
	 */
	public char[]  getPlanDosDdString() throws CFException {
	     return String.valueOf(workFields.getPlanDosDt().getPlanDosDdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDosDdIsNumeric()  throws CFException{
	    return workFields.getPlanDosDt().planDosDdIsNumeric();
	}

	/**
	 * 	Update PlanDosDd with the passed value
	 *	@param number
	 */
	public void setPlanDosDd(int number)  throws CFException{
		workFields.getPlanDosDt().setPlanDosDd(number);
	}
	

	public void setPlanDosDd(long number)  throws CFException{
	    workFields.getPlanDosDt().setPlanDosDd(number);
	}
	
	
	/**
	 * 	Update PlanDosDd with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDosDd(char[] value)  throws CFException {
		workFields.getPlanDosDt().setPlanDosDd(value);
	}
	
	/**
	 * 	Update PlanDosDd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDosDdString(char[] value)  throws CFException{
		workFields.getPlanDosDt().setPlanDosDd(value);
	}	

public int getFesaEffDate01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaEffDate01();
}
	/**
	 * 	Update FesaEffDate01 with the passed value
	 *	@param number
	 */
	public void setFesaEffDate01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaEffDate01(number);
	}


	public void setFesaEffDate01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaEffDate01(number);
	}
	

	/**
	 *	Returns the value of planYy
	 *	@return planYy
	 */
	public int getPlanYy() throws CFException {
   		return workFields.getPlanDt().getPlanYy();
	}


	/**
	 *	Returns String value of planYy
	 *	@return planYy
	 */
	public char[]  getPlanYyString() throws CFException {
	     return String.valueOf(workFields.getPlanDt().getPlanYyString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planYyIsNumeric()  throws CFException{
	    return workFields.getPlanDt().planYyIsNumeric();
	}

	/**
	 * 	Update PlanYy with the passed value
	 *	@param number
	 */
	public void setPlanYy(int number)  throws CFException{
		workFields.getPlanDt().setPlanYy(number);
	}
	

	public void setPlanYy(long number)  throws CFException{
	    workFields.getPlanDt().setPlanYy(number);
	}
	
	
	/**
	 * 	Update PlanYy with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanYy(char[] value)  throws CFException {
		workFields.getPlanDt().setPlanYy(value);
	}
	
	/**
	 * 	Update PlanYy with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanYyString(char[] value)  throws CFException{
		workFields.getPlanDt().setPlanYy(value);
	}	

public int getULineDosDate51(int index) throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineDosDate51();
}
	/**
	 * 	Update ULineDosDate51 with the passed value
	 *	@param number
	 */
	public void setULineDosDate51(int index,int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDosDate51(number);
	}


	public void setULineDosDate51(int index,long number)  throws CFException{
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDosDate51(number);
	}
	

	/**
	 *	Returns the value of planCanDate
	 *	@return planCanDate
	 */
	public long getPlanCanDate() throws CFException {
   		return workFields.getPlanCanDate();
	}


	/**
	 *	Returns String value of planCanDate
	 *	@return planCanDate
	 */
	public char[]  getPlanCanDateString() throws CFException {
	     return String.valueOf(workFields.getPlanCanDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planCanDateIsNumeric()  throws CFException{
	    return workFields.planCanDateIsNumeric();
	}

	/**
	 * 	Update PlanCanDate with the passed value
	 *	@param number
	 */
	public void setPlanCanDate(long number)  throws CFException{
		workFields.setPlanCanDate(number);
	}
	

	
	/**
	 * 	Update PlanCanDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanCanDate(char[] value)  throws CFException {
		workFields.setPlanCanDate(value);
	}
	
	/**
	 * 	Update PlanCanDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanCanDateString(char[] value)  throws CFException{
		workFields.setPlanCanDate(value);
	}	

	/**
	 *	Returns the value of planVarFoundSw
	 *	@return planVarFoundSw
	 */
   public char[] getPlanVarFoundSw() throws CFException  {              
   		return work.getPlanVarFoundSw();
   }

  
	/**
	*  set variable planVarFoundSw
	*  @param value
	**/
   public void setPlanVarFoundSw(char[] value) throws CFException {
      work.setPlanVarFoundSw(value);
   } 

	/**
	 *	Test condition "I" for isM51uIllogicalCond()
	 *	@return  Returns true if isM51uIllogicalCond() is "I"
	 */
   public boolean isM51uIllogicalCond() throws CFException {
      return dfhcommarea.getLinkAreaM51u().getM51uFlags().isM51uIllogicalCond();
   }

	/**
	*  set values "I"
	*/
   	public void setM51uIllogicalCondTrue()  throws CFException{  			
    	dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondTrue();
   	}
	/**
	 *	Returns the value of planDosMm
	 *	@return planDosMm
	 */
	public int getPlanDosMm() throws CFException {
   		return workFields.getPlanDosDt().getPlanDosMm();
	}


	/**
	 *	Returns String value of planDosMm
	 *	@return planDosMm
	 */
	public char[]  getPlanDosMmString() throws CFException {
	     return String.valueOf(workFields.getPlanDosDt().getPlanDosMmString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDosMmIsNumeric()  throws CFException{
	    return workFields.getPlanDosDt().planDosMmIsNumeric();
	}

	/**
	 * 	Update PlanDosMm with the passed value
	 *	@param number
	 */
	public void setPlanDosMm(int number)  throws CFException{
		workFields.getPlanDosDt().setPlanDosMm(number);
	}
	

	public void setPlanDosMm(long number)  throws CFException{
	    workFields.getPlanDosDt().setPlanDosMm(number);
	}
	
	
	/**
	 * 	Update PlanDosMm with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDosMm(char[] value)  throws CFException {
		workFields.getPlanDosDt().setPlanDosMm(value);
	}
	
	/**
	 * 	Update PlanDosMm with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDosMmString(char[] value)  throws CFException{
		workFields.getPlanDosDt().setPlanDosMm(value);
	}	

public int getFesaSpiNbr01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiNbr01();
}
	/**
	 * 	Update FesaSpiNbr01 with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}


	public void setFesaSpiNbr01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}
	

	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}


	/**
	 *	Returns the value of fesaPolicy01
	 *	@return fesaPolicy01
	 */
   public char[] getFesaPolicy01(int index) throws CFException  {              
   		return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaPolicy01();
   }

  
	/**
	*  set variable fesaPolicy01
	*  @param value
	**/
   public void setFesaPolicy01(int index,char[] value) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(value);
   } 

     /**
	 * 	Update FesaPolicy01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaPolicy01(int index,char[] source, int sourceIndex) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex);
   	
   }
   
   public void setFesaPolicy01(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaPolicy01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy01(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaPolicy01 with another Field
	 *	@param value
	 */
   public void setFesaPolicy01(int index,Field source) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source);
   }  
   
     /**
	 * 	Update FesaPolicy01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaPolicy01(int index,Field source, int sourceIndex,int sourceLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaPolicy01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy01(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02FnuFileRdnxt
	 *	@return w02FnuFileRdnxt
	 */
   public char[] getW02FnuFileRdnxt() throws CFException  {              
   		return w02FnuLineReadnext.getW02FnuFileRdnxt();
   }

  
	/**
	*  set variable w02FnuFileRdnxt
	*  @param value
	**/
   public void setW02FnuFileRdnxt(char[] value) throws CFException {
      w02FnuLineReadnext.setW02FnuFileRdnxt(value);
   } 

     /**
	 * 	Update W02FnuFileRdnxt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02FnuFileRdnxt(char[] source, int sourceIndex) throws CFException {
      w02FnuLineReadnext.setW02FnuFileRdnxt(source, sourceIndex);
   	
   }
   
   public void setW02FnuFileRdnxt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02FnuLineReadnext.setW02FnuFileRdnxt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02FnuFileRdnxt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuFileRdnxt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineReadnext.setW02FnuFileRdnxt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02FnuFileRdnxt with another Field
	 *	@param value
	 */
   public void setW02FnuFileRdnxt(Field source) {
      w02FnuLineReadnext.setW02FnuFileRdnxt(source);
   }  
   
     /**
	 * 	Update W02FnuFileRdnxt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02FnuFileRdnxt(Field source, int sourceIndex,int sourceLen) {
      w02FnuLineReadnext.setW02FnuFileRdnxt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02FnuFileRdnxt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuFileRdnxt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineReadnext.setW02FnuFileRdnxt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getFesaSpiNbr() throws CFException {  
        return feSpiAltPlanRecord.getFesaKey().getFesaSpiNbr();
}
	/**
	 * 	Update FesaSpiNbr with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr(int number)  throws CFException{
		feSpiAltPlanRecord.getFesaKey().setFesaSpiNbr(number);
	}


	public void setFesaSpiNbr(long number)  throws CFException{
	    feSpiAltPlanRecord.getFesaKey().setFesaSpiNbr(number);
	}
	

	/**
	 *	Returns the value of w02DsplMsg
	 *	@return w02DsplMsg
	 */
   public char[] getW02DsplMsg() throws CFException  {              
   		return w02DsplMsgArea.getW02DsplMsg();
   }

  
	/**
	*  set variable w02DsplMsg
	*  @param value
	**/
   public void setW02DsplMsg(char[] value) throws CFException {
      w02DsplMsgArea.setW02DsplMsg(value);
   } 

     /**
	 * 	Update W02DsplMsg 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02DsplMsg(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex);
   	
   }
   
   public void setW02DsplMsg(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02DsplMsg 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplMsg(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02DsplMsg with another Field
	 *	@param value
	 */
   public void setW02DsplMsg(Field source) {
      w02DsplMsgArea.setW02DsplMsg(source);
   }  
   
     /**
	 * 	Update W02DsplMsg 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02DsplMsg(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02DsplMsg 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplMsg(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of endOfPlanAlt
	 *	@return endOfPlanAlt
	 */
   public char[] getEndOfPlanAlt() throws CFException  {              
   		return work.getEndOfPlanAlt();
   }

  
	/**
	*  set variable endOfPlanAlt
	*  @param value
	**/
   public void setEndOfPlanAlt(char[] value) throws CFException {
      work.setEndOfPlanAlt(value);
   } 

	/**
	 *	Returns the value of planDosDate
	 *	@return planDosDate
	 */
	public long getPlanDosDate() throws CFException {
   		return workFields.getPlanDosDate();
	}


	/**
	 *	Returns String value of planDosDate
	 *	@return planDosDate
	 */
	public char[]  getPlanDosDateString() throws CFException {
	     return String.valueOf(workFields.getPlanDosDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDosDateIsNumeric()  throws CFException{
	    return workFields.planDosDateIsNumeric();
	}

	/**
	 * 	Update PlanDosDate with the passed value
	 *	@param number
	 */
	public void setPlanDosDate(long number)  throws CFException{
		workFields.setPlanDosDate(number);
	}
	

	
	/**
	 * 	Update PlanDosDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDosDate(char[] value)  throws CFException {
		workFields.setPlanDosDate(value);
	}
	
	/**
	 * 	Update PlanDosDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDosDateString(char[] value)  throws CFException{
		workFields.setPlanDosDate(value);
	}	

public int getFesaPlanVar() throws CFException {  
        return feSpiAltPlanRecord.getFesaKey().getFesaPlanVar();
}
	/**
	 * 	Update FesaPlanVar with the passed value
	 *	@param number
	 */
	public void setFesaPlanVar(int number)  throws CFException{
		feSpiAltPlanRecord.getFesaKey().setFesaPlanVar(number);
	}


	public void setFesaPlanVar(long number)  throws CFException{
	    feSpiAltPlanRecord.getFesaKey().setFesaPlanVar(number);
	}
	

	/**
	 *	Returns the value of planDosYy
	 *	@return planDosYy
	 */
	public int getPlanDosYy() throws CFException {
   		return workFields.getPlanDosDt().getPlanDosYy();
	}


	/**
	 *	Returns String value of planDosYy
	 *	@return planDosYy
	 */
	public char[]  getPlanDosYyString() throws CFException {
	     return String.valueOf(workFields.getPlanDosDt().getPlanDosYyString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDosYyIsNumeric()  throws CFException{
	    return workFields.getPlanDosDt().planDosYyIsNumeric();
	}

	/**
	 * 	Update PlanDosYy with the passed value
	 *	@param number
	 */
	public void setPlanDosYy(int number)  throws CFException{
		workFields.getPlanDosDt().setPlanDosYy(number);
	}
	

	public void setPlanDosYy(long number)  throws CFException{
	    workFields.getPlanDosDt().setPlanDosYy(number);
	}
	
	
	/**
	 * 	Update PlanDosYy with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDosYy(char[] value)  throws CFException {
		workFields.getPlanDosDt().setPlanDosYy(value);
	}
	
	/**
	 * 	Update PlanDosYy with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDosYyString(char[] value)  throws CFException{
		workFields.getPlanDosDt().setPlanDosYy(value);
	}	

	/**
	 *	Returns the value of planEffDate
	 *	@return planEffDate
	 */
	public long getPlanEffDate() throws CFException {
   		return workFields.getPlanEffDate();
	}


	/**
	 *	Returns String value of planEffDate
	 *	@return planEffDate
	 */
	public char[]  getPlanEffDateString() throws CFException {
	     return String.valueOf(workFields.getPlanEffDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planEffDateIsNumeric()  throws CFException{
	    return workFields.planEffDateIsNumeric();
	}

	/**
	 * 	Update PlanEffDate with the passed value
	 *	@param number
	 */
	public void setPlanEffDate(long number)  throws CFException{
		workFields.setPlanEffDate(number);
	}
	

	
	/**
	 * 	Update PlanEffDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanEffDate(char[] value)  throws CFException {
		workFields.setPlanEffDate(value);
	}
	
	/**
	 * 	Update PlanEffDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanEffDateString(char[] value)  throws CFException{
		workFields.setPlanEffDate(value);
	}	

	/**
	 *	Returns the value of fesaKey1
	 *	@return fesaKey1
	 */   
	 public FesaKey1 getFesaKey1() {
   	return fesaKey1;
   }


	/**
	 *	Returns the value of fesaPolicy
	 *	@return fesaPolicy
	 */
   public char[] getFesaPolicy() throws CFException  {              
   		return feSpiAltPlanRecord.getFesaKey().getFesaPolicy();
   }

  
	/**
	*  set variable fesaPolicy
	*  @param value
	**/
   public void setFesaPolicy(char[] value) throws CFException {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(value);
   } 

     /**
	 * 	Update FesaPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaPolicy(char[] source, int sourceIndex) throws CFException {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex);
   	
   }
   
   public void setFesaPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaPolicy with another Field
	 *	@param value
	 */
   public void setFesaPolicy(Field source) {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source);
   }  
   
     /**
	 * 	Update FesaPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaPolicy(Field source, int sourceIndex,int sourceLen) {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02DsplErrInd
	 *	@return w02DsplErrInd
	 */
   public char[] getW02DsplErrInd() throws CFException  {              
   		return w02DsplMsgArea.getW02DsplErrInd();
   }

  
	/**
	*  set variable w02DsplErrInd
	*  @param value
	**/
   public void setW02DsplErrInd(char[] value) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(value);
   } 

     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex);
   	
   }
   
   public void setW02DsplErrInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02DsplErrInd with another Field
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source) {
      w02DsplMsgArea.setW02DsplErrInd(source);
   }  
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getFesaPlanVar01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaPlanVar01();
}
	/**
	 * 	Update FesaPlanVar01 with the passed value
	 *	@param number
	 */
	public void setFesaPlanVar01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPlanVar01(number);
	}


	public void setFesaPlanVar01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPlanVar01(number);
	}
	

	/**
	 *	Returns the value of planDd
	 *	@return planDd
	 */
	public int getPlanDd() throws CFException {
   		return workFields.getPlanDt().getPlanDd();
	}


	/**
	 *	Returns String value of planDd
	 *	@return planDd
	 */
	public char[]  getPlanDdString() throws CFException {
	     return String.valueOf(workFields.getPlanDt().getPlanDdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDdIsNumeric()  throws CFException{
	    return workFields.getPlanDt().planDdIsNumeric();
	}

	/**
	 * 	Update PlanDd with the passed value
	 *	@param number
	 */
	public void setPlanDd(int number)  throws CFException{
		workFields.getPlanDt().setPlanDd(number);
	}
	

	public void setPlanDd(long number)  throws CFException{
	    workFields.getPlanDt().setPlanDd(number);
	}
	
	
	/**
	 * 	Update PlanDd with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDd(char[] value)  throws CFException {
		workFields.getPlanDt().setPlanDd(value);
	}
	
	/**
	 * 	Update PlanDd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDdString(char[] value)  throws CFException{
		workFields.getPlanDt().setPlanDd(value);
	}	

	/**
	 *	Returns the value of w02FnuLineReadnext
	 *	@return w02FnuLineReadnext
	 */   
	 public W02FnuLineReadnext getW02FnuLineReadnext() {
   	return w02FnuLineReadnext;
   }


	/**
	 *	Returns the value of fesaPolicy1
	 *	@return fesaPolicy1
	 */
   public char[] getFesaPolicy1() throws CFException  {              
   		return fesaKey1.getFesaPolicy1();
   }

  
	/**
	*  set variable fesaPolicy1
	*  @param value
	**/
   public void setFesaPolicy1(char[] value) throws CFException {
      fesaKey1.setFesaPolicy1(value);
   } 

     /**
	 * 	Update FesaPolicy1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaPolicy1(char[] source, int sourceIndex) throws CFException {
      fesaKey1.setFesaPolicy1(source, sourceIndex);
   	
   }
   
   public void setFesaPolicy1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      fesaKey1.setFesaPolicy1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaPolicy1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      fesaKey1.setFesaPolicy1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaPolicy1 with another Field
	 *	@param value
	 */
   public void setFesaPolicy1(Field source) {
      fesaKey1.setFesaPolicy1(source);
   }  
   
     /**
	 * 	Update FesaPolicy1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaPolicy1(Field source, int sourceIndex,int sourceLen) {
      fesaKey1.setFesaPolicy1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaPolicy1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      fesaKey1.setFesaPolicy1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02FnuKeyRdnxt
	 *	@return w02FnuKeyRdnxt
	 */
   public char[] getW02FnuKeyRdnxt() throws CFException  {              
   		return w02FnuLineReadnext.getW02FnuKeyRdnxt();
   }

  
	/**
	*  set variable w02FnuKeyRdnxt
	*  @param value
	**/
   public void setW02FnuKeyRdnxt(char[] value) throws CFException {
      w02FnuLineReadnext.setW02FnuKeyRdnxt(value);
   } 

     /**
	 * 	Update W02FnuKeyRdnxt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02FnuKeyRdnxt(char[] source, int sourceIndex) throws CFException {
      w02FnuLineReadnext.setW02FnuKeyRdnxt(source, sourceIndex);
   	
   }
   
   public void setW02FnuKeyRdnxt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02FnuLineReadnext.setW02FnuKeyRdnxt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02FnuKeyRdnxt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuKeyRdnxt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineReadnext.setW02FnuKeyRdnxt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02FnuKeyRdnxt with another Field
	 *	@param value
	 */
   public void setW02FnuKeyRdnxt(Field source) {
      w02FnuLineReadnext.setW02FnuKeyRdnxt(source);
   }  
   
     /**
	 * 	Update W02FnuKeyRdnxt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02FnuKeyRdnxt(Field source, int sourceIndex,int sourceLen) {
      w02FnuLineReadnext.setW02FnuKeyRdnxt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02FnuKeyRdnxt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuKeyRdnxt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineReadnext.setW02FnuKeyRdnxt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getFesaEffDate() throws CFException {  
        return feSpiAltPlanRecord.getFesaKey().getFesaEffDate();
}
	/**
	 * 	Update FesaEffDate with the passed value
	 *	@param number
	 */
	public void setFesaEffDate(int number)  throws CFException{
		feSpiAltPlanRecord.getFesaKey().setFesaEffDate(number);
	}


	public void setFesaEffDate(long number)  throws CFException{
	    feSpiAltPlanRecord.getFesaKey().setFesaEffDate(number);
	}
	

	/**
	 *	Returns the value of planMm
	 *	@return planMm
	 */
	public int getPlanMm() throws CFException {
   		return workFields.getPlanDt().getPlanMm();
	}


	/**
	 *	Returns String value of planMm
	 *	@return planMm
	 */
	public char[]  getPlanMmString() throws CFException {
	     return String.valueOf(workFields.getPlanDt().getPlanMmString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planMmIsNumeric()  throws CFException{
	    return workFields.getPlanDt().planMmIsNumeric();
	}

	/**
	 * 	Update PlanMm with the passed value
	 *	@param number
	 */
	public void setPlanMm(int number)  throws CFException{
		workFields.getPlanDt().setPlanMm(number);
	}
	

	public void setPlanMm(long number)  throws CFException{
	    workFields.getPlanDt().setPlanMm(number);
	}
	
	
	/**
	 * 	Update PlanMm with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanMm(char[] value)  throws CFException {
		workFields.getPlanDt().setPlanMm(value);
	}
	
	/**
	 * 	Update PlanMm with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanMmString(char[] value)  throws CFException{
		workFields.getPlanDt().setPlanMm(value);
	}	

	/**
	 *	Returns the value of fesaEffDate1
	 *	@return fesaEffDate1
	 */
	public int getFesaEffDate1() throws CFException {
   		return fesaKey1.getFesaEffDate1();
	}

    /**
	 *	Returns the String value of fesaEffDate1
	 *	@return fesaEffDate1
	 */
	public char[]  getFesaEffDate1ActualString() {
		return fesaKey1.getFesaEffDate1ActualString();
	}

	/**
	 *	Returns String value of fesaEffDate1
	 *	@return fesaEffDate1
	 */
	public char[]  getFesaEffDate1String() throws CFException {
	     return String.valueOf(fesaKey1.getFesaEffDate1String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean fesaEffDate1IsNumeric()  throws CFException{
	    return fesaKey1.fesaEffDate1IsNumeric();
	}

	/**
	 * 	Update FesaEffDate1 with the passed value
	 *	@param number
	 */
	public void setFesaEffDate1(int number)  throws CFException{
		fesaKey1.setFesaEffDate1(number);
	}
	

	public void setFesaEffDate1(long number)  throws CFException{
	    fesaKey1.setFesaEffDate1(number);
	}
	
	
	/**
	 * 	Update FesaEffDate1 with the passed value
	 *	@param value (String or char[])
	 */
	public void setFesaEffDate1(char[] value)  throws CFException {
		fesaKey1.setFesaEffDate1(value);
	}
	
	/**
	 * 	Update FesaEffDate1 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setFesaEffDate1String(char[] value)  throws CFException{
		fesaKey1.setFesaEffDate1(value);
	}	

	/**
	 *	Returns the value of fesaSpiNbr1
	 *	@return fesaSpiNbr1
	 */
	public int getFesaSpiNbr1() throws CFException {
   		return fesaKey1.getFesaSpiNbr1();
	}

    /**
	 *	Returns the String value of fesaSpiNbr1
	 *	@return fesaSpiNbr1
	 */
	public char[]  getFesaSpiNbr1ActualString() {
		return fesaKey1.getFesaSpiNbr1ActualString();
	}

	/**
	 *	Returns String value of fesaSpiNbr1
	 *	@return fesaSpiNbr1
	 */
	public char[]  getFesaSpiNbr1String() throws CFException {
	     return String.valueOf(fesaKey1.getFesaSpiNbr1String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean fesaSpiNbr1IsNumeric()  throws CFException{
	    return fesaKey1.fesaSpiNbr1IsNumeric();
	}

	/**
	 * 	Update FesaSpiNbr1 with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr1(int number)  throws CFException{
		fesaKey1.setFesaSpiNbr1(number);
	}
	

	public void setFesaSpiNbr1(long number)  throws CFException{
	    fesaKey1.setFesaSpiNbr1(number);
	}
	
	
	/**
	 * 	Update FesaSpiNbr1 with the passed value
	 *	@param value (String or char[])
	 */
	public void setFesaSpiNbr1(char[] value)  throws CFException {
		fesaKey1.setFesaSpiNbr1(value);
	}
	
	/**
	 * 	Update FesaSpiNbr1 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setFesaSpiNbr1String(char[] value)  throws CFException{
		fesaKey1.setFesaSpiNbr1(value);
	}	

	/**
	 *	Returns the value of nbrOfPlanVar
	 *	@return nbrOfPlanVar
	 */
	public int getNbrOfPlanVar() throws CFException {        
   		return workFields.getNbrOfPlanVar();
	}
	
	/**
	 * 	Update NbrOfPlanVar with the passed value
	 *	@param number
	 */
	public void setNbrOfPlanVar(int number)  throws CFException{
		workFields.setNbrOfPlanVar(number);
	}


	public void setNbrOfPlanVar(long number)  throws CFException{
		workFields.setNbrOfPlanVar((int)number);
	}


	/**
	 *	Returns the value of ddPlanvara
	 *	@return ddPlanvara
	 */
   public char[] getDdPlanvara() throws CFException  {              
   		return work.getDdPlanvara();
   }

  
	/**
	*  set variable ddPlanvara
	*  @param value
	**/
   public void setDdPlanvara(char[] value) throws CFException {
      work.setDdPlanvara(value);
   } 

	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}


	/**
	 *	Returns the value of w02RespCd
	 *	@return w02RespCd
	 */
	public long getW02RespCd() throws CFException {
   		return w02DsplMsgArea.getW02RespCd();
	}


	/**
	 *	Returns String value of w02RespCd
	 *	@return w02RespCd
	 */
	public char[]  getW02RespCdString() throws CFException {
	     return String.valueOf(w02DsplMsgArea.getW02RespCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean w02RespCdIsNumeric()  throws CFException{
	    return w02DsplMsgArea.w02RespCdIsNumeric();
	}

	/**
	 * 	Update W02RespCd with the passed value
	 *	@param number
	 */
	public void setW02RespCd(long number)  throws CFException{
		w02DsplMsgArea.setW02RespCd(number);
	}
	

	
	/**
	 * 	Update W02RespCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setW02RespCd(char[] value)  throws CFException {
		w02DsplMsgArea.setW02RespCd(value);
	}
	
	/**
	 * 	Update W02RespCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setW02RespCdString(char[] value)  throws CFException{
		w02DsplMsgArea.setW02RespCd(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += feSpiAltPlanRecord.hashCode();
        str += fesaKey1.hashCode();
        str += workFields.hashCode();
        str += w02FnuLineReadnext.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public BuildPlanAltTableOutCtx clone() {
        BuildPlanAltTableOutCtx cloneObj = new BuildPlanAltTableOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.feSpiAltPlanRecord = new FeSpiAltPlanRecord();
        cloneObj.feSpiAltPlanRecord.set(feSpiAltPlanRecord.getClonedField());
        cloneObj.fesaKey1 = new FesaKey1();
        cloneObj.fesaKey1.set(fesaKey1.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.w02FnuLineReadnext = new W02FnuLineReadnext();
        cloneObj.w02FnuLineReadnext.set(w02FnuLineReadnext.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public BuildPlanAltTableOutCtx getBuildPlanAltTableOutCtx() {
            return new BuildPlanAltTableOutCtx();
    }
     public class AddCenturyToDatesInCtx implements Cloneable {
     FeSpiAltPlanRecord feSpiAltPlanRecord = O529351uCtx.this.getFeSpiAltPlanRecord();
     WorkFields workFields = O529351uCtx.this.getWorkFields();

public int getFesaEffDate() throws CFException {  
        return feSpiAltPlanRecord.getFesaKey().getFesaEffDate();
}
	/**
	 * 	Update FesaEffDate with the passed value
	 *	@param number
	 */
	public void setFesaEffDate(int number)  throws CFException{
		feSpiAltPlanRecord.getFesaKey().setFesaEffDate(number);
	}


	public void setFesaEffDate(long number)  throws CFException{
	    feSpiAltPlanRecord.getFesaKey().setFesaEffDate(number);
	}
	

	/**
	 *	Returns the value of planDosDate
	 *	@return planDosDate
	 */
	public long getPlanDosDate() throws CFException {
   		return workFields.getPlanDosDate();
	}


	/**
	 *	Returns String value of planDosDate
	 *	@return planDosDate
	 */
	public char[]  getPlanDosDateString() throws CFException {
	     return String.valueOf(workFields.getPlanDosDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDosDateIsNumeric()  throws CFException{
	    return workFields.planDosDateIsNumeric();
	}

	/**
	 * 	Update PlanDosDate with the passed value
	 *	@param number
	 */
	public void setPlanDosDate(long number)  throws CFException{
		workFields.setPlanDosDate(number);
	}
	

	
	/**
	 * 	Update PlanDosDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDosDate(char[] value)  throws CFException {
		workFields.setPlanDosDate(value);
	}
	
	/**
	 * 	Update PlanDosDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDosDateString(char[] value)  throws CFException{
		workFields.setPlanDosDate(value);
	}	

	/**
	 *	Returns the value of planEffYy
	 *	@return planEffYy
	 */
	public int getPlanEffYy() throws CFException {
   		return workFields.getPlanEffDt().getPlanEffYy();
	}


	/**
	 *	Returns String value of planEffYy
	 *	@return planEffYy
	 */
	public char[]  getPlanEffYyString() throws CFException {
	     return String.valueOf(workFields.getPlanEffDt().getPlanEffYyString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planEffYyIsNumeric()  throws CFException{
	    return workFields.getPlanEffDt().planEffYyIsNumeric();
	}

	/**
	 * 	Update PlanEffYy with the passed value
	 *	@param number
	 */
	public void setPlanEffYy(int number)  throws CFException{
		workFields.getPlanEffDt().setPlanEffYy(number);
	}
	

	public void setPlanEffYy(long number)  throws CFException{
	    workFields.getPlanEffDt().setPlanEffYy(number);
	}
	
	
	/**
	 * 	Update PlanEffYy with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanEffYy(char[] value)  throws CFException {
		workFields.getPlanEffDt().setPlanEffYy(value);
	}
	
	/**
	 * 	Update PlanEffYy with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanEffYyString(char[] value)  throws CFException{
		workFields.getPlanEffDt().setPlanEffYy(value);
	}	

public int getFesaCanDt() throws CFException {  
        return feSpiAltPlanRecord.getFesaCanDt();
}
	/**
	 * 	Update FesaCanDt with the passed value
	 *	@param number
	 */
	public void setFesaCanDt(int number)  throws CFException{
		feSpiAltPlanRecord.setFesaCanDt(number);
	}


	public void setFesaCanDt(long number)  throws CFException{
	    feSpiAltPlanRecord.setFesaCanDt(number);
	}
	

	/**
	 *	Returns the value of planCanYy
	 *	@return planCanYy
	 */
	public int getPlanCanYy() throws CFException {
   		return workFields.getPlanCanDt().getPlanCanYy();
	}


	/**
	 *	Returns String value of planCanYy
	 *	@return planCanYy
	 */
	public char[]  getPlanCanYyString() throws CFException {
	     return String.valueOf(workFields.getPlanCanDt().getPlanCanYyString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planCanYyIsNumeric()  throws CFException{
	    return workFields.getPlanCanDt().planCanYyIsNumeric();
	}

	/**
	 * 	Update PlanCanYy with the passed value
	 *	@param number
	 */
	public void setPlanCanYy(int number)  throws CFException{
		workFields.getPlanCanDt().setPlanCanYy(number);
	}
	

	public void setPlanCanYy(long number)  throws CFException{
	    workFields.getPlanCanDt().setPlanCanYy(number);
	}
	
	
	/**
	 * 	Update PlanCanYy with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanCanYy(char[] value)  throws CFException {
		workFields.getPlanCanDt().setPlanCanYy(value);
	}
	
	/**
	 * 	Update PlanCanYy with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanCanYyString(char[] value)  throws CFException{
		workFields.getPlanCanDt().setPlanCanYy(value);
	}	

	/**
	 *	Returns the value of planYy
	 *	@return planYy
	 */
	public int getPlanYy() throws CFException {
   		return workFields.getPlanDt().getPlanYy();
	}


	/**
	 *	Returns String value of planYy
	 *	@return planYy
	 */
	public char[]  getPlanYyString() throws CFException {
	     return String.valueOf(workFields.getPlanDt().getPlanYyString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planYyIsNumeric()  throws CFException{
	    return workFields.getPlanDt().planYyIsNumeric();
	}

	/**
	 * 	Update PlanYy with the passed value
	 *	@param number
	 */
	public void setPlanYy(int number)  throws CFException{
		workFields.getPlanDt().setPlanYy(number);
	}
	

	public void setPlanYy(long number)  throws CFException{
	    workFields.getPlanDt().setPlanYy(number);
	}
	
	
	/**
	 * 	Update PlanYy with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanYy(char[] value)  throws CFException {
		workFields.getPlanDt().setPlanYy(value);
	}
	
	/**
	 * 	Update PlanYy with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanYyString(char[] value)  throws CFException{
		workFields.getPlanDt().setPlanYy(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public AddCenturyToDatesOutCtx getAddCenturyToDatesOutCtx() {
            return new AddCenturyToDatesOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += feSpiAltPlanRecord.hashCode();
        str += workFields.hashCode();
       return str.hashCode();
    }

    public AddCenturyToDatesInCtx clone() {
        AddCenturyToDatesInCtx cloneObj = new AddCenturyToDatesInCtx();
        cloneObj.feSpiAltPlanRecord = new FeSpiAltPlanRecord();
        cloneObj.feSpiAltPlanRecord.set(feSpiAltPlanRecord.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        return cloneObj;
    }

    }

    public AddCenturyToDatesInCtx getAddCenturyToDatesInCtx() {
            return new AddCenturyToDatesInCtx();
    }
     public class AddCenturyToDatesOutCtx implements Cloneable {
     FeSpiAltPlanRecord feSpiAltPlanRecord = O529351uCtx.this.getFeSpiAltPlanRecord();
     WorkFields workFields = O529351uCtx.this.getWorkFields();

	/**
	 *	Returns the value of planCc
	 *	@return planCc
	 */
	public int getPlanCc() throws CFException {
   		return workFields.getPlanDt().getPlanCc();
	}


	/**
	 *	Returns String value of planCc
	 *	@return planCc
	 */
	public char[]  getPlanCcString() throws CFException {
	     return String.valueOf(workFields.getPlanDt().getPlanCcString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planCcIsNumeric()  throws CFException{
	    return workFields.getPlanDt().planCcIsNumeric();
	}

	/**
	 * 	Update PlanCc with the passed value
	 *	@param number
	 */
	public void setPlanCc(int number)  throws CFException{
		workFields.getPlanDt().setPlanCc(number);
	}
	

	public void setPlanCc(long number)  throws CFException{
	    workFields.getPlanDt().setPlanCc(number);
	}
	
	
	/**
	 * 	Update PlanCc with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanCc(char[] value)  throws CFException {
		workFields.getPlanDt().setPlanCc(value);
	}
	
	/**
	 * 	Update PlanCc with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanCcString(char[] value)  throws CFException{
		workFields.getPlanDt().setPlanCc(value);
	}	

	/**
	 *	Returns the value of planCanCc
	 *	@return planCanCc
	 */
	public int getPlanCanCc() throws CFException {
   		return workFields.getPlanCanDt().getPlanCanCc();
	}


	/**
	 *	Returns String value of planCanCc
	 *	@return planCanCc
	 */
	public char[]  getPlanCanCcString() throws CFException {
	     return String.valueOf(workFields.getPlanCanDt().getPlanCanCcString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planCanCcIsNumeric()  throws CFException{
	    return workFields.getPlanCanDt().planCanCcIsNumeric();
	}

	/**
	 * 	Update PlanCanCc with the passed value
	 *	@param number
	 */
	public void setPlanCanCc(int number)  throws CFException{
		workFields.getPlanCanDt().setPlanCanCc(number);
	}
	

	public void setPlanCanCc(long number)  throws CFException{
	    workFields.getPlanCanDt().setPlanCanCc(number);
	}
	
	
	/**
	 * 	Update PlanCanCc with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanCanCc(char[] value)  throws CFException {
		workFields.getPlanCanDt().setPlanCanCc(value);
	}
	
	/**
	 * 	Update PlanCanCc with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanCanCcString(char[] value)  throws CFException{
		workFields.getPlanCanDt().setPlanCanCc(value);
	}	

	/**
	 *	Returns the value of planEffCc
	 *	@return planEffCc
	 */
	public int getPlanEffCc() throws CFException {
   		return workFields.getPlanEffDt().getPlanEffCc();
	}


	/**
	 *	Returns String value of planEffCc
	 *	@return planEffCc
	 */
	public char[]  getPlanEffCcString() throws CFException {
	     return String.valueOf(workFields.getPlanEffDt().getPlanEffCcString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planEffCcIsNumeric()  throws CFException{
	    return workFields.getPlanEffDt().planEffCcIsNumeric();
	}

	/**
	 * 	Update PlanEffCc with the passed value
	 *	@param number
	 */
	public void setPlanEffCc(int number)  throws CFException{
		workFields.getPlanEffDt().setPlanEffCc(number);
	}
	

	public void setPlanEffCc(long number)  throws CFException{
	    workFields.getPlanEffDt().setPlanEffCc(number);
	}
	
	
	/**
	 * 	Update PlanEffCc with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanEffCc(char[] value)  throws CFException {
		workFields.getPlanEffDt().setPlanEffCc(value);
	}
	
	/**
	 * 	Update PlanEffCc with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanEffCcString(char[] value)  throws CFException{
		workFields.getPlanEffDt().setPlanEffCc(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += feSpiAltPlanRecord.hashCode();
        str += workFields.hashCode();
       return str.hashCode();
    }

    public AddCenturyToDatesOutCtx clone() {
        AddCenturyToDatesOutCtx cloneObj = new AddCenturyToDatesOutCtx();
        cloneObj.feSpiAltPlanRecord = new FeSpiAltPlanRecord();
        cloneObj.feSpiAltPlanRecord.set(feSpiAltPlanRecord.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        return cloneObj;
    }

    }

    public AddCenturyToDatesOutCtx getAddCenturyToDatesOutCtx() {
            return new AddCenturyToDatesOutCtx();
    }
     public class ReadSpiRulesInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     W02FnuLineStartbr w02FnuLineStartbr = O529351uCtx.this.getW02FnuLineStartbr();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     FesrKey fesrKey = O529351uCtx.this.getFesrKey();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of w02FnuLineStartbr
	 *	@return w02FnuLineStartbr
	 */   
	 public W02FnuLineStartbr getW02FnuLineStartbr() {
   	return w02FnuLineStartbr;
   }


	/**
	 *	Test condition 20 for isCicsEndfile()
	 *	@return  Returns true if isCicsEndfile() is 20
	 */
   public boolean isCicsEndfile() throws CFException {
      return work.isCicsEndfile();
   }

	/**
	*  set values 20
	*/
   	public void setCicsEndfileTrue()  throws CFException{  			
    	work.setCicsEndfileTrue();
   	}
	/**
	 *	Returns the value of endOfSpiRule
	 *	@return endOfSpiRule
	 */
   public char[] getEndOfSpiRule() throws CFException  {              
   		return work.getEndOfSpiRule();
   }

  
	/**
	*  set variable endOfSpiRule
	*  @param value
	**/
   public void setEndOfSpiRule(char[] value) throws CFException {
      work.setEndOfSpiRule(value);
   } 

	/**
	 *	Returns the value of ddSpirules
	 *	@return ddSpirules
	 */
   public char[] getDdSpirules() throws CFException  {              
   		return work.getDdSpirules();
   }

  
	/**
	*  set variable ddSpirules
	*  @param value
	**/
   public void setDdSpirules(char[] value) throws CFException {
      work.setDdSpirules(value);
   } 

public int getFesaSpiNbr01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiNbr01();
}
	/**
	 * 	Update FesaSpiNbr01 with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}


	public void setFesaSpiNbr01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}
	

	/**
	 *	Returns the value of fesrKey
	 *	@return fesrKey
	 */   
	 public FesrKey getFesrKey() {
   	return fesrKey;
   }


	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}


	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}


	/**
	 *	Test condition 0 for isCicsNormal()
	 *	@return  Returns true if isCicsNormal() is 0
	 */
   public boolean isCicsNormal() throws CFException {
      return work.isCicsNormal();
   }

	/**
	*  set values 0
	*/
   	public void setCicsNormalTrue()  throws CFException{  			
    	work.setCicsNormalTrue();
   	}
	/**
	 *	Test condition 13 for isCicsNotfnd()
	 *	@return  Returns true if isCicsNotfnd() is 13
	 */
   public boolean isCicsNotfnd() throws CFException {
      return work.isCicsNotfnd();
   }

	/**
	*  set values 13
	*/
   	public void setCicsNotfndTrue()  throws CFException{  			
    	work.setCicsNotfndTrue();
   	}
	/**
	 *	Test condition "Y" for isEndOfSpiRule1()
	 *	@return  Returns true if isEndOfSpiRule1() is "Y"
	 */
   public boolean isEndOfSpiRule1() throws CFException {
      return work.isEndOfSpiRule1();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfSpiRule1True()  throws CFException{  			
    	work.setEndOfSpiRule1True();
   	}

        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public ReadSpiRulesOutCtx getReadSpiRulesOutCtx() {
            return new ReadSpiRulesOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += w02FnuLineStartbr.hashCode();
        str += workFields.hashCode();
        str += fesrKey.hashCode();
        str += dfhcommarea.hashCode();
        str += feSpiRulesRecord.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public ReadSpiRulesInCtx clone() {
        ReadSpiRulesInCtx cloneObj = new ReadSpiRulesInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.w02FnuLineStartbr = new W02FnuLineStartbr();
        cloneObj.w02FnuLineStartbr.set(w02FnuLineStartbr.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.fesrKey = new FesrKey();
        cloneObj.fesrKey.set(fesrKey.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public ReadSpiRulesInCtx getReadSpiRulesInCtx() {
            return new ReadSpiRulesInCtx();
    }
     public class ReadSpiRulesOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     W02FnuLineStartbr w02FnuLineStartbr = O529351uCtx.this.getW02FnuLineStartbr();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     FesrKey fesrKey = O529351uCtx.this.getFesrKey();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of w02DsplMsg
	 *	@return w02DsplMsg
	 */
   public char[] getW02DsplMsg() throws CFException  {              
   		return w02DsplMsgArea.getW02DsplMsg();
   }

  
	/**
	*  set variable w02DsplMsg
	*  @param value
	**/
   public void setW02DsplMsg(char[] value) throws CFException {
      w02DsplMsgArea.setW02DsplMsg(value);
   } 

     /**
	 * 	Update W02DsplMsg 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02DsplMsg(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex);
   	
   }
   
   public void setW02DsplMsg(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02DsplMsg 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplMsg(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02DsplMsg with another Field
	 *	@param value
	 */
   public void setW02DsplMsg(Field source) {
      w02DsplMsgArea.setW02DsplMsg(source);
   }  
   
     /**
	 * 	Update W02DsplMsg 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02DsplMsg(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02DsplMsg 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplMsg(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrToSvc01
	 *	@return fesrToSvc01
	 */
   public char[] getFesrToSvc01() throws CFException  {              
   		return feSpiRulesRecord.getFesrKey01().getFesrToSvc01();
   }

  
	/**
	*  set variable fesrToSvc01
	*  @param value
	**/
   public void setFesrToSvc01(char[] value) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(value);
   } 

     /**
	 * 	Update FesrToSvc01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToSvc01(char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex);
   	
   }
   
   public void setFesrToSvc01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToSvc01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToSvc01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToSvc01 with another Field
	 *	@param value
	 */
   public void setFesrToSvc01(Field source) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source);
   }  
   
     /**
	 * 	Update FesrToSvc01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToSvc01(Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToSvc01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToSvc01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02FnuFileStbr
	 *	@return w02FnuFileStbr
	 */
   public char[] getW02FnuFileStbr() throws CFException  {              
   		return w02FnuLineStartbr.getW02FnuFileStbr();
   }

  
	/**
	*  set variable w02FnuFileStbr
	*  @param value
	**/
   public void setW02FnuFileStbr(char[] value) throws CFException {
      w02FnuLineStartbr.setW02FnuFileStbr(value);
   } 

     /**
	 * 	Update W02FnuFileStbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02FnuFileStbr(char[] source, int sourceIndex) throws CFException {
      w02FnuLineStartbr.setW02FnuFileStbr(source, sourceIndex);
   	
   }
   
   public void setW02FnuFileStbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02FnuLineStartbr.setW02FnuFileStbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02FnuFileStbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuFileStbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineStartbr.setW02FnuFileStbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02FnuFileStbr with another Field
	 *	@param value
	 */
   public void setW02FnuFileStbr(Field source) {
      w02FnuLineStartbr.setW02FnuFileStbr(source);
   }  
   
     /**
	 * 	Update W02FnuFileStbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02FnuFileStbr(Field source, int sourceIndex,int sourceLen) {
      w02FnuLineStartbr.setW02FnuFileStbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02FnuFileStbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuFileStbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineStartbr.setW02FnuFileStbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrToPs01
	 *	@return fesrToPs01
	 */
   public char[] getFesrToPs01() throws CFException  {              
   		return feSpiRulesRecord.getFesrKey01().getFesrToPs01();
   }

  
	/**
	*  set variable fesrToPs01
	*  @param value
	**/
   public void setFesrToPs01(char[] value) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(value);
   } 

     /**
	 * 	Update FesrToPs01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToPs01(char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex);
   	
   }
   
   public void setFesrToPs01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToPs01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToPs01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToPs01 with another Field
	 *	@param value
	 */
   public void setFesrToPs01(Field source) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source);
   }  
   
     /**
	 * 	Update FesrToPs01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToPs01(Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToPs01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToPs01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02FnuKeyStbr
	 *	@return w02FnuKeyStbr
	 */
   public char[] getW02FnuKeyStbr() throws CFException  {              
   		return w02FnuLineStartbr.getW02FnuKeyStbr();
   }

  
	/**
	*  set variable w02FnuKeyStbr
	*  @param value
	**/
   public void setW02FnuKeyStbr(char[] value) throws CFException {
      w02FnuLineStartbr.setW02FnuKeyStbr(value);
   } 

     /**
	 * 	Update W02FnuKeyStbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02FnuKeyStbr(char[] source, int sourceIndex) throws CFException {
      w02FnuLineStartbr.setW02FnuKeyStbr(source, sourceIndex);
   	
   }
   
   public void setW02FnuKeyStbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02FnuLineStartbr.setW02FnuKeyStbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02FnuKeyStbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuKeyStbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineStartbr.setW02FnuKeyStbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02FnuKeyStbr with another Field
	 *	@param value
	 */
   public void setW02FnuKeyStbr(Field source) {
      w02FnuLineStartbr.setW02FnuKeyStbr(source);
   }  
   
     /**
	 * 	Update W02FnuKeyStbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02FnuKeyStbr(Field source, int sourceIndex,int sourceLen) {
      w02FnuLineStartbr.setW02FnuKeyStbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02FnuKeyStbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuKeyStbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineStartbr.setW02FnuKeyStbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrSpiNbr
	 *	@return fesrSpiNbr
	 */
	public int getFesrSpiNbr() throws CFException {
   		return fesrKey.getFesrSpiNbr();
	}

    /**
	 *	Returns the String value of fesrSpiNbr
	 *	@return fesrSpiNbr
	 */
	public char[]  getFesrSpiNbrActualString() {
		return fesrKey.getFesrSpiNbrActualString();
	}

	/**
	 *	Returns String value of fesrSpiNbr
	 *	@return fesrSpiNbr
	 */
	public char[]  getFesrSpiNbrString() throws CFException {
	     return String.valueOf(fesrKey.getFesrSpiNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean fesrSpiNbrIsNumeric()  throws CFException{
	    return fesrKey.fesrSpiNbrIsNumeric();
	}

	/**
	 * 	Update FesrSpiNbr with the passed value
	 *	@param number
	 */
	public void setFesrSpiNbr(int number)  throws CFException{
		fesrKey.setFesrSpiNbr(number);
	}
	

	public void setFesrSpiNbr(long number)  throws CFException{
	    fesrKey.setFesrSpiNbr(number);
	}
	
	
	/**
	 * 	Update FesrSpiNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setFesrSpiNbr(char[] value)  throws CFException {
		fesrKey.setFesrSpiNbr(value);
	}
	
	/**
	 * 	Update FesrSpiNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setFesrSpiNbrString(char[] value)  throws CFException{
		fesrKey.setFesrSpiNbr(value);
	}	

	/**
	 *	Returns the value of w02DsplErrInd
	 *	@return w02DsplErrInd
	 */
   public char[] getW02DsplErrInd() throws CFException  {              
   		return w02DsplMsgArea.getW02DsplErrInd();
   }

  
	/**
	*  set variable w02DsplErrInd
	*  @param value
	**/
   public void setW02DsplErrInd(char[] value) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(value);
   } 

     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex);
   	
   }
   
   public void setW02DsplErrInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02DsplErrInd with another Field
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source) {
      w02DsplMsgArea.setW02DsplErrInd(source);
   }  
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ddSpirules
	 *	@return ddSpirules
	 */
   public char[] getDdSpirules() throws CFException  {              
   		return work.getDdSpirules();
   }

  
	/**
	*  set variable ddSpirules
	*  @param value
	**/
   public void setDdSpirules(char[] value) throws CFException {
      work.setDdSpirules(value);
   } 

	/**
	 *	Returns the value of fesrToSvc
	 *	@return fesrToSvc
	 */
   public char[] getFesrToSvc() throws CFException  {              
   		return fesrKey.getFesrToSvc();
   }

  
	/**
	*  set variable fesrToSvc
	*  @param value
	**/
   public void setFesrToSvc(char[] value) throws CFException {
      fesrKey.setFesrToSvc(value);
   } 

     /**
	 * 	Update FesrToSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToSvc(char[] source, int sourceIndex) throws CFException {
      fesrKey.setFesrToSvc(source, sourceIndex);
   	
   }
   
   public void setFesrToSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      fesrKey.setFesrToSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      fesrKey.setFesrToSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToSvc with another Field
	 *	@param value
	 */
   public void setFesrToSvc(Field source) {
      fesrKey.setFesrToSvc(source);
   }  
   
     /**
	 * 	Update FesrToSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToSvc(Field source, int sourceIndex,int sourceLen) {
      fesrKey.setFesrToSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      fesrKey.setFesrToSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrKey
	 *	@return fesrKey
	 */   
	 public FesrKey getFesrKey() {
   	return fesrKey;
   }


	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of fesrToPs
	 *	@return fesrToPs
	 */
   public char[] getFesrToPs() throws CFException  {              
   		return fesrKey.getFesrToPs();
   }

  
	/**
	*  set variable fesrToPs
	*  @param value
	**/
   public void setFesrToPs(char[] value) throws CFException {
      fesrKey.setFesrToPs(value);
   } 

     /**
	 * 	Update FesrToPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToPs(char[] source, int sourceIndex) throws CFException {
      fesrKey.setFesrToPs(source, sourceIndex);
   	
   }
   
   public void setFesrToPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      fesrKey.setFesrToPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      fesrKey.setFesrToPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToPs with another Field
	 *	@param value
	 */
   public void setFesrToPs(Field source) {
      fesrKey.setFesrToPs(source);
   }  
   
     /**
	 * 	Update FesrToPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToPs(Field source, int sourceIndex,int sourceLen) {
      fesrKey.setFesrToPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      fesrKey.setFesrToPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrToCause01
	 *	@return fesrToCause01
	 */
   public char[] getFesrToCause01() throws CFException  {              
   		return feSpiRulesRecord.getFesrKey01().getFesrToCause01();
   }

  
	/**
	*  set variable fesrToCause01
	*  @param value
	**/
   public void setFesrToCause01(char[] value) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(value);
   } 

     /**
	 * 	Update FesrToCause01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToCause01(char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex);
   	
   }
   
   public void setFesrToCause01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToCause01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToCause01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToCause01 with another Field
	 *	@param value
	 */
   public void setFesrToCause01(Field source) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source);
   }  
   
     /**
	 * 	Update FesrToCause01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToCause01(Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToCause01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToCause01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02FnuLineStartbr
	 *	@return w02FnuLineStartbr
	 */   
	 public W02FnuLineStartbr getW02FnuLineStartbr() {
   	return w02FnuLineStartbr;
   }


	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrToCause
	 *	@return fesrToCause
	 */
   public char[] getFesrToCause() throws CFException  {              
   		return fesrKey.getFesrToCause();
   }

  
	/**
	*  set variable fesrToCause
	*  @param value
	**/
   public void setFesrToCause(char[] value) throws CFException {
      fesrKey.setFesrToCause(value);
   } 

     /**
	 * 	Update FesrToCause 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToCause(char[] source, int sourceIndex) throws CFException {
      fesrKey.setFesrToCause(source, sourceIndex);
   	
   }
   
   public void setFesrToCause(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      fesrKey.setFesrToCause(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToCause 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToCause(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      fesrKey.setFesrToCause(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToCause with another Field
	 *	@param value
	 */
   public void setFesrToCause(Field source) {
      fesrKey.setFesrToCause(source);
   }  
   
     /**
	 * 	Update FesrToCause 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToCause(Field source, int sourceIndex,int sourceLen) {
      fesrKey.setFesrToCause(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToCause 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToCause(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      fesrKey.setFesrToCause(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "I" for isM51uIllogicalCond()
	 *	@return  Returns true if isM51uIllogicalCond() is "I"
	 */
   public boolean isM51uIllogicalCond() throws CFException {
      return dfhcommarea.getLinkAreaM51u().getM51uFlags().isM51uIllogicalCond();
   }

	/**
	*  set values "I"
	*/
   	public void setM51uIllogicalCondTrue()  throws CFException{  			
    	dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondTrue();
   	}
	/**
	 *	Returns the value of endOfSpiRule
	 *	@return endOfSpiRule
	 */
   public char[] getEndOfSpiRule() throws CFException  {              
   		return work.getEndOfSpiRule();
   }

  
	/**
	*  set variable endOfSpiRule
	*  @param value
	**/
   public void setEndOfSpiRule(char[] value) throws CFException {
      work.setEndOfSpiRule(value);
   } 

public int getFesrSpiNbr01() throws CFException {  
        return feSpiRulesRecord.getFesrKey01().getFesrSpiNbr01();
}
	/**
	 * 	Update FesrSpiNbr01 with the passed value
	 *	@param number
	 */
	public void setFesrSpiNbr01(int number)  throws CFException{
		feSpiRulesRecord.getFesrKey01().setFesrSpiNbr01(number);
	}


	public void setFesrSpiNbr01(long number)  throws CFException{
	    feSpiRulesRecord.getFesrKey01().setFesrSpiNbr01(number);
	}
	

public int getFesaSpiNbr01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiNbr01();
}
	/**
	 * 	Update FesaSpiNbr01 with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}


	public void setFesaSpiNbr01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}
	

	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}


	/**
	 *	Returns the value of w02RespCd
	 *	@return w02RespCd
	 */
	public long getW02RespCd() throws CFException {
   		return w02DsplMsgArea.getW02RespCd();
	}


	/**
	 *	Returns String value of w02RespCd
	 *	@return w02RespCd
	 */
	public char[]  getW02RespCdString() throws CFException {
	     return String.valueOf(w02DsplMsgArea.getW02RespCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean w02RespCdIsNumeric()  throws CFException{
	    return w02DsplMsgArea.w02RespCdIsNumeric();
	}

	/**
	 * 	Update W02RespCd with the passed value
	 *	@param number
	 */
	public void setW02RespCd(long number)  throws CFException{
		w02DsplMsgArea.setW02RespCd(number);
	}
	

	
	/**
	 * 	Update W02RespCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setW02RespCd(char[] value)  throws CFException {
		w02DsplMsgArea.setW02RespCd(value);
	}
	
	/**
	 * 	Update W02RespCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setW02RespCdString(char[] value)  throws CFException{
		w02DsplMsgArea.setW02RespCd(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += w02FnuLineStartbr.hashCode();
        str += workFields.hashCode();
        str += fesrKey.hashCode();
        str += dfhcommarea.hashCode();
        str += feSpiRulesRecord.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public ReadSpiRulesOutCtx clone() {
        ReadSpiRulesOutCtx cloneObj = new ReadSpiRulesOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.w02FnuLineStartbr = new W02FnuLineStartbr();
        cloneObj.w02FnuLineStartbr.set(w02FnuLineStartbr.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.fesrKey = new FesrKey();
        cloneObj.fesrKey.set(fesrKey.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public ReadSpiRulesOutCtx getReadSpiRulesOutCtx() {
            return new ReadSpiRulesOutCtx();
    }
     public class TranslateSpiRuleInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     W02FnuLineRead w02FnuLineRead = O529351uCtx.this.getW02FnuLineRead();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     FesrKey fesrKey = O529351uCtx.this.getFesrKey();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of fesrToSvc01
	 *	@return fesrToSvc01
	 */
   public char[] getFesrToSvc01() throws CFException  {              
   		return feSpiRulesRecord.getFesrKey01().getFesrToSvc01();
   }

  
	/**
	*  set variable fesrToSvc01
	*  @param value
	**/
   public void setFesrToSvc01(char[] value) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(value);
   } 

     /**
	 * 	Update FesrToSvc01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToSvc01(char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex);
   	
   }
   
   public void setFesrToSvc01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToSvc01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToSvc01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToSvc01 with another Field
	 *	@param value
	 */
   public void setFesrToSvc01(Field source) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source);
   }  
   
     /**
	 * 	Update FesrToSvc01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToSvc01(Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToSvc01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToSvc01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02FnuLineRead
	 *	@return w02FnuLineRead
	 */   
	 public W02FnuLineRead getW02FnuLineRead() {
   	return w02FnuLineRead;
   }


	/**
	 *	Test condition 20 for isCicsEndfile()
	 *	@return  Returns true if isCicsEndfile() is 20
	 */
   public boolean isCicsEndfile() throws CFException {
      return work.isCicsEndfile();
   }

	/**
	*  set values 20
	*/
   	public void setCicsEndfileTrue()  throws CFException{  			
    	work.setCicsEndfileTrue();
   	}
	/**
	 *	Returns the value of fesrToPs01
	 *	@return fesrToPs01
	 */
   public char[] getFesrToPs01() throws CFException  {              
   		return feSpiRulesRecord.getFesrKey01().getFesrToPs01();
   }

  
	/**
	*  set variable fesrToPs01
	*  @param value
	**/
   public void setFesrToPs01(char[] value) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(value);
   } 

     /**
	 * 	Update FesrToPs01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToPs01(char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex);
   	
   }
   
   public void setFesrToPs01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToPs01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToPs01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToPs01 with another Field
	 *	@param value
	 */
   public void setFesrToPs01(Field source) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source);
   }  
   
     /**
	 * 	Update FesrToPs01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToPs01(Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToPs01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToPs01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ddSpirules
	 *	@return ddSpirules
	 */
   public char[] getDdSpirules() throws CFException  {              
   		return work.getDdSpirules();
   }

  
	/**
	*  set variable ddSpirules
	*  @param value
	**/
   public void setDdSpirules(char[] value) throws CFException {
      work.setDdSpirules(value);
   } 

	/**
	 *	Returns the value of fesrKey
	 *	@return fesrKey
	 */   
	 public FesrKey getFesrKey() {
   	return fesrKey;
   }


	/**
	 *	Returns the value of fesrToCause01
	 *	@return fesrToCause01
	 */
   public char[] getFesrToCause01() throws CFException  {              
   		return feSpiRulesRecord.getFesrKey01().getFesrToCause01();
   }

  
	/**
	*  set variable fesrToCause01
	*  @param value
	**/
   public void setFesrToCause01(char[] value) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(value);
   } 

     /**
	 * 	Update FesrToCause01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToCause01(char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex);
   	
   }
   
   public void setFesrToCause01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToCause01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToCause01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToCause01 with another Field
	 *	@param value
	 */
   public void setFesrToCause01(Field source) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source);
   }  
   
     /**
	 * 	Update FesrToCause01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToCause01(Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToCause01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToCause01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getFesrSpiNbr01() throws CFException {  
        return feSpiRulesRecord.getFesrKey01().getFesrSpiNbr01();
}
	/**
	 * 	Update FesrSpiNbr01 with the passed value
	 *	@param number
	 */
	public void setFesrSpiNbr01(int number)  throws CFException{
		feSpiRulesRecord.getFesrKey01().setFesrSpiNbr01(number);
	}


	public void setFesrSpiNbr01(long number)  throws CFException{
	    feSpiRulesRecord.getFesrKey01().setFesrSpiNbr01(number);
	}
	

	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}


public int getFesaSpiNbr01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiNbr01();
}
	/**
	 * 	Update FesaSpiNbr01 with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}


	public void setFesaSpiNbr01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}
	

	/**
	 *	Test condition 0 for isCicsNormal()
	 *	@return  Returns true if isCicsNormal() is 0
	 */
   public boolean isCicsNormal() throws CFException {
      return work.isCicsNormal();
   }

	/**
	*  set values 0
	*/
   	public void setCicsNormalTrue()  throws CFException{  			
    	work.setCicsNormalTrue();
   	}
	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}


	/**
	 *	Test condition 13 for isCicsNotfnd()
	 *	@return  Returns true if isCicsNotfnd() is 13
	 */
   public boolean isCicsNotfnd() throws CFException {
      return work.isCicsNotfnd();
   }

	/**
	*  set values 13
	*/
   	public void setCicsNotfndTrue()  throws CFException{  			
    	work.setCicsNotfndTrue();
   	}

        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public TranslateSpiRuleOutCtx getTranslateSpiRuleOutCtx() {
            return new TranslateSpiRuleOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += w02FnuLineRead.hashCode();
        str += workFields.hashCode();
        str += fesrKey.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public TranslateSpiRuleInCtx clone() {
        TranslateSpiRuleInCtx cloneObj = new TranslateSpiRuleInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.w02FnuLineRead = new W02FnuLineRead();
        cloneObj.w02FnuLineRead.set(w02FnuLineRead.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.fesrKey = new FesrKey();
        cloneObj.fesrKey.set(fesrKey.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public TranslateSpiRuleInCtx getTranslateSpiRuleInCtx() {
            return new TranslateSpiRuleInCtx();
    }
     public class TranslateSpiRuleOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     W02FnuLineRead w02FnuLineRead = O529351uCtx.this.getW02FnuLineRead();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     FesrKey fesrKey = O529351uCtx.this.getFesrKey();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of w02DsplMsg
	 *	@return w02DsplMsg
	 */
   public char[] getW02DsplMsg() throws CFException  {              
   		return w02DsplMsgArea.getW02DsplMsg();
   }

  
	/**
	*  set variable w02DsplMsg
	*  @param value
	**/
   public void setW02DsplMsg(char[] value) throws CFException {
      w02DsplMsgArea.setW02DsplMsg(value);
   } 

     /**
	 * 	Update W02DsplMsg 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02DsplMsg(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex);
   	
   }
   
   public void setW02DsplMsg(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02DsplMsg 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplMsg(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02DsplMsg with another Field
	 *	@param value
	 */
   public void setW02DsplMsg(Field source) {
      w02DsplMsgArea.setW02DsplMsg(source);
   }  
   
     /**
	 * 	Update W02DsplMsg 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02DsplMsg(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02DsplMsg 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplMsg(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrToSvc01
	 *	@return fesrToSvc01
	 */
   public char[] getFesrToSvc01() throws CFException  {              
   		return feSpiRulesRecord.getFesrKey01().getFesrToSvc01();
   }

  
	/**
	*  set variable fesrToSvc01
	*  @param value
	**/
   public void setFesrToSvc01(char[] value) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(value);
   } 

     /**
	 * 	Update FesrToSvc01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToSvc01(char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex);
   	
   }
   
   public void setFesrToSvc01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToSvc01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToSvc01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToSvc01 with another Field
	 *	@param value
	 */
   public void setFesrToSvc01(Field source) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source);
   }  
   
     /**
	 * 	Update FesrToSvc01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToSvc01(Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToSvc01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToSvc01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02FnuLineRead
	 *	@return w02FnuLineRead
	 */   
	 public W02FnuLineRead getW02FnuLineRead() {
   	return w02FnuLineRead;
   }


	/**
	 *	Returns the value of fesrToPs01
	 *	@return fesrToPs01
	 */
   public char[] getFesrToPs01() throws CFException  {              
   		return feSpiRulesRecord.getFesrKey01().getFesrToPs01();
   }

  
	/**
	*  set variable fesrToPs01
	*  @param value
	**/
   public void setFesrToPs01(char[] value) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(value);
   } 

     /**
	 * 	Update FesrToPs01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToPs01(char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex);
   	
   }
   
   public void setFesrToPs01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToPs01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToPs01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToPs01 with another Field
	 *	@param value
	 */
   public void setFesrToPs01(Field source) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source);
   }  
   
     /**
	 * 	Update FesrToPs01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToPs01(Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToPs01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToPs01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02DsplErrInd
	 *	@return w02DsplErrInd
	 */
   public char[] getW02DsplErrInd() throws CFException  {              
   		return w02DsplMsgArea.getW02DsplErrInd();
   }

  
	/**
	*  set variable w02DsplErrInd
	*  @param value
	**/
   public void setW02DsplErrInd(char[] value) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(value);
   } 

     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex);
   	
   }
   
   public void setW02DsplErrInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02DsplErrInd with another Field
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source) {
      w02DsplMsgArea.setW02DsplErrInd(source);
   }  
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrSpiNbr
	 *	@return fesrSpiNbr
	 */
	public int getFesrSpiNbr() throws CFException {
   		return fesrKey.getFesrSpiNbr();
	}

    /**
	 *	Returns the String value of fesrSpiNbr
	 *	@return fesrSpiNbr
	 */
	public char[]  getFesrSpiNbrActualString() {
		return fesrKey.getFesrSpiNbrActualString();
	}

	/**
	 *	Returns String value of fesrSpiNbr
	 *	@return fesrSpiNbr
	 */
	public char[]  getFesrSpiNbrString() throws CFException {
	     return String.valueOf(fesrKey.getFesrSpiNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean fesrSpiNbrIsNumeric()  throws CFException{
	    return fesrKey.fesrSpiNbrIsNumeric();
	}

	/**
	 * 	Update FesrSpiNbr with the passed value
	 *	@param number
	 */
	public void setFesrSpiNbr(int number)  throws CFException{
		fesrKey.setFesrSpiNbr(number);
	}
	

	public void setFesrSpiNbr(long number)  throws CFException{
	    fesrKey.setFesrSpiNbr(number);
	}
	
	
	/**
	 * 	Update FesrSpiNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setFesrSpiNbr(char[] value)  throws CFException {
		fesrKey.setFesrSpiNbr(value);
	}
	
	/**
	 * 	Update FesrSpiNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setFesrSpiNbrString(char[] value)  throws CFException{
		fesrKey.setFesrSpiNbr(value);
	}	

	/**
	 *	Returns the value of ddSpirules
	 *	@return ddSpirules
	 */
   public char[] getDdSpirules() throws CFException  {              
   		return work.getDdSpirules();
   }

  
	/**
	*  set variable ddSpirules
	*  @param value
	**/
   public void setDdSpirules(char[] value) throws CFException {
      work.setDdSpirules(value);
   } 

	/**
	 *	Returns the value of fesrToSvc
	 *	@return fesrToSvc
	 */
   public char[] getFesrToSvc() throws CFException  {              
   		return fesrKey.getFesrToSvc();
   }

  
	/**
	*  set variable fesrToSvc
	*  @param value
	**/
   public void setFesrToSvc(char[] value) throws CFException {
      fesrKey.setFesrToSvc(value);
   } 

     /**
	 * 	Update FesrToSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToSvc(char[] source, int sourceIndex) throws CFException {
      fesrKey.setFesrToSvc(source, sourceIndex);
   	
   }
   
   public void setFesrToSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      fesrKey.setFesrToSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      fesrKey.setFesrToSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToSvc with another Field
	 *	@param value
	 */
   public void setFesrToSvc(Field source) {
      fesrKey.setFesrToSvc(source);
   }  
   
     /**
	 * 	Update FesrToSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToSvc(Field source, int sourceIndex,int sourceLen) {
      fesrKey.setFesrToSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      fesrKey.setFesrToSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrKey
	 *	@return fesrKey
	 */   
	 public FesrKey getFesrKey() {
   	return fesrKey;
   }


	/**
	 *	Returns the value of w02FnuKeyRd
	 *	@return w02FnuKeyRd
	 */
   public char[] getW02FnuKeyRd() throws CFException  {              
   		return w02FnuLineRead.getW02FnuKeyRd();
   }

  
	/**
	*  set variable w02FnuKeyRd
	*  @param value
	**/
   public void setW02FnuKeyRd(char[] value) throws CFException {
      w02FnuLineRead.setW02FnuKeyRd(value);
   } 

     /**
	 * 	Update W02FnuKeyRd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02FnuKeyRd(char[] source, int sourceIndex) throws CFException {
      w02FnuLineRead.setW02FnuKeyRd(source, sourceIndex);
   	
   }
   
   public void setW02FnuKeyRd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02FnuLineRead.setW02FnuKeyRd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02FnuKeyRd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuKeyRd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineRead.setW02FnuKeyRd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02FnuKeyRd with another Field
	 *	@param value
	 */
   public void setW02FnuKeyRd(Field source) {
      w02FnuLineRead.setW02FnuKeyRd(source);
   }  
   
     /**
	 * 	Update W02FnuKeyRd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02FnuKeyRd(Field source, int sourceIndex,int sourceLen) {
      w02FnuLineRead.setW02FnuKeyRd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02FnuKeyRd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuKeyRd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineRead.setW02FnuKeyRd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrToPs
	 *	@return fesrToPs
	 */
   public char[] getFesrToPs() throws CFException  {              
   		return fesrKey.getFesrToPs();
   }

  
	/**
	*  set variable fesrToPs
	*  @param value
	**/
   public void setFesrToPs(char[] value) throws CFException {
      fesrKey.setFesrToPs(value);
   } 

     /**
	 * 	Update FesrToPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToPs(char[] source, int sourceIndex) throws CFException {
      fesrKey.setFesrToPs(source, sourceIndex);
   	
   }
   
   public void setFesrToPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      fesrKey.setFesrToPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      fesrKey.setFesrToPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToPs with another Field
	 *	@param value
	 */
   public void setFesrToPs(Field source) {
      fesrKey.setFesrToPs(source);
   }  
   
     /**
	 * 	Update FesrToPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToPs(Field source, int sourceIndex,int sourceLen) {
      fesrKey.setFesrToPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      fesrKey.setFesrToPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrToCause01
	 *	@return fesrToCause01
	 */
   public char[] getFesrToCause01() throws CFException  {              
   		return feSpiRulesRecord.getFesrKey01().getFesrToCause01();
   }

  
	/**
	*  set variable fesrToCause01
	*  @param value
	**/
   public void setFesrToCause01(char[] value) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(value);
   } 

     /**
	 * 	Update FesrToCause01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToCause01(char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex);
   	
   }
   
   public void setFesrToCause01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToCause01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToCause01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToCause01 with another Field
	 *	@param value
	 */
   public void setFesrToCause01(Field source) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source);
   }  
   
     /**
	 * 	Update FesrToCause01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToCause01(Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToCause01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToCause01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02FnuFileRd
	 *	@return w02FnuFileRd
	 */
   public char[] getW02FnuFileRd() throws CFException  {              
   		return w02FnuLineRead.getW02FnuFileRd();
   }

  
	/**
	*  set variable w02FnuFileRd
	*  @param value
	**/
   public void setW02FnuFileRd(char[] value) throws CFException {
      w02FnuLineRead.setW02FnuFileRd(value);
   } 

     /**
	 * 	Update W02FnuFileRd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02FnuFileRd(char[] source, int sourceIndex) throws CFException {
      w02FnuLineRead.setW02FnuFileRd(source, sourceIndex);
   	
   }
   
   public void setW02FnuFileRd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02FnuLineRead.setW02FnuFileRd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02FnuFileRd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuFileRd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineRead.setW02FnuFileRd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02FnuFileRd with another Field
	 *	@param value
	 */
   public void setW02FnuFileRd(Field source) {
      w02FnuLineRead.setW02FnuFileRd(source);
   }  
   
     /**
	 * 	Update W02FnuFileRd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02FnuFileRd(Field source, int sourceIndex,int sourceLen) {
      w02FnuLineRead.setW02FnuFileRd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02FnuFileRd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuFileRd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineRead.setW02FnuFileRd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of endOfSpiRule
	 *	@return endOfSpiRule
	 */
   public char[] getEndOfSpiRule() throws CFException  {              
   		return work.getEndOfSpiRule();
   }

  
	/**
	*  set variable endOfSpiRule
	*  @param value
	**/
   public void setEndOfSpiRule(char[] value) throws CFException {
      work.setEndOfSpiRule(value);
   } 

	/**
	 *	Returns the value of fesrToCause
	 *	@return fesrToCause
	 */
   public char[] getFesrToCause() throws CFException  {              
   		return fesrKey.getFesrToCause();
   }

  
	/**
	*  set variable fesrToCause
	*  @param value
	**/
   public void setFesrToCause(char[] value) throws CFException {
      fesrKey.setFesrToCause(value);
   } 

     /**
	 * 	Update FesrToCause 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToCause(char[] source, int sourceIndex) throws CFException {
      fesrKey.setFesrToCause(source, sourceIndex);
   	
   }
   
   public void setFesrToCause(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      fesrKey.setFesrToCause(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToCause 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToCause(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      fesrKey.setFesrToCause(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToCause with another Field
	 *	@param value
	 */
   public void setFesrToCause(Field source) {
      fesrKey.setFesrToCause(source);
   }  
   
     /**
	 * 	Update FesrToCause 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToCause(Field source, int sourceIndex,int sourceLen) {
      fesrKey.setFesrToCause(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToCause 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToCause(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      fesrKey.setFesrToCause(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "I" for isM51uIllogicalCond()
	 *	@return  Returns true if isM51uIllogicalCond() is "I"
	 */
   public boolean isM51uIllogicalCond() throws CFException {
      return dfhcommarea.getLinkAreaM51u().getM51uFlags().isM51uIllogicalCond();
   }

	/**
	*  set values "I"
	*/
   	public void setM51uIllogicalCondTrue()  throws CFException{  			
    	dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondTrue();
   	}
public int getFesrSpiNbr01() throws CFException {  
        return feSpiRulesRecord.getFesrKey01().getFesrSpiNbr01();
}
	/**
	 * 	Update FesrSpiNbr01 with the passed value
	 *	@param number
	 */
	public void setFesrSpiNbr01(int number)  throws CFException{
		feSpiRulesRecord.getFesrKey01().setFesrSpiNbr01(number);
	}


	public void setFesrSpiNbr01(long number)  throws CFException{
	    feSpiRulesRecord.getFesrKey01().setFesrSpiNbr01(number);
	}
	

	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}


	/**
	 *	Returns the value of w02RespCd
	 *	@return w02RespCd
	 */
	public long getW02RespCd() throws CFException {
   		return w02DsplMsgArea.getW02RespCd();
	}


	/**
	 *	Returns String value of w02RespCd
	 *	@return w02RespCd
	 */
	public char[]  getW02RespCdString() throws CFException {
	     return String.valueOf(w02DsplMsgArea.getW02RespCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean w02RespCdIsNumeric()  throws CFException{
	    return w02DsplMsgArea.w02RespCdIsNumeric();
	}

	/**
	 * 	Update W02RespCd with the passed value
	 *	@param number
	 */
	public void setW02RespCd(long number)  throws CFException{
		w02DsplMsgArea.setW02RespCd(number);
	}
	

	
	/**
	 * 	Update W02RespCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setW02RespCd(char[] value)  throws CFException {
		w02DsplMsgArea.setW02RespCd(value);
	}
	
	/**
	 * 	Update W02RespCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setW02RespCdString(char[] value)  throws CFException{
		w02DsplMsgArea.setW02RespCd(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += w02FnuLineRead.hashCode();
        str += workFields.hashCode();
        str += fesrKey.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public TranslateSpiRuleOutCtx clone() {
        TranslateSpiRuleOutCtx cloneObj = new TranslateSpiRuleOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.w02FnuLineRead = new W02FnuLineRead();
        cloneObj.w02FnuLineRead.set(w02FnuLineRead.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.fesrKey = new FesrKey();
        cloneObj.fesrKey.set(fesrKey.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public TranslateSpiRuleOutCtx getTranslateSpiRuleOutCtx() {
            return new TranslateSpiRuleOutCtx();
    }
     public class StartBrowseSpirulesInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();
     CetCicsErrorTableGroup cetCicsErrorTableGroup = O529351uCtx.this.getCetCicsErrorTableGroup();

	/**
	 *	Returns the value of ddSpirules
	 *	@return ddSpirules
	 */
   public char[] getDdSpirules() throws CFException  {              
   		return work.getDdSpirules();
   }

  
	/**
	*  set variable ddSpirules
	*  @param value
	**/
   public void setDdSpirules(char[] value) throws CFException {
      work.setDdSpirules(value);
   } 

	/**
	 *	Returns the value of fesrKey01
	 *	@return fesrKey01
	 */   
	 public FesrKey01 getFesrKey01() {
   	return feSpiRulesRecord.getFesrKey01();
   }

   /**
	* 	Update FesrKey01 with the passed value
	*	@param value
	*/
   public void setFesrKey01(char[] value) throws CFException {
      feSpiRulesRecord.setFesrKey01(value);
   }   

     /**
	 * 	Update FesrKey01 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setFesrKey01(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	feSpiRulesRecord.setFesrKey01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrKey01 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrKey01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	feSpiRulesRecord.setFesrKey01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrKey01 with another Field
	 *	@param value
	 */
   public void setFesrKey01(Field source) {
   	feSpiRulesRecord.setFesrKey01(source);
   }  
   
     /**
	 * 	Update FesrKey01 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setFesrKey01(Field source, int sourceIndex,int sourceLen) {
   	feSpiRulesRecord.setFesrKey01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrKey01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrKey01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	feSpiRulesRecord.setFesrKey01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public StartBrowseSpirulesOutCtx getStartBrowseSpirulesOutCtx() {
            return new StartBrowseSpirulesOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += feSpiRulesRecord.hashCode();
        str += cetCicsErrorTableGroup.hashCode();
       return str.hashCode();
    }

    public StartBrowseSpirulesInCtx clone() {
        StartBrowseSpirulesInCtx cloneObj = new StartBrowseSpirulesInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        cloneObj.cetCicsErrorTableGroup = new CetCicsErrorTableGroup();
        cloneObj.cetCicsErrorTableGroup.set(cetCicsErrorTableGroup.getClonedField());
        return cloneObj;
    }

    }

    public StartBrowseSpirulesInCtx getStartBrowseSpirulesInCtx() {
            return new StartBrowseSpirulesInCtx();
    }
     public class StartBrowseSpirulesOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();
     CetCicsErrorTableGroup cetCicsErrorTableGroup = O529351uCtx.this.getCetCicsErrorTableGroup();

	/**
	 *	Returns the value of dfhb0020
	 *	@return dfhb0020
	 */
	public int getDfhb0020() throws CFException {        
   		return work.getDfhb0020();
	}
	
	/**
	 * 	Update Dfhb0020 with the passed value
	 *	@param number
	 */
	public void setDfhb0020(int number)  throws CFException{
		work.setDfhb0020(number);
	}


	public void setDfhb0020(long number)  throws CFException{
		work.setDfhb0020((int)number);
	}


	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}


	/**
	 *	Returns the value of cetEibrcd
	 *	@return cetEibrcd
	 */
   public char[] getCetEibrcd() throws CFException  {              
   		return cetCicsErrorTableGroup.getCetCicsErrorTable().getCetEibrcd();
   }

  
	/**
	*  set variable cetEibrcd
	*  @param value
	**/
   public void setCetEibrcd(char[] value) throws CFException {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(value);
   } 

     /**
	 * 	Update CetEibrcd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCetEibrcd(char[] source, int sourceIndex) throws CFException {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex);
   	
   }
   
   public void setCetEibrcd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CetEibrcd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCetEibrcd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CetEibrcd with another Field
	 *	@param value
	 */
   public void setCetEibrcd(Field source) {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source);
   }  
   
     /**
	 * 	Update CetEibrcd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCetEibrcd(Field source, int sourceIndex,int sourceLen) {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CetEibrcd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCetEibrcd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += feSpiRulesRecord.hashCode();
        str += cetCicsErrorTableGroup.hashCode();
       return str.hashCode();
    }

    public StartBrowseSpirulesOutCtx clone() {
        StartBrowseSpirulesOutCtx cloneObj = new StartBrowseSpirulesOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        cloneObj.cetCicsErrorTableGroup = new CetCicsErrorTableGroup();
        cloneObj.cetCicsErrorTableGroup.set(cetCicsErrorTableGroup.getClonedField());
        return cloneObj;
    }

    }

    public StartBrowseSpirulesOutCtx getStartBrowseSpirulesOutCtx() {
            return new StartBrowseSpirulesOutCtx();
    }
     public class ReadNextSpirulesInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();
     CetCicsErrorTableGroup cetCicsErrorTableGroup = O529351uCtx.this.getCetCicsErrorTableGroup();

	/**
	 *	Returns the value of ddSpirules
	 *	@return ddSpirules
	 */
   public char[] getDdSpirules() throws CFException  {              
   		return work.getDdSpirules();
   }

  
	/**
	*  set variable ddSpirules
	*  @param value
	**/
   public void setDdSpirules(char[] value) throws CFException {
      work.setDdSpirules(value);
   } 

	/**
	 *	Returns the value of fesrKey01
	 *	@return fesrKey01
	 */   
	 public FesrKey01 getFesrKey01() {
   	return feSpiRulesRecord.getFesrKey01();
   }

   /**
	* 	Update FesrKey01 with the passed value
	*	@param value
	*/
   public void setFesrKey01(char[] value) throws CFException {
      feSpiRulesRecord.setFesrKey01(value);
   }   

     /**
	 * 	Update FesrKey01 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setFesrKey01(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	feSpiRulesRecord.setFesrKey01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrKey01 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrKey01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	feSpiRulesRecord.setFesrKey01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrKey01 with another Field
	 *	@param value
	 */
   public void setFesrKey01(Field source) {
   	feSpiRulesRecord.setFesrKey01(source);
   }  
   
     /**
	 * 	Update FesrKey01 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setFesrKey01(Field source, int sourceIndex,int sourceLen) {
   	feSpiRulesRecord.setFesrKey01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrKey01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrKey01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	feSpiRulesRecord.setFesrKey01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of feSpiRulesRecord
	 *	@return feSpiRulesRecord
	 */   
	 public FeSpiRulesRecord getFeSpiRulesRecord() {
   	return feSpiRulesRecord;
   }



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public ReadNextSpirulesOutCtx getReadNextSpirulesOutCtx() {
            return new ReadNextSpirulesOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += feSpiRulesRecord.hashCode();
        str += cetCicsErrorTableGroup.hashCode();
       return str.hashCode();
    }

    public ReadNextSpirulesInCtx clone() {
        ReadNextSpirulesInCtx cloneObj = new ReadNextSpirulesInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        cloneObj.cetCicsErrorTableGroup = new CetCicsErrorTableGroup();
        cloneObj.cetCicsErrorTableGroup.set(cetCicsErrorTableGroup.getClonedField());
        return cloneObj;
    }

    }

    public ReadNextSpirulesInCtx getReadNextSpirulesInCtx() {
            return new ReadNextSpirulesInCtx();
    }
     public class ReadNextSpirulesOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();
     CetCicsErrorTableGroup cetCicsErrorTableGroup = O529351uCtx.this.getCetCicsErrorTableGroup();

	/**
	 *	Returns the value of dfhb0020
	 *	@return dfhb0020
	 */
	public int getDfhb0020() throws CFException {        
   		return work.getDfhb0020();
	}
	
	/**
	 * 	Update Dfhb0020 with the passed value
	 *	@param number
	 */
	public void setDfhb0020(int number)  throws CFException{
		work.setDfhb0020(number);
	}


	public void setDfhb0020(long number)  throws CFException{
		work.setDfhb0020((int)number);
	}


	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}


	/**
	 *	Returns the value of cetEibrcd
	 *	@return cetEibrcd
	 */
   public char[] getCetEibrcd() throws CFException  {              
   		return cetCicsErrorTableGroup.getCetCicsErrorTable().getCetEibrcd();
   }

  
	/**
	*  set variable cetEibrcd
	*  @param value
	**/
   public void setCetEibrcd(char[] value) throws CFException {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(value);
   } 

     /**
	 * 	Update CetEibrcd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCetEibrcd(char[] source, int sourceIndex) throws CFException {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex);
   	
   }
   
   public void setCetEibrcd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CetEibrcd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCetEibrcd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CetEibrcd with another Field
	 *	@param value
	 */
   public void setCetEibrcd(Field source) {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source);
   }  
   
     /**
	 * 	Update CetEibrcd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCetEibrcd(Field source, int sourceIndex,int sourceLen) {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CetEibrcd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCetEibrcd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      cetCicsErrorTableGroup.getCetCicsErrorTable().setCetEibrcd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dfhb0021
	 *	@return dfhb0021
	 */
	public int getDfhb0021() throws CFException {        
   		return work.getDfhb0021();
	}
	
	/**
	 * 	Update Dfhb0021 with the passed value
	 *	@param number
	 */
	public void setDfhb0021(int number)  throws CFException{
		work.setDfhb0021(number);
	}


	public void setDfhb0021(long number)  throws CFException{
		work.setDfhb0021((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += feSpiRulesRecord.hashCode();
        str += cetCicsErrorTableGroup.hashCode();
       return str.hashCode();
    }

    public ReadNextSpirulesOutCtx clone() {
        ReadNextSpirulesOutCtx cloneObj = new ReadNextSpirulesOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        cloneObj.cetCicsErrorTableGroup = new CetCicsErrorTableGroup();
        cloneObj.cetCicsErrorTableGroup.set(cetCicsErrorTableGroup.getClonedField());
        return cloneObj;
    }

    }

    public ReadNextSpirulesOutCtx getReadNextSpirulesOutCtx() {
            return new ReadNextSpirulesOutCtx();
    }
     public class EndBrowseSpirulesInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();

	/**
	 *	Returns the value of ddSpirules
	 *	@return ddSpirules
	 */
   public char[] getDdSpirules() throws CFException  {              
   		return work.getDdSpirules();
   }

  
	/**
	*  set variable ddSpirules
	*  @param value
	**/
   public void setDdSpirules(char[] value) throws CFException {
      work.setDdSpirules(value);
   } 


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public EndBrowseSpirulesOutCtx getEndBrowseSpirulesOutCtx() {
            return new EndBrowseSpirulesOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
       return str.hashCode();
    }

    public EndBrowseSpirulesInCtx clone() {
        EndBrowseSpirulesInCtx cloneObj = new EndBrowseSpirulesInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public EndBrowseSpirulesInCtx getEndBrowseSpirulesInCtx() {
            return new EndBrowseSpirulesInCtx();
    }
     public class EndBrowseSpirulesOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();

	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
       return str.hashCode();
    }

    public EndBrowseSpirulesOutCtx clone() {
        EndBrowseSpirulesOutCtx cloneObj = new EndBrowseSpirulesOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public EndBrowseSpirulesOutCtx getEndBrowseSpirulesOutCtx() {
            return new EndBrowseSpirulesOutCtx();
    }
     public class SpiRulesProcessInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of fesrFromCauseCd
	 *	@return fesrFromCauseCd
	 */
   public char[] getFesrFromCauseCd(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondCause(index).getFesrFromCauseCd();
   }

  
	/**
	*  set variable fesrFromCauseCd
	*  @param value
	**/
   public void setFesrFromCauseCd(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondCause(index).setFesrFromCauseCd(value);
   } 

     /**
	 * 	Update FesrFromCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromCauseCd(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondCause(index).setFesrFromCauseCd(source, sourceIndex);
   	
   }
   
   public void setFesrFromCauseCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondCause(index).setFesrFromCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromCauseCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondCause(index).setFesrFromCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromCauseCd with another Field
	 *	@param value
	 */
   public void setFesrFromCauseCd(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondCause(index).setFesrFromCauseCd(source);
   }  
   
     /**
	 * 	Update FesrFromCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromCauseCd(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondCause(index).setFesrFromCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromCauseCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondCause(index).setFesrFromCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrToSvc01
	 *	@return fesrToSvc01
	 */
   public char[] getFesrToSvc01() throws CFException  {              
   		return feSpiRulesRecord.getFesrKey01().getFesrToSvc01();
   }

  
	/**
	*  set variable fesrToSvc01
	*  @param value
	**/
   public void setFesrToSvc01(char[] value) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(value);
   } 

     /**
	 * 	Update FesrToSvc01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToSvc01(char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex);
   	
   }
   
   public void setFesrToSvc01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToSvc01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToSvc01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToSvc01 with another Field
	 *	@param value
	 */
   public void setFesrToSvc01(Field source) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source);
   }  
   
     /**
	 * 	Update FesrToSvc01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToSvc01(Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToSvc01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToSvc01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of psSub
	 *	@return psSub
	 */
	public int getPsSub() throws CFException {        
   		return work.getPsSub();
	}
	
	/**
	 * 	Update PsSub with the passed value
	 *	@param number
	 */
	public void setPsSub(int number)  throws CFException{
		work.setPsSub(number);
	}


	public void setPsSub(long number)  throws CFException{
		work.setPsSub((int)number);
	}


	/**
	 *	Returns the value of fesrFromPs
	 *	@return fesrFromPs
	 */
   public char[] getFesrFromPs(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondPs(index).getFesrFromPs();
   }

  
	/**
	*  set variable fesrFromPs
	*  @param value
	**/
   public void setFesrFromPs(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondPs(index).setFesrFromPs(value);
   } 

     /**
	 * 	Update FesrFromPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromPs(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondPs(index).setFesrFromPs(source, sourceIndex);
   	
   }
   
   public void setFesrFromPs(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondPs(index).setFesrFromPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromPs(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondPs(index).setFesrFromPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromPs with another Field
	 *	@param value
	 */
   public void setFesrFromPs(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondPs(index).setFesrFromPs(source);
   }  
   
     /**
	 * 	Update FesrFromPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromPs(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondPs(index).setFesrFromPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromPs(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondPs(index).setFesrFromPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrToPs01
	 *	@return fesrToPs01
	 */
   public char[] getFesrToPs01() throws CFException  {              
   		return feSpiRulesRecord.getFesrKey01().getFesrToPs01();
   }

  
	/**
	*  set variable fesrToPs01
	*  @param value
	**/
   public void setFesrToPs01(char[] value) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(value);
   } 

     /**
	 * 	Update FesrToPs01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToPs01(char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex);
   	
   }
   
   public void setFesrToPs01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToPs01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToPs01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToPs01 with another Field
	 *	@param value
	 */
   public void setFesrToPs01(Field source) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source);
   }  
   
     /**
	 * 	Update FesrToPs01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToPs01(Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToPs01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToPs01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrFromFrSvc
	 *	@return fesrFromFrSvc
	 */
   public char[] getFesrFromFrSvc(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondFrToSvc(index).getFesrFromFrSvc();
   }

  
	/**
	*  set variable fesrFromFrSvc
	*  @param value
	**/
   public void setFesrFromFrSvc(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(value);
   } 

     /**
	 * 	Update FesrFromFrSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex);
   	
   }
   
   public void setFesrFromFrSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromFrSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromFrSvc with another Field
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source);
   }  
   
     /**
	 * 	Update FesrFromFrSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromFrSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public short getNbrMatchedPrev() throws CFException {
   		return workFields.getNbrMatchedPrev();
	}

    /**
	 *	Returns the String value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public char[]  getNbrMatchedPrevActualString() {
		return workFields.getNbrMatchedPrevActualString();
	}

	/**
	 *	Returns String value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public char[]  getNbrMatchedPrevString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedPrevString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedPrevIsNumeric()  throws CFException{
	    return workFields.nbrMatchedPrevIsNumeric();
	}

	/**
	 * 	Update NbrMatchedPrev with the passed value
	 *	@param number
	 */
	public void setNbrMatchedPrev(short number)  throws CFException{
		workFields.setNbrMatchedPrev(number);
	}
	
	public void setNbrMatchedPrev(int number)  throws CFException{
	    workFields.setNbrMatchedPrev(number);
	}
	public void setNbrMatchedPrev(long number)  throws CFException{
	    workFields.setNbrMatchedPrev(number);
	}
	

	
	/**
	 * 	Update NbrMatchedPrev with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedPrev(char[] value)  throws CFException {
		workFields.setNbrMatchedPrev(value);
	}
	
	/**
	 * 	Update NbrMatchedPrev with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedPrevString(char[] value)  throws CFException{
		workFields.setNbrMatchedPrev(value);
	}	

	/**
	 *	Returns the value of fesrFromFrIcd9
	 *	@return fesrFromFrIcd9
	 */
   public char[] getFesrFromFrIcd9(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondFrToIcd9(index).getFesrFromFrIcd9();
   }

  
	/**
	*  set variable fesrFromFrIcd9
	*  @param value
	**/
   public void setFesrFromFrIcd9(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromFrIcd9(value);
   } 

     /**
	 * 	Update FesrFromFrIcd9 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromFrIcd9(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromFrIcd9(source, sourceIndex);
   	
   }
   
   public void setFesrFromFrIcd9(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromFrIcd9(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromFrIcd9 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromFrIcd9(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromFrIcd9(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromFrIcd9 with another Field
	 *	@param value
	 */
   public void setFesrFromFrIcd9(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromFrIcd9(source);
   }  
   
     /**
	 * 	Update FesrFromFrIcd9 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromFrIcd9(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromFrIcd9(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromFrIcd9 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromFrIcd9(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromFrIcd9(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of causeSub
	 *	@return causeSub
	 */
	public int getCauseSub() throws CFException {        
   		return work.getCauseSub();
	}
	
	/**
	 * 	Update CauseSub with the passed value
	 *	@param number
	 */
	public void setCauseSub(int number)  throws CFException{
		work.setCauseSub(number);
	}


	public void setCauseSub(long number)  throws CFException{
		work.setCauseSub((int)number);
	}


	/**
	 *	Returns the value of fesrIpaCd
	 *	@return fesrIpaCd
	 */
	public int getFesrIpaCd(int index) throws CFException {
   		return feSpiRulesRecord.getFesrIpaCode(index).getFesrIpaCd();
	}


	/**
	 *	Returns String value of fesrIpaCd
	 *	@return fesrIpaCd
	 */
	public char[]  getFesrIpaCdString(int index) throws CFException {
	     return String.valueOf(feSpiRulesRecord.getFesrIpaCode(index).getFesrIpaCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean fesrIpaCdIsNumeric(int index)  throws CFException{
	    return feSpiRulesRecord.getFesrIpaCode(index - 1).fesrIpaCdIsNumeric();
	}

	/**
	 * 	Update FesrIpaCd with the passed value
	 *	@param number
	 */
	public void setFesrIpaCd(int index,int number)  throws CFException{
		feSpiRulesRecord.getFesrIpaCode(index).setFesrIpaCd(number);
	}
	

	public void setFesrIpaCd(int index,long number)  throws CFException{
	    feSpiRulesRecord.getFesrIpaCode(index).setFesrIpaCd(number);
	}
	
	
	/**
	 * 	Update FesrIpaCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setFesrIpaCd(int index,char[] value)  throws CFException {
		feSpiRulesRecord.getFesrIpaCode(index).setFesrIpaCd(value);
	}
	
	/**
	 * 	Update FesrIpaCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setFesrIpaCdString(int index,char[] value)  throws CFException{
		feSpiRulesRecord.getFesrIpaCode(index).setFesrIpaCd(value);
	}	

	/**
	 *	Returns the value of svcSub
	 *	@return svcSub
	 */
	public int getSvcSub() throws CFException {        
   		return work.getSvcSub();
	}
	
	/**
	 * 	Update SvcSub with the passed value
	 *	@param number
	 */
	public void setSvcSub(int number)  throws CFException{
		work.setSvcSub(number);
	}


	public void setSvcSub(long number)  throws CFException{
		work.setSvcSub((int)number);
	}


	/**
	 *	Returns the value of pvSub
	 *	@return pvSub
	 */
	public int getPvSub() throws CFException {        
   		return work.getPvSub();
	}
	
	/**
	 * 	Update PvSub with the passed value
	 *	@param number
	 */
	public void setPvSub(int number)  throws CFException{
		work.setPvSub(number);
	}


	public void setPvSub(long number)  throws CFException{
		work.setPvSub((int)number);
	}


	/**
	 *	Returns the value of fesrToCause01
	 *	@return fesrToCause01
	 */
   public char[] getFesrToCause01() throws CFException  {              
   		return feSpiRulesRecord.getFesrKey01().getFesrToCause01();
   }

  
	/**
	*  set variable fesrToCause01
	*  @param value
	**/
   public void setFesrToCause01(char[] value) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(value);
   } 

     /**
	 * 	Update FesrToCause01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToCause01(char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex);
   	
   }
   
   public void setFesrToCause01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToCause01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToCause01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToCause01 with another Field
	 *	@param value
	 */
   public void setFesrToCause01(Field source) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source);
   }  
   
     /**
	 * 	Update FesrToCause01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToCause01(Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToCause01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToCause01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrFromPrvTyp
	 *	@return fesrFromPrvTyp
	 */
   public char[] getFesrFromPrvTyp(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondPrvTyp(index).getFesrFromPrvTyp();
   }

  
	/**
	*  set variable fesrFromPrvTyp
	*  @param value
	**/
   public void setFesrFromPrvTyp(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondPrvTyp(index).setFesrFromPrvTyp(value);
   } 

     /**
	 * 	Update FesrFromPrvTyp 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromPrvTyp(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondPrvTyp(index).setFesrFromPrvTyp(source, sourceIndex);
   	
   }
   
   public void setFesrFromPrvTyp(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondPrvTyp(index).setFesrFromPrvTyp(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromPrvTyp 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromPrvTyp(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondPrvTyp(index).setFesrFromPrvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromPrvTyp with another Field
	 *	@param value
	 */
   public void setFesrFromPrvTyp(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondPrvTyp(index).setFesrFromPrvTyp(source);
   }  
   
     /**
	 * 	Update FesrFromPrvTyp 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromPrvTyp(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondPrvTyp(index).setFesrFromPrvTyp(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromPrvTyp 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromPrvTyp(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondPrvTyp(index).setFesrFromPrvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of icd9Sub
	 *	@return icd9Sub
	 */
	public int getIcd9Sub() throws CFException {        
   		return work.getIcd9Sub();
	}
	
	/**
	 * 	Update Icd9Sub with the passed value
	 *	@param number
	 */
	public void setIcd9Sub(int number)  throws CFException{
		work.setIcd9Sub(number);
	}


	public void setIcd9Sub(long number)  throws CFException{
		work.setIcd9Sub((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public SpiRulesProcessOutCtx getSpiRulesProcessOutCtx() {
            return new SpiRulesProcessOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public SpiRulesProcessInCtx clone() {
        SpiRulesProcessInCtx cloneObj = new SpiRulesProcessInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public SpiRulesProcessInCtx getSpiRulesProcessInCtx() {
            return new SpiRulesProcessInCtx();
    }
     public class SpiRulesProcessOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of fesrToSvc01
	 *	@return fesrToSvc01
	 */
   public char[] getFesrToSvc01() throws CFException  {              
   		return feSpiRulesRecord.getFesrKey01().getFesrToSvc01();
   }

  
	/**
	*  set variable fesrToSvc01
	*  @param value
	**/
   public void setFesrToSvc01(char[] value) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(value);
   } 

     /**
	 * 	Update FesrToSvc01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToSvc01(char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex);
   	
   }
   
   public void setFesrToSvc01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToSvc01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToSvc01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToSvc01 with another Field
	 *	@param value
	 */
   public void setFesrToSvc01(Field source) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source);
   }  
   
     /**
	 * 	Update FesrToSvc01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToSvc01(Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToSvc01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToSvc01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToSvc01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ipaCodeFound
	 *	@return ipaCodeFound
	 */
   public char[] getIpaCodeFound() throws CFException  {              
   		return work.getIpaCodeFound();
   }

  
	/**
	*  set variable ipaCodeFound
	*  @param value
	**/
   public void setIpaCodeFound(char[] value) throws CFException {
      work.setIpaCodeFound(value);
   } 

	/**
	 *	Returns the value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public short getNbrMatchedPrev() throws CFException {
   		return workFields.getNbrMatchedPrev();
	}

    /**
	 *	Returns the String value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public char[]  getNbrMatchedPrevActualString() {
		return workFields.getNbrMatchedPrevActualString();
	}

	/**
	 *	Returns String value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public char[]  getNbrMatchedPrevString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedPrevString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedPrevIsNumeric()  throws CFException{
	    return workFields.nbrMatchedPrevIsNumeric();
	}

	/**
	 * 	Update NbrMatchedPrev with the passed value
	 *	@param number
	 */
	public void setNbrMatchedPrev(short number)  throws CFException{
		workFields.setNbrMatchedPrev(number);
	}
	
	public void setNbrMatchedPrev(int number)  throws CFException{
	    workFields.setNbrMatchedPrev(number);
	}
	public void setNbrMatchedPrev(long number)  throws CFException{
	    workFields.setNbrMatchedPrev(number);
	}
	

	
	/**
	 * 	Update NbrMatchedPrev with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedPrev(char[] value)  throws CFException {
		workFields.setNbrMatchedPrev(value);
	}
	
	/**
	 * 	Update NbrMatchedPrev with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedPrevString(char[] value)  throws CFException{
		workFields.setNbrMatchedPrev(value);
	}	

	/**
	 *	Test condition "Y" for isFromSvcFound1()
	 *	@return  Returns true if isFromSvcFound1() is "Y"
	 */
   public boolean isFromSvcFound1() throws CFException {
      return work.isFromSvcFound1();
   }

	/**
	*  set values "Y"
	*/
   	public void setFromSvcFound1True()  throws CFException{  			
    	work.setFromSvcFound1True();
   	}
	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Test condition "Y" for isFromIcd9Found1()
	 *	@return  Returns true if isFromIcd9Found1() is "Y"
	 */
   public boolean isFromIcd9Found1() throws CFException {
      return work.isFromIcd9Found1();
   }

	/**
	*  set values "Y"
	*/
   	public void setFromIcd9Found1True()  throws CFException{  			
    	work.setFromIcd9Found1True();
   	}
	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of fromPrvFound
	 *	@return fromPrvFound
	 */
   public char[] getFromPrvFound() throws CFException  {              
   		return work.getFromPrvFound();
   }

  
	/**
	*  set variable fromPrvFound
	*  @param value
	**/
   public void setFromPrvFound(char[] value) throws CFException {
      work.setFromPrvFound(value);
   } 

	/**
	 *	Returns the value of svcSub
	 *	@return svcSub
	 */
	public int getSvcSub() throws CFException {        
   		return work.getSvcSub();
	}
	
	/**
	 * 	Update SvcSub with the passed value
	 *	@param number
	 */
	public void setSvcSub(int number)  throws CFException{
		work.setSvcSub(number);
	}


	public void setSvcSub(long number)  throws CFException{
		work.setSvcSub((int)number);
	}


	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fromSvcFound
	 *	@return fromSvcFound
	 */
   public char[] getFromSvcFound() throws CFException  {              
   		return work.getFromSvcFound();
   }

  
	/**
	*  set variable fromSvcFound
	*  @param value
	**/
   public void setFromSvcFound(char[] value) throws CFException {
      work.setFromSvcFound(value);
   } 

	/**
	 *	Test condition "Y" for isFromPsFound1()
	 *	@return  Returns true if isFromPsFound1() is "Y"
	 */
   public boolean isFromPsFound1() throws CFException {
      return work.isFromPsFound1();
   }

	/**
	*  set values "Y"
	*/
   	public void setFromPsFound1True()  throws CFException{  			
    	work.setFromPsFound1True();
   	}
	/**
	 *	Returns the value of fromPsFound
	 *	@return fromPsFound
	 */
   public char[] getFromPsFound() throws CFException  {              
   		return work.getFromPsFound();
   }

  
	/**
	*  set variable fromPsFound
	*  @param value
	**/
   public void setFromPsFound(char[] value) throws CFException {
      work.setFromPsFound(value);
   } 

	/**
	 *	Returns the value of icd9Sub
	 *	@return icd9Sub
	 */
	public int getIcd9Sub() throws CFException {        
   		return work.getIcd9Sub();
	}
	
	/**
	 * 	Update Icd9Sub with the passed value
	 *	@param number
	 */
	public void setIcd9Sub(int number)  throws CFException{
		work.setIcd9Sub(number);
	}


	public void setIcd9Sub(long number)  throws CFException{
		work.setIcd9Sub((int)number);
	}


	/**
	 *	Returns the value of psSub
	 *	@return psSub
	 */
	public int getPsSub() throws CFException {        
   		return work.getPsSub();
	}
	
	/**
	 * 	Update PsSub with the passed value
	 *	@param number
	 */
	public void setPsSub(int number)  throws CFException{
		work.setPsSub(number);
	}


	public void setPsSub(long number)  throws CFException{
		work.setPsSub((int)number);
	}


	/**
	 *	Returns the value of fesrToPs01
	 *	@return fesrToPs01
	 */
   public char[] getFesrToPs01() throws CFException  {              
   		return feSpiRulesRecord.getFesrKey01().getFesrToPs01();
   }

  
	/**
	*  set variable fesrToPs01
	*  @param value
	**/
   public void setFesrToPs01(char[] value) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(value);
   } 

     /**
	 * 	Update FesrToPs01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToPs01(char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex);
   	
   }
   
   public void setFesrToPs01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToPs01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToPs01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToPs01 with another Field
	 *	@param value
	 */
   public void setFesrToPs01(Field source) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source);
   }  
   
     /**
	 * 	Update FesrToPs01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToPs01(Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToPs01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToPs01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToPs01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isIpaCodeFound1()
	 *	@return  Returns true if isIpaCodeFound1() is "Y"
	 */
   public boolean isIpaCodeFound1() throws CFException {
      return work.isIpaCodeFound1();
   }

	/**
	*  set values "Y"
	*/
   	public void setIpaCodeFound1True()  throws CFException{  			
    	work.setIpaCodeFound1True();
   	}
	/**
	 *	Returns the value of fromCauseFound
	 *	@return fromCauseFound
	 */
   public char[] getFromCauseFound() throws CFException  {              
   		return work.getFromCauseFound();
   }

  
	/**
	*  set variable fromCauseFound
	*  @param value
	**/
   public void setFromCauseFound(char[] value) throws CFException {
      work.setFromCauseFound(value);
   } 

	/**
	 *	Returns the value of holdSvc
	 *	@return holdSvc
	 */
   public char[] getHoldSvc() throws CFException  {              
   		return workFields.getHoldTransData().getHoldSvc();
   }

  
	/**
	*  set variable holdSvc
	*  @param value
	**/
   public void setHoldSvc(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldSvc(value);
   } 

     /**
	 * 	Update HoldSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex);
   	
   }
   
   public void setHoldSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldSvc with another Field
	 *	@param value
	 */
   public void setHoldSvc(Field source) {
      workFields.getHoldTransData().setHoldSvc(source);
   }  
   
     /**
	 * 	Update HoldSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fromIcd9Found
	 *	@return fromIcd9Found
	 */
   public char[] getFromIcd9Found() throws CFException  {              
   		return work.getFromIcd9Found();
   }

  
	/**
	*  set variable fromIcd9Found
	*  @param value
	**/
   public void setFromIcd9Found(char[] value) throws CFException {
      work.setFromIcd9Found(value);
   } 

	/**
	 *	Returns the value of causeSub
	 *	@return causeSub
	 */
	public int getCauseSub() throws CFException {        
   		return work.getCauseSub();
	}
	
	/**
	 * 	Update CauseSub with the passed value
	 *	@param number
	 */
	public void setCauseSub(int number)  throws CFException{
		work.setCauseSub(number);
	}


	public void setCauseSub(long number)  throws CFException{
		work.setCauseSub((int)number);
	}


	/**
	 *	Returns the value of pvSub
	 *	@return pvSub
	 */
	public int getPvSub() throws CFException {        
   		return work.getPvSub();
	}
	
	/**
	 * 	Update PvSub with the passed value
	 *	@param number
	 */
	public void setPvSub(int number)  throws CFException{
		work.setPvSub(number);
	}


	public void setPvSub(long number)  throws CFException{
		work.setPvSub((int)number);
	}


	/**
	 *	Returns the value of nbrEqual
	 *	@return nbrEqual
	 */
   public char[] getNbrEqual() throws CFException  {              
   		return work.getNbrEqual();
   }

  
	/**
	*  set variable nbrEqual
	*  @param value
	**/
   public void setNbrEqual(char[] value) throws CFException {
      work.setNbrEqual(value);
   } 

	/**
	 *	Returns the value of fesrToCause01
	 *	@return fesrToCause01
	 */
   public char[] getFesrToCause01() throws CFException  {              
   		return feSpiRulesRecord.getFesrKey01().getFesrToCause01();
   }

  
	/**
	*  set variable fesrToCause01
	*  @param value
	**/
   public void setFesrToCause01(char[] value) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(value);
   } 

     /**
	 * 	Update FesrToCause01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrToCause01(char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex);
   	
   }
   
   public void setFesrToCause01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrToCause01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrToCause01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrToCause01 with another Field
	 *	@param value
	 */
   public void setFesrToCause01(Field source) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source);
   }  
   
     /**
	 * 	Update FesrToCause01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrToCause01(Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrToCause01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrToCause01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrKey01().setFesrToCause01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of holdCauseCd
	 *	@return holdCauseCd
	 */
   public char[] getHoldCauseCd() throws CFException  {              
   		return workFields.getHoldTransData().getHoldCauseCd();
   }

  
	/**
	*  set variable holdCauseCd
	*  @param value
	**/
   public void setHoldCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldCauseCd(value);
   } 

     /**
	 * 	Update HoldCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex);
   	
   }
   
   public void setHoldCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldCauseCd with another Field
	 *	@param value
	 */
   public void setHoldCauseCd(Field source) {
      workFields.getHoldTransData().setHoldCauseCd(source);
   }  
   
     /**
	 * 	Update HoldCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isFromPrvFound1()
	 *	@return  Returns true if isFromPrvFound1() is "Y"
	 */
   public boolean isFromPrvFound1() throws CFException {
      return work.isFromPrvFound1();
   }

	/**
	*  set values "Y"
	*/
   	public void setFromPrvFound1True()  throws CFException{  			
    	work.setFromPrvFound1True();
   	}
	/**
	 *	Test condition "Y" for isFromCauseFound1()
	 *	@return  Returns true if isFromCauseFound1() is "Y"
	 */
   public boolean isFromCauseFound1() throws CFException {
      return work.isFromCauseFound1();
   }

	/**
	*  set values "Y"
	*/
   	public void setFromCauseFound1True()  throws CFException{  			
    	work.setFromCauseFound1True();
   	}
	/**
	 *	Returns the value of holdPs
	 *	@return holdPs
	 */
   public char[] getHoldPs() throws CFException  {              
   		return workFields.getHoldTransData().getHoldPs();
   }

  
	/**
	*  set variable holdPs
	*  @param value
	**/
   public void setHoldPs(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldPs(value);
   } 

     /**
	 * 	Update HoldPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex);
   	
   }
   
   public void setHoldPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldPs with another Field
	 *	@param value
	 */
   public void setHoldPs(Field source) {
      workFields.getHoldTransData().setHoldPs(source);
   }  
   
     /**
	 * 	Update HoldPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isSearchComplete1()
	 *	@return  Returns true if isSearchComplete1() is "Y"
	 */
   public boolean isSearchComplete1() throws CFException {
      return work.isSearchComplete1();
   }

	/**
	*  set values "Y"
	*/
   	public void setSearchComplete1True()  throws CFException{  			
    	work.setSearchComplete1True();
   	}

        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public SpiRulesProcessOutCtx clone() {
        SpiRulesProcessOutCtx cloneObj = new SpiRulesProcessOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public SpiRulesProcessOutCtx getSpiRulesProcessOutCtx() {
            return new SpiRulesProcessOutCtx();
    }
     public class SearchPsInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of psSub
	 *	@return psSub
	 */
	public int getPsSub() throws CFException {        
   		return work.getPsSub();
	}
	
	/**
	 * 	Update PsSub with the passed value
	 *	@param number
	 */
	public void setPsSub(int number)  throws CFException{
		work.setPsSub(number);
	}


	public void setPsSub(long number)  throws CFException{
		work.setPsSub((int)number);
	}


	/**
	 *	Returns the value of fesrFromPs
	 *	@return fesrFromPs
	 */
   public char[] getFesrFromPs(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondPs(index).getFesrFromPs();
   }

  
	/**
	*  set variable fesrFromPs
	*  @param value
	**/
   public void setFesrFromPs(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondPs(index).setFesrFromPs(value);
   } 

     /**
	 * 	Update FesrFromPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromPs(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondPs(index).setFesrFromPs(source, sourceIndex);
   	
   }
   
   public void setFesrFromPs(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondPs(index).setFesrFromPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromPs(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondPs(index).setFesrFromPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromPs with another Field
	 *	@param value
	 */
   public void setFesrFromPs(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondPs(index).setFesrFromPs(source);
   }  
   
     /**
	 * 	Update FesrFromPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromPs(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondPs(index).setFesrFromPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromPs(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondPs(index).setFesrFromPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of uLinePos51
	 *	@return uLinePos51
	 */
   public char[] getULinePos51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULinePos51();
   }

  
	/**
	*  set variable uLinePos51
	*  @param value
	**/
   public void setULinePos51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(value);
   } 

     /**
	 * 	Update ULinePos51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULinePos51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex);
   	
   }
   
   public void setULinePos51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULinePos51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULinePos51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULinePos51 with another Field
	 *	@param value
	 */
   public void setULinePos51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source);
   }  
   
     /**
	 * 	Update ULinePos51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULinePos51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULinePos51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULinePos51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public SearchPsOutCtx getSearchPsOutCtx() {
            return new SearchPsOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public SearchPsInCtx clone() {
        SearchPsInCtx cloneObj = new SearchPsInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public SearchPsInCtx getSearchPsInCtx() {
            return new SearchPsInCtx();
    }
     public class SearchPsOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fromPsFound
	 *	@return fromPsFound
	 */
   public char[] getFromPsFound() throws CFException  {              
   		return work.getFromPsFound();
   }

  
	/**
	*  set variable fromPsFound
	*  @param value
	**/
   public void setFromPsFound(char[] value) throws CFException {
      work.setFromPsFound(value);
   } 

	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public SearchPsOutCtx clone() {
        SearchPsOutCtx cloneObj = new SearchPsOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public SearchPsOutCtx getSearchPsOutCtx() {
            return new SearchPsOutCtx();
    }
     public class SearchSvcInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of fesrFromFrSvc
	 *	@return fesrFromFrSvc
	 */
   public char[] getFesrFromFrSvc(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondFrToSvc(index).getFesrFromFrSvc();
   }

  
	/**
	*  set variable fesrFromFrSvc
	*  @param value
	**/
   public void setFesrFromFrSvc(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(value);
   } 

     /**
	 * 	Update FesrFromFrSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex);
   	
   }
   
   public void setFesrFromFrSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromFrSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromFrSvc with another Field
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source);
   }  
   
     /**
	 * 	Update FesrFromFrSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromFrSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrFromToSvc
	 *	@return fesrFromToSvc
	 */
   public char[] getFesrFromToSvc(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondFrToSvc(index).getFesrFromToSvc();
   }

  
	/**
	*  set variable fesrFromToSvc
	*  @param value
	**/
   public void setFesrFromToSvc(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(value);
   } 

     /**
	 * 	Update FesrFromToSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex);
   	
   }
   
   public void setFesrFromToSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromToSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromToSvc with another Field
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source);
   }  
   
     /**
	 * 	Update FesrFromToSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromToSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of svcSub
	 *	@return svcSub
	 */
	public int getSvcSub() throws CFException {        
   		return work.getSvcSub();
	}
	
	/**
	 * 	Update SvcSub with the passed value
	 *	@param number
	 */
	public void setSvcSub(int number)  throws CFException{
		work.setSvcSub(number);
	}


	public void setSvcSub(long number)  throws CFException{
		work.setSvcSub((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public SearchSvcOutCtx getSearchSvcOutCtx() {
            return new SearchSvcOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public SearchSvcInCtx clone() {
        SearchSvcInCtx cloneObj = new SearchSvcInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public SearchSvcInCtx getSearchSvcInCtx() {
            return new SearchSvcInCtx();
    }
     public class SearchSvcOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrFromFrSvc
	 *	@return fesrFromFrSvc
	 */
   public char[] getFesrFromFrSvc(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondFrToSvc(index).getFesrFromFrSvc();
   }

  
	/**
	*  set variable fesrFromFrSvc
	*  @param value
	**/
   public void setFesrFromFrSvc(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(value);
   } 

     /**
	 * 	Update FesrFromFrSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex);
   	
   }
   
   public void setFesrFromFrSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromFrSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromFrSvc with another Field
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source);
   }  
   
     /**
	 * 	Update FesrFromFrSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromFrSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrFromToSvc
	 *	@return fesrFromToSvc
	 */
   public char[] getFesrFromToSvc(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondFrToSvc(index).getFesrFromToSvc();
   }

  
	/**
	*  set variable fesrFromToSvc
	*  @param value
	**/
   public void setFesrFromToSvc(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(value);
   } 

     /**
	 * 	Update FesrFromToSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex);
   	
   }
   
   public void setFesrFromToSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromToSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromToSvc with another Field
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source);
   }  
   
     /**
	 * 	Update FesrFromToSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromToSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public SearchSvcOutCtx clone() {
        SearchSvcOutCtx cloneObj = new SearchSvcOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public SearchSvcOutCtx getSearchSvcOutCtx() {
            return new SearchSvcOutCtx();
    }
     public class TopsCnvsvcFrToInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of medSvc
	 *	@return medSvc
	 */
   public char[] getMedSvc() throws CFException  {              
   		return work.getMedSvc();
   }

  
	/**
	*  set variable medSvc
	*  @param value
	**/
   public void setMedSvc(char[] value) throws CFException {
      work.setMedSvc(value);
   } 

	/**
	 *	Returns the value of fesrFromFrSvc
	 *	@return fesrFromFrSvc
	 */
   public char[] getFesrFromFrSvc(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondFrToSvc(index).getFesrFromFrSvc();
   }

  
	/**
	*  set variable fesrFromFrSvc
	*  @param value
	**/
   public void setFesrFromFrSvc(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(value);
   } 

     /**
	 * 	Update FesrFromFrSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex);
   	
   }
   
   public void setFesrFromFrSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromFrSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromFrSvc with another Field
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source);
   }  
   
     /**
	 * 	Update FesrFromFrSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromFrSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of svc15
	 *	@return svc15
	 */
   public char[] getSvc15() throws CFException  {              
   		return workFields.getServTop().getSvc15();
   }

  
	/**
	*  set variable svc15
	*  @param value
	**/
   public void setSvc15(char[] value) throws CFException {
      workFields.getServTop().setSvc15(value);
   } 

     /**
	 * 	Update Svc15 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSvc15(char[] source, int sourceIndex) throws CFException {
      workFields.getServTop().setSvc15(source, sourceIndex);
   	
   }
   
   public void setSvc15(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServTop().setSvc15(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Svc15 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSvc15(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServTop().setSvc15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Svc15 with another Field
	 *	@param value
	 */
   public void setSvc15(Field source) {
      workFields.getServTop().setSvc15(source);
   }  
   
     /**
	 * 	Update Svc15 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSvc15(Field source, int sourceIndex,int sourceLen) {
      workFields.getServTop().setSvc15(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Svc15 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSvc15(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServTop().setSvc15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrFromToSvc
	 *	@return fesrFromToSvc
	 */
   public char[] getFesrFromToSvc(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondFrToSvc(index).getFesrFromToSvc();
   }

  
	/**
	*  set variable fesrFromToSvc
	*  @param value
	**/
   public void setFesrFromToSvc(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(value);
   } 

     /**
	 * 	Update FesrFromToSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex);
   	
   }
   
   public void setFesrFromToSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromToSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromToSvc with another Field
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source);
   }  
   
     /**
	 * 	Update FesrFromToSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromToSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uMedicalClaim51
	 *	@return uMedicalClaim51
	 */
   public char[] getUMedicalClaim51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUMedicalClaim51();
   }

  
	/**
	*  set variable uMedicalClaim51
	*  @param value
	**/
   public void setUMedicalClaim51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(value);
   } 

     /**
	 * 	Update UMedicalClaim51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUMedicalClaim51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex);
   	
   }
   
   public void setUMedicalClaim51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UMedicalClaim51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUMedicalClaim51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UMedicalClaim51 with another Field
	 *	@param value
	 */
   public void setUMedicalClaim51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source);
   }  
   
     /**
	 * 	Update UMedicalClaim51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUMedicalClaim51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UMedicalClaim51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUMedicalClaim51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uLineServiceCode51
	 *	@return uLineServiceCode51
	 */
   public char[] getULineServiceCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineServiceCode51();
   }

  
	/**
	*  set variable uLineServiceCode51
	*  @param value
	**/
   public void setULineServiceCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(value);
   } 

     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex);
   	
   }
   
   public void setULineServiceCode51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULineServiceCode51 with another Field
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source);
   }  
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrSvcInd
	 *	@return fesrSvcInd
	 */
   public char[] getFesrSvcInd(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondFrToSvc(index).getFesrSvcInd();
   }

  
	/**
	*  set variable fesrSvcInd
	*  @param value
	**/
   public void setFesrSvcInd(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrSvcInd(value);
   } 

     /**
	 * 	Update FesrSvcInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrSvcInd(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrSvcInd(source, sourceIndex);
   	
   }
   
   public void setFesrSvcInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrSvcInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrSvcInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrSvcInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrSvcInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrSvcInd with another Field
	 *	@param value
	 */
   public void setFesrSvcInd(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrSvcInd(source);
   }  
   
     /**
	 * 	Update FesrSvcInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrSvcInd(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrSvcInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrSvcInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrSvcInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrSvcInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}


	/**
	 *	Returns the value of svcSub
	 *	@return svcSub
	 */
	public int getSvcSub() throws CFException {        
   		return work.getSvcSub();
	}
	
	/**
	 * 	Update SvcSub with the passed value
	 *	@param number
	 */
	public void setSvcSub(int number)  throws CFException{
		work.setSvcSub(number);
	}


	public void setSvcSub(long number)  throws CFException{
		work.setSvcSub((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public TopsCnvsvcFrToOutCtx getTopsCnvsvcFrToOutCtx() {
            return new TopsCnvsvcFrToOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public TopsCnvsvcFrToInCtx clone() {
        TopsCnvsvcFrToInCtx cloneObj = new TopsCnvsvcFrToInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public TopsCnvsvcFrToInCtx getTopsCnvsvcFrToInCtx() {
            return new TopsCnvsvcFrToInCtx();
    }
     public class TopsCnvsvcFrToOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of servTop
	 *	@return servTop
	 */   
	 public ServTop getServTop() {
   	return workFields.getServTop();
   }

   /**
	* 	Update ServTop with the passed value
	*	@param value
	*/
   public void setServTop(char[] value) throws CFException {
      workFields.setServTop(value);
   }   

     /**
	 * 	Update ServTop 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setServTop(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	workFields.setServTop(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ServTop 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setServTop(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setServTop(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ServTop with another Field
	 *	@param value
	 */
   public void setServTop(Field source) {
   	workFields.setServTop(source);
   }  
   
     /**
	 * 	Update ServTop 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setServTop(Field source, int sourceIndex,int sourceLen) {
   	workFields.setServTop(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ServTop 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setServTop(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setServTop(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of feSvc6Fr
	 *	@return feSvc6Fr
	 */
   public char[] getFeSvc6Fr() throws CFException  {              
   		return workFields.getFeServFr().getFeSvc6Fr();
   }

  
	/**
	*  set variable feSvc6Fr
	*  @param value
	**/
   public void setFeSvc6Fr(char[] value) throws CFException {
      workFields.getFeServFr().setFeSvc6Fr(value);
   } 

     /**
	 * 	Update FeSvc6Fr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFeSvc6Fr(char[] source, int sourceIndex) throws CFException {
      workFields.getFeServFr().setFeSvc6Fr(source, sourceIndex);
   	
   }
   
   public void setFeSvc6Fr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getFeServFr().setFeSvc6Fr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeSvc6Fr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc6Fr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getFeServFr().setFeSvc6Fr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeSvc6Fr with another Field
	 *	@param value
	 */
   public void setFeSvc6Fr(Field source) {
      workFields.getFeServFr().setFeSvc6Fr(source);
   }  
   
     /**
	 * 	Update FeSvc6Fr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFeSvc6Fr(Field source, int sourceIndex,int sourceLen) {
      workFields.getFeServFr().setFeSvc6Fr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FeSvc6Fr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc6Fr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getFeServFr().setFeSvc6Fr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of feServFr
	 *	@return feServFr
	 */   
	 public FeServFr getFeServFr() {
   	return workFields.getFeServFr();
   }

   /**
	* 	Update FeServFr with the passed value
	*	@param value
	*/
   public void setFeServFr(char[] value) throws CFException {
      workFields.setFeServFr(value);
   }   

     /**
	 * 	Update FeServFr 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setFeServFr(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	workFields.setFeServFr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeServFr 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeServFr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setFeServFr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeServFr with another Field
	 *	@param value
	 */
   public void setFeServFr(Field source) {
   	workFields.setFeServFr(source);
   }  
   
     /**
	 * 	Update FeServFr 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setFeServFr(Field source, int sourceIndex,int sourceLen) {
   	workFields.setFeServFr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeServFr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeServFr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setFeServFr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrFromFrSvc
	 *	@return fesrFromFrSvc
	 */
   public char[] getFesrFromFrSvc(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondFrToSvc(index).getFesrFromFrSvc();
   }

  
	/**
	*  set variable fesrFromFrSvc
	*  @param value
	**/
   public void setFesrFromFrSvc(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(value);
   } 

     /**
	 * 	Update FesrFromFrSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex);
   	
   }
   
   public void setFesrFromFrSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromFrSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromFrSvc with another Field
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source);
   }  
   
     /**
	 * 	Update FesrFromFrSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromFrSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromFrSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromFrSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of feSvc15To
	 *	@return feSvc15To
	 */
   public char[] getFeSvc15To() throws CFException  {              
   		return workFields.getFeServTo().getFeSvc15To();
   }

  
	/**
	*  set variable feSvc15To
	*  @param value
	**/
   public void setFeSvc15To(char[] value) throws CFException {
      workFields.getFeServTo().setFeSvc15To(value);
   } 

     /**
	 * 	Update FeSvc15To 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFeSvc15To(char[] source, int sourceIndex) throws CFException {
      workFields.getFeServTo().setFeSvc15To(source, sourceIndex);
   	
   }
   
   public void setFeSvc15To(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getFeServTo().setFeSvc15To(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeSvc15To 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc15To(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getFeServTo().setFeSvc15To(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeSvc15To with another Field
	 *	@param value
	 */
   public void setFeSvc15To(Field source) {
      workFields.getFeServTo().setFeSvc15To(source);
   }  
   
     /**
	 * 	Update FeSvc15To 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFeSvc15To(Field source, int sourceIndex,int sourceLen) {
      workFields.getFeServTo().setFeSvc15To(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FeSvc15To 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc15To(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getFeServTo().setFeSvc15To(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of feSvc15Fr
	 *	@return feSvc15Fr
	 */
   public char[] getFeSvc15Fr() throws CFException  {              
   		return workFields.getFeServFr().getFeSvc15Fr();
   }

  
	/**
	*  set variable feSvc15Fr
	*  @param value
	**/
   public void setFeSvc15Fr(char[] value) throws CFException {
      workFields.getFeServFr().setFeSvc15Fr(value);
   } 

     /**
	 * 	Update FeSvc15Fr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFeSvc15Fr(char[] source, int sourceIndex) throws CFException {
      workFields.getFeServFr().setFeSvc15Fr(source, sourceIndex);
   	
   }
   
   public void setFeSvc15Fr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getFeServFr().setFeSvc15Fr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeSvc15Fr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc15Fr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getFeServFr().setFeSvc15Fr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeSvc15Fr with another Field
	 *	@param value
	 */
   public void setFeSvc15Fr(Field source) {
      workFields.getFeServFr().setFeSvc15Fr(source);
   }  
   
     /**
	 * 	Update FeSvc15Fr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFeSvc15Fr(Field source, int sourceIndex,int sourceLen) {
      workFields.getFeServFr().setFeSvc15Fr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FeSvc15Fr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc15Fr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getFeServFr().setFeSvc15Fr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of svc6
	 *	@return svc6
	 */
   public char[] getSvc6() throws CFException  {              
   		return workFields.getServTop().getSvc6();
   }

  
	/**
	*  set variable svc6
	*  @param value
	**/
   public void setSvc6(char[] value) throws CFException {
      workFields.getServTop().setSvc6(value);
   } 

     /**
	 * 	Update Svc6 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSvc6(char[] source, int sourceIndex) throws CFException {
      workFields.getServTop().setSvc6(source, sourceIndex);
   	
   }
   
   public void setSvc6(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServTop().setSvc6(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Svc6 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSvc6(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServTop().setSvc6(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Svc6 with another Field
	 *	@param value
	 */
   public void setSvc6(Field source) {
      workFields.getServTop().setSvc6(source);
   }  
   
     /**
	 * 	Update Svc6 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSvc6(Field source, int sourceIndex,int sourceLen) {
      workFields.getServTop().setSvc6(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Svc6 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSvc6(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServTop().setSvc6(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fromSvcFound
	 *	@return fromSvcFound
	 */
   public char[] getFromSvcFound() throws CFException  {              
   		return work.getFromSvcFound();
   }

  
	/**
	*  set variable fromSvcFound
	*  @param value
	**/
   public void setFromSvcFound(char[] value) throws CFException {
      work.setFromSvcFound(value);
   } 

	/**
	 *	Returns the value of medSvc
	 *	@return medSvc
	 */
   public char[] getMedSvc() throws CFException  {              
   		return work.getMedSvc();
   }

  
	/**
	*  set variable medSvc
	*  @param value
	**/
   public void setMedSvc(char[] value) throws CFException {
      work.setMedSvc(value);
   } 

	/**
	 *	Returns the value of svc15
	 *	@return svc15
	 */
   public char[] getSvc15() throws CFException  {              
   		return workFields.getServTop().getSvc15();
   }

  
	/**
	*  set variable svc15
	*  @param value
	**/
   public void setSvc15(char[] value) throws CFException {
      workFields.getServTop().setSvc15(value);
   } 

     /**
	 * 	Update Svc15 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSvc15(char[] source, int sourceIndex) throws CFException {
      workFields.getServTop().setSvc15(source, sourceIndex);
   	
   }
   
   public void setSvc15(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServTop().setSvc15(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Svc15 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSvc15(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServTop().setSvc15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Svc15 with another Field
	 *	@param value
	 */
   public void setSvc15(Field source) {
      workFields.getServTop().setSvc15(source);
   }  
   
     /**
	 * 	Update Svc15 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSvc15(Field source, int sourceIndex,int sourceLen) {
      workFields.getServTop().setSvc15(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Svc15 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSvc15(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServTop().setSvc15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesrFromToSvc
	 *	@return fesrFromToSvc
	 */
   public char[] getFesrFromToSvc(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondFrToSvc(index).getFesrFromToSvc();
   }

  
	/**
	*  set variable fesrFromToSvc
	*  @param value
	**/
   public void setFesrFromToSvc(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(value);
   } 

     /**
	 * 	Update FesrFromToSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex);
   	
   }
   
   public void setFesrFromToSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromToSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromToSvc with another Field
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source);
   }  
   
     /**
	 * 	Update FesrFromToSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromToSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromToSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToSvc(index).setFesrFromToSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of feServTo
	 *	@return feServTo
	 */   
	 public FeServTo getFeServTo() {
   	return workFields.getFeServTo();
   }

   /**
	* 	Update FeServTo with the passed value
	*	@param value
	*/
   public void setFeServTo(char[] value) throws CFException {
      workFields.setFeServTo(value);
   }   

     /**
	 * 	Update FeServTo 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setFeServTo(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	workFields.setFeServTo(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeServTo 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeServTo(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setFeServTo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeServTo with another Field
	 *	@param value
	 */
   public void setFeServTo(Field source) {
   	workFields.setFeServTo(source);
   }  
   
     /**
	 * 	Update FeServTo 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setFeServTo(Field source, int sourceIndex,int sourceLen) {
   	workFields.setFeServTo(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeServTo 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeServTo(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setFeServTo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uLineServiceCode51
	 *	@return uLineServiceCode51
	 */
   public char[] getULineServiceCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineServiceCode51();
   }

  
	/**
	*  set variable uLineServiceCode51
	*  @param value
	**/
   public void setULineServiceCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(value);
   } 

     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex);
   	
   }
   
   public void setULineServiceCode51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULineServiceCode51 with another Field
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source);
   }  
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public TopsCnvsvcFrToOutCtx clone() {
        TopsCnvsvcFrToOutCtx cloneObj = new TopsCnvsvcFrToOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public TopsCnvsvcFrToOutCtx getTopsCnvsvcFrToOutCtx() {
            return new TopsCnvsvcFrToOutCtx();
    }
     public class SearchPrvInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of pvSub
	 *	@return pvSub
	 */
	public int getPvSub() throws CFException {        
   		return work.getPvSub();
	}
	
	/**
	 * 	Update PvSub with the passed value
	 *	@param number
	 */
	public void setPvSub(int number)  throws CFException{
		work.setPvSub(number);
	}


	public void setPvSub(long number)  throws CFException{
		work.setPvSub((int)number);
	}


	/**
	 *	Returns the value of fesrFromPrvTyp
	 *	@return fesrFromPrvTyp
	 */
   public char[] getFesrFromPrvTyp(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondPrvTyp(index).getFesrFromPrvTyp();
   }

  
	/**
	*  set variable fesrFromPrvTyp
	*  @param value
	**/
   public void setFesrFromPrvTyp(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondPrvTyp(index).setFesrFromPrvTyp(value);
   } 

     /**
	 * 	Update FesrFromPrvTyp 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromPrvTyp(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondPrvTyp(index).setFesrFromPrvTyp(source, sourceIndex);
   	
   }
   
   public void setFesrFromPrvTyp(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondPrvTyp(index).setFesrFromPrvTyp(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromPrvTyp 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromPrvTyp(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondPrvTyp(index).setFesrFromPrvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromPrvTyp with another Field
	 *	@param value
	 */
   public void setFesrFromPrvTyp(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondPrvTyp(index).setFesrFromPrvTyp(source);
   }  
   
     /**
	 * 	Update FesrFromPrvTyp 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromPrvTyp(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondPrvTyp(index).setFesrFromPrvTyp(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromPrvTyp 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromPrvTyp(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondPrvTyp(index).setFesrFromPrvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uProvType51
	 *	@return uProvType51
	 */
   public char[] getUProvType51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUProvType51();
   }

  
	/**
	*  set variable uProvType51
	*  @param value
	**/
   public void setUProvType51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(value);
   } 

     /**
	 * 	Update UProvType51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUProvType51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex);
   	
   }
   
   public void setUProvType51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UProvType51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUProvType51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UProvType51 with another Field
	 *	@param value
	 */
   public void setUProvType51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source);
   }  
   
     /**
	 * 	Update UProvType51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUProvType51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UProvType51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUProvType51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public SearchPrvOutCtx getSearchPrvOutCtx() {
            return new SearchPrvOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public SearchPrvInCtx clone() {
        SearchPrvInCtx cloneObj = new SearchPrvInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public SearchPrvInCtx getSearchPrvInCtx() {
            return new SearchPrvInCtx();
    }
     public class SearchPrvOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of fromPrvFound
	 *	@return fromPrvFound
	 */
   public char[] getFromPrvFound() throws CFException  {              
   		return work.getFromPrvFound();
   }

  
	/**
	*  set variable fromPrvFound
	*  @param value
	**/
   public void setFromPrvFound(char[] value) throws CFException {
      work.setFromPrvFound(value);
   } 


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public SearchPrvOutCtx clone() {
        SearchPrvOutCtx cloneObj = new SearchPrvOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public SearchPrvOutCtx getSearchPrvOutCtx() {
            return new SearchPrvOutCtx();
    }
     public class SearchIcd9InCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of d51uRicdClmIcdInd
	 *	@return d51uRicdClmIcdInd
	 */
   public char[] getD51uRicdClmIcdInd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdClmIcdInd();
   }

  
	/**
	*  set variable d51uRicdClmIcdInd
	*  @param value
	**/
   public void setD51uRicdClmIcdInd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(value);
   } 

     /**
	 * 	Update D51uRicdClmIcdInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex);
   	
   }
   
   public void setD51uRicdClmIcdInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdClmIcdInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdClmIcdInd with another Field
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source);
   }  
   
     /**
	 * 	Update D51uRicdClmIcdInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdClmIcdInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of s1
	 *	@return s1
	 */
	public int getS1() throws CFException {        
   		return work.getS1();
	}
	
	/**
	 * 	Update S1 with the passed value
	 *	@param number
	 */
	public void setS1(int number)  throws CFException{
		work.setS1(number);
	}


	public void setS1(long number)  throws CFException{
		work.setS1((int)number);
	}


	/**
	 *	Returns the value of uSourceInd51
	 *	@return uSourceInd51
	 */
   public char[] getUSourceInd51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUSourceInd51();
   }

  
	/**
	*  set variable uSourceInd51
	*  @param value
	**/
   public void setUSourceInd51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSourceInd51(value);
   } 

     /**
	 * 	Update USourceInd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUSourceInd51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSourceInd51(source, sourceIndex);
   	
   }
   
   public void setUSourceInd51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSourceInd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update USourceInd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUSourceInd51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSourceInd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update USourceInd51 with another Field
	 *	@param value
	 */
   public void setUSourceInd51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSourceInd51(source);
   }  
   
     /**
	 * 	Update USourceInd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUSourceInd51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSourceInd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update USourceInd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUSourceInd51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSourceInd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of point3
	 *	@return point3
	 */
	public int getPoint3() throws CFException {
   		return workFields.getPoint().getPoint3();
	}


	/**
	 *	Returns String value of point3
	 *	@return point3
	 */
	public char[]  getPoint3String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint3String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point3IsNumeric()  throws CFException{
	    return workFields.getPoint().point3IsNumeric();
	}

	/**
	 * 	Update Point3 with the passed value
	 *	@param number
	 */
	public void setPoint3(int number)  throws CFException{
		workFields.getPoint().setPoint3(number);
	}
	

	public void setPoint3(long number)  throws CFException{
	    workFields.getPoint().setPoint3(number);
	}
	
	
	/**
	 * 	Update Point3 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint3(char[] value)  throws CFException {
		workFields.getPoint().setPoint3(value);
	}
	
	/**
	 * 	Update Point3 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint3String(char[] value)  throws CFException{
		workFields.getPoint().setPoint3(value);
	}	

	/**
	 *	Returns the value of point1
	 *	@return point1
	 */
	public int getPoint1() throws CFException {
   		return workFields.getPoint().getPoint1();
	}


	/**
	 *	Returns String value of point1
	 *	@return point1
	 */
	public char[]  getPoint1String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint1String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point1IsNumeric()  throws CFException{
	    return workFields.getPoint().point1IsNumeric();
	}

	/**
	 * 	Update Point1 with the passed value
	 *	@param number
	 */
	public void setPoint1(int number)  throws CFException{
		workFields.getPoint().setPoint1(number);
	}
	

	public void setPoint1(long number)  throws CFException{
	    workFields.getPoint().setPoint1(number);
	}
	
	
	/**
	 * 	Update Point1 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint1(char[] value)  throws CFException {
		workFields.getPoint().setPoint1(value);
	}
	
	/**
	 * 	Update Point1 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint1String(char[] value)  throws CFException{
		workFields.getPoint().setPoint1(value);
	}	

	/**
	 *	Returns the value of uLineDiagPointer51
	 *	@return uLineDiagPointer51
	 */
   public char[] getULineDiagPointer51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineDiagPointer51();
   }

  
	/**
	*  set variable uLineDiagPointer51
	*  @param value
	**/
   public void setULineDiagPointer51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(value);
   } 

     /**
	 * 	Update ULineDiagPointer51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex);
   	
   }
   
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULineDiagPointer51 with another Field
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source);
   }  
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uDiagnosisCode51
	 *	@return uDiagnosisCode51
	 */
   public char[] getUDiagnosisCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUDiagnosisCode51(index);
   }

  
	/**
	*  set variable uDiagnosisCode51
	*  @param value
	**/
   public void setUDiagnosisCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUDiagnosisCode51((index),value);
   } 

	/**
	 *	Returns the value of fesrFromFrIcd9
	 *	@return fesrFromFrIcd9
	 */
   public char[] getFesrFromFrIcd9(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondFrToIcd9(index).getFesrFromFrIcd9();
   }

  
	/**
	*  set variable fesrFromFrIcd9
	*  @param value
	**/
   public void setFesrFromFrIcd9(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromFrIcd9(value);
   } 

     /**
	 * 	Update FesrFromFrIcd9 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromFrIcd9(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromFrIcd9(source, sourceIndex);
   	
   }
   
   public void setFesrFromFrIcd9(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromFrIcd9(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromFrIcd9 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromFrIcd9(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromFrIcd9(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromFrIcd9 with another Field
	 *	@param value
	 */
   public void setFesrFromFrIcd9(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromFrIcd9(source);
   }  
   
     /**
	 * 	Update FesrFromFrIcd9 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromFrIcd9(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromFrIcd9(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromFrIcd9 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromFrIcd9(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromFrIcd9(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fromIcd9Found
	 *	@return fromIcd9Found
	 */
   public char[] getFromIcd9Found() throws CFException  {              
   		return work.getFromIcd9Found();
   }

  
	/**
	*  set variable fromIcd9Found
	*  @param value
	**/
   public void setFromIcd9Found(char[] value) throws CFException {
      work.setFromIcd9Found(value);
   } 

	/**
	 *	Test condition "Y" for isFromIcd9Found1()
	 *	@return  Returns true if isFromIcd9Found1() is "Y"
	 */
   public boolean isFromIcd9Found1() throws CFException {
      return work.isFromIcd9Found1();
   }

	/**
	*  set values "Y"
	*/
   	public void setFromIcd9Found1True()  throws CFException{  			
    	work.setFromIcd9Found1True();
   	}
	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of uIcdVerNbr51
	 *	@return uIcdVerNbr51
	 */
   public char[] getUIcdVerNbr51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUIcdVerNbr51();
   }

  
	/**
	*  set variable uIcdVerNbr51
	*  @param value
	**/
   public void setUIcdVerNbr51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(value);
   } 

     /**
	 * 	Update UIcdVerNbr51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUIcdVerNbr51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex);
   	
   }
   
   public void setUIcdVerNbr51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UIcdVerNbr51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUIcdVerNbr51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UIcdVerNbr51 with another Field
	 *	@param value
	 */
   public void setUIcdVerNbr51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source);
   }  
   
     /**
	 * 	Update UIcdVerNbr51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUIcdVerNbr51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UIcdVerNbr51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUIcdVerNbr51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of point4
	 *	@return point4
	 */
	public int getPoint4() throws CFException {
   		return workFields.getPoint().getPoint4();
	}


	/**
	 *	Returns String value of point4
	 *	@return point4
	 */
	public char[]  getPoint4String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint4String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point4IsNumeric()  throws CFException{
	    return workFields.getPoint().point4IsNumeric();
	}

	/**
	 * 	Update Point4 with the passed value
	 *	@param number
	 */
	public void setPoint4(int number)  throws CFException{
		workFields.getPoint().setPoint4(number);
	}
	

	public void setPoint4(long number)  throws CFException{
	    workFields.getPoint().setPoint4(number);
	}
	
	
	/**
	 * 	Update Point4 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint4(char[] value)  throws CFException {
		workFields.getPoint().setPoint4(value);
	}
	
	/**
	 * 	Update Point4 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint4String(char[] value)  throws CFException{
		workFields.getPoint().setPoint4(value);
	}	

	/**
	 *	Returns the value of fesrFromToIcd9
	 *	@return fesrFromToIcd9
	 */
   public char[] getFesrFromToIcd9(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondFrToIcd9(index).getFesrFromToIcd9();
   }

  
	/**
	*  set variable fesrFromToIcd9
	*  @param value
	**/
   public void setFesrFromToIcd9(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromToIcd9(value);
   } 

     /**
	 * 	Update FesrFromToIcd9 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromToIcd9(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromToIcd9(source, sourceIndex);
   	
   }
   
   public void setFesrFromToIcd9(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromToIcd9(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromToIcd9 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromToIcd9(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromToIcd9(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromToIcd9 with another Field
	 *	@param value
	 */
   public void setFesrFromToIcd9(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromToIcd9(source);
   }  
   
     /**
	 * 	Update FesrFromToIcd9 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromToIcd9(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromToIcd9(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromToIcd9 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromToIcd9(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondFrToIcd9(index).setFesrFromToIcd9(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isSearchComplete1()
	 *	@return  Returns true if isSearchComplete1() is "Y"
	 */
   public boolean isSearchComplete1() throws CFException {
      return work.isSearchComplete1();
   }

	/**
	*  set values "Y"
	*/
   	public void setSearchComplete1True()  throws CFException{  			
    	work.setSearchComplete1True();
   	}
	/**
	 *	Returns the value of uMedicalClaim51
	 *	@return uMedicalClaim51
	 */
   public char[] getUMedicalClaim51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUMedicalClaim51();
   }

  
	/**
	*  set variable uMedicalClaim51
	*  @param value
	**/
   public void setUMedicalClaim51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(value);
   } 

     /**
	 * 	Update UMedicalClaim51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUMedicalClaim51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex);
   	
   }
   
   public void setUMedicalClaim51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UMedicalClaim51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUMedicalClaim51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UMedicalClaim51 with another Field
	 *	@param value
	 */
   public void setUMedicalClaim51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source);
   }  
   
     /**
	 * 	Update UMedicalClaim51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUMedicalClaim51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UMedicalClaim51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUMedicalClaim51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of point2
	 *	@return point2
	 */
	public int getPoint2() throws CFException {
   		return workFields.getPoint().getPoint2();
	}


	/**
	 *	Returns String value of point2
	 *	@return point2
	 */
	public char[]  getPoint2String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint2String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point2IsNumeric()  throws CFException{
	    return workFields.getPoint().point2IsNumeric();
	}

	/**
	 * 	Update Point2 with the passed value
	 *	@param number
	 */
	public void setPoint2(int number)  throws CFException{
		workFields.getPoint().setPoint2(number);
	}
	

	public void setPoint2(long number)  throws CFException{
	    workFields.getPoint().setPoint2(number);
	}
	
	
	/**
	 * 	Update Point2 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint2(char[] value)  throws CFException {
		workFields.getPoint().setPoint2(value);
	}
	
	/**
	 * 	Update Point2 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint2String(char[] value)  throws CFException{
		workFields.getPoint().setPoint2(value);
	}	

	/**
	 *	Returns the value of icd9Sub
	 *	@return icd9Sub
	 */
	public int getIcd9Sub() throws CFException {        
   		return work.getIcd9Sub();
	}
	
	/**
	 * 	Update Icd9Sub with the passed value
	 *	@param number
	 */
	public void setIcd9Sub(int number)  throws CFException{
		work.setIcd9Sub(number);
	}


	public void setIcd9Sub(long number)  throws CFException{
		work.setIcd9Sub((int)number);
	}


	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public SearchIcd9OutCtx getSearchIcd9OutCtx() {
            return new SearchIcd9OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public SearchIcd9InCtx clone() {
        SearchIcd9InCtx cloneObj = new SearchIcd9InCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public SearchIcd9InCtx getSearchIcd9InCtx() {
            return new SearchIcd9InCtx();
    }
     public class SearchIcd9OutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of s1
	 *	@return s1
	 */
	public int getS1() throws CFException {        
   		return work.getS1();
	}
	
	/**
	 * 	Update S1 with the passed value
	 *	@param number
	 */
	public void setS1(int number)  throws CFException{
		work.setS1(number);
	}


	public void setS1(long number)  throws CFException{
		work.setS1((int)number);
	}


	/**
	 *	Returns the value of point3
	 *	@return point3
	 */
	public int getPoint3() throws CFException {
   		return workFields.getPoint().getPoint3();
	}


	/**
	 *	Returns String value of point3
	 *	@return point3
	 */
	public char[]  getPoint3String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint3String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point3IsNumeric()  throws CFException{
	    return workFields.getPoint().point3IsNumeric();
	}

	/**
	 * 	Update Point3 with the passed value
	 *	@param number
	 */
	public void setPoint3(int number)  throws CFException{
		workFields.getPoint().setPoint3(number);
	}
	

	public void setPoint3(long number)  throws CFException{
	    workFields.getPoint().setPoint3(number);
	}
	
	
	/**
	 * 	Update Point3 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint3(char[] value)  throws CFException {
		workFields.getPoint().setPoint3(value);
	}
	
	/**
	 * 	Update Point3 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint3String(char[] value)  throws CFException{
		workFields.getPoint().setPoint3(value);
	}	

	/**
	 *	Returns the value of point1
	 *	@return point1
	 */
	public int getPoint1() throws CFException {
   		return workFields.getPoint().getPoint1();
	}


	/**
	 *	Returns String value of point1
	 *	@return point1
	 */
	public char[]  getPoint1String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint1String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point1IsNumeric()  throws CFException{
	    return workFields.getPoint().point1IsNumeric();
	}

	/**
	 * 	Update Point1 with the passed value
	 *	@param number
	 */
	public void setPoint1(int number)  throws CFException{
		workFields.getPoint().setPoint1(number);
	}
	

	public void setPoint1(long number)  throws CFException{
	    workFields.getPoint().setPoint1(number);
	}
	
	
	/**
	 * 	Update Point1 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint1(char[] value)  throws CFException {
		workFields.getPoint().setPoint1(value);
	}
	
	/**
	 * 	Update Point1 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint1String(char[] value)  throws CFException{
		workFields.getPoint().setPoint1(value);
	}	

	/**
	 *	Returns the value of uLineDiagPointer51
	 *	@return uLineDiagPointer51
	 */
   public char[] getULineDiagPointer51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineDiagPointer51();
   }

  
	/**
	*  set variable uLineDiagPointer51
	*  @param value
	**/
   public void setULineDiagPointer51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(value);
   } 

     /**
	 * 	Update ULineDiagPointer51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex);
   	
   }
   
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULineDiagPointer51 with another Field
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source);
   }  
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fromIcd9Found
	 *	@return fromIcd9Found
	 */
   public char[] getFromIcd9Found() throws CFException  {              
   		return work.getFromIcd9Found();
   }

  
	/**
	*  set variable fromIcd9Found
	*  @param value
	**/
   public void setFromIcd9Found(char[] value) throws CFException {
      work.setFromIcd9Found(value);
   } 

	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of point
	 *	@return point
	 */   
	 public Point getPoint() {
   	return workFields.getPoint();
   }

   /**
	* 	Update Point with the passed value
	*	@param value
	*/
   public void setPoint(char[] value) throws CFException {
      workFields.setPoint(value);
   }   

     /**
	 * 	Update Point 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setPoint(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	workFields.setPoint(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Point 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPoint(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setPoint(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Point with another Field
	 *	@param value
	 */
   public void setPoint(Field source) {
   	workFields.setPoint(source);
   }  
   
     /**
	 * 	Update Point 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setPoint(Field source, int sourceIndex,int sourceLen) {
   	workFields.setPoint(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Point 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPoint(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setPoint(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of point4
	 *	@return point4
	 */
	public int getPoint4() throws CFException {
   		return workFields.getPoint().getPoint4();
	}


	/**
	 *	Returns String value of point4
	 *	@return point4
	 */
	public char[]  getPoint4String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint4String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point4IsNumeric()  throws CFException{
	    return workFields.getPoint().point4IsNumeric();
	}

	/**
	 * 	Update Point4 with the passed value
	 *	@param number
	 */
	public void setPoint4(int number)  throws CFException{
		workFields.getPoint().setPoint4(number);
	}
	

	public void setPoint4(long number)  throws CFException{
	    workFields.getPoint().setPoint4(number);
	}
	
	
	/**
	 * 	Update Point4 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint4(char[] value)  throws CFException {
		workFields.getPoint().setPoint4(value);
	}
	
	/**
	 * 	Update Point4 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint4String(char[] value)  throws CFException{
		workFields.getPoint().setPoint4(value);
	}	

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of point2
	 *	@return point2
	 */
	public int getPoint2() throws CFException {
   		return workFields.getPoint().getPoint2();
	}


	/**
	 *	Returns String value of point2
	 *	@return point2
	 */
	public char[]  getPoint2String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint2String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point2IsNumeric()  throws CFException{
	    return workFields.getPoint().point2IsNumeric();
	}

	/**
	 * 	Update Point2 with the passed value
	 *	@param number
	 */
	public void setPoint2(int number)  throws CFException{
		workFields.getPoint().setPoint2(number);
	}
	

	public void setPoint2(long number)  throws CFException{
	    workFields.getPoint().setPoint2(number);
	}
	
	
	/**
	 * 	Update Point2 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint2(char[] value)  throws CFException {
		workFields.getPoint().setPoint2(value);
	}
	
	/**
	 * 	Update Point2 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint2String(char[] value)  throws CFException{
		workFields.getPoint().setPoint2(value);
	}	

	/**
	 *	Test condition "Y" for isUseDiagnosis()
	 *	@return  Returns true if isUseDiagnosis() is "Y"
	 */
   public boolean isUseDiagnosis() throws CFException {
      return work.isUseDiagnosis();
   }

	/**
	*  set values "Y"
	*/
   	public void setUseDiagnosisTrue()  throws CFException{  			
    	work.setUseDiagnosisTrue();
   	}
	/**
	 *	Returns the value of useDiagnosisSw
	 *	@return useDiagnosisSw
	 */
   public char[] getUseDiagnosisSw() throws CFException  {              
   		return work.getUseDiagnosisSw();
   }

  
	/**
	*  set variable useDiagnosisSw
	*  @param value
	**/
   public void setUseDiagnosisSw(char[] value) throws CFException {
      work.setUseDiagnosisSw(value);
   } 


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public SearchIcd9OutCtx clone() {
        SearchIcd9OutCtx cloneObj = new SearchIcd9OutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public SearchIcd9OutCtx getSearchIcd9OutCtx() {
            return new SearchIcd9OutCtx();
    }
     public class SearchCauseInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of fesrFromCauseCd
	 *	@return fesrFromCauseCd
	 */
   public char[] getFesrFromCauseCd(int index) throws CFException  {              
   		return feSpiRulesRecord.getFesrFromCondCause(index).getFesrFromCauseCd();
   }

  
	/**
	*  set variable fesrFromCauseCd
	*  @param value
	**/
   public void setFesrFromCauseCd(int index,char[] value) throws CFException {
      feSpiRulesRecord.getFesrFromCondCause(index).setFesrFromCauseCd(value);
   } 

     /**
	 * 	Update FesrFromCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesrFromCauseCd(int index,char[] source, int sourceIndex) throws CFException {
      feSpiRulesRecord.getFesrFromCondCause(index).setFesrFromCauseCd(source, sourceIndex);
   	
   }
   
   public void setFesrFromCauseCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiRulesRecord.getFesrFromCondCause(index).setFesrFromCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesrFromCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromCauseCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondCause(index).setFesrFromCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesrFromCauseCd with another Field
	 *	@param value
	 */
   public void setFesrFromCauseCd(int index,Field source) {
      feSpiRulesRecord.getFesrFromCondCause(index).setFesrFromCauseCd(source);
   }  
   
     /**
	 * 	Update FesrFromCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesrFromCauseCd(int index,Field source, int sourceIndex,int sourceLen) {
      feSpiRulesRecord.getFesrFromCondCause(index).setFesrFromCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesrFromCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesrFromCauseCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiRulesRecord.getFesrFromCondCause(index).setFesrFromCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uCauseCd51
	 *	@return uCauseCd51
	 */
   public char[] getUCauseCd51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUCauseCd51();
   }

  
	/**
	*  set variable uCauseCd51
	*  @param value
	**/
   public void setUCauseCd51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(value);
   } 

     /**
	 * 	Update UCauseCd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUCauseCd51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex);
   	
   }
   
   public void setUCauseCd51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UCauseCd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUCauseCd51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UCauseCd51 with another Field
	 *	@param value
	 */
   public void setUCauseCd51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source);
   }  
   
     /**
	 * 	Update UCauseCd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUCauseCd51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UCauseCd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUCauseCd51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of causeSub
	 *	@return causeSub
	 */
	public int getCauseSub() throws CFException {        
   		return work.getCauseSub();
	}
	
	/**
	 * 	Update CauseSub with the passed value
	 *	@param number
	 */
	public void setCauseSub(int number)  throws CFException{
		work.setCauseSub(number);
	}


	public void setCauseSub(long number)  throws CFException{
		work.setCauseSub((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public SearchCauseOutCtx getSearchCauseOutCtx() {
            return new SearchCauseOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public SearchCauseInCtx clone() {
        SearchCauseInCtx cloneObj = new SearchCauseInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public SearchCauseInCtx getSearchCauseInCtx() {
            return new SearchCauseInCtx();
    }
     public class SearchCauseOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fromCauseFound
	 *	@return fromCauseFound
	 */
   public char[] getFromCauseFound() throws CFException  {              
   		return work.getFromCauseFound();
   }

  
	/**
	*  set variable fromCauseFound
	*  @param value
	**/
   public void setFromCauseFound(char[] value) throws CFException {
      work.setFromCauseFound(value);
   } 

	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public SearchCauseOutCtx clone() {
        SearchCauseOutCtx cloneObj = new SearchCauseOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public SearchCauseOutCtx getSearchCauseOutCtx() {
            return new SearchCauseOutCtx();
    }
     public class MatchIpaToPpoaltInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of ppaFixedPortion
	 *	@return ppaFixedPortion
	 */   
	 public PpaFixedPortion getPpaFixedPortion() {
   	return dfhcommarea.getPpaPpoaltRecord().getPpaFixedPortion();
   }

   /**
	* 	Update PpaFixedPortion with the passed value
	*	@param value
	*/
   public void setPpaFixedPortion(char[] value) throws CFException {
      dfhcommarea.getPpaPpoaltRecord().setPpaFixedPortion(value);
   }   

     /**
	 * 	Update PpaFixedPortion 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setPpaFixedPortion(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dfhcommarea.getPpaPpoaltRecord().setPpaFixedPortion(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PpaFixedPortion 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPpaFixedPortion(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dfhcommarea.getPpaPpoaltRecord().setPpaFixedPortion(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PpaFixedPortion with another Field
	 *	@param value
	 */
   public void setPpaFixedPortion(Field source) {
   	dfhcommarea.getPpaPpoaltRecord().setPpaFixedPortion(source);
   }  
   
     /**
	 * 	Update PpaFixedPortion 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setPpaFixedPortion(Field source, int sourceIndex,int sourceLen) {
   	dfhcommarea.getPpaPpoaltRecord().setPpaFixedPortion(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PpaFixedPortion 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPpaFixedPortion(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dfhcommarea.getPpaPpoaltRecord().setPpaFixedPortion(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getPpaIpa(int index) throws CFException {  
        return dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().getPpaIpa();
}
	/**
	 * 	Update PpaIpa with the passed value
	 *	@param number
	 */
	public void setPpaIpa(int index,int number)  throws CFException{
		dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaIpa(number);
	}


	public void setPpaIpa(int index,long number)  throws CFException{
	    dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaIpa(number);
	}
	

public int getPpaFirstEffDate(int index) throws CFException {  
        return dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().getPpaFirstEffDate();
}
	/**
	 * 	Update PpaFirstEffDate with the passed value
	 *	@param number
	 */
	public void setPpaFirstEffDate(int index,int number)  throws CFException{
		dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaFirstEffDate(number);
	}


	public void setPpaFirstEffDate(int index,long number)  throws CFException{
	    dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaFirstEffDate(number);
	}
	

public int getPpaLastCanDate(int index) throws CFException {  
        return dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().getPpaLastCanDate();
}
	/**
	 * 	Update PpaLastCanDate with the passed value
	 *	@param number
	 */
	public void setPpaLastCanDate(int index,int number)  throws CFException{
		dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaLastCanDate(number);
	}


	public void setPpaLastCanDate(int index,long number)  throws CFException{
	    dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaLastCanDate(number);
	}
	

	/**
	 *	Returns the value of ipaSub
	 *	@return ipaSub
	 */
	public int getIpaSub() throws CFException {        
   		return work.getIpaSub();
	}
	
	/**
	 * 	Update IpaSub with the passed value
	 *	@param number
	 */
	public void setIpaSub(int number)  throws CFException{
		work.setIpaSub(number);
	}


	public void setIpaSub(long number)  throws CFException{
		work.setIpaSub((int)number);
	}


public short getPpaPpoIdCount() throws CFException {  
        return dfhcommarea.getPpaPpoaltRecord().getPpaFixedPortion().getPpaPpoIdCount();
}
	/**
	 * 	Update PpaPpoIdCount with the passed value
	 *	@param number
	 */
	public void setPpaPpoIdCount(short number)  throws CFException{
		dfhcommarea.getPpaPpoaltRecord().getPpaFixedPortion().setPpaPpoIdCount(number);
	}

	public void setPpaPpoIdCount(int number)  throws CFException{
	   dfhcommarea.getPpaPpoaltRecord().getPpaFixedPortion().setPpaPpoIdCount(number);
	}
	public void setPpaPpoIdCount(long number)  throws CFException {
	    dfhcommarea.getPpaPpoaltRecord().getPpaFixedPortion().setPpaPpoIdCount(number);
	}
	


	/**
	 *	Returns the value of uEarliestDos51
	 *	@return uEarliestDos51
	 */
	public long getUEarliestDos51() throws CFException {
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUEarliestDos51();
	}


	/**
	 *	Returns String value of uEarliestDos51
	 *	@return uEarliestDos51
	 */
	public char[]  getUEarliestDos51String() throws CFException {
	     return String.valueOf(dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUEarliestDos51String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean uEarliestDos51IsNumeric()  throws CFException{
	    return dfhcommarea.getLinkAreaM51u().getM51uLinkage().uEarliestDos51IsNumeric();
	}

	/**
	 * 	Update UEarliestDos51 with the passed value
	 *	@param number
	 */
	public void setUEarliestDos51(long number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUEarliestDos51(number);
	}
	

	
	/**
	 * 	Update UEarliestDos51 with the passed value
	 *	@param value (String or char[])
	 */
	public void setUEarliestDos51(char[] value)  throws CFException {
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUEarliestDos51(value);
	}
	
	/**
	 * 	Update UEarliestDos51 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setUEarliestDos51String(char[] value)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUEarliestDos51(value);
	}	

	/**
	 *	Returns the value of fesrIpaCd
	 *	@return fesrIpaCd
	 */
	public int getFesrIpaCd(int index) throws CFException {
   		return feSpiRulesRecord.getFesrIpaCode(index).getFesrIpaCd();
	}


	/**
	 *	Returns String value of fesrIpaCd
	 *	@return fesrIpaCd
	 */
	public char[]  getFesrIpaCdString(int index) throws CFException {
	     return String.valueOf(feSpiRulesRecord.getFesrIpaCode(index).getFesrIpaCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean fesrIpaCdIsNumeric(int index)  throws CFException{
	    return feSpiRulesRecord.getFesrIpaCode(index - 1).fesrIpaCdIsNumeric();
	}

	/**
	 * 	Update FesrIpaCd with the passed value
	 *	@param number
	 */
	public void setFesrIpaCd(int index,int number)  throws CFException{
		feSpiRulesRecord.getFesrIpaCode(index).setFesrIpaCd(number);
	}
	

	public void setFesrIpaCd(int index,long number)  throws CFException{
	    feSpiRulesRecord.getFesrIpaCode(index).setFesrIpaCd(number);
	}
	
	
	/**
	 * 	Update FesrIpaCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setFesrIpaCd(int index,char[] value)  throws CFException {
		feSpiRulesRecord.getFesrIpaCode(index).setFesrIpaCd(value);
	}
	
	/**
	 * 	Update FesrIpaCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setFesrIpaCdString(int index,char[] value)  throws CFException{
		feSpiRulesRecord.getFesrIpaCode(index).setFesrIpaCd(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public MatchIpaToPpoaltOutCtx getMatchIpaToPpoaltOutCtx() {
            return new MatchIpaToPpoaltOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += dfhcommarea.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public MatchIpaToPpoaltInCtx clone() {
        MatchIpaToPpoaltInCtx cloneObj = new MatchIpaToPpoaltInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public MatchIpaToPpoaltInCtx getMatchIpaToPpoaltInCtx() {
            return new MatchIpaToPpoaltInCtx();
    }
     public class MatchIpaToPpoaltOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     FeSpiRulesRecord feSpiRulesRecord = O529351uCtx.this.getFeSpiRulesRecord();

	/**
	 *	Returns the value of ipaCodeFound
	 *	@return ipaCodeFound
	 */
   public char[] getIpaCodeFound() throws CFException  {              
   		return work.getIpaCodeFound();
   }

  
	/**
	*  set variable ipaCodeFound
	*  @param value
	**/
   public void setIpaCodeFound(char[] value) throws CFException {
      work.setIpaCodeFound(value);
   } 

	/**
	 *	Returns the value of ipaSub
	 *	@return ipaSub
	 */
	public int getIpaSub() throws CFException {        
   		return work.getIpaSub();
	}
	
	/**
	 * 	Update IpaSub with the passed value
	 *	@param number
	 */
	public void setIpaSub(int number)  throws CFException{
		work.setIpaSub(number);
	}


	public void setIpaSub(long number)  throws CFException{
		work.setIpaSub((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += dfhcommarea.hashCode();
        str += feSpiRulesRecord.hashCode();
       return str.hashCode();
    }

    public MatchIpaToPpoaltOutCtx clone() {
        MatchIpaToPpoaltOutCtx cloneObj = new MatchIpaToPpoaltOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.feSpiRulesRecord = new FeSpiRulesRecord();
        cloneObj.feSpiRulesRecord.set(feSpiRulesRecord.getClonedField());
        return cloneObj;
    }

    }

    public MatchIpaToPpoaltOutCtx getMatchIpaToPpoaltOutCtx() {
            return new MatchIpaToPpoaltOutCtx();
    }
     public class CheckServiceCodesInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     CsvcCodeGroup csvcCodeGroup = O529351uCtx.this.getCsvcCodeGroup();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     CsvcProc csvcProc = O529351uCtx.this.getCsvcProc();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of csvcProc
	 *	@return csvcProc
	 */   
	 public CsvcProc getCsvcProc() {
   	return csvcProc;
   }


	/**
	 *	Returns the value of uLineServiceCode51
	 *	@return uLineServiceCode51
	 */
   public char[] getULineServiceCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineServiceCode51();
   }

  
	/**
	*  set variable uLineServiceCode51
	*  @param value
	**/
   public void setULineServiceCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(value);
   } 

     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex);
   	
   }
   
   public void setULineServiceCode51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULineServiceCode51 with another Field
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source);
   }  
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}


	/**
	 *	Returns the value of ckServCls
	 *	@return ckServCls
	 */   
	 public CkServCls getCkServCls() {
   	return workFields.getCkServCls();
   }

   /**
	* 	Update CkServCls with the passed value
	*	@param value
	*/
   public void setCkServCls(char[] value) throws CFException {
      workFields.setCkServCls(value);
   }   

     /**
	 * 	Update CkServCls 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setCkServCls(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	workFields.setCkServCls(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CkServCls 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCkServCls(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setCkServCls(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CkServCls with another Field
	 *	@param value
	 */
   public void setCkServCls(Field source) {
   	workFields.setCkServCls(source);
   }  
   
     /**
	 * 	Update CkServCls 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setCkServCls(Field source, int sourceIndex,int sourceLen) {
   	workFields.setCkServCls(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CkServCls 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCkServCls(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setCkServCls(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public CheckServiceCodesOutCtx getCheckServiceCodesOutCtx() {
            return new CheckServiceCodesOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += csvcCodeGroup.hashCode();
        str += workFields.hashCode();
        str += csvcProc.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public CheckServiceCodesInCtx clone() {
        CheckServiceCodesInCtx cloneObj = new CheckServiceCodesInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.csvcCodeGroup = new CsvcCodeGroup();
        cloneObj.csvcCodeGroup.set(csvcCodeGroup.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.csvcProc = new CsvcProc();
        cloneObj.csvcProc.set(csvcProc.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public CheckServiceCodesInCtx getCheckServiceCodesInCtx() {
            return new CheckServiceCodesInCtx();
    }
     public class CheckServiceCodesOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     CsvcCodeGroup csvcCodeGroup = O529351uCtx.this.getCsvcCodeGroup();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     CsvcProc csvcProc = O529351uCtx.this.getCsvcProc();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of topsCnvSvc
	 *	@return topsCnvSvc
	 */
   public char[] getTopsCnvSvc() throws CFException  {              
   		return work.getTopsCnvSvc();
   }

  
	/**
	*  set variable topsCnvSvc
	*  @param value
	**/
   public void setTopsCnvSvc(char[] value) throws CFException {
      work.setTopsCnvSvc(value);
   } 

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of servTop
	 *	@return servTop
	 */   
	 public ServTop getServTop() {
   	return workFields.getServTop();
   }

   /**
	* 	Update ServTop with the passed value
	*	@param value
	*/
   public void setServTop(char[] value) throws CFException {
      workFields.setServTop(value);
   }   

     /**
	 * 	Update ServTop 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setServTop(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	workFields.setServTop(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ServTop 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setServTop(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setServTop(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ServTop with another Field
	 *	@param value
	 */
   public void setServTop(Field source) {
   	workFields.setServTop(source);
   }  
   
     /**
	 * 	Update ServTop 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setServTop(Field source, int sourceIndex,int sourceLen) {
   	workFields.setServTop(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ServTop 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setServTop(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setServTop(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of medSvc
	 *	@return medSvc
	 */
   public char[] getMedSvc() throws CFException  {              
   		return work.getMedSvc();
   }

  
	/**
	*  set variable medSvc
	*  @param value
	**/
   public void setMedSvc(char[] value) throws CFException {
      work.setMedSvc(value);
   } 

	/**
	 *	Returns the value of csvcProc
	 *	@return csvcProc
	 */   
	 public CsvcProc getCsvcProc() {
   	return csvcProc;
   }


	/**
	 *	Returns the value of csvcCode
	 *	@return csvcCode
	 */   
	 public CsvcCode getCsvcCode() {
   	return csvcCodeGroup.getCsvcCode();
   }

   /**
	* 	Update CsvcCode with the passed value
	*	@param value
	*/
   public void setCsvcCode(char[] value) throws CFException {
      csvcCodeGroup.setCsvcCode(value);
   }   

     /**
	 * 	Update CsvcCode 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setCsvcCode(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	csvcCodeGroup.setCsvcCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CsvcCode 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCsvcCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	csvcCodeGroup.setCsvcCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CsvcCode with another Field
	 *	@param value
	 */
   public void setCsvcCode(Field source) {
   	csvcCodeGroup.setCsvcCode(source);
   }  
   
     /**
	 * 	Update CsvcCode 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setCsvcCode(Field source, int sourceIndex,int sourceLen) {
   	csvcCodeGroup.setCsvcCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CsvcCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCsvcCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	csvcCodeGroup.setCsvcCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cls15
	 *	@return cls15
	 */
	public long getCls15() throws CFException {
   		return workFields.getCkServCls().getCls15();
	}


	/**
	 *	Returns String value of cls15
	 *	@return cls15
	 */
	public char[]  getCls15String() throws CFException {
	     return String.valueOf(workFields.getCkServCls().getCls15String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean cls15IsNumeric()  throws CFException{
	    return workFields.getCkServCls().cls15IsNumeric();
	}

	/**
	 * 	Update Cls15 with the passed value
	 *	@param number
	 */
	public void setCls15(long number)  throws CFException{
		workFields.getCkServCls().setCls15(number);
	}
	

	
	/**
	 * 	Update Cls15 with the passed value
	 *	@param value (String or char[])
	 */
	public void setCls15(char[] value)  throws CFException {
		workFields.getCkServCls().setCls15(value);
	}
	
	/**
	 * 	Update Cls15 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setCls15String(char[] value)  throws CFException{
		workFields.getCkServCls().setCls15(value);
	}	

	/**
	 *	Returns the value of uLineServiceCode51
	 *	@return uLineServiceCode51
	 */
   public char[] getULineServiceCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineServiceCode51();
   }

  
	/**
	*  set variable uLineServiceCode51
	*  @param value
	**/
   public void setULineServiceCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(value);
   } 

     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex);
   	
   }
   
   public void setULineServiceCode51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULineServiceCode51 with another Field
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source);
   }  
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ckServCls
	 *	@return ckServCls
	 */   
	 public CkServCls getCkServCls() {
   	return workFields.getCkServCls();
   }

   /**
	* 	Update CkServCls with the passed value
	*	@param value
	*/
   public void setCkServCls(char[] value) throws CFException {
      workFields.setCkServCls(value);
   }   

     /**
	 * 	Update CkServCls 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setCkServCls(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	workFields.setCkServCls(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CkServCls 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCkServCls(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setCkServCls(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CkServCls with another Field
	 *	@param value
	 */
   public void setCkServCls(Field source) {
   	workFields.setCkServCls(source);
   }  
   
     /**
	 * 	Update CkServCls 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setCkServCls(Field source, int sourceIndex,int sourceLen) {
   	workFields.setCkServCls(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CkServCls 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCkServCls(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setCkServCls(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of medSvcNbr
	 *	@return medSvcNbr
	 */
	public short getMedSvcNbr() throws CFException {        
   		return work.getMedSvcNbr();
	}
	
	/**
	 * 	Update MedSvcNbr with the passed value
	 *	@param number
	 */
	public void setMedSvcNbr(short number)  throws CFException{
		work.setMedSvcNbr(number);
	}

	public void setMedSvcNbr(int number)  throws CFException{
		work.setMedSvcNbr((short)number);
	}

	public void setMedSvcNbr(long number)  throws CFException{
		work.setMedSvcNbr((short)number);
	}




        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += csvcCodeGroup.hashCode();
        str += workFields.hashCode();
        str += csvcProc.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public CheckServiceCodesOutCtx clone() {
        CheckServiceCodesOutCtx cloneObj = new CheckServiceCodesOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.csvcCodeGroup = new CsvcCodeGroup();
        cloneObj.csvcCodeGroup.set(csvcCodeGroup.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.csvcProc = new CsvcProc();
        cloneObj.csvcProc.set(csvcProc.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public CheckServiceCodesOutCtx getCheckServiceCodesOutCtx() {
            return new CheckServiceCodesOutCtx();
    }
     public class ReadEqiFileInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     DdEqisAlt ddEqisAlt = O529351uCtx.this.getDdEqisAlt();
     W02FnuLineRead w02FnuLineRead = O529351uCtx.this.getW02FnuLineRead();
     CsvcCodeGroup csvcCodeGroup = O529351uCtx.this.getCsvcCodeGroup();
     EqiRecord eqiRecord = O529351uCtx.this.getEqiRecord();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of sceAltKey
	 *	@return sceAltKey
	 */   
	 public SceAltKey getSceAltKey() {
   	return eqiRecord.getSceRecord().getSceAltKey();
   }

   /**
	* 	Update SceAltKey with the passed value
	*	@param value
	*/
   public void setSceAltKey(char[] value) throws CFException {
      eqiRecord.getSceRecord().setSceAltKey(value);
   }   

     /**
	 * 	Update SceAltKey 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSceAltKey(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	eqiRecord.getSceRecord().setSceAltKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SceAltKey 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSceAltKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	eqiRecord.getSceRecord().setSceAltKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update SceAltKey with another Field
	 *	@param value
	 */
   public void setSceAltKey(Field source) {
   	eqiRecord.getSceRecord().setSceAltKey(source);
   }  
   
     /**
	 * 	Update SceAltKey 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSceAltKey(Field source, int sourceIndex,int sourceLen) {
   	eqiRecord.getSceRecord().setSceAltKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SceAltKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSceAltKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	eqiRecord.getSceRecord().setSceAltKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ddEqisAlt
	 *	@return ddEqisAlt
	 */   
	 public DdEqisAlt getDdEqisAlt() {
   	return ddEqisAlt;
   }


	/**
	 *	Returns the value of sceFromHcpcsCpt
	 *	@return sceFromHcpcsCpt
	 */
   public char[] getSceFromHcpcsCpt() throws CFException  {              
   		return eqiRecord.getSceRecord().getSceFromHcpcsCpt();
   }

  
	/**
	*  set variable sceFromHcpcsCpt
	*  @param value
	**/
   public void setSceFromHcpcsCpt(char[] value) throws CFException {
      eqiRecord.getSceRecord().setSceFromHcpcsCpt(value);
   } 

     /**
	 * 	Update SceFromHcpcsCpt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSceFromHcpcsCpt(char[] source, int sourceIndex) throws CFException {
      eqiRecord.getSceRecord().setSceFromHcpcsCpt(source, sourceIndex);
   	
   }
   
   public void setSceFromHcpcsCpt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      eqiRecord.getSceRecord().setSceFromHcpcsCpt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SceFromHcpcsCpt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSceFromHcpcsCpt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      eqiRecord.getSceRecord().setSceFromHcpcsCpt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update SceFromHcpcsCpt with another Field
	 *	@param value
	 */
   public void setSceFromHcpcsCpt(Field source) {
      eqiRecord.getSceRecord().setSceFromHcpcsCpt(source);
   }  
   
     /**
	 * 	Update SceFromHcpcsCpt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSceFromHcpcsCpt(Field source, int sourceIndex,int sourceLen) {
      eqiRecord.getSceRecord().setSceFromHcpcsCpt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update SceFromHcpcsCpt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSceFromHcpcsCpt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      eqiRecord.getSceRecord().setSceFromHcpcsCpt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02FnuLineRead
	 *	@return w02FnuLineRead
	 */   
	 public W02FnuLineRead getW02FnuLineRead() {
   	return w02FnuLineRead;
   }


	/**
	 *	Test condition 20 for isCicsEndfile()
	 *	@return  Returns true if isCicsEndfile() is 20
	 */
   public boolean isCicsEndfile() throws CFException {
      return work.isCicsEndfile();
   }

	/**
	*  set values 20
	*/
   	public void setCicsEndfileTrue()  throws CFException{  			
    	work.setCicsEndfileTrue();
   	}
	/**
	 *	Returns the value of cls15
	 *	@return cls15
	 */
	public long getCls15() throws CFException {
   		return workFields.getCkServCls().getCls15();
	}


	/**
	 *	Returns String value of cls15
	 *	@return cls15
	 */
	public char[]  getCls15String() throws CFException {
	     return String.valueOf(workFields.getCkServCls().getCls15String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean cls15IsNumeric()  throws CFException{
	    return workFields.getCkServCls().cls15IsNumeric();
	}

	/**
	 * 	Update Cls15 with the passed value
	 *	@param number
	 */
	public void setCls15(long number)  throws CFException{
		workFields.getCkServCls().setCls15(number);
	}
	

	
	/**
	 * 	Update Cls15 with the passed value
	 *	@param value (String or char[])
	 */
	public void setCls15(char[] value)  throws CFException {
		workFields.getCkServCls().setCls15(value);
	}
	
	/**
	 * 	Update Cls15 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setCls15String(char[] value)  throws CFException{
		workFields.getCkServCls().setCls15(value);
	}	

	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}


	/**
	 *	Test condition 0 for isCicsNormal()
	 *	@return  Returns true if isCicsNormal() is 0
	 */
   public boolean isCicsNormal() throws CFException {
      return work.isCicsNormal();
   }

	/**
	*  set values 0
	*/
   	public void setCicsNormalTrue()  throws CFException{  			
    	work.setCicsNormalTrue();
   	}
	/**
	 *	Test condition 13 for isCicsNotfnd()
	 *	@return  Returns true if isCicsNotfnd() is 13
	 */
   public boolean isCicsNotfnd() throws CFException {
      return work.isCicsNotfnd();
   }

	/**
	*  set values 13
	*/
   	public void setCicsNotfndTrue()  throws CFException{  			
    	work.setCicsNotfndTrue();
   	}
	/**
	 *	Returns the value of ckServCls
	 *	@return ckServCls
	 */   
	 public CkServCls getCkServCls() {
   	return workFields.getCkServCls();
   }

   /**
	* 	Update CkServCls with the passed value
	*	@param value
	*/
   public void setCkServCls(char[] value) throws CFException {
      workFields.setCkServCls(value);
   }   

     /**
	 * 	Update CkServCls 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setCkServCls(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	workFields.setCkServCls(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CkServCls 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCkServCls(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setCkServCls(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CkServCls with another Field
	 *	@param value
	 */
   public void setCkServCls(Field source) {
   	workFields.setCkServCls(source);
   }  
   
     /**
	 * 	Update CkServCls 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setCkServCls(Field source, int sourceIndex,int sourceLen) {
   	workFields.setCkServCls(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CkServCls 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCkServCls(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setCkServCls(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public ReadEqiFileOutCtx getReadEqiFileOutCtx() {
            return new ReadEqiFileOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += ddEqisAlt.hashCode();
        str += w02FnuLineRead.hashCode();
        str += csvcCodeGroup.hashCode();
        str += eqiRecord.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public ReadEqiFileInCtx clone() {
        ReadEqiFileInCtx cloneObj = new ReadEqiFileInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.ddEqisAlt = new DdEqisAlt();
        cloneObj.ddEqisAlt.set(ddEqisAlt.getClonedField());
        cloneObj.w02FnuLineRead = new W02FnuLineRead();
        cloneObj.w02FnuLineRead.set(w02FnuLineRead.getClonedField());
        cloneObj.csvcCodeGroup = new CsvcCodeGroup();
        cloneObj.csvcCodeGroup.set(csvcCodeGroup.getClonedField());
        cloneObj.eqiRecord = new EqiRecord();
        cloneObj.eqiRecord.set(eqiRecord.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public ReadEqiFileInCtx getReadEqiFileInCtx() {
            return new ReadEqiFileInCtx();
    }
     public class ReadEqiFileOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     DdEqisAlt ddEqisAlt = O529351uCtx.this.getDdEqisAlt();
     W02FnuLineRead w02FnuLineRead = O529351uCtx.this.getW02FnuLineRead();
     CsvcCodeGroup csvcCodeGroup = O529351uCtx.this.getCsvcCodeGroup();
     EqiRecord eqiRecord = O529351uCtx.this.getEqiRecord();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of topsCnvSvc
	 *	@return topsCnvSvc
	 */
   public char[] getTopsCnvSvc() throws CFException  {              
   		return work.getTopsCnvSvc();
   }

  
	/**
	*  set variable topsCnvSvc
	*  @param value
	**/
   public void setTopsCnvSvc(char[] value) throws CFException {
      work.setTopsCnvSvc(value);
   } 

	/**
	 *	Returns the value of ddEqisAlt
	 *	@return ddEqisAlt
	 */   
	 public DdEqisAlt getDdEqisAlt() {
   	return ddEqisAlt;
   }


	/**
	 *	Returns the value of w02DsplMsg
	 *	@return w02DsplMsg
	 */
   public char[] getW02DsplMsg() throws CFException  {              
   		return w02DsplMsgArea.getW02DsplMsg();
   }

  
	/**
	*  set variable w02DsplMsg
	*  @param value
	**/
   public void setW02DsplMsg(char[] value) throws CFException {
      w02DsplMsgArea.setW02DsplMsg(value);
   } 

     /**
	 * 	Update W02DsplMsg 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02DsplMsg(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex);
   	
   }
   
   public void setW02DsplMsg(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02DsplMsg 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplMsg(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02DsplMsg with another Field
	 *	@param value
	 */
   public void setW02DsplMsg(Field source) {
      w02DsplMsgArea.setW02DsplMsg(source);
   }  
   
     /**
	 * 	Update W02DsplMsg 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02DsplMsg(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02DsplMsg 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplMsg(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02FnuLineRead
	 *	@return w02FnuLineRead
	 */   
	 public W02FnuLineRead getW02FnuLineRead() {
   	return w02FnuLineRead;
   }


	/**
	 *	Returns the value of sceAltModifier
	 *	@return sceAltModifier
	 */
   public char[] getSceAltModifier() throws CFException  {              
   		return eqiRecord.getSceRecord().getSceAltKey().getSceAltModifier();
   }

  
	/**
	*  set variable sceAltModifier
	*  @param value
	**/
   public void setSceAltModifier(char[] value) throws CFException {
      eqiRecord.getSceRecord().getSceAltKey().setSceAltModifier(value);
   } 

     /**
	 * 	Update SceAltModifier 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSceAltModifier(char[] source, int sourceIndex) throws CFException {
      eqiRecord.getSceRecord().getSceAltKey().setSceAltModifier(source, sourceIndex);
   	
   }
   
   public void setSceAltModifier(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      eqiRecord.getSceRecord().getSceAltKey().setSceAltModifier(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SceAltModifier 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSceAltModifier(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      eqiRecord.getSceRecord().getSceAltKey().setSceAltModifier(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update SceAltModifier with another Field
	 *	@param value
	 */
   public void setSceAltModifier(Field source) {
      eqiRecord.getSceRecord().getSceAltKey().setSceAltModifier(source);
   }  
   
     /**
	 * 	Update SceAltModifier 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSceAltModifier(Field source, int sourceIndex,int sourceLen) {
      eqiRecord.getSceRecord().getSceAltKey().setSceAltModifier(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update SceAltModifier 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSceAltModifier(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      eqiRecord.getSceRecord().getSceAltKey().setSceAltModifier(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02DsplErrInd
	 *	@return w02DsplErrInd
	 */
   public char[] getW02DsplErrInd() throws CFException  {              
   		return w02DsplMsgArea.getW02DsplErrInd();
   }

  
	/**
	*  set variable w02DsplErrInd
	*  @param value
	**/
   public void setW02DsplErrInd(char[] value) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(value);
   } 

     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex);
   	
   }
   
   public void setW02DsplErrInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02DsplErrInd with another Field
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source) {
      w02DsplMsgArea.setW02DsplErrInd(source);
   }  
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of csvcCode
	 *	@return csvcCode
	 */   
	 public CsvcCode getCsvcCode() {
   	return csvcCodeGroup.getCsvcCode();
   }

   /**
	* 	Update CsvcCode with the passed value
	*	@param value
	*/
   public void setCsvcCode(char[] value) throws CFException {
      csvcCodeGroup.setCsvcCode(value);
   }   

     /**
	 * 	Update CsvcCode 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setCsvcCode(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	csvcCodeGroup.setCsvcCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CsvcCode 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCsvcCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	csvcCodeGroup.setCsvcCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CsvcCode with another Field
	 *	@param value
	 */
   public void setCsvcCode(Field source) {
   	csvcCodeGroup.setCsvcCode(source);
   }  
   
     /**
	 * 	Update CsvcCode 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setCsvcCode(Field source, int sourceIndex,int sourceLen) {
   	csvcCodeGroup.setCsvcCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CsvcCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCsvcCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	csvcCodeGroup.setCsvcCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cls15
	 *	@return cls15
	 */
	public long getCls15() throws CFException {
   		return workFields.getCkServCls().getCls15();
	}


	/**
	 *	Returns String value of cls15
	 *	@return cls15
	 */
	public char[]  getCls15String() throws CFException {
	     return String.valueOf(workFields.getCkServCls().getCls15String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean cls15IsNumeric()  throws CFException{
	    return workFields.getCkServCls().cls15IsNumeric();
	}

	/**
	 * 	Update Cls15 with the passed value
	 *	@param number
	 */
	public void setCls15(long number)  throws CFException{
		workFields.getCkServCls().setCls15(number);
	}
	

	
	/**
	 * 	Update Cls15 with the passed value
	 *	@param value (String or char[])
	 */
	public void setCls15(char[] value)  throws CFException {
		workFields.getCkServCls().setCls15(value);
	}
	
	/**
	 * 	Update Cls15 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setCls15String(char[] value)  throws CFException{
		workFields.getCkServCls().setCls15(value);
	}	

	/**
	 *	Returns the value of w02FnuKeyRd
	 *	@return w02FnuKeyRd
	 */
   public char[] getW02FnuKeyRd() throws CFException  {              
   		return w02FnuLineRead.getW02FnuKeyRd();
   }

  
	/**
	*  set variable w02FnuKeyRd
	*  @param value
	**/
   public void setW02FnuKeyRd(char[] value) throws CFException {
      w02FnuLineRead.setW02FnuKeyRd(value);
   } 

     /**
	 * 	Update W02FnuKeyRd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02FnuKeyRd(char[] source, int sourceIndex) throws CFException {
      w02FnuLineRead.setW02FnuKeyRd(source, sourceIndex);
   	
   }
   
   public void setW02FnuKeyRd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02FnuLineRead.setW02FnuKeyRd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02FnuKeyRd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuKeyRd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineRead.setW02FnuKeyRd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02FnuKeyRd with another Field
	 *	@param value
	 */
   public void setW02FnuKeyRd(Field source) {
      w02FnuLineRead.setW02FnuKeyRd(source);
   }  
   
     /**
	 * 	Update W02FnuKeyRd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02FnuKeyRd(Field source, int sourceIndex,int sourceLen) {
      w02FnuLineRead.setW02FnuKeyRd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02FnuKeyRd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuKeyRd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineRead.setW02FnuKeyRd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of medSvcNbr
	 *	@return medSvcNbr
	 */
	public short getMedSvcNbr() throws CFException {        
   		return work.getMedSvcNbr();
	}
	
	/**
	 * 	Update MedSvcNbr with the passed value
	 *	@param number
	 */
	public void setMedSvcNbr(short number)  throws CFException{
		work.setMedSvcNbr(number);
	}

	public void setMedSvcNbr(int number)  throws CFException{
		work.setMedSvcNbr((short)number);
	}

	public void setMedSvcNbr(long number)  throws CFException{
		work.setMedSvcNbr((short)number);
	}



	/**
	 *	Returns the value of sceAltKey
	 *	@return sceAltKey
	 */   
	 public SceAltKey getSceAltKey() {
   	return eqiRecord.getSceRecord().getSceAltKey();
   }

   /**
	* 	Update SceAltKey with the passed value
	*	@param value
	*/
   public void setSceAltKey(char[] value) throws CFException {
      eqiRecord.getSceRecord().setSceAltKey(value);
   }   

     /**
	 * 	Update SceAltKey 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSceAltKey(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	eqiRecord.getSceRecord().setSceAltKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SceAltKey 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSceAltKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	eqiRecord.getSceRecord().setSceAltKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update SceAltKey with another Field
	 *	@param value
	 */
   public void setSceAltKey(Field source) {
   	eqiRecord.getSceRecord().setSceAltKey(source);
   }  
   
     /**
	 * 	Update SceAltKey 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSceAltKey(Field source, int sourceIndex,int sourceLen) {
   	eqiRecord.getSceRecord().setSceAltKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SceAltKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSceAltKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	eqiRecord.getSceRecord().setSceAltKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02FnuFileRd
	 *	@return w02FnuFileRd
	 */
   public char[] getW02FnuFileRd() throws CFException  {              
   		return w02FnuLineRead.getW02FnuFileRd();
   }

  
	/**
	*  set variable w02FnuFileRd
	*  @param value
	**/
   public void setW02FnuFileRd(char[] value) throws CFException {
      w02FnuLineRead.setW02FnuFileRd(value);
   } 

     /**
	 * 	Update W02FnuFileRd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02FnuFileRd(char[] source, int sourceIndex) throws CFException {
      w02FnuLineRead.setW02FnuFileRd(source, sourceIndex);
   	
   }
   
   public void setW02FnuFileRd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02FnuLineRead.setW02FnuFileRd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02FnuFileRd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuFileRd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineRead.setW02FnuFileRd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02FnuFileRd with another Field
	 *	@param value
	 */
   public void setW02FnuFileRd(Field source) {
      w02FnuLineRead.setW02FnuFileRd(source);
   }  
   
     /**
	 * 	Update W02FnuFileRd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02FnuFileRd(Field source, int sourceIndex,int sourceLen) {
      w02FnuLineRead.setW02FnuFileRd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02FnuFileRd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02FnuFileRd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02FnuLineRead.setW02FnuFileRd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sceServiceCode
	 *	@return sceServiceCode
	 */
   public char[] getSceServiceCode() throws CFException  {              
   		return eqiRecord.getSceRecord().getSceKey().getSceServiceCode();
   }

  
	/**
	*  set variable sceServiceCode
	*  @param value
	**/
   public void setSceServiceCode(char[] value) throws CFException {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(value);
   } 

     /**
	 * 	Update SceServiceCode 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSceServiceCode(char[] source, int sourceIndex) throws CFException {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source, sourceIndex);
   	
   }
   
   public void setSceServiceCode(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SceServiceCode 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSceServiceCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update SceServiceCode with another Field
	 *	@param value
	 */
   public void setSceServiceCode(Field source) {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source);
   }  
   
     /**
	 * 	Update SceServiceCode 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSceServiceCode(Field source, int sourceIndex,int sourceLen) {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update SceServiceCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSceServiceCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "I" for isM51uIllogicalCond()
	 *	@return  Returns true if isM51uIllogicalCond() is "I"
	 */
   public boolean isM51uIllogicalCond() throws CFException {
      return dfhcommarea.getLinkAreaM51u().getM51uFlags().isM51uIllogicalCond();
   }

	/**
	*  set values "I"
	*/
   	public void setM51uIllogicalCondTrue()  throws CFException{  			
    	dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondTrue();
   	}
	/**
	 *	Returns the value of sceAltToHcpcs
	 *	@return sceAltToHcpcs
	 */
   public char[] getSceAltToHcpcs() throws CFException  {              
   		return eqiRecord.getSceRecord().getSceAltKey().getSceAltToHcpcs();
   }

  
	/**
	*  set variable sceAltToHcpcs
	*  @param value
	**/
   public void setSceAltToHcpcs(char[] value) throws CFException {
      eqiRecord.getSceRecord().getSceAltKey().setSceAltToHcpcs(value);
   } 

     /**
	 * 	Update SceAltToHcpcs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSceAltToHcpcs(char[] source, int sourceIndex) throws CFException {
      eqiRecord.getSceRecord().getSceAltKey().setSceAltToHcpcs(source, sourceIndex);
   	
   }
   
   public void setSceAltToHcpcs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      eqiRecord.getSceRecord().getSceAltKey().setSceAltToHcpcs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SceAltToHcpcs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSceAltToHcpcs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      eqiRecord.getSceRecord().getSceAltKey().setSceAltToHcpcs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update SceAltToHcpcs with another Field
	 *	@param value
	 */
   public void setSceAltToHcpcs(Field source) {
      eqiRecord.getSceRecord().getSceAltKey().setSceAltToHcpcs(source);
   }  
   
     /**
	 * 	Update SceAltToHcpcs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSceAltToHcpcs(Field source, int sourceIndex,int sourceLen) {
      eqiRecord.getSceRecord().getSceAltKey().setSceAltToHcpcs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update SceAltToHcpcs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSceAltToHcpcs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      eqiRecord.getSceRecord().getSceAltKey().setSceAltToHcpcs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cicsDfhrespCode
	 *	@return cicsDfhrespCode
	 */
	public int getCicsDfhrespCode() throws CFException {        
   		return work.getCicsDfhrespCode();
	}
	
	/**
	 * 	Update CicsDfhrespCode with the passed value
	 *	@param number
	 */
	public void setCicsDfhrespCode(int number)  throws CFException{
		work.setCicsDfhrespCode(number);
	}


	public void setCicsDfhrespCode(long number)  throws CFException{
		work.setCicsDfhrespCode((int)number);
	}


	/**
	 *	Returns the value of w02RespCd
	 *	@return w02RespCd
	 */
	public long getW02RespCd() throws CFException {
   		return w02DsplMsgArea.getW02RespCd();
	}


	/**
	 *	Returns String value of w02RespCd
	 *	@return w02RespCd
	 */
	public char[]  getW02RespCdString() throws CFException {
	     return String.valueOf(w02DsplMsgArea.getW02RespCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean w02RespCdIsNumeric()  throws CFException{
	    return w02DsplMsgArea.w02RespCdIsNumeric();
	}

	/**
	 * 	Update W02RespCd with the passed value
	 *	@param number
	 */
	public void setW02RespCd(long number)  throws CFException{
		w02DsplMsgArea.setW02RespCd(number);
	}
	

	
	/**
	 * 	Update W02RespCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setW02RespCd(char[] value)  throws CFException {
		w02DsplMsgArea.setW02RespCd(value);
	}
	
	/**
	 * 	Update W02RespCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setW02RespCdString(char[] value)  throws CFException{
		w02DsplMsgArea.setW02RespCd(value);
	}	

public long getSceAltCancDate() throws CFException {  
        return eqiRecord.getSceRecord().getSceAltKey().getSceAltCancDate();
}
	/**
	 * 	Update SceAltCancDate with the passed value
	 *	@param number
	 */
	public void setSceAltCancDate(long number)  throws CFException{
		eqiRecord.getSceRecord().getSceAltKey().setSceAltCancDate(number);
	}




        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += ddEqisAlt.hashCode();
        str += w02FnuLineRead.hashCode();
        str += csvcCodeGroup.hashCode();
        str += eqiRecord.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public ReadEqiFileOutCtx clone() {
        ReadEqiFileOutCtx cloneObj = new ReadEqiFileOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.ddEqisAlt = new DdEqisAlt();
        cloneObj.ddEqisAlt.set(ddEqisAlt.getClonedField());
        cloneObj.w02FnuLineRead = new W02FnuLineRead();
        cloneObj.w02FnuLineRead.set(w02FnuLineRead.getClonedField());
        cloneObj.csvcCodeGroup = new CsvcCodeGroup();
        cloneObj.csvcCodeGroup.set(csvcCodeGroup.getClonedField());
        cloneObj.eqiRecord = new EqiRecord();
        cloneObj.eqiRecord.set(eqiRecord.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public ReadEqiFileOutCtx getReadEqiFileOutCtx() {
            return new ReadEqiFileOutCtx();
    }
     public class ContinueProcessInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     CsvcCodeGroup csvcCodeGroup = O529351uCtx.this.getCsvcCodeGroup();
     EqiRecord eqiRecord = O529351uCtx.this.getEqiRecord();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     CsvcProc csvcProc = O529351uCtx.this.getCsvcProc();

	/**
	 *	Returns the value of sceServiceCode
	 *	@return sceServiceCode
	 */
   public char[] getSceServiceCode() throws CFException  {              
   		return eqiRecord.getSceRecord().getSceKey().getSceServiceCode();
   }

  
	/**
	*  set variable sceServiceCode
	*  @param value
	**/
   public void setSceServiceCode(char[] value) throws CFException {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(value);
   } 

     /**
	 * 	Update SceServiceCode 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSceServiceCode(char[] source, int sourceIndex) throws CFException {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source, sourceIndex);
   	
   }
   
   public void setSceServiceCode(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SceServiceCode 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSceServiceCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update SceServiceCode with another Field
	 *	@param value
	 */
   public void setSceServiceCode(Field source) {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source);
   }  
   
     /**
	 * 	Update SceServiceCode 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSceServiceCode(Field source, int sourceIndex,int sourceLen) {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update SceServiceCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSceServiceCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public ContinueProcessOutCtx getContinueProcessOutCtx() {
            return new ContinueProcessOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += csvcCodeGroup.hashCode();
        str += eqiRecord.hashCode();
        str += workFields.hashCode();
        str += csvcProc.hashCode();
       return str.hashCode();
    }

    public ContinueProcessInCtx clone() {
        ContinueProcessInCtx cloneObj = new ContinueProcessInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.csvcCodeGroup = new CsvcCodeGroup();
        cloneObj.csvcCodeGroup.set(csvcCodeGroup.getClonedField());
        cloneObj.eqiRecord = new EqiRecord();
        cloneObj.eqiRecord.set(eqiRecord.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.csvcProc = new CsvcProc();
        cloneObj.csvcProc.set(csvcProc.getClonedField());
        return cloneObj;
    }

    }

    public ContinueProcessInCtx getContinueProcessInCtx() {
            return new ContinueProcessInCtx();
    }
     public class ContinueProcessOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     CsvcCodeGroup csvcCodeGroup = O529351uCtx.this.getCsvcCodeGroup();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     EqiRecord eqiRecord = O529351uCtx.this.getEqiRecord();
     CsvcProc csvcProc = O529351uCtx.this.getCsvcProc();

	/**
	 *	Returns the value of topsCnvSvc
	 *	@return topsCnvSvc
	 */
   public char[] getTopsCnvSvc() throws CFException  {              
   		return work.getTopsCnvSvc();
   }

  
	/**
	*  set variable topsCnvSvc
	*  @param value
	**/
   public void setTopsCnvSvc(char[] value) throws CFException {
      work.setTopsCnvSvc(value);
   } 

	/**
	 *	Returns the value of servTop
	 *	@return servTop
	 */   
	 public ServTop getServTop() {
   	return workFields.getServTop();
   }

   /**
	* 	Update ServTop with the passed value
	*	@param value
	*/
   public void setServTop(char[] value) throws CFException {
      workFields.setServTop(value);
   }   

     /**
	 * 	Update ServTop 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setServTop(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	workFields.setServTop(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ServTop 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setServTop(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setServTop(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ServTop with another Field
	 *	@param value
	 */
   public void setServTop(Field source) {
   	workFields.setServTop(source);
   }  
   
     /**
	 * 	Update ServTop 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setServTop(Field source, int sourceIndex,int sourceLen) {
   	workFields.setServTop(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ServTop 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setServTop(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setServTop(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of medSvc
	 *	@return medSvc
	 */
   public char[] getMedSvc() throws CFException  {              
   		return work.getMedSvc();
   }

  
	/**
	*  set variable medSvc
	*  @param value
	**/
   public void setMedSvc(char[] value) throws CFException {
      work.setMedSvc(value);
   } 

	/**
	 *	Returns the value of csvcProc
	 *	@return csvcProc
	 */   
	 public CsvcProc getCsvcProc() {
   	return csvcProc;
   }


	/**
	 *	Returns the value of sceServiceCode
	 *	@return sceServiceCode
	 */
   public char[] getSceServiceCode() throws CFException  {              
   		return eqiRecord.getSceRecord().getSceKey().getSceServiceCode();
   }

  
	/**
	*  set variable sceServiceCode
	*  @param value
	**/
   public void setSceServiceCode(char[] value) throws CFException {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(value);
   } 

     /**
	 * 	Update SceServiceCode 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSceServiceCode(char[] source, int sourceIndex) throws CFException {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source, sourceIndex);
   	
   }
   
   public void setSceServiceCode(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SceServiceCode 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSceServiceCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update SceServiceCode with another Field
	 *	@param value
	 */
   public void setSceServiceCode(Field source) {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source);
   }  
   
     /**
	 * 	Update SceServiceCode 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSceServiceCode(Field source, int sourceIndex,int sourceLen) {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update SceServiceCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSceServiceCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      eqiRecord.getSceRecord().getSceKey().setSceServiceCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of csvcCode
	 *	@return csvcCode
	 */   
	 public CsvcCode getCsvcCode() {
   	return csvcCodeGroup.getCsvcCode();
   }

   /**
	* 	Update CsvcCode with the passed value
	*	@param value
	*/
   public void setCsvcCode(char[] value) throws CFException {
      csvcCodeGroup.setCsvcCode(value);
   }   

     /**
	 * 	Update CsvcCode 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setCsvcCode(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	csvcCodeGroup.setCsvcCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CsvcCode 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCsvcCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	csvcCodeGroup.setCsvcCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CsvcCode with another Field
	 *	@param value
	 */
   public void setCsvcCode(Field source) {
   	csvcCodeGroup.setCsvcCode(source);
   }  
   
     /**
	 * 	Update CsvcCode 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setCsvcCode(Field source, int sourceIndex,int sourceLen) {
   	csvcCodeGroup.setCsvcCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CsvcCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCsvcCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	csvcCodeGroup.setCsvcCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += csvcCodeGroup.hashCode();
        str += workFields.hashCode();
        str += eqiRecord.hashCode();
        str += csvcProc.hashCode();
       return str.hashCode();
    }

    public ContinueProcessOutCtx clone() {
        ContinueProcessOutCtx cloneObj = new ContinueProcessOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.csvcCodeGroup = new CsvcCodeGroup();
        cloneObj.csvcCodeGroup.set(csvcCodeGroup.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.eqiRecord = new EqiRecord();
        cloneObj.eqiRecord.set(eqiRecord.getClonedField());
        cloneObj.csvcProc = new CsvcProc();
        cloneObj.csvcProc.set(csvcProc.getClonedField());
        return cloneObj;
    }

    }

    public ContinueProcessOutCtx getContinueProcessOutCtx() {
            return new ContinueProcessOutCtx();
    }
     public class ChiroProcessingInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	public BigDecimal getUOutLineChargeAmt51(int index) throws CFException{      
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineChargeAmt51();
	}

    public char[] getUOutLineChargeAmt51String(int index) throws CFException {
          return  dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineChargeAmt51().toPlainString().toCharArray();
    }
	
	/**
	 * 	Update UOutLineChargeAmt51 with the passed number
	 *	@param number
	 */
	public void setUOutLineChargeAmt51(int index,BigDecimal number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineChargeAmt51(number);
   }

	/**
	 *	Returns the value of nbrOfLines
	 *	@return nbrOfLines
	 */
	public int getNbrOfLines() throws CFException {        
   		return workFields.getNbrOfLines();
	}
	
	/**
	 * 	Update NbrOfLines with the passed value
	 *	@param number
	 */
	public void setNbrOfLines(int number)  throws CFException{
		workFields.setNbrOfLines(number);
	}


	public void setNbrOfLines(long number)  throws CFException{
		workFields.setNbrOfLines((int)number);
	}


	/**
	 *	Returns the value of medSvc
	 *	@return medSvc
	 */
   public char[] getMedSvc() throws CFException  {              
   		return work.getMedSvc();
   }

  
	/**
	*  set variable medSvc
	*  @param value
	**/
   public void setMedSvc(char[] value) throws CFException {
      work.setMedSvc(value);
   } 

	/**
	 *	Returns the value of uCcmNOSvcInd51
	 *	@return uCcmNOSvcInd51
	 */
   public char[] getUCcmNOSvcInd51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getUCcmNOSvcInd51();
   }

  
	/**
	*  set variable uCcmNOSvcInd51
	*  @param value
	**/
   public void setUCcmNOSvcInd51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().setUCcmNOSvcInd51(value);
   } 

     /**
	 * 	Update UCcmNOSvcInd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUCcmNOSvcInd51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().setUCcmNOSvcInd51(source, sourceIndex);
   	
   }
   
   public void setUCcmNOSvcInd51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().setUCcmNOSvcInd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UCcmNOSvcInd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUCcmNOSvcInd51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().setUCcmNOSvcInd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UCcmNOSvcInd51 with another Field
	 *	@param value
	 */
   public void setUCcmNOSvcInd51(Field source) {
      dfhcommarea.getLinkAreaM51u().setUCcmNOSvcInd51(source);
   }  
   
     /**
	 * 	Update UCcmNOSvcInd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUCcmNOSvcInd51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().setUCcmNOSvcInd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UCcmNOSvcInd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUCcmNOSvcInd51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().setUCcmNOSvcInd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uOutLineServiceCode51
	 *	@return uOutLineServiceCode51
	 */
   public char[] getUOutLineServiceCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineServiceCode51();
   }

  
	/**
	*  set variable uOutLineServiceCode51
	*  @param value
	**/
   public void setUOutLineServiceCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(value);
   } 

     /**
	 * 	Update UOutLineServiceCode51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex);
   	
   }
   
   public void setUOutLineServiceCode51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutLineServiceCode51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutLineServiceCode51 with another Field
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source);
   }  
   
     /**
	 * 	Update UOutLineServiceCode51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutLineServiceCode51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getPrevDateServ() throws CFException {  
        return workFields.getPrevDateServ();
}
	/**
	 * 	Update PrevDateServ with the passed value
	 *	@param number
	 */
	public void setPrevDateServ(int number)  throws CFException{
		workFields.setPrevDateServ(number);
	}


	public void setPrevDateServ(long number)  throws CFException{
	    workFields.setPrevDateServ(number);
	}
	

	public BigDecimal getUOutLineNotcovAmt51(int index) throws CFException{      
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineNotcovAmt51();
	}

    public char[] getUOutLineNotcovAmt51String(int index) throws CFException {
          return  dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineNotcovAmt51().toPlainString().toCharArray();
    }
	
	/**
	 * 	Update UOutLineNotcovAmt51 with the passed number
	 *	@param number
	 */
	public void setUOutLineNotcovAmt51(int index,BigDecimal number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineNotcovAmt51(number);
   }

public short getChargeSub() throws CFException {  
        return workFields.getChargeSub();
}
	/**
	 * 	Update ChargeSub with the passed value
	 *	@param number
	 */
	public void setChargeSub(short number)  throws CFException{
		workFields.setChargeSub(number);
	}

	public void setChargeSub(int number)  throws CFException{
	   workFields.setChargeSub(number);
	}
	public void setChargeSub(long number)  throws CFException {
	    workFields.setChargeSub(number);
	}
	


	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}


public int getUOutLineDosDate51(int index) throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineDosDate51();
}
	/**
	 * 	Update UOutLineDosDate51 with the passed value
	 *	@param number
	 */
	public void setUOutLineDosDate51(int index,int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineDosDate51(number);
	}


	public void setUOutLineDosDate51(int index,long number)  throws CFException{
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineDosDate51(number);
	}
	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public ChiroProcessingOutCtx getChiroProcessingOutCtx() {
            return new ChiroProcessingOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public ChiroProcessingInCtx clone() {
        ChiroProcessingInCtx cloneObj = new ChiroProcessingInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public ChiroProcessingInCtx getChiroProcessingInCtx() {
            return new ChiroProcessingInCtx();
    }
     public class ChiroProcessingOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of mcrLineCharge
	 *	@return mcrLineCharge
	 */
	public BigDecimal getMcrLineCharge() throws CFException {
   		return workFields.getMcrCheckTable().getMcrLineCharge();
	}

    /**
	 *	Returns the String value of mcrLineCharge
	 *	@return mcrLineCharge
	 */
	public char[]  getMcrLineChargeActualString()  throws CFException{
	    return workFields.getMcrCheckTable().getMcrLineChargeActualString();
	}

	 /**
     *	Returns String value of mcrLineCharge
     *	@return mcrLineCharge
     */
    public char[]  getMcrLineChargeString() throws CFException {
         return workFields.getMcrCheckTable().getMcrLineChargeString();
    }
     /**
     *  This method allows testing if there is a numeric value stored in the serialized String
     *	@return true if numeric value is stored in the string
     */
    public boolean mcrLineChargeIsNumeric() {
        return workFields.getMcrCheckTable().mcrLineChargeIsNumeric();
    }
	/**
	 * 	Update McrLineCharge with the passed number
	 *	@param number
	 */
	public void setMcrLineCharge(BigDecimal number)  throws CFException{
		workFields.getMcrCheckTable().setMcrLineCharge(number);
   }

	/**
	 * 	Update McrLineCharge with the passed value
	 *	@param value (String or char[]);
	 */
	public void setMcrLineCharge(char[] value)  throws CFException{
		workFields.getMcrCheckTable().setMcrLineCharge(value);
	}   

	/**
	 *	Returns the value of newServiceCode
	 *	@return newServiceCode
	 */
   public char[] getNewServiceCode() throws CFException  {              
   		return workFields.getNewServiceCode();
   }

  
	/**
	*  set variable newServiceCode
	*  @param value
	**/
   public void setNewServiceCode(char[] value) throws CFException {
      workFields.setNewServiceCode(value);
   } 

     /**
	 * 	Update NewServiceCode 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNewServiceCode(char[] source, int sourceIndex) throws CFException {
      workFields.setNewServiceCode(source, sourceIndex);
   	
   }
   
   public void setNewServiceCode(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setNewServiceCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NewServiceCode 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNewServiceCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setNewServiceCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NewServiceCode with another Field
	 *	@param value
	 */
   public void setNewServiceCode(Field source) {
      workFields.setNewServiceCode(source);
   }  
   
     /**
	 * 	Update NewServiceCode 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNewServiceCode(Field source, int sourceIndex,int sourceLen) {
      workFields.setNewServiceCode(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NewServiceCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNewServiceCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setNewServiceCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getUOutLineAppUnits51(int index) throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineAppUnits51();
}
	/**
	 * 	Update UOutLineAppUnits51 with the passed value
	 *	@param number
	 */
	public void setUOutLineAppUnits51(int index,int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineAppUnits51(number);
	}


	public void setUOutLineAppUnits51(int index,long number)  throws CFException{
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineAppUnits51(number);
	}
	

	/**
	 *	Returns the value of firstTimeThru
	 *	@return firstTimeThru
	 */
   public char[] getFirstTimeThru() throws CFException  {              
   		return work.getFirstTimeThru();
   }

  
	/**
	*  set variable firstTimeThru
	*  @param value
	**/
   public void setFirstTimeThru(char[] value) throws CFException {
      work.setFirstTimeThru(value);
   } 

	/**
	 *	Returns the value of uOutLineServiceCode51
	 *	@return uOutLineServiceCode51
	 */
   public char[] getUOutLineServiceCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineServiceCode51();
   }

  
	/**
	*  set variable uOutLineServiceCode51
	*  @param value
	**/
   public void setUOutLineServiceCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(value);
   } 

     /**
	 * 	Update UOutLineServiceCode51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex);
   	
   }
   
   public void setUOutLineServiceCode51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutLineServiceCode51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutLineServiceCode51 with another Field
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source);
   }  
   
     /**
	 * 	Update UOutLineServiceCode51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutLineServiceCode51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineServiceCode51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getPrevDateServ() throws CFException {  
        return workFields.getPrevDateServ();
}
	/**
	 * 	Update PrevDateServ with the passed value
	 *	@param number
	 */
	public void setPrevDateServ(int number)  throws CFException{
		workFields.setPrevDateServ(number);
	}


	public void setPrevDateServ(long number)  throws CFException{
	    workFields.setPrevDateServ(number);
	}
	

public short getChargeSub() throws CFException {  
        return workFields.getChargeSub();
}
	/**
	 * 	Update ChargeSub with the passed value
	 *	@param number
	 */
	public void setChargeSub(short number)  throws CFException{
		workFields.setChargeSub(number);
	}

	public void setChargeSub(int number)  throws CFException{
	   workFields.setChargeSub(number);
	}
	public void setChargeSub(long number)  throws CFException {
	    workFields.setChargeSub(number);
	}
	


	/**
	 *	Returns the value of chargeCombined
	 *	@return chargeCombined
	 */
   public char[] getChargeCombined() throws CFException  {              
   		return workFields.getChargeCombined();
   }

  
	/**
	*  set variable chargeCombined
	*  @param value
	**/
   public void setChargeCombined(char[] value) throws CFException {
      workFields.setChargeCombined(value);
   } 

     /**
	 * 	Update ChargeCombined 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setChargeCombined(char[] source, int sourceIndex) throws CFException {
      workFields.setChargeCombined(source, sourceIndex);
   	
   }
   
   public void setChargeCombined(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setChargeCombined(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ChargeCombined 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setChargeCombined(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setChargeCombined(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ChargeCombined with another Field
	 *	@param value
	 */
   public void setChargeCombined(Field source) {
      workFields.setChargeCombined(source);
   }  
   
     /**
	 * 	Update ChargeCombined 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setChargeCombined(Field source, int sourceIndex,int sourceLen) {
      workFields.setChargeCombined(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ChargeCombined 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setChargeCombined(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setChargeCombined(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of mcrLineNbr
	 *	@return mcrLineNbr
	 */
	public int getMcrLineNbr() throws CFException {
   		return workFields.getMcrCheckTable().getMcrLineNbr();
	}


	/**
	 *	Returns String value of mcrLineNbr
	 *	@return mcrLineNbr
	 */
	public char[]  getMcrLineNbrString() throws CFException {
	     return String.valueOf(workFields.getMcrCheckTable().getMcrLineNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean mcrLineNbrIsNumeric()  throws CFException{
	    return workFields.getMcrCheckTable().mcrLineNbrIsNumeric();
	}

	/**
	 * 	Update McrLineNbr with the passed value
	 *	@param number
	 */
	public void setMcrLineNbr(int number)  throws CFException{
		workFields.getMcrCheckTable().setMcrLineNbr(number);
	}
	

	public void setMcrLineNbr(long number)  throws CFException{
	    workFields.getMcrCheckTable().setMcrLineNbr(number);
	}
	
	
	/**
	 * 	Update McrLineNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setMcrLineNbr(char[] value)  throws CFException {
		workFields.getMcrCheckTable().setMcrLineNbr(value);
	}
	
	/**
	 * 	Update McrLineNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setMcrLineNbrString(char[] value)  throws CFException{
		workFields.getMcrCheckTable().setMcrLineNbr(value);
	}	

	public BigDecimal getUOutLineChargeAmt51(int index) throws CFException{      
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineChargeAmt51();
	}

    public char[] getUOutLineChargeAmt51String(int index) throws CFException {
          return  dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineChargeAmt51().toPlainString().toCharArray();
    }
	
	/**
	 * 	Update UOutLineChargeAmt51 with the passed number
	 *	@param number
	 */
	public void setUOutLineChargeAmt51(int index,BigDecimal number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineChargeAmt51(number);
   }

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isFirstTimeThru1()
	 *	@return  Returns true if isFirstTimeThru1() is "Y"
	 */
   public boolean isFirstTimeThru1() throws CFException {
      return work.isFirstTimeThru1();
   }

	/**
	*  set values "Y"
	*/
   	public void setFirstTimeThru1True()  throws CFException{  			
    	work.setFirstTimeThru1True();
   	}
	/**
	 *	Returns the value of uOutLineRemarkCd51
	 *	@return uOutLineRemarkCd51
	 */
   public char[] getUOutLineRemarkCd51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineRemarkCd51();
   }

  
	/**
	*  set variable uOutLineRemarkCd51
	*  @param value
	**/
   public void setUOutLineRemarkCd51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineRemarkCd51(value);
   } 

     /**
	 * 	Update UOutLineRemarkCd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUOutLineRemarkCd51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineRemarkCd51(source, sourceIndex);
   	
   }
   
   public void setUOutLineRemarkCd51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineRemarkCd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UOutLineRemarkCd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineRemarkCd51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineRemarkCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UOutLineRemarkCd51 with another Field
	 *	@param value
	 */
   public void setUOutLineRemarkCd51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineRemarkCd51(source);
   }  
   
     /**
	 * 	Update UOutLineRemarkCd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUOutLineRemarkCd51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineRemarkCd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UOutLineRemarkCd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUOutLineRemarkCd51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineRemarkCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "SC76  " THRU "SC99  " for isNewSvcCd()
	 *	@return  Returns true if isNewSvcCd() is "SC76  " THRU "SC99  "
	 */
   public boolean isNewSvcCd() throws CFException {
      return workFields.isNewSvcCd();
   }

	/**
	*  set values "SC76  " THRU "SC99  "
	*/
   	public void setNewSvcCdTrue()  throws CFException{  			
    	workFields.setNewSvcCdTrue();
   	}
	public BigDecimal getUOutLineNotcovAmt51(int index) throws CFException{      
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineNotcovAmt51();
	}

    public char[] getUOutLineNotcovAmt51String(int index) throws CFException {
          return  dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineNotcovAmt51().toPlainString().toCharArray();
    }
	
	/**
	 * 	Update UOutLineNotcovAmt51 with the passed number
	 *	@param number
	 */
	public void setUOutLineNotcovAmt51(int index,BigDecimal number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineNotcovAmt51(number);
   }

	/**
	 *	Test condition "Y" for isChargeCombined1()
	 *	@return  Returns true if isChargeCombined1() is "Y"
	 */
   public boolean isChargeCombined1() throws CFException {
      return workFields.isChargeCombined1();
   }

	/**
	*  set values "Y"
	*/
   	public void setChargeCombined1True()  throws CFException{  			
    	workFields.setChargeCombined1True();
   	}
	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}


public int getUOutLineDosDate51(int index) throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).getUOutLineDosDate51();
}
	/**
	 * 	Update UOutLineDosDate51 with the passed value
	 *	@param number
	 */
	public void setUOutLineDosDate51(int index,int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineDosDate51(number);
	}


	public void setUOutLineDosDate51(int index,long number)  throws CFException{
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUOutLineData51(index).setUOutLineDosDate51(number);
	}
	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public ChiroProcessingOutCtx clone() {
        ChiroProcessingOutCtx cloneObj = new ChiroProcessingOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public ChiroProcessingOutCtx getChiroProcessingOutCtx() {
            return new ChiroProcessingOutCtx();
    }
     public class CommonIoCallInCtx implements Cloneable {
     W02FnuLineRead w02FnuLineRead = O529351uCtx.this.getW02FnuLineRead();
     Ioi02bInterface ioi02bInterface = O529351uCtx.this.getIoi02bInterface();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of w02FnuLineRead
	 *	@return w02FnuLineRead
	 */   
	 public W02FnuLineRead getW02FnuLineRead() {
   	return w02FnuLineRead;
   }


	/**
	 *	Test condition "B" "N" for isIoi02bBadRequest()
	 *	@return  Returns true if isIoi02bBadRequest() is "B" "N"
	 */
   public boolean isIoi02bBadRequest() throws CFException {
      return ioi02bInterface.isIoi02bBadRequest();
   }

	/**
	*  set values "B" "N"
	*/
   	public void setIoi02bBadRequestTrue()  throws CFException{  			
    	ioi02bInterface.setIoi02bBadRequestTrue();
   	}
	/**
	 *	Test condition "N" for isIoi02bNotInitialized()
	 *	@return  Returns true if isIoi02bNotInitialized() is "N"
	 */
   public boolean isIoi02bNotInitialized() throws CFException {
      return ioi02bInterface.isIoi02bNotInitialized();
   }

	/**
	*  set values "N"
	*/
   	public void setIoi02bNotInitializedTrue()  throws CFException{  			
    	ioi02bInterface.setIoi02bNotInitializedTrue();
   	}
	/**
	 *	Test condition " " for isIoi02bGood()
	 *	@return  Returns true if isIoi02bGood() is " "
	 */
   public boolean isIoi02bGood() throws CFException {
      return ioi02bInterface.isIoi02bGood();
   }

	/**
	*  set values " "
	*/
   	public void setIoi02bGoodTrue()  throws CFException{  			
    	ioi02bInterface.setIoi02bGoodTrue();
   	}

        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public CommonIoCallOutCtx getCommonIoCallOutCtx() {
            return new CommonIoCallOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += w02FnuLineRead.hashCode();
        str += ioi02bInterface.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public CommonIoCallInCtx clone() {
        CommonIoCallInCtx cloneObj = new CommonIoCallInCtx();
        cloneObj.w02FnuLineRead = new W02FnuLineRead();
        cloneObj.w02FnuLineRead.set(w02FnuLineRead.getClonedField());
        cloneObj.ioi02bInterface = new Ioi02bInterface();
        cloneObj.ioi02bInterface.set(ioi02bInterface.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public CommonIoCallInCtx getCommonIoCallInCtx() {
            return new CommonIoCallInCtx();
    }
     public class CommonIoCallOutCtx implements Cloneable {
     W02FnuLineRead w02FnuLineRead = O529351uCtx.this.getW02FnuLineRead();
     Ioi02bInterface ioi02bInterface = O529351uCtx.this.getIoi02bInterface();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of w02DsplMsg
	 *	@return w02DsplMsg
	 */
   public char[] getW02DsplMsg() throws CFException  {              
   		return w02DsplMsgArea.getW02DsplMsg();
   }

  
	/**
	*  set variable w02DsplMsg
	*  @param value
	**/
   public void setW02DsplMsg(char[] value) throws CFException {
      w02DsplMsgArea.setW02DsplMsg(value);
   } 

     /**
	 * 	Update W02DsplMsg 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02DsplMsg(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex);
   	
   }
   
   public void setW02DsplMsg(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02DsplMsg 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplMsg(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02DsplMsg with another Field
	 *	@param value
	 */
   public void setW02DsplMsg(Field source) {
      w02DsplMsgArea.setW02DsplMsg(source);
   }  
   
     /**
	 * 	Update W02DsplMsg 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02DsplMsg(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02DsplMsg 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplMsg(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplMsg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02FnuLineRead
	 *	@return w02FnuLineRead
	 */   
	 public W02FnuLineRead getW02FnuLineRead() {
   	return w02FnuLineRead;
   }


	/**
	 *	Test condition "I" for isM51uIllogicalCond()
	 *	@return  Returns true if isM51uIllogicalCond() is "I"
	 */
   public boolean isM51uIllogicalCond() throws CFException {
      return dfhcommarea.getLinkAreaM51u().getM51uFlags().isM51uIllogicalCond();
   }

	/**
	*  set values "I"
	*/
   	public void setM51uIllogicalCondTrue()  throws CFException{  			
    	dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondTrue();
   	}

        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += w02FnuLineRead.hashCode();
        str += ioi02bInterface.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public CommonIoCallOutCtx clone() {
        CommonIoCallOutCtx cloneObj = new CommonIoCallOutCtx();
        cloneObj.w02FnuLineRead = new W02FnuLineRead();
        cloneObj.w02FnuLineRead.set(w02FnuLineRead.getClonedField());
        cloneObj.ioi02bInterface = new Ioi02bInterface();
        cloneObj.ioi02bInterface.set(ioi02bInterface.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public CommonIoCallOutCtx getCommonIoCallOutCtx() {
            return new CommonIoCallOutCtx();
    }
     public class WriteToSysmInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of w02DsplMsgArea
	 *	@return w02DsplMsgArea
	 */   
	 public W02DsplMsgArea getW02DsplMsgArea() {
   	return w02DsplMsgArea;
   }



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public WriteToSysmOutCtx getWriteToSysmOutCtx() {
            return new WriteToSysmOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public WriteToSysmInCtx clone() {
        WriteToSysmInCtx cloneObj = new WriteToSysmInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public WriteToSysmInCtx getWriteToSysmInCtx() {
            return new WriteToSysmInCtx();
    }
     public class WriteToSysmOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of dfheiv0
	 *	@return dfheiv0
	 */
   public char[] getDfheiv0() throws CFException  {              
   		return work.getDfheiv0();
   }

  
	/**
	*  set variable dfheiv0
	*  @param value
	**/
   public void setDfheiv0(char[] value) throws CFException {
      work.setDfheiv0(value);
   } 

	/**
	 *	Returns the value of dfhb0020
	 *	@return dfhb0020
	 */
	public int getDfhb0020() throws CFException {        
   		return work.getDfhb0020();
	}
	
	/**
	 * 	Update Dfhb0020 with the passed value
	 *	@param number
	 */
	public void setDfhb0020(int number)  throws CFException{
		work.setDfhb0020(number);
	}


	public void setDfhb0020(long number)  throws CFException{
		work.setDfhb0020((int)number);
	}


	/**
	 *	Returns the value of dfhc0040
	 *	@return dfhc0040
	 */
   public char[] getDfhc0040() throws CFException  {              
   		return work.getDfhc0040();
   }

  
	/**
	*  set variable dfhc0040
	*  @param value
	**/
   public void setDfhc0040(char[] value) throws CFException {
      work.setDfhc0040(value);
   } 


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public WriteToSysmOutCtx clone() {
        WriteToSysmOutCtx cloneObj = new WriteToSysmOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public WriteToSysmOutCtx getWriteToSysmOutCtx() {
            return new WriteToSysmOutCtx();
    }
     public class AsktimeFormatimeInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of w02AbsoluteTime
	 *	@return w02AbsoluteTime
	 */
	public long getW02AbsoluteTime() throws CFException {        
   		return work.getW02AbsoluteTime();
	}
	
	/**
	 * 	Update W02AbsoluteTime with the passed value
	 *	@param number
	 */
	public void setW02AbsoluteTime(long number)  throws CFException{
		work.setW02AbsoluteTime(number);
	}



	/**
	 *	Returns the value of w02MqTime
	 *	@return w02MqTime
	 */
   public char[] getW02MqTime() throws CFException  {              
   		return w02DsplMsgArea.getW02MqTime();
   }

  
	/**
	*  set variable w02MqTime
	*  @param value
	**/
   public void setW02MqTime(char[] value) throws CFException {
      w02DsplMsgArea.setW02MqTime(value);
   } 

     /**
	 * 	Update W02MqTime 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02MqTime(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02MqTime(source, sourceIndex);
   	
   }
   
   public void setW02MqTime(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02MqTime(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02MqTime 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02MqTime(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02MqTime(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02MqTime with another Field
	 *	@param value
	 */
   public void setW02MqTime(Field source) {
      w02DsplMsgArea.setW02MqTime(source);
   }  
   
     /**
	 * 	Update W02MqTime 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02MqTime(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02MqTime(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02MqTime 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02MqTime(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02MqTime(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public AsktimeFormatimeOutCtx getAsktimeFormatimeOutCtx() {
            return new AsktimeFormatimeOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public AsktimeFormatimeInCtx clone() {
        AsktimeFormatimeInCtx cloneObj = new AsktimeFormatimeInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public AsktimeFormatimeInCtx getAsktimeFormatimeInCtx() {
            return new AsktimeFormatimeInCtx();
    }
     public class AsktimeFormatimeOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of dfheiv0
	 *	@return dfheiv0
	 */
   public char[] getDfheiv0() throws CFException  {              
   		return work.getDfheiv0();
   }

  
	/**
	*  set variable dfheiv0
	*  @param value
	**/
   public void setDfheiv0(char[] value) throws CFException {
      work.setDfheiv0(value);
   } 


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public AsktimeFormatimeOutCtx clone() {
        AsktimeFormatimeOutCtx cloneObj = new AsktimeFormatimeOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public AsktimeFormatimeOutCtx getAsktimeFormatimeOutCtx() {
            return new AsktimeFormatimeOutCtx();
    }
     public class DumpAbendOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();

	/**
	 *	Test condition "I" for isIllogicalCond1()
	 *	@return  Returns true if isIllogicalCond1() is "I"
	 */
   public boolean isIllogicalCond1() throws CFException {
      return work.isIllogicalCond1();
   }

	/**
	*  set values "I"
	*/
   	public void setIllogicalCond1True()  throws CFException{  			
    	work.setIllogicalCond1True();
   	}
	/**
	 *	Returns the value of dfhc0040
	 *	@return dfhc0040
	 */
   public char[] getDfhc0040() throws CFException  {              
   		return work.getDfhc0040();
   }

  
	/**
	*  set variable dfhc0040
	*  @param value
	**/
   public void setDfhc0040(char[] value) throws CFException {
      work.setDfhc0040(value);
   } 


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
       return str.hashCode();
    }

    public DumpAbendOutCtx clone() {
        DumpAbendOutCtx cloneObj = new DumpAbendOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public DumpAbendOutCtx getDumpAbendOutCtx() {
            return new DumpAbendOutCtx();
    }
     public class ConvertProcToSvcCdInCtx implements Cloneable {
     CsvcCodeGroup csvcCodeGroup = O529351uCtx.this.getCsvcCodeGroup();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     CsvcProc csvcProc = O529351uCtx.this.getCsvcProc();

	/**
	 *	Test condition "78000" THRU "78999" "0286T" "0287T" "0331T" "0332T" "0399T" "0482T" "0639T" "0742T" for isCsvcNucMedicine()
	 *	@return  Returns true if isCsvcNucMedicine() is "78000" THRU "78999" "0286T" "0287T" "0331T" "0332T" "0399T" "0482T" "0639T" "0742T"
	 */
   public boolean isCsvcNucMedicine() throws CFException {
      return csvcProc.isCsvcNucMedicine();
   }

	/**
	*  set values "78000" THRU "78999" "0286T" "0287T" "0331T" "0332T" "0399T" "0482T" "0639T" "0742T"
	*/
   	public void setCsvcNucMedicineTrue()  throws CFException{  			
    	csvcProc.setCsvcNucMedicineTrue();
   	}
	/**
	 *	Test condition "90751" THRU "90755" "90757" "90762" THRU "90764" "90777" THRU "90778" "97802" THRU "97804" "99078" "99381" THRU "99405" "99410" THRU "99414" "99419" THRU "99420" "99428" THRU "99429" "99432" "99438" "0403T" for isCsvcPreventativeMed()
	 *	@return  Returns true if isCsvcPreventativeMed() is "90751" THRU "90755" "90757" "90762" THRU "90764" "90777" THRU "90778" "97802" THRU "97804" "99078" "99381" THRU "99405" "99410" THRU "99414" "99419" THRU "99420" "99428" THRU "99429" "99432" "99438" "0403T"
	 */
   public boolean isCsvcPreventativeMed() throws CFException {
      return csvcProc.isCsvcPreventativeMed();
   }

	/**
	*  set values "90751" THRU "90755" "90757" "90762" THRU "90764" "90777" THRU "90778" "97802" THRU "97804" "99078" "99381" THRU "99405" "99410" THRU "99414" "99419" THRU "99420" "99428" THRU "99429" "99432" "99438" "0403T"
	*/
   	public void setCsvcPreventativeMedTrue()  throws CFException{  			
    	csvcProc.setCsvcPreventativeMedTrue();
   	}
	/**
	 *	Test condition "0" "2" "3" "4" "D" "5" "6" "9" "B" "C" "K" "M" "Q" "U" "Z" "7" "8" "P" "T" for isCsvcSurgAnesDigit()
	 *	@return  Returns true if isCsvcSurgAnesDigit() is "0" "2" "3" "4" "D" "5" "6" "9" "B" "C" "K" "M" "Q" "U" "Z" "7" "8" "P" "T"
	 */
   public boolean isCsvcSurgAnesDigit() throws CFException {
      return csvcProc.isCsvcSurgAnesDigit();
   }

	/**
	*  set values "0" "2" "3" "4" "D" "5" "6" "9" "B" "C" "K" "M" "Q" "U" "Z" "7" "8" "P" "T"
	*/
   	public void setCsvcSurgAnesDigitTrue()  throws CFException{  			
    	csvcProc.setCsvcSurgAnesDigitTrue();
   	}
	/**
	 *	Returns the value of csvcPLst1
	 *	@return csvcPLst1
	 */
   public char[] getCsvcPLst1() throws CFException  {              
   		return csvcProc.getCsvcPLst1();
   }

  
	/**
	*  set variable csvcPLst1
	*  @param value
	**/
   public void setCsvcPLst1(char[] value) throws CFException {
      csvcProc.setCsvcPLst1(value);
   } 

     /**
	 * 	Update CsvcPLst1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCsvcPLst1(char[] source, int sourceIndex) throws CFException {
      csvcProc.setCsvcPLst1(source, sourceIndex);
   	
   }
   
   public void setCsvcPLst1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      csvcProc.setCsvcPLst1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CsvcPLst1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCsvcPLst1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      csvcProc.setCsvcPLst1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CsvcPLst1 with another Field
	 *	@param value
	 */
   public void setCsvcPLst1(Field source) {
      csvcProc.setCsvcPLst1(source);
   }  
   
     /**
	 * 	Update CsvcPLst1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCsvcPLst1(Field source, int sourceIndex,int sourceLen) {
      csvcProc.setCsvcPLst1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CsvcPLst1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCsvcPLst1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      csvcProc.setCsvcPLst1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "90935" THRU "90950" "90951" THRU "90962" "90963" THRU "90966" "90967" THRU "90970" "90971" THRU "90999" for isCsvcDialysis()
	 *	@return  Returns true if isCsvcDialysis() is "90935" THRU "90950" "90951" THRU "90962" "90963" THRU "90966" "90967" THRU "90970" "90971" THRU "90999"
	 */
   public boolean isCsvcDialysis() throws CFException {
      return csvcProc.isCsvcDialysis();
   }

	/**
	*  set values "90935" THRU "90950" "90951" THRU "90962" "90963" THRU "90966" "90967" THRU "90970" "90971" THRU "90999"
	*/
   	public void setCsvcDialysisTrue()  throws CFException{  			
    	csvcProc.setCsvcDialysisTrue();
   	}
	/**
	 *	Test condition "99293" THRU "99300" for isCsvcIntenseMed()
	 *	@return  Returns true if isCsvcIntenseMed() is "99293" THRU "99300"
	 */
   public boolean isCsvcIntenseMed() throws CFException {
      return csvcProc.isCsvcIntenseMed();
   }

	/**
	*  set values "99293" THRU "99300"
	*/
   	public void setCsvcIntenseMedTrue()  throws CFException{  			
    	csvcProc.setCsvcIntenseMedTrue();
   	}
	/**
	 *	Test condition "94004" "99301" THRU "99319" "99324" THRU "99328" "99334" THRU "99337" for isCsvcMedVisit3()
	 *	@return  Returns true if isCsvcMedVisit3() is "94004" "99301" THRU "99319" "99324" THRU "99328" "99334" THRU "99337"
	 */
   public boolean isCsvcMedVisit3() throws CFException {
      return csvcProc.isCsvcMedVisit3();
   }

	/**
	*  set values "94004" "99301" THRU "99319" "99324" THRU "99328" "99334" THRU "99337"
	*/
   	public void setCsvcMedVisit3True()  throws CFException{  			
    	csvcProc.setCsvcMedVisit3True();
   	}
	/**
	 *	Test condition "77000" "76145" "77004" THRU "77010" "77015" THRU "77020" "77023" THRU "77030" "77033" THRU "77050" "77060" "77087" THRU "77088" "77093" THRU "77999" "0073T" "0082T" "0083T" "0197T" "0394T" "0395T" "0662T" "0663T" for isCsvcRadiotherapy1()
	 *	@return  Returns true if isCsvcRadiotherapy1() is "77000" "76145" "77004" THRU "77010" "77015" THRU "77020" "77023" THRU "77030" "77033" THRU "77050" "77060" "77087" THRU "77088" "77093" THRU "77999" "0073T" "0082T" "0083T" "0197T" "0394T" "0395T" "0662T" "0663T"
	 */
   public boolean isCsvcRadiotherapy1() throws CFException {
      return csvcProc.isCsvcRadiotherapy1();
   }

	/**
	*  set values "77000" "76145" "77004" THRU "77010" "77015" THRU "77020" "77023" THRU "77030" "77033" THRU "77050" "77060" "77087" THRU "77088" "77093" THRU "77999" "0073T" "0082T" "0083T" "0197T" "0394T" "0395T" "0662T" "0663T"
	*/
   	public void setCsvcRadiotherapy1True()  throws CFException{  			
    	csvcProc.setCsvcRadiotherapy1True();
   	}
	/**
	 *	Test condition "0580F" "0581F" "0582F" "0583F" "0584F" "1136F" "1400F" "1491F" "1500F" "1501F" "1502F" "1503F" "1504F" "1505F" "21076" THRU "21088" "29130" "3126F" "3200F" "3210F" "3350F" "3351F" "3352F" "3353F" "3354F" "36417" THRU "36419" "3700F" "3720F" "3751F" "3752F" "3753F" "3754F" "3755F" "3756F" "3757F" "3758F" "3759F" "3760F" "3761F" "3762F" "3763F" "37195" "4110F" "4115F" "4120F" "4124F" "4153F" "4324F" THRU "4326F" "4328F" "4400F" "4540F" "4541F" "4550F" "4551F" "4552F" "4553F" "4554F" "4555F" "4556F" "4557F" "4558F" "4559F" "4560F" "4561F" "4562F" "4563F" "5050F" "54240" THRU "54254" "55870" "59021" THRU "59024" "59026" THRU "59029" "6080F" "6090F" "6101F" "6102F" "6110F" "90867" "90868" "90869" "90880" "90900" THRU "90934" "92000" THRU "92017" "92503" "92505" "92951" "92952" "92954" THRU "92959" "92962" THRU "92969" "92972" "93663" THRU "93667" "93669" THRU "93699" "94656" "94657" "96101" THRU "96103" "96116" "96118" THRU "96121" "96130" THRU "96131" "96132" THRU "96133" "96136" THRU "96139" "96146" "96150" THRU "96154" "96155" THRU "96156" "96158" THRU "96159" "96164" THRU "96165" "96167" THRU "96168" "96170" THRU "96171" "96202" "96203" "96600" THRU "96899" "96901" THRU "96903" "96905" THRU "96909" "96911" "96914" THRU "96919" "96923" THRU "96930" "96937" THRU "96998" "97151" THRU "97152" "97153" THRU "97158" "97169" THRU "97172" "98925" THRU "98929" "98944" THRU "98959" "98963" THRU "98965" "98973" THRU "98974" "98975" THRU "98977" "98978" THRU "98979" "98980" THRU "98981" "98982" THRU "98999" "99003" THRU "99077" "99079" THRU "99099" "99141" THRU "99150" "99154" "99158" THRU "99169" "99171" "99176" "99178" THRU "99182" "99184" "99187" "99189" "99193" "99194" "99196" THRU "99199" "99289" THRU "99292" "99339" THRU "99340" "99354" THRU "99359" "99360" THRU "99379" "99380" "99415" "99416" "99418" "99424" THRU "99427" "99437" "99439" "99440" "99445" THRU "99457" "99459" "99466" THRU "99467" "99470" "99483" THRU "99499" "99605" THRU "99607" "99700" THRU "99999" "0044T" "0045T" "0001F" "0002F" "0003F" "0004F" "0005F" "0006F" "0007F" "0008F" "0009F" "0010F" "0011F" "0012F" "0014F" "0015F" "0505F" "0507F" "0509F" "0513F" "0514F" "0516F" "0517F" "0518F" "0519F" "0520F" "0521F" "0525F" "0526F" "0529F" "0545F" "0550F" "0551F" "0555F" "0556F" "0557F" "0575F" "1010F" "1011F" "1012F" "1031F" "1032F" "1033F" "1050F" "1052F" "1055F" "1060F" "1061F" "1065F" "1066F" "1070F" "1071F" "1080F" "1090F" "1091F" "1100F" "1101F" "1110F" "1111F" "1116F" "1118F" "1119F" "1121F" "1123F" "1124F" "1125F" "1126F" "1127F" "1128F" "1130F" "1134F" "1135F" "1137F" "1159F" "1160F" "1175F" "1180F" "1181F" "1182F" "1183F" "1200F" "1205F" "1220F" "1450F" "1451F" "1460F" "1461F" "1490F" "1493F" "1494F" "2015F" "2016F" "2019F" "2020F" "2021F" "2027F" "2029F" "2035F" "2040F" "2044F" "2060F" "3008F" "3015F" "3019F" "3038F" "3044F" "3045F" "3047F" "3055F" "3056F" "3073F" "3074F" "3075F" "3095F" "3096F" "3100F" "3101F" "3102F" "3110F" "3111F" "3112F" "3115F" "3117F" "3118F" "3119F" "3120F" "3125F" "3130F" "3132F" "3140F" "3141F" "3142F" "3143F" "3155F" "3160F" "3170F" "3215F" "3216F" "3217F" "3218F" "3219F" "3220F" "3230F" "3250F" "3260F" "3265F" "3266F" "3267F" "3268F" "3269F" "3270F" "3271F" "3272F" "3273F" "3274F" "3278F" "3279F" "3280F" "3281F" "3284F" "3285F" "3288F" "3290F" "3291F" "3292F" "3293F" "3294F" "3300F" "3301F" "3302F" "3303F" "3304F" "3305F" "3306F" "3307F" "3308F" "3309F" "3310F" "3311F" "3312F" "3313F" "3314F" "3315F" "3316F" "3317F" "3318F" "3319F" "3320F" "3321F" "3322F" "3323F" "3324F" "3325F" "3328F" "3330F" "3331F" "3340F" "3341F" "3342F" "3343F" "3344F" "3345F" "3370F" "3372F" "3374F" "3376F" "3378F" "3380F" "3382F" "3384F" "3386F" "3388F" "3390F" "3394F" "3395F" "3500F" "3502F" "3503F" "3510F" "3511F" "3512F" "3513F" "3514F" "3515F" "3517F" "3520F" "3550F" "3551F" "3552F" "3555F" "3570F" "3572F" "3573F" "3650F" "3725F" "3750F" "4004F" "4005F" "4007F" "4008F" "4010F" "4013F" "4019F" "4041F" "4042F" "4043F" "4044F" "4046F" "4047F" "4048F" "4049F" "4063F" "4069F" "4070F" "4073F" "4075F" "4077F" "4079F" "4084F" "4086F" "5005F" "5010F" "4090F" "4095F" "4100F" "4120F" "4124F" "4130F" "4131F" "4132F" "4133F" "4134F" "4135F" "4136F" "4140F" "4142F" "4144F" "4145F" "4148F" "4149F" "4150F" "4151F" "4152F" "4154F" "4155F" "4156F" "4157F" "4158F" "4159F" "4163F" "4164F" "4165F" "4167F" "4168F" "4169F" "4171F" "4172F" "4174F" "4175F" "4176F" "4177F" "4178F" "4179F" "4180F" "4181F" "4182F" "4185F" "4186F" "4187F" "4188F" "4189F" "4190F" "4191F" "4200F" "4201F" "4210F" "4220F" "4221F" "4230F" "4240F" "4242F" "4245F" "4248F" "4250F" "4255F" "4256F" "4270F" "4271F" "4274F" "4275F" "4290F" "4293F" "4300F" "4301F" "4320F" "4322F" "4330F" "4340F" "4350F" "4450F" "4470F" "4480F" "4481F" "4500F" "4510F" "4525F" "4526F" "5015F" "5020F" "5060F" "5062F" "5200F" "5250F" "6010F" "6015F" "6020F" "6030F" "6040F" "6045F" "6070F" "6100F" "6150F" "7010F" "7020F" "7025F" "0074T" "0088T" "0089T" "0104T" "0105T" "0115T" "0116T" "0117T" "0126T" "0130T" "0160T" "0161T" "0168T" "0185T" "0186T" "0188T" "0189T" "0200T" "0201T" "0202T" "0359T" "0360T" "0361T" "0362T" "0363T" "0364T" "0365T" "0366T" "0367T" "0368T" "0369T" "0370T" "0371T" "0372T" "0373T" "0374T" "0405T" "0488T" "0495T" "0496T" "0501T" "0502T" "0503T" "0504T" "0523T" "0584T" "0585T" "0586T" "0591T" "0592T" "0593T" "0687T" "0688T" "0692T" "0702T" "0703T" "0704T" "0705T" "0706T" "0710T" "0711T" "0712T" "0713T" "0732T" "0794T" "0807T" "0808T" "0500F" "0501F" "0502F" "0503F" "1000F" "1001F" "1002F" "1003F" "1004F" "1005F" "1006F" "1007F" "1008F" "1015F" "1018F" "1019F" "1022F" "1026F" "1030F" "1034F" "1035F" "1036F" "1038F" "1039F" "1040F" "2000F" "2001F" "2002F" "2003F" "2004F" "2010F" "2014F" "2018F" "2022F" "2023F" "2025F" "2033F" "2024F" "2026F" "2028F" "2030F" "2031F" "3000F" "3002F" "3006F" "3011F" "3014F" "3017F" "3020F" "3021F" "3022F" "3023F" "3025F" "3027F" "3028F" "3035F" "3037F" "3040F" "3042F" "3046F" "3047F" "3048F" "3049F" "3050F" "3060F" "3061F" "3062F" "3066F" "3072F" "3076F" "3077F" "3078F" "3079F" "3080F" "3082F" "3083F" "3084F" "3085F" "3088F" "3089F" "3090F" "3091F" "3092F" "3093F" "4000F" "4001F" "4002F" "4003F" "4006F" "4009F" "4011F" "4012F" "4014F" "4015F" "4016F" "4017F" "4018F" "4025F" "4030F" "4033F" "4035F" "4037F" "4040F" "4045F" "4050F" "4051F" "4052F" "4053F" "4054F" "4055F" "4056F" "4058F" "4060F" "4062F" "4064F" "4065F" "4066F" "4067F" "6005F" for isCsvcSpecMedServices()
	 *	@return  Returns true if isCsvcSpecMedServices() is "0580F" "0581F" "0582F" "0583F" "0584F" "1136F" "1400F" "1491F" "1500F" "1501F" "1502F" "1503F" "1504F" "1505F" "21076" THRU "21088" "29130" "3126F" "3200F" "3210F" "3350F" "3351F" "3352F" "3353F" "3354F" "36417" THRU "36419" "3700F" "3720F" "3751F" "3752F" "3753F" "3754F" "3755F" "3756F" "3757F" "3758F" "3759F" "3760F" "3761F" "3762F" "3763F" "37195" "4110F" "4115F" "4120F" "4124F" "4153F" "4324F" THRU "4326F" "4328F" "4400F" "4540F" "4541F" "4550F" "4551F" "4552F" "4553F" "4554F" "4555F" "4556F" "4557F" "4558F" "4559F" "4560F" "4561F" "4562F" "4563F" "5050F" "54240" THRU "54254" "55870" "59021" THRU "59024" "59026" THRU "59029" "6080F" "6090F" "6101F" "6102F" "6110F" "90867" "90868" "90869" "90880" "90900" THRU "90934" "92000" THRU "92017" "92503" "92505" "92951" "92952" "92954" THRU "92959" "92962" THRU "92969" "92972" "93663" THRU "93667" "93669" THRU "93699" "94656" "94657" "96101" THRU "96103" "96116" "96118" THRU "96121" "96130" THRU "96131" "96132" THRU "96133" "96136" THRU "96139" "96146" "96150" THRU "96154" "96155" THRU "96156" "96158" THRU "96159" "96164" THRU "96165" "96167" THRU "96168" "96170" THRU "96171" "96202" "96203" "96600" THRU "96899" "96901" THRU "96903" "96905" THRU "96909" "96911" "96914" THRU "96919" "96923" THRU "96930" "96937" THRU "96998" "97151" THRU "97152" "97153" THRU "97158" "97169" THRU "97172" "98925" THRU "98929" "98944" THRU "98959" "98963" THRU "98965" "98973" THRU "98974" "98975" THRU "98977" "98978" THRU "98979" "98980" THRU "98981" "98982" THRU "98999" "99003" THRU "99077" "99079" THRU "99099" "99141" THRU "99150" "99154" "99158" THRU "99169" "99171" "99176" "99178" THRU "99182" "99184" "99187" "99189" "99193" "99194" "99196" THRU "99199" "99289" THRU "99292" "99339" THRU "99340" "99354" THRU "99359" "99360" THRU "99379" "99380" "99415" "99416" "99418" "99424" THRU "99427" "99437" "99439" "99440" "99445" THRU "99457" "99459" "99466" THRU "99467" "99470" "99483" THRU "99499" "99605" THRU "99607" "99700" THRU "99999" "0044T" "0045T" "0001F" "0002F" "0003F" "0004F" "0005F" "0006F" "0007F" "0008F" "0009F" "0010F" "0011F" "0012F" "0014F" "0015F" "0505F" "0507F" "0509F" "0513F" "0514F" "0516F" "0517F" "0518F" "0519F" "0520F" "0521F" "0525F" "0526F" "0529F" "0545F" "0550F" "0551F" "0555F" "0556F" "0557F" "0575F" "1010F" "1011F" "1012F" "1031F" "1032F" "1033F" "1050F" "1052F" "1055F" "1060F" "1061F" "1065F" "1066F" "1070F" "1071F" "1080F" "1090F" "1091F" "1100F" "1101F" "1110F" "1111F" "1116F" "1118F" "1119F" "1121F" "1123F" "1124F" "1125F" "1126F" "1127F" "1128F" "1130F" "1134F" "1135F" "1137F" "1159F" "1160F" "1175F" "1180F" "1181F" "1182F" "1183F" "1200F" "1205F" "1220F" "1450F" "1451F" "1460F" "1461F" "1490F" "1493F" "1494F" "2015F" "2016F" "2019F" "2020F" "2021F" "2027F" "2029F" "2035F" "2040F" "2044F" "2060F" "3008F" "3015F" "3019F" "3038F" "3044F" "3045F" "3047F" "3055F" "3056F" "3073F" "3074F" "3075F" "3095F" "3096F" "3100F" "3101F" "3102F" "3110F" "3111F" "3112F" "3115F" "3117F" "3118F" "3119F" "3120F" "3125F" "3130F" "3132F" "3140F" "3141F" "3142F" "3143F" "3155F" "3160F" "3170F" "3215F" "3216F" "3217F" "3218F" "3219F" "3220F" "3230F" "3250F" "3260F" "3265F" "3266F" "3267F" "3268F" "3269F" "3270F" "3271F" "3272F" "3273F" "3274F" "3278F" "3279F" "3280F" "3281F" "3284F" "3285F" "3288F" "3290F" "3291F" "3292F" "3293F" "3294F" "3300F" "3301F" "3302F" "3303F" "3304F" "3305F" "3306F" "3307F" "3308F" "3309F" "3310F" "3311F" "3312F" "3313F" "3314F" "3315F" "3316F" "3317F" "3318F" "3319F" "3320F" "3321F" "3322F" "3323F" "3324F" "3325F" "3328F" "3330F" "3331F" "3340F" "3341F" "3342F" "3343F" "3344F" "3345F" "3370F" "3372F" "3374F" "3376F" "3378F" "3380F" "3382F" "3384F" "3386F" "3388F" "3390F" "3394F" "3395F" "3500F" "3502F" "3503F" "3510F" "3511F" "3512F" "3513F" "3514F" "3515F" "3517F" "3520F" "3550F" "3551F" "3552F" "3555F" "3570F" "3572F" "3573F" "3650F" "3725F" "3750F" "4004F" "4005F" "4007F" "4008F" "4010F" "4013F" "4019F" "4041F" "4042F" "4043F" "4044F" "4046F" "4047F" "4048F" "4049F" "4063F" "4069F" "4070F" "4073F" "4075F" "4077F" "4079F" "4084F" "4086F" "5005F" "5010F" "4090F" "4095F" "4100F" "4120F" "4124F" "4130F" "4131F" "4132F" "4133F" "4134F" "4135F" "4136F" "4140F" "4142F" "4144F" "4145F" "4148F" "4149F" "4150F" "4151F" "4152F" "4154F" "4155F" "4156F" "4157F" "4158F" "4159F" "4163F" "4164F" "4165F" "4167F" "4168F" "4169F" "4171F" "4172F" "4174F" "4175F" "4176F" "4177F" "4178F" "4179F" "4180F" "4181F" "4182F" "4185F" "4186F" "4187F" "4188F" "4189F" "4190F" "4191F" "4200F" "4201F" "4210F" "4220F" "4221F" "4230F" "4240F" "4242F" "4245F" "4248F" "4250F" "4255F" "4256F" "4270F" "4271F" "4274F" "4275F" "4290F" "4293F" "4300F" "4301F" "4320F" "4322F" "4330F" "4340F" "4350F" "4450F" "4470F" "4480F" "4481F" "4500F" "4510F" "4525F" "4526F" "5015F" "5020F" "5060F" "5062F" "5200F" "5250F" "6010F" "6015F" "6020F" "6030F" "6040F" "6045F" "6070F" "6100F" "6150F" "7010F" "7020F" "7025F" "0074T" "0088T" "0089T" "0104T" "0105T" "0115T" "0116T" "0117T" "0126T" "0130T" "0160T" "0161T" "0168T" "0185T" "0186T" "0188T" "0189T" "0200T" "0201T" "0202T" "0359T" "0360T" "0361T" "0362T" "0363T" "0364T" "0365T" "0366T" "0367T" "0368T" "0369T" "0370T" "0371T" "0372T" "0373T" "0374T" "0405T" "0488T" "0495T" "0496T" "0501T" "0502T" "0503T" "0504T" "0523T" "0584T" "0585T" "0586T" "0591T" "0592T" "0593T" "0687T" "0688T" "0692T" "0702T" "0703T" "0704T" "0705T" "0706T" "0710T" "0711T" "0712T" "0713T" "0732T" "0794T" "0807T" "0808T" "0500F" "0501F" "0502F" "0503F" "1000F" "1001F" "1002F" "1003F" "1004F" "1005F" "1006F" "1007F" "1008F" "1015F" "1018F" "1019F" "1022F" "1026F" "1030F" "1034F" "1035F" "1036F" "1038F" "1039F" "1040F" "2000F" "2001F" "2002F" "2003F" "2004F" "2010F" "2014F" "2018F" "2022F" "2023F" "2025F" "2033F" "2024F" "2026F" "2028F" "2030F" "2031F" "3000F" "3002F" "3006F" "3011F" "3014F" "3017F" "3020F" "3021F" "3022F" "3023F" "3025F" "3027F" "3028F" "3035F" "3037F" "3040F" "3042F" "3046F" "3047F" "3048F" "3049F" "3050F" "3060F" "3061F" "3062F" "3066F" "3072F" "3076F" "3077F" "3078F" "3079F" "3080F" "3082F" "3083F" "3084F" "3085F" "3088F" "3089F" "3090F" "3091F" "3092F" "3093F" "4000F" "4001F" "4002F" "4003F" "4006F" "4009F" "4011F" "4012F" "4014F" "4015F" "4016F" "4017F" "4018F" "4025F" "4030F" "4033F" "4035F" "4037F" "4040F" "4045F" "4050F" "4051F" "4052F" "4053F" "4054F" "4055F" "4056F" "4058F" "4060F" "4062F" "4064F" "4065F" "4066F" "4067F" "6005F"
	 */
   public boolean isCsvcSpecMedServices() throws CFException {
      return csvcProc.isCsvcSpecMedServices();
   }

	/**
	*  set values "0580F" "0581F" "0582F" "0583F" "0584F" "1136F" "1400F" "1491F" "1500F" "1501F" "1502F" "1503F" "1504F" "1505F" "21076" THRU "21088" "29130" "3126F" "3200F" "3210F" "3350F" "3351F" "3352F" "3353F" "3354F" "36417" THRU "36419" "3700F" "3720F" "3751F" "3752F" "3753F" "3754F" "3755F" "3756F" "3757F" "3758F" "3759F" "3760F" "3761F" "3762F" "3763F" "37195" "4110F" "4115F" "4120F" "4124F" "4153F" "4324F" THRU "4326F" "4328F" "4400F" "4540F" "4541F" "4550F" "4551F" "4552F" "4553F" "4554F" "4555F" "4556F" "4557F" "4558F" "4559F" "4560F" "4561F" "4562F" "4563F" "5050F" "54240" THRU "54254" "55870" "59021" THRU "59024" "59026" THRU "59029" "6080F" "6090F" "6101F" "6102F" "6110F" "90867" "90868" "90869" "90880" "90900" THRU "90934" "92000" THRU "92017" "92503" "92505" "92951" "92952" "92954" THRU "92959" "92962" THRU "92969" "92972" "93663" THRU "93667" "93669" THRU "93699" "94656" "94657" "96101" THRU "96103" "96116" "96118" THRU "96121" "96130" THRU "96131" "96132" THRU "96133" "96136" THRU "96139" "96146" "96150" THRU "96154" "96155" THRU "96156" "96158" THRU "96159" "96164" THRU "96165" "96167" THRU "96168" "96170" THRU "96171" "96202" "96203" "96600" THRU "96899" "96901" THRU "96903" "96905" THRU "96909" "96911" "96914" THRU "96919" "96923" THRU "96930" "96937" THRU "96998" "97151" THRU "97152" "97153" THRU "97158" "97169" THRU "97172" "98925" THRU "98929" "98944" THRU "98959" "98963" THRU "98965" "98973" THRU "98974" "98975" THRU "98977" "98978" THRU "98979" "98980" THRU "98981" "98982" THRU "98999" "99003" THRU "99077" "99079" THRU "99099" "99141" THRU "99150" "99154" "99158" THRU "99169" "99171" "99176" "99178" THRU "99182" "99184" "99187" "99189" "99193" "99194" "99196" THRU "99199" "99289" THRU "99292" "99339" THRU "99340" "99354" THRU "99359" "99360" THRU "99379" "99380" "99415" "99416" "99418" "99424" THRU "99427" "99437" "99439" "99440" "99445" THRU "99457" "99459" "99466" THRU "99467" "99470" "99483" THRU "99499" "99605" THRU "99607" "99700" THRU "99999" "0044T" "0045T" "0001F" "0002F" "0003F" "0004F" "0005F" "0006F" "0007F" "0008F" "0009F" "0010F" "0011F" "0012F" "0014F" "0015F" "0505F" "0507F" "0509F" "0513F" "0514F" "0516F" "0517F" "0518F" "0519F" "0520F" "0521F" "0525F" "0526F" "0529F" "0545F" "0550F" "0551F" "0555F" "0556F" "0557F" "0575F" "1010F" "1011F" "1012F" "1031F" "1032F" "1033F" "1050F" "1052F" "1055F" "1060F" "1061F" "1065F" "1066F" "1070F" "1071F" "1080F" "1090F" "1091F" "1100F" "1101F" "1110F" "1111F" "1116F" "1118F" "1119F" "1121F" "1123F" "1124F" "1125F" "1126F" "1127F" "1128F" "1130F" "1134F" "1135F" "1137F" "1159F" "1160F" "1175F" "1180F" "1181F" "1182F" "1183F" "1200F" "1205F" "1220F" "1450F" "1451F" "1460F" "1461F" "1490F" "1493F" "1494F" "2015F" "2016F" "2019F" "2020F" "2021F" "2027F" "2029F" "2035F" "2040F" "2044F" "2060F" "3008F" "3015F" "3019F" "3038F" "3044F" "3045F" "3047F" "3055F" "3056F" "3073F" "3074F" "3075F" "3095F" "3096F" "3100F" "3101F" "3102F" "3110F" "3111F" "3112F" "3115F" "3117F" "3118F" "3119F" "3120F" "3125F" "3130F" "3132F" "3140F" "3141F" "3142F" "3143F" "3155F" "3160F" "3170F" "3215F" "3216F" "3217F" "3218F" "3219F" "3220F" "3230F" "3250F" "3260F" "3265F" "3266F" "3267F" "3268F" "3269F" "3270F" "3271F" "3272F" "3273F" "3274F" "3278F" "3279F" "3280F" "3281F" "3284F" "3285F" "3288F" "3290F" "3291F" "3292F" "3293F" "3294F" "3300F" "3301F" "3302F" "3303F" "3304F" "3305F" "3306F" "3307F" "3308F" "3309F" "3310F" "3311F" "3312F" "3313F" "3314F" "3315F" "3316F" "3317F" "3318F" "3319F" "3320F" "3321F" "3322F" "3323F" "3324F" "3325F" "3328F" "3330F" "3331F" "3340F" "3341F" "3342F" "3343F" "3344F" "3345F" "3370F" "3372F" "3374F" "3376F" "3378F" "3380F" "3382F" "3384F" "3386F" "3388F" "3390F" "3394F" "3395F" "3500F" "3502F" "3503F" "3510F" "3511F" "3512F" "3513F" "3514F" "3515F" "3517F" "3520F" "3550F" "3551F" "3552F" "3555F" "3570F" "3572F" "3573F" "3650F" "3725F" "3750F" "4004F" "4005F" "4007F" "4008F" "4010F" "4013F" "4019F" "4041F" "4042F" "4043F" "4044F" "4046F" "4047F" "4048F" "4049F" "4063F" "4069F" "4070F" "4073F" "4075F" "4077F" "4079F" "4084F" "4086F" "5005F" "5010F" "4090F" "4095F" "4100F" "4120F" "4124F" "4130F" "4131F" "4132F" "4133F" "4134F" "4135F" "4136F" "4140F" "4142F" "4144F" "4145F" "4148F" "4149F" "4150F" "4151F" "4152F" "4154F" "4155F" "4156F" "4157F" "4158F" "4159F" "4163F" "4164F" "4165F" "4167F" "4168F" "4169F" "4171F" "4172F" "4174F" "4175F" "4176F" "4177F" "4178F" "4179F" "4180F" "4181F" "4182F" "4185F" "4186F" "4187F" "4188F" "4189F" "4190F" "4191F" "4200F" "4201F" "4210F" "4220F" "4221F" "4230F" "4240F" "4242F" "4245F" "4248F" "4250F" "4255F" "4256F" "4270F" "4271F" "4274F" "4275F" "4290F" "4293F" "4300F" "4301F" "4320F" "4322F" "4330F" "4340F" "4350F" "4450F" "4470F" "4480F" "4481F" "4500F" "4510F" "4525F" "4526F" "5015F" "5020F" "5060F" "5062F" "5200F" "5250F" "6010F" "6015F" "6020F" "6030F" "6040F" "6045F" "6070F" "6100F" "6150F" "7010F" "7020F" "7025F" "0074T" "0088T" "0089T" "0104T" "0105T" "0115T" "0116T" "0117T" "0126T" "0130T" "0160T" "0161T" "0168T" "0185T" "0186T" "0188T" "0189T" "0200T" "0201T" "0202T" "0359T" "0360T" "0361T" "0362T" "0363T" "0364T" "0365T" "0366T" "0367T" "0368T" "0369T" "0370T" "0371T" "0372T" "0373T" "0374T" "0405T" "0488T" "0495T" "0496T" "0501T" "0502T" "0503T" "0504T" "0523T" "0584T" "0585T" "0586T" "0591T" "0592T" "0593T" "0687T" "0688T" "0692T" "0702T" "0703T" "0704T" "0705T" "0706T" "0710T" "0711T" "0712T" "0713T" "0732T" "0794T" "0807T" "0808T" "0500F" "0501F" "0502F" "0503F" "1000F" "1001F" "1002F" "1003F" "1004F" "1005F" "1006F" "1007F" "1008F" "1015F" "1018F" "1019F" "1022F" "1026F" "1030F" "1034F" "1035F" "1036F" "1038F" "1039F" "1040F" "2000F" "2001F" "2002F" "2003F" "2004F" "2010F" "2014F" "2018F" "2022F" "2023F" "2025F" "2033F" "2024F" "2026F" "2028F" "2030F" "2031F" "3000F" "3002F" "3006F" "3011F" "3014F" "3017F" "3020F" "3021F" "3022F" "3023F" "3025F" "3027F" "3028F" "3035F" "3037F" "3040F" "3042F" "3046F" "3047F" "3048F" "3049F" "3050F" "3060F" "3061F" "3062F" "3066F" "3072F" "3076F" "3077F" "3078F" "3079F" "3080F" "3082F" "3083F" "3084F" "3085F" "3088F" "3089F" "3090F" "3091F" "3092F" "3093F" "4000F" "4001F" "4002F" "4003F" "4006F" "4009F" "4011F" "4012F" "4014F" "4015F" "4016F" "4017F" "4018F" "4025F" "4030F" "4033F" "4035F" "4037F" "4040F" "4045F" "4050F" "4051F" "4052F" "4053F" "4054F" "4055F" "4056F" "4058F" "4060F" "4062F" "4064F" "4065F" "4066F" "4067F" "6005F"
	*/
   	public void setCsvcSpecMedServicesTrue()  throws CFException{  			
    	csvcProc.setCsvcSpecMedServicesTrue();
   	}
	/**
	 *	Test condition "92506" THRU "92510" "92521" THRU "92523" "92524" "92526" "92630" "92633" "96105" for isCsvcSpeechThrpy()
	 *	@return  Returns true if isCsvcSpeechThrpy() is "92506" THRU "92510" "92521" THRU "92523" "92524" "92526" "92630" "92633" "96105"
	 */
   public boolean isCsvcSpeechThrpy() throws CFException {
      return csvcProc.isCsvcSpeechThrpy();
   }

	/**
	*  set values "92506" THRU "92510" "92521" THRU "92523" "92524" "92526" "92630" "92633" "96105"
	*/
   	public void setCsvcSpeechThrpyTrue()  throws CFException{  			
    	csvcProc.setCsvcSpeechThrpyTrue();
   	}
	/**
	 *	Test condition "3" "4" "K" "Q" "Z" "D" for isCsvcAnesDigit()
	 *	@return  Returns true if isCsvcAnesDigit() is "3" "4" "K" "Q" "Z" "D"
	 */
   public boolean isCsvcAnesDigit() throws CFException {
      return csvcProc.isCsvcAnesDigit();
   }

	/**
	*  set values "3" "4" "K" "Q" "Z" "D"
	*/
   	public void setCsvcAnesDigitTrue()  throws CFException{  			
    	csvcProc.setCsvcAnesDigitTrue();
   	}
	/**
	 *	Test condition "90282" "90285" "90286" "90289" "90290" "90292" THRU "90295" "90297" THRU "90370" "90372" THRU "90374" "90379" THRU "90383" "90387" "90388" "90390" THRU "90392" "90394" "90395" "90397" THRU "90585" "90587" THRU "90599" "90611" "90619" THRU "90621" "90622" "90625" "90626" "90627" "90630" "90632" THRU "90634" "90636" "90644" "90645" THRU "90650" "90651" "90653" "90654" "90655" THRU "90660" "90661" THRU "90663" "90664" "90665" "90666" THRU "90668" "90669" "90670" "90671" "90672" "90673" "90674" "90677" "90678" "90679" "90680" THRU "90681" "90682" THRU "90689" "90690" THRU "90693" "90694" "90696" "90697" "90698" THRU "90699" "90700" THRU "90750" "90756" "90758" "90759" "91300" "91301" "91302" "91303" "91304" "91305" "91306" "91307" "91308" "91309" "91310" "91311" "91312" THRU "91315" "91316" "91317" "91318" THRU "91322" "0001A" "0002A" "0003A" "0004A" "0011A" "0012A" "0013A" "0021A" "0022A" "0031A" "0034A" "0041A" "0042A" "0044A" "0051A" "0052A" "0053A" "0054A" "0064A" "0071A" "0072A" "0073A" "0074A" "0081A" "0082A" "0083A" "0091A" "0092A" "0093A" "0094A" "0104A" "0111A" "0112A" "0113A" "0121A" "0124A" "0134A" "0141A" "0142A" "0144A" "0151A" "0154A" "0164A" "0171A" "0172A" "0173A" "0174A" for isCsvcImmunization()
	 *	@return  Returns true if isCsvcImmunization() is "90282" "90285" "90286" "90289" "90290" "90292" THRU "90295" "90297" THRU "90370" "90372" THRU "90374" "90379" THRU "90383" "90387" "90388" "90390" THRU "90392" "90394" "90395" "90397" THRU "90585" "90587" THRU "90599" "90611" "90619" THRU "90621" "90622" "90625" "90626" "90627" "90630" "90632" THRU "90634" "90636" "90644" "90645" THRU "90650" "90651" "90653" "90654" "90655" THRU "90660" "90661" THRU "90663" "90664" "90665" "90666" THRU "90668" "90669" "90670" "90671" "90672" "90673" "90674" "90677" "90678" "90679" "90680" THRU "90681" "90682" THRU "90689" "90690" THRU "90693" "90694" "90696" "90697" "90698" THRU "90699" "90700" THRU "90750" "90756" "90758" "90759" "91300" "91301" "91302" "91303" "91304" "91305" "91306" "91307" "91308" "91309" "91310" "91311" "91312" THRU "91315" "91316" "91317" "91318" THRU "91322" "0001A" "0002A" "0003A" "0004A" "0011A" "0012A" "0013A" "0021A" "0022A" "0031A" "0034A" "0041A" "0042A" "0044A" "0051A" "0052A" "0053A" "0054A" "0064A" "0071A" "0072A" "0073A" "0074A" "0081A" "0082A" "0083A" "0091A" "0092A" "0093A" "0094A" "0104A" "0111A" "0112A" "0113A" "0121A" "0124A" "0134A" "0141A" "0142A" "0144A" "0151A" "0154A" "0164A" "0171A" "0172A" "0173A" "0174A"
	 */
   public boolean isCsvcImmunization() throws CFException {
      return csvcProc.isCsvcImmunization();
   }

	/**
	*  set values "90282" "90285" "90286" "90289" "90290" "90292" THRU "90295" "90297" THRU "90370" "90372" THRU "90374" "90379" THRU "90383" "90387" "90388" "90390" THRU "90392" "90394" "90395" "90397" THRU "90585" "90587" THRU "90599" "90611" "90619" THRU "90621" "90622" "90625" "90626" "90627" "90630" "90632" THRU "90634" "90636" "90644" "90645" THRU "90650" "90651" "90653" "90654" "90655" THRU "90660" "90661" THRU "90663" "90664" "90665" "90666" THRU "90668" "90669" "90670" "90671" "90672" "90673" "90674" "90677" "90678" "90679" "90680" THRU "90681" "90682" THRU "90689" "90690" THRU "90693" "90694" "90696" "90697" "90698" THRU "90699" "90700" THRU "90750" "90756" "90758" "90759" "91300" "91301" "91302" "91303" "91304" "91305" "91306" "91307" "91308" "91309" "91310" "91311" "91312" THRU "91315" "91316" "91317" "91318" THRU "91322" "0001A" "0002A" "0003A" "0004A" "0011A" "0012A" "0013A" "0021A" "0022A" "0031A" "0034A" "0041A" "0042A" "0044A" "0051A" "0052A" "0053A" "0054A" "0064A" "0071A" "0072A" "0073A" "0074A" "0081A" "0082A" "0083A" "0091A" "0092A" "0093A" "0094A" "0104A" "0111A" "0112A" "0113A" "0121A" "0124A" "0134A" "0141A" "0142A" "0144A" "0151A" "0154A" "0164A" "0171A" "0172A" "0173A" "0174A"
	*/
   	public void setCsvcImmunizationTrue()  throws CFException{  			
    	csvcProc.setCsvcImmunizationTrue();
   	}
	/**
	 *	Test condition "P" "T" "7" "8" " " "N" "Y" "R" for isCsvcBlank()
	 *	@return  Returns true if isCsvcBlank() is "P" "T" "7" "8" " " "N" "Y" "R"
	 */
   public boolean isCsvcBlank() throws CFException {
      return csvcProc.isCsvcBlank();
   }

	/**
	*  set values "P" "T" "7" "8" " " "N" "Y" "R"
	*/
   	public void setCsvcBlankTrue()  throws CFException{  			
    	csvcProc.setCsvcBlankTrue();
   	}
	/**
	 *	Test condition "79000" THRU "79999" "0073T" for isCsvcRadiotherapy2()
	 *	@return  Returns true if isCsvcRadiotherapy2() is "79000" THRU "79999" "0073T"
	 */
   public boolean isCsvcRadiotherapy2() throws CFException {
      return csvcProc.isCsvcRadiotherapy2();
   }

	/**
	*  set values "79000" THRU "79999" "0073T"
	*/
   	public void setCsvcRadiotherapy2True()  throws CFException{  			
    	csvcProc.setCsvcRadiotherapy2True();
   	}
	/**
	 *	Test condition "90100" THRU "90199" "99320" THRU "99323" "99329" THRU "99333" "99338" "99341" THRU "99353" "99500" THRU "99604" "99608" THRU "99699" for isCsvcMedVisit2()
	 *	@return  Returns true if isCsvcMedVisit2() is "90100" THRU "90199" "99320" THRU "99323" "99329" THRU "99333" "99338" "99341" THRU "99353" "99500" THRU "99604" "99608" THRU "99699"
	 */
   public boolean isCsvcMedVisit2() throws CFException {
      return csvcProc.isCsvcMedVisit2();
   }

	/**
	*  set values "90100" THRU "90199" "99320" THRU "99323" "99329" THRU "99333" "99338" "99341" THRU "99353" "99500" THRU "99604" "99608" THRU "99699"
	*/
   	public void setCsvcMedVisit2True()  throws CFException{  			
    	csvcProc.setCsvcMedVisit2True();
   	}
	/**
	 *	Test condition "90200" THRU "90280" "94002" "94003" "99221" THRU "99223" "99227" THRU "99233" "99237" THRU "99239" "99430" THRU "99431" "99433" THRU "99436" "99460" THRU "99464" "99465" "99468" "99469" "99471" "99472" "99475" "99476" "99477" "99478" THRU "99480" "99481" THRU "99482" for isCsvcHospMedVisit1()
	 *	@return  Returns true if isCsvcHospMedVisit1() is "90200" THRU "90280" "94002" "94003" "99221" THRU "99223" "99227" THRU "99233" "99237" THRU "99239" "99430" THRU "99431" "99433" THRU "99436" "99460" THRU "99464" "99465" "99468" "99469" "99471" "99472" "99475" "99476" "99477" "99478" THRU "99480" "99481" THRU "99482"
	 */
   public boolean isCsvcHospMedVisit1() throws CFException {
      return csvcProc.isCsvcHospMedVisit1();
   }

	/**
	*  set values "90200" THRU "90280" "94002" "94003" "99221" THRU "99223" "99227" THRU "99233" "99237" THRU "99239" "99430" THRU "99431" "99433" THRU "99436" "99460" THRU "99464" "99465" "99468" "99469" "99471" "99472" "99475" "99476" "99477" "99478" THRU "99480" "99481" THRU "99482"
	*/
   	public void setCsvcHospMedVisit1True()  throws CFException{  			
    	csvcProc.setCsvcHospMedVisit1True();
   	}
	/**
	 *	Test condition "0183T" "0552T" "0770T" "0791T" "64550" "93668" "93797" THRU "93798" "94625" "94626" "97000" THRU "97150" "97159" THRU "97168" "97173" THRU "97596" "97599" THRU "97601" "97603" "97604" "97609" "97611" THRU "97801" "97805" THRU "98924" "98930" THRU "98943" for isCsvcPhysMed()
	 *	@return  Returns true if isCsvcPhysMed() is "0183T" "0552T" "0770T" "0791T" "64550" "93668" "93797" THRU "93798" "94625" "94626" "97000" THRU "97150" "97159" THRU "97168" "97173" THRU "97596" "97599" THRU "97601" "97603" "97604" "97609" "97611" THRU "97801" "97805" THRU "98924" "98930" THRU "98943"
	 */
   public boolean isCsvcPhysMed() throws CFException {
      return csvcProc.isCsvcPhysMed();
   }

	/**
	*  set values "0183T" "0552T" "0770T" "0791T" "64550" "93668" "93797" THRU "93798" "94625" "94626" "97000" THRU "97150" "97159" THRU "97168" "97173" THRU "97596" "97599" THRU "97601" "97603" "97604" "97609" "97611" THRU "97801" "97805" THRU "98924" "98930" THRU "98943"
	*/
   	public void setCsvcPhysMedTrue()  throws CFException{  			
    	csvcProc.setCsvcPhysMedTrue();
   	}
	/**
	 *	Test condition "43754" THRU "43757" "51725" "51726" "51727" THRU "51729" "51730" THRU "51797" "51798" "59000" "59001" "59012" "59015" "59020" "59025" "59030" "59050" THRU "59051" "62367" THRU "62370" "63690" THRU "63691" "90281" "90283" "90284" "90287" "90288" "90291" "90296" "90371" "90375" "90376" "90377" "90378" "90384" "90385" "90386" "90389" "90393" "90396" "90586" "90675" THRU "90676" "91000" THRU "91112" "91113" "91114" THRU "91299" "91323" THRU "91999" "92018" "92019" "92020" THRU "92080" "92081" THRU "92083" "92084" THRU "92501" "92502" "92504" "92512" THRU "92520" "92525" "92527" THRU "92629" "92631" THRU "92632" "92634" THRU "92919" "92950" "92953" "92960" "92961" "92970" "92971" "92974" "92977" "93000" THRU "93318" "93319" "93320" THRU "93450" "93463" THRU "93499" "93555" "93556" "93660" THRU "93662" "93700" THRU "93796" "93799" THRU "94001" "94005" "94006" THRU "94609" "94610" "94611" THRU "94624" "94627" THRU "94639" "94640" "94641" "94642" "94643" "94644" "94645" "94646" THRU "94655" "94658" THRU "94659" "94660" "94661" "94662" "94663" THRU "94666" "94667" "94668" "94669" THRU "94773" "94774" THRU "94777" "94778" THRU "95114" "95200" THRU "95829" "95831" THRU "95872" "95873" "95874" THRU "95964" "95968" THRU "96039" "96041" THRU "96099" "96104" "96106" THRU "96115" "96117" "96122" THRU "96126" "96127" "96128" THRU "96129" "96134" THRU "96135" "96140" THRU "96145" "96147" THRU "96149" "96157" "96160" THRU "96163" "96166" "96169" "96172" THRU "96201" "96204" THRU "96359" "96360" "96361" "96362" THRU "96364" "96365" THRU "96376" "96377" THRU "96378" "96379" "96380" THRU "96399" "96523" "96567" "96573" "96574" "96900" "96904" "96910" "96912" "96913" "96920" THRU "96922" "96931" THRU "96936" "96999" "97597" "97598" "97602" "97605" "97606" "97607" "97608" "97610" "98960" THRU "98962" "99151" THRU "99153" "99155" THRU "99157" "99170" "99172" "99173" "99174" "99175" "99177" "99183" "99185" "99186" "99188" "99190" THRU "99192" "99195" "0054T" "0055T" "0056T" "0057T" "0060T" "0065T" "0068T" "0069T" "0070T" "0085T" "0086T" "0106T" "0107T" "0108T" "0109T" "0133T" "0162T" "0181T" "0187T" "0198T" "0199T" "0203T" "0204T" "0205T" "0206T" "0208T" "0209T" "0210T" "0211T" "0212T" "0223T" "0224T" "0225T" "0233T" "0239T" "0240T" "0241T" "0242T" "0243T" "0244T" "0272T" "0273T" "0279T" "0280T" "0285T" "0295T" "0296T" "0297T" "0298T" "0299T" "0300T" "0305T" "0306T" "0310T" "0311T" "0317T" "0326T" "0327T" "0328T" "0329T" "0330T" "0333T" "0337T" "0341T" "0346T" "0358T" "0378T" "0379T" "0380T" "0381T" "0382T" "0383T" "0384T" "0385T" "0386T" "0389T" "0390T" "0391T" "0400T" "0401T" "0417T" "0418T" "0434T" "0435T" "0436T" "0439T" "0462T" "0463T" "0464T" "0469T" "0470T" "0471T" "0472T" "0473T" "0497T" "0498T" "0506T" "0507T" "0509T" "0512T" "0513T" "0521T" "0522T" "0528T" "0529T" "0533T" "0534T" "0535T" "0536T" "0537T" "0538T" "0539T" "0540T" "0575T" "0576T" "0577T" "0578T" "0579T" "0589T" "0590T" "0604T" "0605T" "0606T" "0607T" "0608T" "0615T" "0650T" "0651T" "0658T" "0683T" "0684T" "0685T" "0689T" "0690T" "0693T" "0695T" "0696T" "0716T" "0728T" "0729T" "0731T" "0733T" "0734T" "0738T" "0740T" "0741T" "0764T" "0765T" "0776T" "0778T" "0779T" "0783T" "0792T" "0804T" for isCsvcDiagServices()
	 *	@return  Returns true if isCsvcDiagServices() is "43754" THRU "43757" "51725" "51726" "51727" THRU "51729" "51730" THRU "51797" "51798" "59000" "59001" "59012" "59015" "59020" "59025" "59030" "59050" THRU "59051" "62367" THRU "62370" "63690" THRU "63691" "90281" "90283" "90284" "90287" "90288" "90291" "90296" "90371" "90375" "90376" "90377" "90378" "90384" "90385" "90386" "90389" "90393" "90396" "90586" "90675" THRU "90676" "91000" THRU "91112" "91113" "91114" THRU "91299" "91323" THRU "91999" "92018" "92019" "92020" THRU "92080" "92081" THRU "92083" "92084" THRU "92501" "92502" "92504" "92512" THRU "92520" "92525" "92527" THRU "92629" "92631" THRU "92632" "92634" THRU "92919" "92950" "92953" "92960" "92961" "92970" "92971" "92974" "92977" "93000" THRU "93318" "93319" "93320" THRU "93450" "93463" THRU "93499" "93555" "93556" "93660" THRU "93662" "93700" THRU "93796" "93799" THRU "94001" "94005" "94006" THRU "94609" "94610" "94611" THRU "94624" "94627" THRU "94639" "94640" "94641" "94642" "94643" "94644" "94645" "94646" THRU "94655" "94658" THRU "94659" "94660" "94661" "94662" "94663" THRU "94666" "94667" "94668" "94669" THRU "94773" "94774" THRU "94777" "94778" THRU "95114" "95200" THRU "95829" "95831" THRU "95872" "95873" "95874" THRU "95964" "95968" THRU "96039" "96041" THRU "96099" "96104" "96106" THRU "96115" "96117" "96122" THRU "96126" "96127" "96128" THRU "96129" "96134" THRU "96135" "96140" THRU "96145" "96147" THRU "96149" "96157" "96160" THRU "96163" "96166" "96169" "96172" THRU "96201" "96204" THRU "96359" "96360" "96361" "96362" THRU "96364" "96365" THRU "96376" "96377" THRU "96378" "96379" "96380" THRU "96399" "96523" "96567" "96573" "96574" "96900" "96904" "96910" "96912" "96913" "96920" THRU "96922" "96931" THRU "96936" "96999" "97597" "97598" "97602" "97605" "97606" "97607" "97608" "97610" "98960" THRU "98962" "99151" THRU "99153" "99155" THRU "99157" "99170" "99172" "99173" "99174" "99175" "99177" "99183" "99185" "99186" "99188" "99190" THRU "99192" "99195" "0054T" "0055T" "0056T" "0057T" "0060T" "0065T" "0068T" "0069T" "0070T" "0085T" "0086T" "0106T" "0107T" "0108T" "0109T" "0133T" "0162T" "0181T" "0187T" "0198T" "0199T" "0203T" "0204T" "0205T" "0206T" "0208T" "0209T" "0210T" "0211T" "0212T" "0223T" "0224T" "0225T" "0233T" "0239T" "0240T" "0241T" "0242T" "0243T" "0244T" "0272T" "0273T" "0279T" "0280T" "0285T" "0295T" "0296T" "0297T" "0298T" "0299T" "0300T" "0305T" "0306T" "0310T" "0311T" "0317T" "0326T" "0327T" "0328T" "0329T" "0330T" "0333T" "0337T" "0341T" "0346T" "0358T" "0378T" "0379T" "0380T" "0381T" "0382T" "0383T" "0384T" "0385T" "0386T" "0389T" "0390T" "0391T" "0400T" "0401T" "0417T" "0418T" "0434T" "0435T" "0436T" "0439T" "0462T" "0463T" "0464T" "0469T" "0470T" "0471T" "0472T" "0473T" "0497T" "0498T" "0506T" "0507T" "0509T" "0512T" "0513T" "0521T" "0522T" "0528T" "0529T" "0533T" "0534T" "0535T" "0536T" "0537T" "0538T" "0539T" "0540T" "0575T" "0576T" "0577T" "0578T" "0579T" "0589T" "0590T" "0604T" "0605T" "0606T" "0607T" "0608T" "0615T" "0650T" "0651T" "0658T" "0683T" "0684T" "0685T" "0689T" "0690T" "0693T" "0695T" "0696T" "0716T" "0728T" "0729T" "0731T" "0733T" "0734T" "0738T" "0740T" "0741T" "0764T" "0765T" "0776T" "0778T" "0779T" "0783T" "0792T" "0804T"
	 */
   public boolean isCsvcDiagServices() throws CFException {
      return csvcProc.isCsvcDiagServices();
   }

	/**
	*  set values "43754" THRU "43757" "51725" "51726" "51727" THRU "51729" "51730" THRU "51797" "51798" "59000" "59001" "59012" "59015" "59020" "59025" "59030" "59050" THRU "59051" "62367" THRU "62370" "63690" THRU "63691" "90281" "90283" "90284" "90287" "90288" "90291" "90296" "90371" "90375" "90376" "90377" "90378" "90384" "90385" "90386" "90389" "90393" "90396" "90586" "90675" THRU "90676" "91000" THRU "91112" "91113" "91114" THRU "91299" "91323" THRU "91999" "92018" "92019" "92020" THRU "92080" "92081" THRU "92083" "92084" THRU "92501" "92502" "92504" "92512" THRU "92520" "92525" "92527" THRU "92629" "92631" THRU "92632" "92634" THRU "92919" "92950" "92953" "92960" "92961" "92970" "92971" "92974" "92977" "93000" THRU "93318" "93319" "93320" THRU "93450" "93463" THRU "93499" "93555" "93556" "93660" THRU "93662" "93700" THRU "93796" "93799" THRU "94001" "94005" "94006" THRU "94609" "94610" "94611" THRU "94624" "94627" THRU "94639" "94640" "94641" "94642" "94643" "94644" "94645" "94646" THRU "94655" "94658" THRU "94659" "94660" "94661" "94662" "94663" THRU "94666" "94667" "94668" "94669" THRU "94773" "94774" THRU "94777" "94778" THRU "95114" "95200" THRU "95829" "95831" THRU "95872" "95873" "95874" THRU "95964" "95968" THRU "96039" "96041" THRU "96099" "96104" "96106" THRU "96115" "96117" "96122" THRU "96126" "96127" "96128" THRU "96129" "96134" THRU "96135" "96140" THRU "96145" "96147" THRU "96149" "96157" "96160" THRU "96163" "96166" "96169" "96172" THRU "96201" "96204" THRU "96359" "96360" "96361" "96362" THRU "96364" "96365" THRU "96376" "96377" THRU "96378" "96379" "96380" THRU "96399" "96523" "96567" "96573" "96574" "96900" "96904" "96910" "96912" "96913" "96920" THRU "96922" "96931" THRU "96936" "96999" "97597" "97598" "97602" "97605" "97606" "97607" "97608" "97610" "98960" THRU "98962" "99151" THRU "99153" "99155" THRU "99157" "99170" "99172" "99173" "99174" "99175" "99177" "99183" "99185" "99186" "99188" "99190" THRU "99192" "99195" "0054T" "0055T" "0056T" "0057T" "0060T" "0065T" "0068T" "0069T" "0070T" "0085T" "0086T" "0106T" "0107T" "0108T" "0109T" "0133T" "0162T" "0181T" "0187T" "0198T" "0199T" "0203T" "0204T" "0205T" "0206T" "0208T" "0209T" "0210T" "0211T" "0212T" "0223T" "0224T" "0225T" "0233T" "0239T" "0240T" "0241T" "0242T" "0243T" "0244T" "0272T" "0273T" "0279T" "0280T" "0285T" "0295T" "0296T" "0297T" "0298T" "0299T" "0300T" "0305T" "0306T" "0310T" "0311T" "0317T" "0326T" "0327T" "0328T" "0329T" "0330T" "0333T" "0337T" "0341T" "0346T" "0358T" "0378T" "0379T" "0380T" "0381T" "0382T" "0383T" "0384T" "0385T" "0386T" "0389T" "0390T" "0391T" "0400T" "0401T" "0417T" "0418T" "0434T" "0435T" "0436T" "0439T" "0462T" "0463T" "0464T" "0469T" "0470T" "0471T" "0472T" "0473T" "0497T" "0498T" "0506T" "0507T" "0509T" "0512T" "0513T" "0521T" "0522T" "0528T" "0529T" "0533T" "0534T" "0535T" "0536T" "0537T" "0538T" "0539T" "0540T" "0575T" "0576T" "0577T" "0578T" "0579T" "0589T" "0590T" "0604T" "0605T" "0606T" "0607T" "0608T" "0615T" "0650T" "0651T" "0658T" "0683T" "0684T" "0685T" "0689T" "0690T" "0693T" "0695T" "0696T" "0716T" "0728T" "0729T" "0731T" "0733T" "0734T" "0738T" "0740T" "0741T" "0764T" "0765T" "0776T" "0778T" "0779T" "0783T" "0792T" "0804T"
	*/
   	public void setCsvcDiagServicesTrue()  throws CFException{  			
    	csvcProc.setCsvcDiagServicesTrue();
   	}
	/**
	 *	Test condition "0" "5" "9" "B" "M" "U" "7" "8" "P" "T" for isCsvcSurgDigit()
	 *	@return  Returns true if isCsvcSurgDigit() is "0" "5" "9" "B" "M" "U" "7" "8" "P" "T"
	 */
   public boolean isCsvcSurgDigit() throws CFException {
      return csvcProc.isCsvcSurgDigit();
   }

	/**
	*  set values "0" "5" "9" "B" "M" "U" "7" "8" "P" "T"
	*/
   	public void setCsvcSurgDigitTrue()  throws CFException{  			
    	csvcProc.setCsvcSurgDigitTrue();
   	}
	/**
	 *	Test condition "59420" THRU "59430" "90000" THRU "90099" "96040" "98966" THRU "98969" "98970" THRU "98972" "99200" THRU "99216" "99406" THRU "99409" "99417" "99421" THRU "99423" "99441" THRU "99444" "99446" THRU "99449" "99458" "99473" THRU "99474" for isCsvcMedVisit1()
	 *	@return  Returns true if isCsvcMedVisit1() is "59420" THRU "59430" "90000" THRU "90099" "96040" "98966" THRU "98969" "98970" THRU "98972" "99200" THRU "99216" "99406" THRU "99409" "99417" "99421" THRU "99423" "99441" THRU "99444" "99446" THRU "99449" "99458" "99473" THRU "99474"
	 */
   public boolean isCsvcMedVisit1() throws CFException {
      return csvcProc.isCsvcMedVisit1();
   }

	/**
	*  set values "59420" THRU "59430" "90000" THRU "90099" "96040" "98966" THRU "98969" "98970" THRU "98972" "99200" THRU "99216" "99406" THRU "99409" "99417" "99421" THRU "99423" "99441" THRU "99444" "99446" THRU "99449" "99458" "99473" THRU "99474"
	*/
   	public void setCsvcMedVisit1True()  throws CFException{  			
    	csvcProc.setCsvcMedVisit1True();
   	}
	/**
	 *	Test condition "70000" THRU "70249" "70250" THRU "70371" "70372" THRU "76144" "76146" THRU "76999" "77001" THRU "77003" "77011" THRU "77014" "77021" THRU "77022" "77031" THRU "77032" "77046" THRU "77049" "77051" THRU "77059" "77061" THRU "77063" "77065" THRU "77067" "77071" THRU "77084" "77085" THRU "77086" "77089" THRU "77092" "95965" THRU "95967" "0007T" "0028T" "0038T" "0039T" "0040T" "0042T" "0066T" "0067T" "0144T" "0145T" "0146T" "0147T" "0148T" "0149T" "0150T" "0151T" "0152T" "0153T" "0154T" "0159T" "0174T" "0175T" "0178T" "0179T" "0180T" "0291T" "0292T" "0348T" "0349T" "0350T" "0351T" "0352T" "0353T" "0354T" "0355T" "0422T" "0475T" "0476T" "0477T" "0478T" "0485T" "0486T" "0487T" "0493T" "0508T" "0541T" "0542T" "0554T" "0555T" "0556T" "0557T" "0558T" "0559T" "0560T" "0561T" "0562T" "0598T" "0599T" "0602T" "0603T" "0609T" "0610T" "0611T" "0612T" "0623T" "0624T" "0625T" "0626T" "0631T" "0633T" "0634T" "0635T" "0636T" "0637T" "0638T" "0640T" "0641T" "0642T" "0648T" "0649T" "0691T" "0694T" "0697T" "0698T" "0700T" "0701T" "0721T" "0722T" "0723T" "0724T" "0743T" "0749T" "0750T" for isCsvcDiagXray()
	 *	@return  Returns true if isCsvcDiagXray() is "70000" THRU "70249" "70250" THRU "70371" "70372" THRU "76144" "76146" THRU "76999" "77001" THRU "77003" "77011" THRU "77014" "77021" THRU "77022" "77031" THRU "77032" "77046" THRU "77049" "77051" THRU "77059" "77061" THRU "77063" "77065" THRU "77067" "77071" THRU "77084" "77085" THRU "77086" "77089" THRU "77092" "95965" THRU "95967" "0007T" "0028T" "0038T" "0039T" "0040T" "0042T" "0066T" "0067T" "0144T" "0145T" "0146T" "0147T" "0148T" "0149T" "0150T" "0151T" "0152T" "0153T" "0154T" "0159T" "0174T" "0175T" "0178T" "0179T" "0180T" "0291T" "0292T" "0348T" "0349T" "0350T" "0351T" "0352T" "0353T" "0354T" "0355T" "0422T" "0475T" "0476T" "0477T" "0478T" "0485T" "0486T" "0487T" "0493T" "0508T" "0541T" "0542T" "0554T" "0555T" "0556T" "0557T" "0558T" "0559T" "0560T" "0561T" "0562T" "0598T" "0599T" "0602T" "0603T" "0609T" "0610T" "0611T" "0612T" "0623T" "0624T" "0625T" "0626T" "0631T" "0633T" "0634T" "0635T" "0636T" "0637T" "0638T" "0640T" "0641T" "0642T" "0648T" "0649T" "0691T" "0694T" "0697T" "0698T" "0700T" "0701T" "0721T" "0722T" "0723T" "0724T" "0743T" "0749T" "0750T"
	 */
   public boolean isCsvcDiagXray() throws CFException {
      return csvcProc.isCsvcDiagXray();
   }

	/**
	*  set values "70000" THRU "70249" "70250" THRU "70371" "70372" THRU "76144" "76146" THRU "76999" "77001" THRU "77003" "77011" THRU "77014" "77021" THRU "77022" "77031" THRU "77032" "77046" THRU "77049" "77051" THRU "77059" "77061" THRU "77063" "77065" THRU "77067" "77071" THRU "77084" "77085" THRU "77086" "77089" THRU "77092" "95965" THRU "95967" "0007T" "0028T" "0038T" "0039T" "0040T" "0042T" "0066T" "0067T" "0144T" "0145T" "0146T" "0147T" "0148T" "0149T" "0150T" "0151T" "0152T" "0153T" "0154T" "0159T" "0174T" "0175T" "0178T" "0179T" "0180T" "0291T" "0292T" "0348T" "0349T" "0350T" "0351T" "0352T" "0353T" "0354T" "0355T" "0422T" "0475T" "0476T" "0477T" "0478T" "0485T" "0486T" "0487T" "0493T" "0508T" "0541T" "0542T" "0554T" "0555T" "0556T" "0557T" "0558T" "0559T" "0560T" "0561T" "0562T" "0598T" "0599T" "0602T" "0603T" "0609T" "0610T" "0611T" "0612T" "0623T" "0624T" "0625T" "0626T" "0631T" "0633T" "0634T" "0635T" "0636T" "0637T" "0638T" "0640T" "0641T" "0642T" "0648T" "0649T" "0691T" "0694T" "0697T" "0698T" "0700T" "0701T" "0721T" "0722T" "0723T" "0724T" "0743T" "0749T" "0750T"
	*/
   	public void setCsvcDiagXrayTrue()  throws CFException{  			
    	csvcProc.setCsvcDiagXrayTrue();
   	}
	/**
	 *	Test condition "36400" THRU "36416" "36540" "36600" "80000" THRU "85094" "85096" THRU "85101" "85103" THRU "88169" "88172" THRU "89999" "99000" THRU "99002" "0001M" "0002M" "0003M" "0004M" "0005M" "0006M" "0007M" "0008M" "0009M" "0010M" "0011M" "0012M" "0013M" "0014M" "0015M" "0016M" "0018M" "0019M" "0004T" "0010T" "0023T" "0026T" "0030T" "0041T" "0043T" "0058T" "0059T" "0064T" "0087T" "0103T" "0111T" "0140T" "0194T" "0357T" "0423T" "0500T" "0564T" "0751T" "0752T" "0753T" "0754T" "0755T" "0756T" "0757T" "0758T" "0759T" "0760T" "0761T" "0762T" "0763T" "0001U" "0002U" "0003U" "0004U" "0005U" "0006U" "0007U" "0008U" "0009U" "0010U" "0011U" "0012U" "0013U" "0014U" "0015U" "0016U" "0017U" "0018U" "0019U" "0020U" "0021U" "0022U" "0023U" "0024U" "0025U" "0026U" "0027U" "0028U" "0029U" "0030U" "0031U" "0032U" "0033U" "0034U" "0035U" "0036U" "0037U" "0038U" "0039U" "0040U" "0041U" "0042U" "0043U" "0044U" "0045U" "0046U" "0047U" "0048U" "0049U" "0050U" "0051U" "0052U" "0053U" "0054U" "0055U" "0056U" "0057U" "0058U" "0059U" "0060U" "0061U" "0062U" "0063U" "0064U" "0065U" "0066U" "0067U" "0068U" "0069U" "0070U" "0071U" "0072U" "0073U" "0074U" "0075U" "0076U" "0077U" "0078U" "0079U" "0080U" "0081U" "0082U" "0083U" "0084U" "0085U" "0086U" "0087U" "0088U" "0089U" "0090U" "0091U" "0092U" "0093U" "0094U" "0095U" "0096U" "0097U" "0098U" "0099U" "0100U" "0101U" "0102U" "0103U" "0104U" "0105U" "0106U" "0107U" "0108U" "0109U" "0110U" "0111U" "0112U" "0113U" "0114U" "0115U" "0116U" "0117U" "0118U" "0119U" "0120U" "0121U" "0122U" "0123U" "0124U" "0125U" "0126U" "0127U" "0128U" "0129U" "0130U" "0131U" "0132U" "0133U" "0134U" "0135U" "0136U" "0137U" "0138U" "0140U" "0141U" "0142U" "0143U" "0144U" "0145U" "0146U" "0147U" "0148U" "0149U" "0150U" "0151U" "0152U" "0153U" "0154U" "0155U" "0156U" "0157U" "0158U" "0159U" "0160U" "0161U" "0162U" "0163U" "0164U" "0165U" "0166U" "0167U" "0169U" "0170U" "0171U" "0172U" "0173U" "0174U" "0175U" "0176U" "0177U" "0178U" "0179U" "0180U" "0181U" "0182U" "0183U" "0184U" "0185U" "0186U" "0187U" "0188U" "0189U" "0190U" "0191U" "0192U" "0193U" "0194U" "0195U" "0196U" "0197U" "0198U" "0199U" "0200U" "0201U" "0202U" "0203U" "0204U" "0205U" "0206U" "0207U" "0208U" "0209U" "0210U" "0211U" "0212U" "0213U" "0214U" "0215U" "0216U" "0217U" "0218U" "0219U" "0220U" "0221U" "0222U" "0223U" "0224U" "0225U" "0226U" "0227U" "0228U" "0229U" "0230U" "0231U" "0232U" "0233U" "0234U" "0235U" "0236U" "0237U" "0238U" "0239U" "0240U" "0241U" "0242U" "0243U" "0244U" "0245U" "0246U" "0247U" "0248U" "0249U" "0250U" "0251U" "0252U" "0253U" "0254U" "0255U" "0256U" "0257U" "0258U" "0259U" "0260U" "0261U" "0262U" "0263U" "0264U" "0265U" "0266U" "0267U" "0268U" "0269U" "0270U" "0271U" "0272U" "0273U" "0274U" "0275U" "0276U" "0277U" "0278U" "0279U" "0280U" "0281U" "0282U" "0283U" "0284U" "0285U" "0286U" "0287U" "0288U" "0289U" "0290U" "0291U" "0292U" "0293U" "0294U" "0295U" "0296U" "0297U" "0298U" "0299U" "0300U" "0301U" "0302U" "0303U" "0304U" "0305U" "0306U" "0307U" "0308U" "0309U" "0310U" "0311U" "0312U" "0313U" "0314U" "0315U" "0316U" "0317U" "0318U" "0319U" "0320U" "0321U" "0322U" "0323U" "0324U" "0325U" "0326U" "0327U" "0328U" "0329U" "0330U" "0331U" "0332U" "0333U" "0334U" "0335U" "0336U" "0337U" "0338U" "0339U" "0340U" "0341U" "0342U" "0343U" "0344U" "0345U" "0346U" "0347U" "0348U" "0349U" "0350U" "0351U" "0352U" "0353U" "0354U" "0351U" "0352U" "0353U" "0354U" "0355U" "0356U" "0357U" "0358U" "0359U" "0360U" "0361U" "0362U" "0363U" "0364U" "0365U" "0366U" "0367U" "0368U" "0369U" "0370U" "0371U" "0372U" "0373U" "0374U" "0375U" "0376U" "0377U" "0378U" "0379U" "0380U" "0381U" "0382U" "0383U" "0384U" "0385U" "0386U" "0387U" "0388U" "0389U" "0390U" "0391U" "0392U" "0393U" "0394U" "0395U" "0396U" "0397U" "0398U" "0399U" "0400U" "0401U" "0402U" "0403U" "0404U" "0405U" "0406U" "0407U" "0408U" "0409U" "0410U" "0411U" "0412U" "0413U" "0414U" "0415U" "0416U" "0417U" "0418U" "0419U" "3051F" "3052F" for isCsvcLab()
	 *	@return  Returns true if isCsvcLab() is "36400" THRU "36416" "36540" "36600" "80000" THRU "85094" "85096" THRU "85101" "85103" THRU "88169" "88172" THRU "89999" "99000" THRU "99002" "0001M" "0002M" "0003M" "0004M" "0005M" "0006M" "0007M" "0008M" "0009M" "0010M" "0011M" "0012M" "0013M" "0014M" "0015M" "0016M" "0018M" "0019M" "0004T" "0010T" "0023T" "0026T" "0030T" "0041T" "0043T" "0058T" "0059T" "0064T" "0087T" "0103T" "0111T" "0140T" "0194T" "0357T" "0423T" "0500T" "0564T" "0751T" "0752T" "0753T" "0754T" "0755T" "0756T" "0757T" "0758T" "0759T" "0760T" "0761T" "0762T" "0763T" "0001U" "0002U" "0003U" "0004U" "0005U" "0006U" "0007U" "0008U" "0009U" "0010U" "0011U" "0012U" "0013U" "0014U" "0015U" "0016U" "0017U" "0018U" "0019U" "0020U" "0021U" "0022U" "0023U" "0024U" "0025U" "0026U" "0027U" "0028U" "0029U" "0030U" "0031U" "0032U" "0033U" "0034U" "0035U" "0036U" "0037U" "0038U" "0039U" "0040U" "0041U" "0042U" "0043U" "0044U" "0045U" "0046U" "0047U" "0048U" "0049U" "0050U" "0051U" "0052U" "0053U" "0054U" "0055U" "0056U" "0057U" "0058U" "0059U" "0060U" "0061U" "0062U" "0063U" "0064U" "0065U" "0066U" "0067U" "0068U" "0069U" "0070U" "0071U" "0072U" "0073U" "0074U" "0075U" "0076U" "0077U" "0078U" "0079U" "0080U" "0081U" "0082U" "0083U" "0084U" "0085U" "0086U" "0087U" "0088U" "0089U" "0090U" "0091U" "0092U" "0093U" "0094U" "0095U" "0096U" "0097U" "0098U" "0099U" "0100U" "0101U" "0102U" "0103U" "0104U" "0105U" "0106U" "0107U" "0108U" "0109U" "0110U" "0111U" "0112U" "0113U" "0114U" "0115U" "0116U" "0117U" "0118U" "0119U" "0120U" "0121U" "0122U" "0123U" "0124U" "0125U" "0126U" "0127U" "0128U" "0129U" "0130U" "0131U" "0132U" "0133U" "0134U" "0135U" "0136U" "0137U" "0138U" "0140U" "0141U" "0142U" "0143U" "0144U" "0145U" "0146U" "0147U" "0148U" "0149U" "0150U" "0151U" "0152U" "0153U" "0154U" "0155U" "0156U" "0157U" "0158U" "0159U" "0160U" "0161U" "0162U" "0163U" "0164U" "0165U" "0166U" "0167U" "0169U" "0170U" "0171U" "0172U" "0173U" "0174U" "0175U" "0176U" "0177U" "0178U" "0179U" "0180U" "0181U" "0182U" "0183U" "0184U" "0185U" "0186U" "0187U" "0188U" "0189U" "0190U" "0191U" "0192U" "0193U" "0194U" "0195U" "0196U" "0197U" "0198U" "0199U" "0200U" "0201U" "0202U" "0203U" "0204U" "0205U" "0206U" "0207U" "0208U" "0209U" "0210U" "0211U" "0212U" "0213U" "0214U" "0215U" "0216U" "0217U" "0218U" "0219U" "0220U" "0221U" "0222U" "0223U" "0224U" "0225U" "0226U" "0227U" "0228U" "0229U" "0230U" "0231U" "0232U" "0233U" "0234U" "0235U" "0236U" "0237U" "0238U" "0239U" "0240U" "0241U" "0242U" "0243U" "0244U" "0245U" "0246U" "0247U" "0248U" "0249U" "0250U" "0251U" "0252U" "0253U" "0254U" "0255U" "0256U" "0257U" "0258U" "0259U" "0260U" "0261U" "0262U" "0263U" "0264U" "0265U" "0266U" "0267U" "0268U" "0269U" "0270U" "0271U" "0272U" "0273U" "0274U" "0275U" "0276U" "0277U" "0278U" "0279U" "0280U" "0281U" "0282U" "0283U" "0284U" "0285U" "0286U" "0287U" "0288U" "0289U" "0290U" "0291U" "0292U" "0293U" "0294U" "0295U" "0296U" "0297U" "0298U" "0299U" "0300U" "0301U" "0302U" "0303U" "0304U" "0305U" "0306U" "0307U" "0308U" "0309U" "0310U" "0311U" "0312U" "0313U" "0314U" "0315U" "0316U" "0317U" "0318U" "0319U" "0320U" "0321U" "0322U" "0323U" "0324U" "0325U" "0326U" "0327U" "0328U" "0329U" "0330U" "0331U" "0332U" "0333U" "0334U" "0335U" "0336U" "0337U" "0338U" "0339U" "0340U" "0341U" "0342U" "0343U" "0344U" "0345U" "0346U" "0347U" "0348U" "0349U" "0350U" "0351U" "0352U" "0353U" "0354U" "0351U" "0352U" "0353U" "0354U" "0355U" "0356U" "0357U" "0358U" "0359U" "0360U" "0361U" "0362U" "0363U" "0364U" "0365U" "0366U" "0367U" "0368U" "0369U" "0370U" "0371U" "0372U" "0373U" "0374U" "0375U" "0376U" "0377U" "0378U" "0379U" "0380U" "0381U" "0382U" "0383U" "0384U" "0385U" "0386U" "0387U" "0388U" "0389U" "0390U" "0391U" "0392U" "0393U" "0394U" "0395U" "0396U" "0397U" "0398U" "0399U" "0400U" "0401U" "0402U" "0403U" "0404U" "0405U" "0406U" "0407U" "0408U" "0409U" "0410U" "0411U" "0412U" "0413U" "0414U" "0415U" "0416U" "0417U" "0418U" "0419U" "3051F" "3052F"
	 */
   public boolean isCsvcLab() throws CFException {
      return csvcProc.isCsvcLab();
   }

	/**
	*  set values "36400" THRU "36416" "36540" "36600" "80000" THRU "85094" "85096" THRU "85101" "85103" THRU "88169" "88172" THRU "89999" "99000" THRU "99002" "0001M" "0002M" "0003M" "0004M" "0005M" "0006M" "0007M" "0008M" "0009M" "0010M" "0011M" "0012M" "0013M" "0014M" "0015M" "0016M" "0018M" "0019M" "0004T" "0010T" "0023T" "0026T" "0030T" "0041T" "0043T" "0058T" "0059T" "0064T" "0087T" "0103T" "0111T" "0140T" "0194T" "0357T" "0423T" "0500T" "0564T" "0751T" "0752T" "0753T" "0754T" "0755T" "0756T" "0757T" "0758T" "0759T" "0760T" "0761T" "0762T" "0763T" "0001U" "0002U" "0003U" "0004U" "0005U" "0006U" "0007U" "0008U" "0009U" "0010U" "0011U" "0012U" "0013U" "0014U" "0015U" "0016U" "0017U" "0018U" "0019U" "0020U" "0021U" "0022U" "0023U" "0024U" "0025U" "0026U" "0027U" "0028U" "0029U" "0030U" "0031U" "0032U" "0033U" "0034U" "0035U" "0036U" "0037U" "0038U" "0039U" "0040U" "0041U" "0042U" "0043U" "0044U" "0045U" "0046U" "0047U" "0048U" "0049U" "0050U" "0051U" "0052U" "0053U" "0054U" "0055U" "0056U" "0057U" "0058U" "0059U" "0060U" "0061U" "0062U" "0063U" "0064U" "0065U" "0066U" "0067U" "0068U" "0069U" "0070U" "0071U" "0072U" "0073U" "0074U" "0075U" "0076U" "0077U" "0078U" "0079U" "0080U" "0081U" "0082U" "0083U" "0084U" "0085U" "0086U" "0087U" "0088U" "0089U" "0090U" "0091U" "0092U" "0093U" "0094U" "0095U" "0096U" "0097U" "0098U" "0099U" "0100U" "0101U" "0102U" "0103U" "0104U" "0105U" "0106U" "0107U" "0108U" "0109U" "0110U" "0111U" "0112U" "0113U" "0114U" "0115U" "0116U" "0117U" "0118U" "0119U" "0120U" "0121U" "0122U" "0123U" "0124U" "0125U" "0126U" "0127U" "0128U" "0129U" "0130U" "0131U" "0132U" "0133U" "0134U" "0135U" "0136U" "0137U" "0138U" "0140U" "0141U" "0142U" "0143U" "0144U" "0145U" "0146U" "0147U" "0148U" "0149U" "0150U" "0151U" "0152U" "0153U" "0154U" "0155U" "0156U" "0157U" "0158U" "0159U" "0160U" "0161U" "0162U" "0163U" "0164U" "0165U" "0166U" "0167U" "0169U" "0170U" "0171U" "0172U" "0173U" "0174U" "0175U" "0176U" "0177U" "0178U" "0179U" "0180U" "0181U" "0182U" "0183U" "0184U" "0185U" "0186U" "0187U" "0188U" "0189U" "0190U" "0191U" "0192U" "0193U" "0194U" "0195U" "0196U" "0197U" "0198U" "0199U" "0200U" "0201U" "0202U" "0203U" "0204U" "0205U" "0206U" "0207U" "0208U" "0209U" "0210U" "0211U" "0212U" "0213U" "0214U" "0215U" "0216U" "0217U" "0218U" "0219U" "0220U" "0221U" "0222U" "0223U" "0224U" "0225U" "0226U" "0227U" "0228U" "0229U" "0230U" "0231U" "0232U" "0233U" "0234U" "0235U" "0236U" "0237U" "0238U" "0239U" "0240U" "0241U" "0242U" "0243U" "0244U" "0245U" "0246U" "0247U" "0248U" "0249U" "0250U" "0251U" "0252U" "0253U" "0254U" "0255U" "0256U" "0257U" "0258U" "0259U" "0260U" "0261U" "0262U" "0263U" "0264U" "0265U" "0266U" "0267U" "0268U" "0269U" "0270U" "0271U" "0272U" "0273U" "0274U" "0275U" "0276U" "0277U" "0278U" "0279U" "0280U" "0281U" "0282U" "0283U" "0284U" "0285U" "0286U" "0287U" "0288U" "0289U" "0290U" "0291U" "0292U" "0293U" "0294U" "0295U" "0296U" "0297U" "0298U" "0299U" "0300U" "0301U" "0302U" "0303U" "0304U" "0305U" "0306U" "0307U" "0308U" "0309U" "0310U" "0311U" "0312U" "0313U" "0314U" "0315U" "0316U" "0317U" "0318U" "0319U" "0320U" "0321U" "0322U" "0323U" "0324U" "0325U" "0326U" "0327U" "0328U" "0329U" "0330U" "0331U" "0332U" "0333U" "0334U" "0335U" "0336U" "0337U" "0338U" "0339U" "0340U" "0341U" "0342U" "0343U" "0344U" "0345U" "0346U" "0347U" "0348U" "0349U" "0350U" "0351U" "0352U" "0353U" "0354U" "0351U" "0352U" "0353U" "0354U" "0355U" "0356U" "0357U" "0358U" "0359U" "0360U" "0361U" "0362U" "0363U" "0364U" "0365U" "0366U" "0367U" "0368U" "0369U" "0370U" "0371U" "0372U" "0373U" "0374U" "0375U" "0376U" "0377U" "0378U" "0379U" "0380U" "0381U" "0382U" "0383U" "0384U" "0385U" "0386U" "0387U" "0388U" "0389U" "0390U" "0391U" "0392U" "0393U" "0394U" "0395U" "0396U" "0397U" "0398U" "0399U" "0400U" "0401U" "0402U" "0403U" "0404U" "0405U" "0406U" "0407U" "0408U" "0409U" "0410U" "0411U" "0412U" "0413U" "0414U" "0415U" "0416U" "0417U" "0418U" "0419U" "3051F" "3052F"
	*/
   	public void setCsvcLabTrue()  throws CFException{  			
    	csvcProc.setCsvcLabTrue();
   	}
	/**
	 *	Test condition "90600" THRU "90610" "90612" THRU "90618" "90623" THRU "90624" "90628" THRU "90629" "90631" "90635" "90637" THRU "90643" "90652" "90695" "99234" THRU "99236" "99240" THRU "99279" for isCsvcConsultation()
	 *	@return  Returns true if isCsvcConsultation() is "90600" THRU "90610" "90612" THRU "90618" "90623" THRU "90624" "90628" THRU "90629" "90631" "90635" "90637" THRU "90643" "90652" "90695" "99234" THRU "99236" "99240" THRU "99279"
	 */
   public boolean isCsvcConsultation() throws CFException {
      return csvcProc.isCsvcConsultation();
   }

	/**
	*  set values "90600" THRU "90610" "90612" THRU "90618" "90623" THRU "90624" "90628" THRU "90629" "90631" "90635" "90637" THRU "90643" "90652" "90695" "99234" THRU "99236" "99240" THRU "99279"
	*/
   	public void setCsvcConsultationTrue()  throws CFException{  			
    	csvcProc.setCsvcConsultationTrue();
   	}
	/**
	 *	Test condition "99217" THRU "99220" "99224" THRU "99226" "99280" THRU "99288" for isCsvcHospMedVisit2()
	 *	@return  Returns true if isCsvcHospMedVisit2() is "99217" THRU "99220" "99224" THRU "99226" "99280" THRU "99288"
	 */
   public boolean isCsvcHospMedVisit2() throws CFException {
      return csvcProc.isCsvcHospMedVisit2();
   }

	/**
	*  set values "99217" THRU "99220" "99224" THRU "99226" "99280" THRU "99288"
	*/
   	public void setCsvcHospMedVisit2True()  throws CFException{  			
    	csvcProc.setCsvcHospMedVisit2True();
   	}
	/**
	 *	Test condition "90760" THRU "90761" "90765" "90766" THRU "90768" "90769" THRU "90771" "90772" THRU "90773" "90774" THRU "90776" "90779" "90780" THRU "90784" "90786" THRU "90790" "90793" THRU "90799" "95115" THRU "95199" "0708T" "0709T" for isCsvcInjections()
	 *	@return  Returns true if isCsvcInjections() is "90760" THRU "90761" "90765" "90766" THRU "90768" "90769" THRU "90771" "90772" THRU "90773" "90774" THRU "90776" "90779" "90780" THRU "90784" "90786" THRU "90790" "90793" THRU "90799" "95115" THRU "95199" "0708T" "0709T"
	 */
   public boolean isCsvcInjections() throws CFException {
      return csvcProc.isCsvcInjections();
   }

	/**
	*  set values "90760" THRU "90761" "90765" "90766" THRU "90768" "90769" THRU "90771" "90772" THRU "90773" "90774" THRU "90776" "90779" "90780" THRU "90784" "90786" THRU "90790" "90793" THRU "90799" "95115" THRU "95199" "0708T" "0709T"
	*/
   	public void setCsvcInjectionsTrue()  throws CFException{  			
    	csvcProc.setCsvcInjectionsTrue();
   	}
	/**
	 *	Test condition "90800" THRU "90866" "90870" THRU "90879" "90881" THRU "90899" "90785" "90791" "90792" "96100" "0771T" "0772T" "0773T" "0774T" for isCsvcPsycThrpy()
	 *	@return  Returns true if isCsvcPsycThrpy() is "90800" THRU "90866" "90870" THRU "90879" "90881" THRU "90899" "90785" "90791" "90792" "96100" "0771T" "0772T" "0773T" "0774T"
	 */
   public boolean isCsvcPsycThrpy() throws CFException {
      return csvcProc.isCsvcPsycThrpy();
   }

	/**
	*  set values "90800" THRU "90866" "90870" THRU "90879" "90881" THRU "90899" "90785" "90791" "90792" "96100" "0771T" "0772T" "0773T" "0774T"
	*/
   	public void setCsvcPsycThrpyTrue()  throws CFException{  			
    	csvcProc.setCsvcPsycThrpyTrue();
   	}
	/**
	 *	Test condition "00100" THRU "00109" "00110" THRU "00119" "00120" THRU "00129" "00130" THRU "00139" "00140" THRU "00149" "00150" THRU "00159" "00160" THRU "00169" "00170" THRU "00179" "00180" THRU "00189" "00190" THRU "00199" "00200" THRU "00209" "00210" THRU "00219" "00220" THRU "00229" "00230" THRU "00239" "00240" THRU "00249" "00250" THRU "00259" "00260" THRU "00269" "00270" THRU "00279" "00280" THRU "00289" "00290" THRU "00299" "00300" THRU "00309" "00310" THRU "00319" "00320" THRU "00329" "00330" THRU "00339" "00340" THRU "00349" "00350" THRU "00359" "00360" THRU "00369" "00370" THRU "00379" "00380" THRU "00389" "00390" THRU "00399" "00400" THRU "00409" "00410" THRU "00419" "00420" THRU "00429" "00430" THRU "00439" "00440" THRU "00449" "00450" THRU "00459" "00460" THRU "00469" "00470" THRU "00479" "00480" THRU "00489" "00490" THRU "00499" "00500" THRU "00509" "00510" THRU "00519" "00520" THRU "00529" "00530" THRU "00539" "00540" THRU "00549" "00550" THRU "00559" "00560" THRU "00569" "00570" THRU "00579" "00580" THRU "00589" "00590" THRU "00599" "00600" THRU "00609" "00610" THRU "00619" "00620" THRU "00629" "00630" THRU "00639" "00640" THRU "00649" "00650" THRU "00659" "00660" THRU "00669" "00670" THRU "00679" "00680" THRU "00689" "00690" THRU "00699" "00700" THRU "00709" "00710" THRU "00719" "00720" THRU "00729" "00730" THRU "00739" "00740" THRU "00749" "00750" THRU "00759" "00760" THRU "00769" "00770" THRU "00779" "00780" THRU "00789" "00790" THRU "00799" "00800" THRU "00809" "00810" THRU "00819" "00820" THRU "00829" "00830" THRU "00839" "00840" THRU "00849" "00850" THRU "00859" "00860" THRU "00869" "00870" THRU "00879" "00880" THRU "00889" "00890" THRU "00899" "00900" THRU "00909" "00910" THRU "00919" "00920" THRU "00929" "00930" THRU "00939" "00940" THRU "01039" "01040" THRU "01109" "01110" THRU "01119" "01120" THRU "01129" "01130" THRU "01209" "01210" THRU "01239" "01240" THRU "01339" "01340" THRU "01409" "01410" THRU "01419" "01420" THRU "01439" "01440" THRU "01509" "01510" THRU "01539" "01540" THRU "01639" "01640" THRU "01709" "01710" THRU "01719" "01720" THRU "01729" "01730" THRU "01739" "01740" THRU "03229" "03230" THRU "03239" "03240" THRU "03249" "03250" THRU "03259" "03260" THRU "03269" "03270" THRU "03279" "03280" THRU "03289" "03290" THRU "03299" "03300" THRU "03309" "03310" THRU "03319" "03320" THRU "03329" "03330" THRU "03339" "03340" THRU "03349" "03350" THRU "03359" "03360" THRU "03369" "03370" THRU "03379" "03380" THRU "03389" "03390" THRU "03399" "03400" THRU "03409" "03410" THRU "03419" "03420" THRU "03429" "03430" THRU "03439" "03440" THRU "03449" "03450" THRU "03459" "03460" THRU "03469" "03470" THRU "03479" "03480" THRU "03489" "03490" THRU "03499" "03500" THRU "03509" "03510" THRU "03519" "03520" THRU "03529" "03530" THRU "03539" "03540" THRU "03549" "03550" THRU "03559" "03560" THRU "03569" "03570" THRU "03579" "03580" THRU "03589" "03590" THRU "03599" "03600" THRU "03609" "03610" THRU "03619" "03620" THRU "03629" "03630" THRU "03639" "03640" THRU "03649" "03650" THRU "03659" "03660" THRU "03669" "03670" THRU "03679" "03680" THRU "03689" "03690" THRU "03699" "03700" THRU "03709" "03710" THRU "03719" "03720" THRU "03729" "03730" THRU "03739" "03740" THRU "03749" "03750" THRU "03759" "03760" THRU "03769" "03770" THRU "03779" "03780" THRU "03789" "03790" THRU "03799" "03800" THRU "03809" "03810" THRU "03819" "03820" THRU "03829" "03830" THRU "03839" "03840" THRU "03849" "03850" THRU "03859" "03860" THRU "03869" "03870" THRU "03879" "03880" THRU "03889" "03890" THRU "03899" "03900" THRU "03909" "03910" THRU "03919" "03920" THRU "03929" "03930" THRU "03939" "03940" THRU "03949" "03950" THRU "03959" "03960" THRU "03969" "03970" THRU "03979" "03980" THRU "03989" "03990" THRU "03999" "04000" THRU "04009" "04010" THRU "04019" "04020" THRU "04029" "04030" THRU "04039" "04040" THRU "04049" "04050" THRU "04059" "04060" THRU "04069" "04070" THRU "04079" "04080" THRU "04089" "04090" THRU "04099" "04100" THRU "04109" "04110" THRU "04119" "04120" THRU "04129" "04130" THRU "04139" "04140" THRU "04149" "04150" THRU "04159" "04160" THRU "04169" "04170" THRU "04179" "04180" THRU "04189" "04190" THRU "04819" "04820" THRU "05019" "05020" THRU "05289" "05290" THRU "07159" "07160" THRU "07209" "07210" THRU "07219" "07220" THRU "07229" "07230" THRU "07239" "07240" THRU "07279" "07280" THRU "07289" "07290" THRU "07309" "07310" THRU "07319" "07320" THRU "07329" "07330" THRU "07339" "07340" THRU "07379" "07380" THRU "07399" "07400" THRU "07409" "07410" THRU "07419" "07420" THRU "07429" "07430" THRU "07489" "07490" THRU "07499" "07500" THRU "07509" "07510" THRU "07519" "07520" THRU "07529" "07530" THRU "07539" "07540" THRU "07549" "07550" THRU "07559" "07560" THRU "07569" "07570" THRU "07579" "07580" THRU "07589" "07590" THRU "07599" "07600" THRU "07609" "07610" THRU "07619" "07620" THRU "07629" "07630" THRU "07639" "07640" THRU "07649" "07650" THRU "07699" "07700" THRU "07709" "07710" THRU "07719" "07720" THRU "07729" "07730" THRU "07739" "07740" THRU "07759" "07760" THRU "07779" "07780" THRU "07789" "07790" THRU "07829" "07830" THRU "07909" "07910" THRU "07919" "07920" THRU "07939" "07940" THRU "08039" "08040" THRU "08069" "08070" THRU "08079" "08080" THRU "10359" "10360" THRU "10369" "10370" THRU "11009" "11010" THRU "11109" "11110" THRU "11229" "11230" THRU "11259" "11260" THRU "11589" "11590" THRU "11599" "11600" THRU "20009" "20010" THRU "20209" "20210" THRU "20219" "20220" THRU "20279" "20280" THRU "21075" "21089" THRU "30079" "30080" THRU "30139" "30140" THRU "30169" "30170" THRU "30439" "30440" THRU "30739" "30740" THRU "30779" "30780" THRU "30789" "30790" THRU "32879" "32880" THRU "33959" "33960" THRU "33961" "33962" THRU "36399" "36420" THRU "36539" "36541" THRU "36599" "36601" THRU "37194" "37196" THRU "37249" "37250" THRU "40039" "40040" THRU "40399" "40400" THRU "43753" "43758" THRU "51724" "51799" THRU "54239" "54255" THRU "55869" "55871" THRU "58999" "59002" THRU "59011" "59013" THRU "59014" "59016" THRU "59019" "59031" THRU "59049" "59052" THRU "59419" "59431" THRU "62366" "62371" THRU "63689" "63692" THRU "64549" "64551" THRU "69999" "85095" "85102" "88170" THRU "88171" "92511" "92920" THRU "92949" "92973" "92975" THRU "92976" "92978" THRU "92999" "93451" THRU "93462" "93500" THRU "93554" "93557" THRU "93592" "93593" THRU "93598" "93599" THRU "93659" "95830" "99100" THRU "99140" "0001T" "0002T" "0003T" "0005T" "0006T" "0008T" "0009T" "0012T" "0013T" "0014T" "0016T" "0017T" "0018T" "0019T" "0020T" "0021T" "0024T" "0025T" "0027T" "0029T" "0031T" "0032T" "0033T" "0034T" "0035T" "0036T" "0037T" "0046T" "0047T" "0048T" "0049T" "0050T" "0051T" "0052T" "0053T" "0061T" "0062T" "0063T" "0071T" "0072T" "0075T" "0076T" "0077T" "0078T" "0079T" "0080T" "0081T" "0084T" "0090T" "0091T" "0092T" "0093T" "0094T" "0095T" "0096T" "0097T" "0098T" "0099T" "0100T" "0101T" "0102T" "0110T" "0120T" "0123T" "0124T" "0135T" "0137T" "0124T" "0141T" "0142T" "0143T" "0155T" "0156T" "0157T" "0158T" "0163T" "0164T" "0165T" "0166T" "0167T" "0169T" "0170T" "0171T" "0172T" "0173T" "0176T" "0177T" "0182T" "0184T" "0190T" "0191T" "0192T" "0193T" "0195T" "0196T" "0207T" "0213T" "0214T" "0215T" "0216T" "0217T" "0218T" "0219T" "0220T" "0221T" "0222T" "0226T" "0227T" "0228T" "0229T" "0230T" "0231T" "0232T" "0234T" "0235T" "0236T" "0237T" "0238T" "0245T" "0246T" "0247T" "0248T" "0249T" "0253T" "0254T" "0255T" "0262T" "0263T" "0264T" "0265T" "0266T" "0267T" "0268T" "0269T" "0270T" "0271T" "0274T" "0275T" "0278T" "0281T" "0282T" "0283T" "0284T" "0288T" "0289T" "0290T" "0293T" "0294T" "0301T" "0302T" "0303T" "0304T" "0307T" "0308T" "0309T" "0312T" "0313T" "0314T" "0315T" "0316T" "0319T" "0320T" "0321T" "0322T" "0323T" "0324T" "0325T" "0334T" "0335T" "0336T" "0338T" "0339T" "0340T" "0342T" "0343T" "0344T" "0345T" "0347T" "0356T" "0375T" "0376T" "0377T" "0387T" "0388T" "0392T" "0393T" "0396T" "0397T" "0398T" "0402T" "0404T" "0406T" "0407T" "0408T" "0409T" "0410T" "0411T" "0412T" "0413T" "0414T" "0415T" "0416T" "0419T" "0420T" "0421T" "0424T" "0425T" "0426T" "0427T" "0428T" "0429T" "0430T" "0431T" "0432T" "0433T" "0437T" "0438T" "0440T" "0441T" "0442T" "0443T" "0444T" "0445T" "0446T" "0447T" "0448T" "0449T" "0450T" "0451T" "0452T" "0453T" "0454T" "0455T" "0456T" "0457T" "0458T" "0459T" "0460T" "0461T" "0465T" "0466T" "0467T" "0468T" "0474T" "0479T" "0480T" "0481T" "0483T" "0484T" "0489T" "0490T" "0491T" "0492T" "0494T" "0499T" "0505T" "0510T" "0511T" "0514T" "0515T" "0516T" "0517T" "0518T" "0519T" "0520T" "0524T" "0525T" "0526T" "0527T" "0530T" "0531T" "0532T" "0543T" "0544T" "0545T" "0546T" "0547T" "0548T" "0549T" "0550T" "0551T" "0553T" "0563T" "0565T" "0566T" "0567T" "0568T" "0569T" "0570T" "0571T" "0572T" "0573T" "0574T" "0580T" "0581T" "0582T" "0583T" "0587T" "0588T" "0594T" "0596T" "0597T" "0600T" "0601T" "0613T" "0614T" "0616T" "0617T" "0618T" "0619T" "0620T" "0621T" "0622T" "0627T" "0628T" "0629T" "0630T" "0632T" "0643T" "0644T" "0645T" "0646T" "0647T" "0652T" "0653T" "0654T" "0655T" "0656T" "0657T" "0659T" "0660T" "0661T" "0664T" "0665T" "0666T" "0667T" "0668T" "0669T" "0670T" "0671T" "0672T" "0673T" "0674T" "0675T" "0676T" "0677T" "0678T" "0679T" "0680T" "0681T" "0682T" "0686T" "0699T" "0707T" for isCsvcSurgAnes()
	 *	@return  Returns true if isCsvcSurgAnes() is "00100" THRU "00109" "00110" THRU "00119" "00120" THRU "00129" "00130" THRU "00139" "00140" THRU "00149" "00150" THRU "00159" "00160" THRU "00169" "00170" THRU "00179" "00180" THRU "00189" "00190" THRU "00199" "00200" THRU "00209" "00210" THRU "00219" "00220" THRU "00229" "00230" THRU "00239" "00240" THRU "00249" "00250" THRU "00259" "00260" THRU "00269" "00270" THRU "00279" "00280" THRU "00289" "00290" THRU "00299" "00300" THRU "00309" "00310" THRU "00319" "00320" THRU "00329" "00330" THRU "00339" "00340" THRU "00349" "00350" THRU "00359" "00360" THRU "00369" "00370" THRU "00379" "00380" THRU "00389" "00390" THRU "00399" "00400" THRU "00409" "00410" THRU "00419" "00420" THRU "00429" "00430" THRU "00439" "00440" THRU "00449" "00450" THRU "00459" "00460" THRU "00469" "00470" THRU "00479" "00480" THRU "00489" "00490" THRU "00499" "00500" THRU "00509" "00510" THRU "00519" "00520" THRU "00529" "00530" THRU "00539" "00540" THRU "00549" "00550" THRU "00559" "00560" THRU "00569" "00570" THRU "00579" "00580" THRU "00589" "00590" THRU "00599" "00600" THRU "00609" "00610" THRU "00619" "00620" THRU "00629" "00630" THRU "00639" "00640" THRU "00649" "00650" THRU "00659" "00660" THRU "00669" "00670" THRU "00679" "00680" THRU "00689" "00690" THRU "00699" "00700" THRU "00709" "00710" THRU "00719" "00720" THRU "00729" "00730" THRU "00739" "00740" THRU "00749" "00750" THRU "00759" "00760" THRU "00769" "00770" THRU "00779" "00780" THRU "00789" "00790" THRU "00799" "00800" THRU "00809" "00810" THRU "00819" "00820" THRU "00829" "00830" THRU "00839" "00840" THRU "00849" "00850" THRU "00859" "00860" THRU "00869" "00870" THRU "00879" "00880" THRU "00889" "00890" THRU "00899" "00900" THRU "00909" "00910" THRU "00919" "00920" THRU "00929" "00930" THRU "00939" "00940" THRU "01039" "01040" THRU "01109" "01110" THRU "01119" "01120" THRU "01129" "01130" THRU "01209" "01210" THRU "01239" "01240" THRU "01339" "01340" THRU "01409" "01410" THRU "01419" "01420" THRU "01439" "01440" THRU "01509" "01510" THRU "01539" "01540" THRU "01639" "01640" THRU "01709" "01710" THRU "01719" "01720" THRU "01729" "01730" THRU "01739" "01740" THRU "03229" "03230" THRU "03239" "03240" THRU "03249" "03250" THRU "03259" "03260" THRU "03269" "03270" THRU "03279" "03280" THRU "03289" "03290" THRU "03299" "03300" THRU "03309" "03310" THRU "03319" "03320" THRU "03329" "03330" THRU "03339" "03340" THRU "03349" "03350" THRU "03359" "03360" THRU "03369" "03370" THRU "03379" "03380" THRU "03389" "03390" THRU "03399" "03400" THRU "03409" "03410" THRU "03419" "03420" THRU "03429" "03430" THRU "03439" "03440" THRU "03449" "03450" THRU "03459" "03460" THRU "03469" "03470" THRU "03479" "03480" THRU "03489" "03490" THRU "03499" "03500" THRU "03509" "03510" THRU "03519" "03520" THRU "03529" "03530" THRU "03539" "03540" THRU "03549" "03550" THRU "03559" "03560" THRU "03569" "03570" THRU "03579" "03580" THRU "03589" "03590" THRU "03599" "03600" THRU "03609" "03610" THRU "03619" "03620" THRU "03629" "03630" THRU "03639" "03640" THRU "03649" "03650" THRU "03659" "03660" THRU "03669" "03670" THRU "03679" "03680" THRU "03689" "03690" THRU "03699" "03700" THRU "03709" "03710" THRU "03719" "03720" THRU "03729" "03730" THRU "03739" "03740" THRU "03749" "03750" THRU "03759" "03760" THRU "03769" "03770" THRU "03779" "03780" THRU "03789" "03790" THRU "03799" "03800" THRU "03809" "03810" THRU "03819" "03820" THRU "03829" "03830" THRU "03839" "03840" THRU "03849" "03850" THRU "03859" "03860" THRU "03869" "03870" THRU "03879" "03880" THRU "03889" "03890" THRU "03899" "03900" THRU "03909" "03910" THRU "03919" "03920" THRU "03929" "03930" THRU "03939" "03940" THRU "03949" "03950" THRU "03959" "03960" THRU "03969" "03970" THRU "03979" "03980" THRU "03989" "03990" THRU "03999" "04000" THRU "04009" "04010" THRU "04019" "04020" THRU "04029" "04030" THRU "04039" "04040" THRU "04049" "04050" THRU "04059" "04060" THRU "04069" "04070" THRU "04079" "04080" THRU "04089" "04090" THRU "04099" "04100" THRU "04109" "04110" THRU "04119" "04120" THRU "04129" "04130" THRU "04139" "04140" THRU "04149" "04150" THRU "04159" "04160" THRU "04169" "04170" THRU "04179" "04180" THRU "04189" "04190" THRU "04819" "04820" THRU "05019" "05020" THRU "05289" "05290" THRU "07159" "07160" THRU "07209" "07210" THRU "07219" "07220" THRU "07229" "07230" THRU "07239" "07240" THRU "07279" "07280" THRU "07289" "07290" THRU "07309" "07310" THRU "07319" "07320" THRU "07329" "07330" THRU "07339" "07340" THRU "07379" "07380" THRU "07399" "07400" THRU "07409" "07410" THRU "07419" "07420" THRU "07429" "07430" THRU "07489" "07490" THRU "07499" "07500" THRU "07509" "07510" THRU "07519" "07520" THRU "07529" "07530" THRU "07539" "07540" THRU "07549" "07550" THRU "07559" "07560" THRU "07569" "07570" THRU "07579" "07580" THRU "07589" "07590" THRU "07599" "07600" THRU "07609" "07610" THRU "07619" "07620" THRU "07629" "07630" THRU "07639" "07640" THRU "07649" "07650" THRU "07699" "07700" THRU "07709" "07710" THRU "07719" "07720" THRU "07729" "07730" THRU "07739" "07740" THRU "07759" "07760" THRU "07779" "07780" THRU "07789" "07790" THRU "07829" "07830" THRU "07909" "07910" THRU "07919" "07920" THRU "07939" "07940" THRU "08039" "08040" THRU "08069" "08070" THRU "08079" "08080" THRU "10359" "10360" THRU "10369" "10370" THRU "11009" "11010" THRU "11109" "11110" THRU "11229" "11230" THRU "11259" "11260" THRU "11589" "11590" THRU "11599" "11600" THRU "20009" "20010" THRU "20209" "20210" THRU "20219" "20220" THRU "20279" "20280" THRU "21075" "21089" THRU "30079" "30080" THRU "30139" "30140" THRU "30169" "30170" THRU "30439" "30440" THRU "30739" "30740" THRU "30779" "30780" THRU "30789" "30790" THRU "32879" "32880" THRU "33959" "33960" THRU "33961" "33962" THRU "36399" "36420" THRU "36539" "36541" THRU "36599" "36601" THRU "37194" "37196" THRU "37249" "37250" THRU "40039" "40040" THRU "40399" "40400" THRU "43753" "43758" THRU "51724" "51799" THRU "54239" "54255" THRU "55869" "55871" THRU "58999" "59002" THRU "59011" "59013" THRU "59014" "59016" THRU "59019" "59031" THRU "59049" "59052" THRU "59419" "59431" THRU "62366" "62371" THRU "63689" "63692" THRU "64549" "64551" THRU "69999" "85095" "85102" "88170" THRU "88171" "92511" "92920" THRU "92949" "92973" "92975" THRU "92976" "92978" THRU "92999" "93451" THRU "93462" "93500" THRU "93554" "93557" THRU "93592" "93593" THRU "93598" "93599" THRU "93659" "95830" "99100" THRU "99140" "0001T" "0002T" "0003T" "0005T" "0006T" "0008T" "0009T" "0012T" "0013T" "0014T" "0016T" "0017T" "0018T" "0019T" "0020T" "0021T" "0024T" "0025T" "0027T" "0029T" "0031T" "0032T" "0033T" "0034T" "0035T" "0036T" "0037T" "0046T" "0047T" "0048T" "0049T" "0050T" "0051T" "0052T" "0053T" "0061T" "0062T" "0063T" "0071T" "0072T" "0075T" "0076T" "0077T" "0078T" "0079T" "0080T" "0081T" "0084T" "0090T" "0091T" "0092T" "0093T" "0094T" "0095T" "0096T" "0097T" "0098T" "0099T" "0100T" "0101T" "0102T" "0110T" "0120T" "0123T" "0124T" "0135T" "0137T" "0124T" "0141T" "0142T" "0143T" "0155T" "0156T" "0157T" "0158T" "0163T" "0164T" "0165T" "0166T" "0167T" "0169T" "0170T" "0171T" "0172T" "0173T" "0176T" "0177T" "0182T" "0184T" "0190T" "0191T" "0192T" "0193T" "0195T" "0196T" "0207T" "0213T" "0214T" "0215T" "0216T" "0217T" "0218T" "0219T" "0220T" "0221T" "0222T" "0226T" "0227T" "0228T" "0229T" "0230T" "0231T" "0232T" "0234T" "0235T" "0236T" "0237T" "0238T" "0245T" "0246T" "0247T" "0248T" "0249T" "0253T" "0254T" "0255T" "0262T" "0263T" "0264T" "0265T" "0266T" "0267T" "0268T" "0269T" "0270T" "0271T" "0274T" "0275T" "0278T" "0281T" "0282T" "0283T" "0284T" "0288T" "0289T" "0290T" "0293T" "0294T" "0301T" "0302T" "0303T" "0304T" "0307T" "0308T" "0309T" "0312T" "0313T" "0314T" "0315T" "0316T" "0319T" "0320T" "0321T" "0322T" "0323T" "0324T" "0325T" "0334T" "0335T" "0336T" "0338T" "0339T" "0340T" "0342T" "0343T" "0344T" "0345T" "0347T" "0356T" "0375T" "0376T" "0377T" "0387T" "0388T" "0392T" "0393T" "0396T" "0397T" "0398T" "0402T" "0404T" "0406T" "0407T" "0408T" "0409T" "0410T" "0411T" "0412T" "0413T" "0414T" "0415T" "0416T" "0419T" "0420T" "0421T" "0424T" "0425T" "0426T" "0427T" "0428T" "0429T" "0430T" "0431T" "0432T" "0433T" "0437T" "0438T" "0440T" "0441T" "0442T" "0443T" "0444T" "0445T" "0446T" "0447T" "0448T" "0449T" "0450T" "0451T" "0452T" "0453T" "0454T" "0455T" "0456T" "0457T" "0458T" "0459T" "0460T" "0461T" "0465T" "0466T" "0467T" "0468T" "0474T" "0479T" "0480T" "0481T" "0483T" "0484T" "0489T" "0490T" "0491T" "0492T" "0494T" "0499T" "0505T" "0510T" "0511T" "0514T" "0515T" "0516T" "0517T" "0518T" "0519T" "0520T" "0524T" "0525T" "0526T" "0527T" "0530T" "0531T" "0532T" "0543T" "0544T" "0545T" "0546T" "0547T" "0548T" "0549T" "0550T" "0551T" "0553T" "0563T" "0565T" "0566T" "0567T" "0568T" "0569T" "0570T" "0571T" "0572T" "0573T" "0574T" "0580T" "0581T" "0582T" "0583T" "0587T" "0588T" "0594T" "0596T" "0597T" "0600T" "0601T" "0613T" "0614T" "0616T" "0617T" "0618T" "0619T" "0620T" "0621T" "0622T" "0627T" "0628T" "0629T" "0630T" "0632T" "0643T" "0644T" "0645T" "0646T" "0647T" "0652T" "0653T" "0654T" "0655T" "0656T" "0657T" "0659T" "0660T" "0661T" "0664T" "0665T" "0666T" "0667T" "0668T" "0669T" "0670T" "0671T" "0672T" "0673T" "0674T" "0675T" "0676T" "0677T" "0678T" "0679T" "0680T" "0681T" "0682T" "0686T" "0699T" "0707T"
	 */
   public boolean isCsvcSurgAnes() throws CFException {
      return csvcProc.isCsvcSurgAnes();
   }

	/**
	*  set values "00100" THRU "00109" "00110" THRU "00119" "00120" THRU "00129" "00130" THRU "00139" "00140" THRU "00149" "00150" THRU "00159" "00160" THRU "00169" "00170" THRU "00179" "00180" THRU "00189" "00190" THRU "00199" "00200" THRU "00209" "00210" THRU "00219" "00220" THRU "00229" "00230" THRU "00239" "00240" THRU "00249" "00250" THRU "00259" "00260" THRU "00269" "00270" THRU "00279" "00280" THRU "00289" "00290" THRU "00299" "00300" THRU "00309" "00310" THRU "00319" "00320" THRU "00329" "00330" THRU "00339" "00340" THRU "00349" "00350" THRU "00359" "00360" THRU "00369" "00370" THRU "00379" "00380" THRU "00389" "00390" THRU "00399" "00400" THRU "00409" "00410" THRU "00419" "00420" THRU "00429" "00430" THRU "00439" "00440" THRU "00449" "00450" THRU "00459" "00460" THRU "00469" "00470" THRU "00479" "00480" THRU "00489" "00490" THRU "00499" "00500" THRU "00509" "00510" THRU "00519" "00520" THRU "00529" "00530" THRU "00539" "00540" THRU "00549" "00550" THRU "00559" "00560" THRU "00569" "00570" THRU "00579" "00580" THRU "00589" "00590" THRU "00599" "00600" THRU "00609" "00610" THRU "00619" "00620" THRU "00629" "00630" THRU "00639" "00640" THRU "00649" "00650" THRU "00659" "00660" THRU "00669" "00670" THRU "00679" "00680" THRU "00689" "00690" THRU "00699" "00700" THRU "00709" "00710" THRU "00719" "00720" THRU "00729" "00730" THRU "00739" "00740" THRU "00749" "00750" THRU "00759" "00760" THRU "00769" "00770" THRU "00779" "00780" THRU "00789" "00790" THRU "00799" "00800" THRU "00809" "00810" THRU "00819" "00820" THRU "00829" "00830" THRU "00839" "00840" THRU "00849" "00850" THRU "00859" "00860" THRU "00869" "00870" THRU "00879" "00880" THRU "00889" "00890" THRU "00899" "00900" THRU "00909" "00910" THRU "00919" "00920" THRU "00929" "00930" THRU "00939" "00940" THRU "01039" "01040" THRU "01109" "01110" THRU "01119" "01120" THRU "01129" "01130" THRU "01209" "01210" THRU "01239" "01240" THRU "01339" "01340" THRU "01409" "01410" THRU "01419" "01420" THRU "01439" "01440" THRU "01509" "01510" THRU "01539" "01540" THRU "01639" "01640" THRU "01709" "01710" THRU "01719" "01720" THRU "01729" "01730" THRU "01739" "01740" THRU "03229" "03230" THRU "03239" "03240" THRU "03249" "03250" THRU "03259" "03260" THRU "03269" "03270" THRU "03279" "03280" THRU "03289" "03290" THRU "03299" "03300" THRU "03309" "03310" THRU "03319" "03320" THRU "03329" "03330" THRU "03339" "03340" THRU "03349" "03350" THRU "03359" "03360" THRU "03369" "03370" THRU "03379" "03380" THRU "03389" "03390" THRU "03399" "03400" THRU "03409" "03410" THRU "03419" "03420" THRU "03429" "03430" THRU "03439" "03440" THRU "03449" "03450" THRU "03459" "03460" THRU "03469" "03470" THRU "03479" "03480" THRU "03489" "03490" THRU "03499" "03500" THRU "03509" "03510" THRU "03519" "03520" THRU "03529" "03530" THRU "03539" "03540" THRU "03549" "03550" THRU "03559" "03560" THRU "03569" "03570" THRU "03579" "03580" THRU "03589" "03590" THRU "03599" "03600" THRU "03609" "03610" THRU "03619" "03620" THRU "03629" "03630" THRU "03639" "03640" THRU "03649" "03650" THRU "03659" "03660" THRU "03669" "03670" THRU "03679" "03680" THRU "03689" "03690" THRU "03699" "03700" THRU "03709" "03710" THRU "03719" "03720" THRU "03729" "03730" THRU "03739" "03740" THRU "03749" "03750" THRU "03759" "03760" THRU "03769" "03770" THRU "03779" "03780" THRU "03789" "03790" THRU "03799" "03800" THRU "03809" "03810" THRU "03819" "03820" THRU "03829" "03830" THRU "03839" "03840" THRU "03849" "03850" THRU "03859" "03860" THRU "03869" "03870" THRU "03879" "03880" THRU "03889" "03890" THRU "03899" "03900" THRU "03909" "03910" THRU "03919" "03920" THRU "03929" "03930" THRU "03939" "03940" THRU "03949" "03950" THRU "03959" "03960" THRU "03969" "03970" THRU "03979" "03980" THRU "03989" "03990" THRU "03999" "04000" THRU "04009" "04010" THRU "04019" "04020" THRU "04029" "04030" THRU "04039" "04040" THRU "04049" "04050" THRU "04059" "04060" THRU "04069" "04070" THRU "04079" "04080" THRU "04089" "04090" THRU "04099" "04100" THRU "04109" "04110" THRU "04119" "04120" THRU "04129" "04130" THRU "04139" "04140" THRU "04149" "04150" THRU "04159" "04160" THRU "04169" "04170" THRU "04179" "04180" THRU "04189" "04190" THRU "04819" "04820" THRU "05019" "05020" THRU "05289" "05290" THRU "07159" "07160" THRU "07209" "07210" THRU "07219" "07220" THRU "07229" "07230" THRU "07239" "07240" THRU "07279" "07280" THRU "07289" "07290" THRU "07309" "07310" THRU "07319" "07320" THRU "07329" "07330" THRU "07339" "07340" THRU "07379" "07380" THRU "07399" "07400" THRU "07409" "07410" THRU "07419" "07420" THRU "07429" "07430" THRU "07489" "07490" THRU "07499" "07500" THRU "07509" "07510" THRU "07519" "07520" THRU "07529" "07530" THRU "07539" "07540" THRU "07549" "07550" THRU "07559" "07560" THRU "07569" "07570" THRU "07579" "07580" THRU "07589" "07590" THRU "07599" "07600" THRU "07609" "07610" THRU "07619" "07620" THRU "07629" "07630" THRU "07639" "07640" THRU "07649" "07650" THRU "07699" "07700" THRU "07709" "07710" THRU "07719" "07720" THRU "07729" "07730" THRU "07739" "07740" THRU "07759" "07760" THRU "07779" "07780" THRU "07789" "07790" THRU "07829" "07830" THRU "07909" "07910" THRU "07919" "07920" THRU "07939" "07940" THRU "08039" "08040" THRU "08069" "08070" THRU "08079" "08080" THRU "10359" "10360" THRU "10369" "10370" THRU "11009" "11010" THRU "11109" "11110" THRU "11229" "11230" THRU "11259" "11260" THRU "11589" "11590" THRU "11599" "11600" THRU "20009" "20010" THRU "20209" "20210" THRU "20219" "20220" THRU "20279" "20280" THRU "21075" "21089" THRU "30079" "30080" THRU "30139" "30140" THRU "30169" "30170" THRU "30439" "30440" THRU "30739" "30740" THRU "30779" "30780" THRU "30789" "30790" THRU "32879" "32880" THRU "33959" "33960" THRU "33961" "33962" THRU "36399" "36420" THRU "36539" "36541" THRU "36599" "36601" THRU "37194" "37196" THRU "37249" "37250" THRU "40039" "40040" THRU "40399" "40400" THRU "43753" "43758" THRU "51724" "51799" THRU "54239" "54255" THRU "55869" "55871" THRU "58999" "59002" THRU "59011" "59013" THRU "59014" "59016" THRU "59019" "59031" THRU "59049" "59052" THRU "59419" "59431" THRU "62366" "62371" THRU "63689" "63692" THRU "64549" "64551" THRU "69999" "85095" "85102" "88170" THRU "88171" "92511" "92920" THRU "92949" "92973" "92975" THRU "92976" "92978" THRU "92999" "93451" THRU "93462" "93500" THRU "93554" "93557" THRU "93592" "93593" THRU "93598" "93599" THRU "93659" "95830" "99100" THRU "99140" "0001T" "0002T" "0003T" "0005T" "0006T" "0008T" "0009T" "0012T" "0013T" "0014T" "0016T" "0017T" "0018T" "0019T" "0020T" "0021T" "0024T" "0025T" "0027T" "0029T" "0031T" "0032T" "0033T" "0034T" "0035T" "0036T" "0037T" "0046T" "0047T" "0048T" "0049T" "0050T" "0051T" "0052T" "0053T" "0061T" "0062T" "0063T" "0071T" "0072T" "0075T" "0076T" "0077T" "0078T" "0079T" "0080T" "0081T" "0084T" "0090T" "0091T" "0092T" "0093T" "0094T" "0095T" "0096T" "0097T" "0098T" "0099T" "0100T" "0101T" "0102T" "0110T" "0120T" "0123T" "0124T" "0135T" "0137T" "0124T" "0141T" "0142T" "0143T" "0155T" "0156T" "0157T" "0158T" "0163T" "0164T" "0165T" "0166T" "0167T" "0169T" "0170T" "0171T" "0172T" "0173T" "0176T" "0177T" "0182T" "0184T" "0190T" "0191T" "0192T" "0193T" "0195T" "0196T" "0207T" "0213T" "0214T" "0215T" "0216T" "0217T" "0218T" "0219T" "0220T" "0221T" "0222T" "0226T" "0227T" "0228T" "0229T" "0230T" "0231T" "0232T" "0234T" "0235T" "0236T" "0237T" "0238T" "0245T" "0246T" "0247T" "0248T" "0249T" "0253T" "0254T" "0255T" "0262T" "0263T" "0264T" "0265T" "0266T" "0267T" "0268T" "0269T" "0270T" "0271T" "0274T" "0275T" "0278T" "0281T" "0282T" "0283T" "0284T" "0288T" "0289T" "0290T" "0293T" "0294T" "0301T" "0302T" "0303T" "0304T" "0307T" "0308T" "0309T" "0312T" "0313T" "0314T" "0315T" "0316T" "0319T" "0320T" "0321T" "0322T" "0323T" "0324T" "0325T" "0334T" "0335T" "0336T" "0338T" "0339T" "0340T" "0342T" "0343T" "0344T" "0345T" "0347T" "0356T" "0375T" "0376T" "0377T" "0387T" "0388T" "0392T" "0393T" "0396T" "0397T" "0398T" "0402T" "0404T" "0406T" "0407T" "0408T" "0409T" "0410T" "0411T" "0412T" "0413T" "0414T" "0415T" "0416T" "0419T" "0420T" "0421T" "0424T" "0425T" "0426T" "0427T" "0428T" "0429T" "0430T" "0431T" "0432T" "0433T" "0437T" "0438T" "0440T" "0441T" "0442T" "0443T" "0444T" "0445T" "0446T" "0447T" "0448T" "0449T" "0450T" "0451T" "0452T" "0453T" "0454T" "0455T" "0456T" "0457T" "0458T" "0459T" "0460T" "0461T" "0465T" "0466T" "0467T" "0468T" "0474T" "0479T" "0480T" "0481T" "0483T" "0484T" "0489T" "0490T" "0491T" "0492T" "0494T" "0499T" "0505T" "0510T" "0511T" "0514T" "0515T" "0516T" "0517T" "0518T" "0519T" "0520T" "0524T" "0525T" "0526T" "0527T" "0530T" "0531T" "0532T" "0543T" "0544T" "0545T" "0546T" "0547T" "0548T" "0549T" "0550T" "0551T" "0553T" "0563T" "0565T" "0566T" "0567T" "0568T" "0569T" "0570T" "0571T" "0572T" "0573T" "0574T" "0580T" "0581T" "0582T" "0583T" "0587T" "0588T" "0594T" "0596T" "0597T" "0600T" "0601T" "0613T" "0614T" "0616T" "0617T" "0618T" "0619T" "0620T" "0621T" "0622T" "0627T" "0628T" "0629T" "0630T" "0632T" "0643T" "0644T" "0645T" "0646T" "0647T" "0652T" "0653T" "0654T" "0655T" "0656T" "0657T" "0659T" "0660T" "0661T" "0664T" "0665T" "0666T" "0667T" "0668T" "0669T" "0670T" "0671T" "0672T" "0673T" "0674T" "0675T" "0676T" "0677T" "0678T" "0679T" "0680T" "0681T" "0682T" "0686T" "0699T" "0707T"
	*/
   	public void setCsvcSurgAnesTrue()  throws CFException{  			
    	csvcProc.setCsvcSurgAnesTrue();
   	}
	/**
	 *	Returns the value of ctlCntId1
	 *	@return ctlCntId1
	 */
   public char[] getCtlCntId1() throws CFException  {              
   		return workFields.getCtlCntId1();
   }

  
	/**
	*  set variable ctlCntId1
	*  @param value
	**/
   public void setCtlCntId1(char[] value) throws CFException {
      workFields.setCtlCntId1(value);
   } 

     /**
	 * 	Update CtlCntId1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCtlCntId1(char[] source, int sourceIndex) throws CFException {
      workFields.setCtlCntId1(source, sourceIndex);
   	
   }
   
   public void setCtlCntId1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setCtlCntId1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CtlCntId1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCtlCntId1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setCtlCntId1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CtlCntId1 with another Field
	 *	@param value
	 */
   public void setCtlCntId1(Field source) {
      workFields.setCtlCntId1(source);
   }  
   
     /**
	 * 	Update CtlCntId1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCtlCntId1(Field source, int sourceIndex,int sourceLen) {
      workFields.setCtlCntId1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CtlCntId1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCtlCntId1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setCtlCntId1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "96400" THRU "96522" "96524" THRU "96566" "96568" THRU "96572" "96575" THRU "96599" for isCsvcChemotherapy()
	 *	@return  Returns true if isCsvcChemotherapy() is "96400" THRU "96522" "96524" THRU "96566" "96568" THRU "96572" "96575" THRU "96599"
	 */
   public boolean isCsvcChemotherapy() throws CFException {
      return csvcProc.isCsvcChemotherapy();
   }

	/**
	*  set values "96400" THRU "96522" "96524" THRU "96566" "96568" THRU "96572" "96575" THRU "96599"
	*/
   	public void setCsvcChemotherapyTrue()  throws CFException{  			
    	csvcProc.setCsvcChemotherapyTrue();
   	}

        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public ConvertProcToSvcCdOutCtx getConvertProcToSvcCdOutCtx() {
            return new ConvertProcToSvcCdOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += csvcCodeGroup.hashCode();
        str += workFields.hashCode();
        str += csvcProc.hashCode();
       return str.hashCode();
    }

    public ConvertProcToSvcCdInCtx clone() {
        ConvertProcToSvcCdInCtx cloneObj = new ConvertProcToSvcCdInCtx();
        cloneObj.csvcCodeGroup = new CsvcCodeGroup();
        cloneObj.csvcCodeGroup.set(csvcCodeGroup.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.csvcProc = new CsvcProc();
        cloneObj.csvcProc.set(csvcProc.getClonedField());
        return cloneObj;
    }

    }

    public ConvertProcToSvcCdInCtx getConvertProcToSvcCdInCtx() {
            return new ConvertProcToSvcCdInCtx();
    }
     public class ConvertProcToSvcCdOutCtx implements Cloneable {
     CsvcCodeGroup csvcCodeGroup = O529351uCtx.this.getCsvcCodeGroup();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     CsvcProc csvcProc = O529351uCtx.this.getCsvcProc();

	/**
	 *	Test condition "1" "V" for isCsvcDigit1()
	 *	@return  Returns true if isCsvcDigit1() is "1" "V"
	 */
   public boolean isCsvcDigit1() throws CFException {
      return csvcProc.isCsvcDigit1();
   }

	/**
	*  set values "1" "V"
	*/
   	public void setCsvcDigit1True()  throws CFException{  			
    	csvcProc.setCsvcDigit1True();
   	}
	/**
	 *	Test condition "X" "P" "T" "7" "8" " " "N" "Y" "R" for isCsvcMedX()
	 *	@return  Returns true if isCsvcMedX() is "X" "P" "T" "7" "8" " " "N" "Y" "R"
	 */
   public boolean isCsvcMedX() throws CFException {
      return csvcProc.isCsvcMedX();
   }

	/**
	*  set values "X" "P" "T" "7" "8" " " "N" "Y" "R"
	*/
   	public void setCsvcMedXTrue()  throws CFException{  			
    	csvcProc.setCsvcMedXTrue();
   	}
	/**
	 *	Returns the value of csvcPLst1
	 *	@return csvcPLst1
	 */
   public char[] getCsvcPLst1() throws CFException  {              
   		return csvcProc.getCsvcPLst1();
   }

  
	/**
	*  set variable csvcPLst1
	*  @param value
	**/
   public void setCsvcPLst1(char[] value) throws CFException {
      csvcProc.setCsvcPLst1(value);
   } 

     /**
	 * 	Update CsvcPLst1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCsvcPLst1(char[] source, int sourceIndex) throws CFException {
      csvcProc.setCsvcPLst1(source, sourceIndex);
   	
   }
   
   public void setCsvcPLst1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      csvcProc.setCsvcPLst1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CsvcPLst1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCsvcPLst1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      csvcProc.setCsvcPLst1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CsvcPLst1 with another Field
	 *	@param value
	 */
   public void setCsvcPLst1(Field source) {
      csvcProc.setCsvcPLst1(source);
   }  
   
     /**
	 * 	Update CsvcPLst1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCsvcPLst1(Field source, int sourceIndex,int sourceLen) {
      csvcProc.setCsvcPLst1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CsvcPLst1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCsvcPLst1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      csvcProc.setCsvcPLst1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "0" "W" for isCsvcDigit0()
	 *	@return  Returns true if isCsvcDigit0() is "0" "W"
	 */
   public boolean isCsvcDigit0() throws CFException {
      return csvcProc.isCsvcDigit0();
   }

	/**
	*  set values "0" "W"
	*/
   	public void setCsvcDigit0True()  throws CFException{  			
    	csvcProc.setCsvcDigit0True();
   	}
	/**
	 *	Returns the value of csvcCodeLst1
	 *	@return csvcCodeLst1
	 */
	public int getCsvcCodeLst1() throws CFException {
   		return csvcCodeGroup.getCsvcCode().getCsvcCodeLst1();
	}


	/**
	 *	Returns String value of csvcCodeLst1
	 *	@return csvcCodeLst1
	 */
	public char[]  getCsvcCodeLst1String() throws CFException {
	     return String.valueOf(csvcCodeGroup.getCsvcCode().getCsvcCodeLst1String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean csvcCodeLst1IsNumeric()  throws CFException{
	    return csvcCodeGroup.getCsvcCode().csvcCodeLst1IsNumeric();
	}

	/**
	 * 	Update CsvcCodeLst1 with the passed value
	 *	@param number
	 */
	public void setCsvcCodeLst1(int number)  throws CFException{
		csvcCodeGroup.getCsvcCode().setCsvcCodeLst1(number);
	}
	

	public void setCsvcCodeLst1(long number)  throws CFException{
	    csvcCodeGroup.getCsvcCode().setCsvcCodeLst1(number);
	}
	
	
	/**
	 * 	Update CsvcCodeLst1 with the passed value
	 *	@param value (String or char[])
	 */
	public void setCsvcCodeLst1(char[] value)  throws CFException {
		csvcCodeGroup.getCsvcCode().setCsvcCodeLst1(value);
	}
	
	/**
	 * 	Update CsvcCodeLst1 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setCsvcCodeLst1String(char[] value)  throws CFException{
		csvcCodeGroup.getCsvcCode().setCsvcCodeLst1(value);
	}	

	/**
	 *	Test condition "7" "8" "A" "P" "T" " " for isCsvcDiagSerDigit()
	 *	@return  Returns true if isCsvcDiagSerDigit() is "7" "8" "A" "P" "T" " "
	 */
   public boolean isCsvcDiagSerDigit() throws CFException {
      return csvcProc.isCsvcDiagSerDigit();
   }

	/**
	*  set values "7" "8" "A" "P" "T" " "
	*/
   	public void setCsvcDiagSerDigitTrue()  throws CFException{  			
    	csvcProc.setCsvcDiagSerDigitTrue();
   	}
	/**
	 *	Returns the value of csvcCode
	 *	@return csvcCode
	 */   
	 public CsvcCode getCsvcCode() {
   	return csvcCodeGroup.getCsvcCode();
   }

   /**
	* 	Update CsvcCode with the passed value
	*	@param value
	*/
   public void setCsvcCode(char[] value) throws CFException {
      csvcCodeGroup.setCsvcCode(value);
   }   

     /**
	 * 	Update CsvcCode 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setCsvcCode(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	csvcCodeGroup.setCsvcCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CsvcCode 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCsvcCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	csvcCodeGroup.setCsvcCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CsvcCode with another Field
	 *	@param value
	 */
   public void setCsvcCode(Field source) {
   	csvcCodeGroup.setCsvcCode(source);
   }  
   
     /**
	 * 	Update CsvcCode 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setCsvcCode(Field source, int sourceIndex,int sourceLen) {
   	csvcCodeGroup.setCsvcCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CsvcCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCsvcCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	csvcCodeGroup.setCsvcCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of csvcCode15A
	 *	@return csvcCode15A
	 */
   public char[] getCsvcCode15A() throws CFException  {              
   		return csvcCodeGroup.getCsvcCodeA().getCsvcCode15A();
   }

  
	/**
	*  set variable csvcCode15A
	*  @param value
	**/
   public void setCsvcCode15A(char[] value) throws CFException {
      csvcCodeGroup.getCsvcCodeA().setCsvcCode15A(value);
   } 

     /**
	 * 	Update CsvcCode15A 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCsvcCode15A(char[] source, int sourceIndex) throws CFException {
      csvcCodeGroup.getCsvcCodeA().setCsvcCode15A(source, sourceIndex);
   	
   }
   
   public void setCsvcCode15A(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      csvcCodeGroup.getCsvcCodeA().setCsvcCode15A(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CsvcCode15A 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCsvcCode15A(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      csvcCodeGroup.getCsvcCodeA().setCsvcCode15A(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CsvcCode15A with another Field
	 *	@param value
	 */
   public void setCsvcCode15A(Field source) {
      csvcCodeGroup.getCsvcCodeA().setCsvcCode15A(source);
   }  
   
     /**
	 * 	Update CsvcCode15A 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCsvcCode15A(Field source, int sourceIndex,int sourceLen) {
      csvcCodeGroup.getCsvcCodeA().setCsvcCode15A(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CsvcCode15A 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCsvcCode15A(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      csvcCodeGroup.getCsvcCodeA().setCsvcCode15A(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of csvcCode6A
	 *	@return csvcCode6A
	 */
   public char[] getCsvcCode6A() throws CFException  {              
   		return csvcCodeGroup.getCsvcCodeA().getCsvcCode6A();
   }

  
	/**
	*  set variable csvcCode6A
	*  @param value
	**/
   public void setCsvcCode6A(char[] value) throws CFException {
      csvcCodeGroup.getCsvcCodeA().setCsvcCode6A(value);
   } 

     /**
	 * 	Update CsvcCode6A 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCsvcCode6A(char[] source, int sourceIndex) throws CFException {
      csvcCodeGroup.getCsvcCodeA().setCsvcCode6A(source, sourceIndex);
   	
   }
   
   public void setCsvcCode6A(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      csvcCodeGroup.getCsvcCodeA().setCsvcCode6A(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CsvcCode6A 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCsvcCode6A(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      csvcCodeGroup.getCsvcCodeA().setCsvcCode6A(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CsvcCode6A with another Field
	 *	@param value
	 */
   public void setCsvcCode6A(Field source) {
      csvcCodeGroup.getCsvcCodeA().setCsvcCode6A(source);
   }  
   
     /**
	 * 	Update CsvcCode6A 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCsvcCode6A(Field source, int sourceIndex,int sourceLen) {
      csvcCodeGroup.getCsvcCodeA().setCsvcCode6A(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CsvcCode6A 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCsvcCode6A(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      csvcCodeGroup.getCsvcCodeA().setCsvcCode6A(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "7" "8" "A" "P" "T" " " for isCsvcLabXrayDigit()
	 *	@return  Returns true if isCsvcLabXrayDigit() is "7" "8" "A" "P" "T" " "
	 */
   public boolean isCsvcLabXrayDigit() throws CFException {
      return csvcProc.isCsvcLabXrayDigit();
   }

	/**
	*  set values "7" "8" "A" "P" "T" " "
	*/
   	public void setCsvcLabXrayDigitTrue()  throws CFException{  			
    	csvcProc.setCsvcLabXrayDigitTrue();
   	}
	/**
	 *	Returns the value of csvcCode1st5
	 *	@return csvcCode1st5
	 */
	public long getCsvcCode1st5() throws CFException {
   		return csvcCodeGroup.getCsvcCode().getCsvcCode1st5();
	}


	/**
	 *	Returns String value of csvcCode1st5
	 *	@return csvcCode1st5
	 */
	public char[]  getCsvcCode1st5String() throws CFException {
	     return String.valueOf(csvcCodeGroup.getCsvcCode().getCsvcCode1st5String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean csvcCode1st5IsNumeric()  throws CFException{
	    return csvcCodeGroup.getCsvcCode().csvcCode1st5IsNumeric();
	}

	/**
	 * 	Update CsvcCode1st5 with the passed value
	 *	@param number
	 */
	public void setCsvcCode1st5(long number)  throws CFException{
		csvcCodeGroup.getCsvcCode().setCsvcCode1st5(number);
	}
	

	
	/**
	 * 	Update CsvcCode1st5 with the passed value
	 *	@param value (String or char[])
	 */
	public void setCsvcCode1st5(char[] value)  throws CFException {
		csvcCodeGroup.getCsvcCode().setCsvcCode1st5(value);
	}
	
	/**
	 * 	Update CsvcCode1st5 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setCsvcCode1st5String(char[] value)  throws CFException{
		csvcCodeGroup.getCsvcCode().setCsvcCode1st5(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += csvcCodeGroup.hashCode();
        str += workFields.hashCode();
        str += csvcProc.hashCode();
       return str.hashCode();
    }

    public ConvertProcToSvcCdOutCtx clone() {
        ConvertProcToSvcCdOutCtx cloneObj = new ConvertProcToSvcCdOutCtx();
        cloneObj.csvcCodeGroup = new CsvcCodeGroup();
        cloneObj.csvcCodeGroup.set(csvcCodeGroup.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.csvcProc = new CsvcProc();
        cloneObj.csvcProc.set(csvcProc.getClonedField());
        return cloneObj;
    }

    }

    public ConvertProcToSvcCdOutCtx getConvertProcToSvcCdOutCtx() {
            return new ConvertProcToSvcCdOutCtx();
    }
     public class ReadGenSysSwitchOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();

	/**
	 *	Test condition "Y" for isFePrimeSpiTurnedOn()
	 *	@return  Returns true if isFePrimeSpiTurnedOn() is "Y"
	 */
   public boolean isFePrimeSpiTurnedOn() throws CFException {
      return work.isFePrimeSpiTurnedOn();
   }

	/**
	*  set values "Y"
	*/
   	public void setFePrimeSpiTurnedOnTrue()  throws CFException{  			
    	work.setFePrimeSpiTurnedOnTrue();
   	}
	/**
	 *	Test condition "Y" for isFeSpiTurnedOn()
	 *	@return  Returns true if isFeSpiTurnedOn() is "Y"
	 */
   public boolean isFeSpiTurnedOn() throws CFException {
      return work.isFeSpiTurnedOn();
   }

	/**
	*  set values "Y"
	*/
   	public void setFeSpiTurnedOnTrue()  throws CFException{  			
    	work.setFeSpiTurnedOnTrue();
   	}
	/**
	 *	Returns the value of newSpiSw
	 *	@return newSpiSw
	 */
   public char[] getNewSpiSw() throws CFException  {              
   		return work.getNewSpiSw();
   }

  
	/**
	*  set variable newSpiSw
	*  @param value
	**/
   public void setNewSpiSw(char[] value) throws CFException {
      work.setNewSpiSw(value);
   } 

	/**
	 *	Test condition "ON " for isFePrimeSpiEnabled()
	 *	@return  Returns true if isFePrimeSpiEnabled() is "ON "
	 */
   public boolean isFePrimeSpiEnabled() throws CFException {
      return work.isFePrimeSpiEnabled();
   }

	/**
	*  set values "ON "
	*/
   	public void setFePrimeSpiEnabledTrue()  throws CFException{  			
    	work.setFePrimeSpiEnabledTrue();
   	}
	/**
	 *	Test condition "ON " for isFeSpiEnabled()
	 *	@return  Returns true if isFeSpiEnabled() is "ON "
	 */
   public boolean isFeSpiEnabled() throws CFException {
      return work.isFeSpiEnabled();
   }

	/**
	*  set values "ON "
	*/
   	public void setFeSpiEnabledTrue()  throws CFException{  			
    	work.setFeSpiEnabledTrue();
   	}

        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
       return str.hashCode();
    }

    public ReadGenSysSwitchOutCtx clone() {
        ReadGenSysSwitchOutCtx cloneObj = new ReadGenSysSwitchOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ReadGenSysSwitchOutCtx getReadGenSysSwitchOutCtx() {
            return new ReadGenSysSwitchOutCtx();
    }
     public class ReadPlanAltDb2InCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     FeSpiAltPlanRecord feSpiAltPlanRecord = O529351uCtx.this.getFeSpiAltPlanRecord();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = O529351uCtx.this.getDsmCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of d51uPlnvCnt
	 *	@return d51uPlnvCnt
	 */
	public int getD51uPlnvCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uPlnvCnt();
	}
	
	/**
	 * 	Update D51uPlnvCnt with the passed value
	 *	@param number
	 */
	public void setD51uPlnvCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uPlnvCnt(number);
	}


	public void setD51uPlnvCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uPlnvCnt((int)number);
	}


	/**
	 *	Returns the value of planDosYy
	 *	@return planDosYy
	 */
	public int getPlanDosYy() throws CFException {
   		return workFields.getPlanDosDt().getPlanDosYy();
	}


	/**
	 *	Returns String value of planDosYy
	 *	@return planDosYy
	 */
	public char[]  getPlanDosYyString() throws CFException {
	     return String.valueOf(workFields.getPlanDosDt().getPlanDosYyString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDosYyIsNumeric()  throws CFException{
	    return workFields.getPlanDosDt().planDosYyIsNumeric();
	}

	/**
	 * 	Update PlanDosYy with the passed value
	 *	@param number
	 */
	public void setPlanDosYy(int number)  throws CFException{
		workFields.getPlanDosDt().setPlanDosYy(number);
	}
	

	public void setPlanDosYy(long number)  throws CFException{
	    workFields.getPlanDosDt().setPlanDosYy(number);
	}
	
	
	/**
	 * 	Update PlanDosYy with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDosYy(char[] value)  throws CFException {
		workFields.getPlanDosDt().setPlanDosYy(value);
	}
	
	/**
	 * 	Update PlanDosYy with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDosYyString(char[] value)  throws CFException{
		workFields.getPlanDosDt().setPlanDosYy(value);
	}	

	/**
	 *	Returns the value of d529351uDb2Dsm
	 *	@return d529351uDb2Dsm
	 */
   public char[] getD529351uDb2Dsm() throws CFException  {              
   		return work.getD529351uDb2Dsm();
   }

  
	/**
	*  set variable d529351uDb2Dsm
	*  @param value
	**/
   public void setD529351uDb2Dsm(char[] value) throws CFException {
      work.setD529351uDb2Dsm(value);
   } 

	/**
	 *	Returns the value of planDosDd
	 *	@return planDosDd
	 */
	public int getPlanDosDd() throws CFException {
   		return workFields.getPlanDosDt().getPlanDosDd();
	}


	/**
	 *	Returns String value of planDosDd
	 *	@return planDosDd
	 */
	public char[]  getPlanDosDdString() throws CFException {
	     return String.valueOf(workFields.getPlanDosDt().getPlanDosDdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDosDdIsNumeric()  throws CFException{
	    return workFields.getPlanDosDt().planDosDdIsNumeric();
	}

	/**
	 * 	Update PlanDosDd with the passed value
	 *	@param number
	 */
	public void setPlanDosDd(int number)  throws CFException{
		workFields.getPlanDosDt().setPlanDosDd(number);
	}
	

	public void setPlanDosDd(long number)  throws CFException{
	    workFields.getPlanDosDt().setPlanDosDd(number);
	}
	
	
	/**
	 * 	Update PlanDosDd with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDosDd(char[] value)  throws CFException {
		workFields.getPlanDosDt().setPlanDosDd(value);
	}
	
	/**
	 * 	Update PlanDosDd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDosDdString(char[] value)  throws CFException{
		workFields.getPlanDosDt().setPlanDosDd(value);
	}	

	/**
	 *	Returns the value of planDate
	 *	@return planDate
	 */
	public long getPlanDate() throws CFException {
   		return workFields.getPlanDate();
	}


	/**
	 *	Returns String value of planDate
	 *	@return planDate
	 */
	public char[]  getPlanDateString() throws CFException {
	     return String.valueOf(workFields.getPlanDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDateIsNumeric()  throws CFException{
	    return workFields.planDateIsNumeric();
	}

	/**
	 * 	Update PlanDate with the passed value
	 *	@param number
	 */
	public void setPlanDate(long number)  throws CFException{
		workFields.setPlanDate(number);
	}
	

	
	/**
	 * 	Update PlanDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDate(char[] value)  throws CFException {
		workFields.setPlanDate(value);
	}
	
	/**
	 * 	Update PlanDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDateString(char[] value)  throws CFException{
		workFields.setPlanDate(value);
	}	

	/**
	 *	Returns the value of d51uInvReason
	 *	@return d51uInvReason
	 */
	public int getD51uInvReason() throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uInvReason();
	}


	/**
	 *	Returns String value of d51uInvReason
	 *	@return d51uInvReason
	 */
	public char[]  getD51uInvReasonString() throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uInvReasonString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uInvReasonIsNumeric()  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().d51uInvReasonIsNumeric();
	}

	/**
	 * 	Update D51uInvReason with the passed value
	 *	@param number
	 */
	public void setD51uInvReason(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(number);
	}
	

	public void setD51uInvReason(long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(number);
	}
	
	
	/**
	 * 	Update D51uInvReason with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uInvReason(char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(value);
	}
	
	/**
	 * 	Update D51uInvReason with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uInvReasonString(char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(value);
	}	

	/**
	 *	Returns the value of uPolicyNo51
	 *	@return uPolicyNo51
	 */
   public char[] getUPolicyNo51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUPolicyNo51();
   }

  
	/**
	*  set variable uPolicyNo51
	*  @param value
	**/
   public void setUPolicyNo51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(value);
   } 

     /**
	 * 	Update UPolicyNo51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUPolicyNo51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex);
   	
   }
   
   public void setUPolicyNo51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UPolicyNo51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUPolicyNo51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UPolicyNo51 with another Field
	 *	@param value
	 */
   public void setUPolicyNo51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source);
   }  
   
     /**
	 * 	Update UPolicyNo51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUPolicyNo51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UPolicyNo51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUPolicyNo51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isWithMmiPol2010()
	 *	@return  Returns true if isWithMmiPol2010() is "Y"
	 */
   public boolean isWithMmiPol2010() throws CFException {
      return work.isWithMmiPol2010();
   }

	/**
	*  set values "Y"
	*/
   	public void setWithMmiPol2010True()  throws CFException{  			
    	work.setWithMmiPol2010True();
   	}
	/**
	 *	Test condition "Y" for isEndOfPlanAlt1()
	 *	@return  Returns true if isEndOfPlanAlt1() is "Y"
	 */
   public boolean isEndOfPlanAlt1() throws CFException {
      return work.isEndOfPlanAlt1();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfPlanAlt1True()  throws CFException{  			
    	work.setEndOfPlanAlt1True();
   	}
	/**
	 *	Returns the value of planYy
	 *	@return planYy
	 */
	public int getPlanYy() throws CFException {
   		return workFields.getPlanDt().getPlanYy();
	}


	/**
	 *	Returns String value of planYy
	 *	@return planYy
	 */
	public char[]  getPlanYyString() throws CFException {
	     return String.valueOf(workFields.getPlanDt().getPlanYyString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planYyIsNumeric()  throws CFException{
	    return workFields.getPlanDt().planYyIsNumeric();
	}

	/**
	 * 	Update PlanYy with the passed value
	 *	@param number
	 */
	public void setPlanYy(int number)  throws CFException{
		workFields.getPlanDt().setPlanYy(number);
	}
	

	public void setPlanYy(long number)  throws CFException{
	    workFields.getPlanDt().setPlanYy(number);
	}
	
	
	/**
	 * 	Update PlanYy with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanYy(char[] value)  throws CFException {
		workFields.getPlanDt().setPlanYy(value);
	}
	
	/**
	 * 	Update PlanYy with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanYyString(char[] value)  throws CFException{
		workFields.getPlanDt().setPlanYy(value);
	}	

public int getULineDosDate51(int index) throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineDosDate51();
}
	/**
	 * 	Update ULineDosDate51 with the passed value
	 *	@param number
	 */
	public void setULineDosDate51(int index,int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDosDate51(number);
	}


	public void setULineDosDate51(int index,long number)  throws CFException{
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDosDate51(number);
	}
	

	/**
	 *	Returns the value of uPlanVar51
	 *	@return uPlanVar51
	 */
	public short getUPlanVar51() throws CFException {        
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUPlanVar51();
	}
	
	/**
	 * 	Update UPlanVar51 with the passed value
	 *	@param number
	 */
	public void setUPlanVar51(short number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51(number);
	}

	public void setUPlanVar51(int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51((short)number);
	}

	public void setUPlanVar51(long number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51((short)number);
	}



	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of vyspi51uCallArea
	 *	@return vyspi51uCallArea
	 */   
	 public Vyspi51uCallArea getVyspi51uCallArea() {
   	return vyspi51uCallArea;
   }


	/**
	 *	Returns the value of planDosMm
	 *	@return planDosMm
	 */
	public int getPlanDosMm() throws CFException {
   		return workFields.getPlanDosDt().getPlanDosMm();
	}


	/**
	 *	Returns String value of planDosMm
	 *	@return planDosMm
	 */
	public char[]  getPlanDosMmString() throws CFException {
	     return String.valueOf(workFields.getPlanDosDt().getPlanDosMmString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDosMmIsNumeric()  throws CFException{
	    return workFields.getPlanDosDt().planDosMmIsNumeric();
	}

	/**
	 * 	Update PlanDosMm with the passed value
	 *	@param number
	 */
	public void setPlanDosMm(int number)  throws CFException{
		workFields.getPlanDosDt().setPlanDosMm(number);
	}
	

	public void setPlanDosMm(long number)  throws CFException{
	    workFields.getPlanDosDt().setPlanDosMm(number);
	}
	
	
	/**
	 * 	Update PlanDosMm with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDosMm(char[] value)  throws CFException {
		workFields.getPlanDosDt().setPlanDosMm(value);
	}
	
	/**
	 * 	Update PlanDosMm with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDosMmString(char[] value)  throws CFException{
		workFields.getPlanDosDt().setPlanDosMm(value);
	}	

	/**
	 *	Returns the value of dsmCallArea
	 *	@return dsmCallArea
	 */   
	 public DsmCallArea getDsmCallArea() {
   	return dsmCallArea;
   }


	/**
	 *	Returns the value of planVarPrev
	 *	@return planVarPrev
	 */
	public short getPlanVarPrev() throws CFException {        
   		return workFields.getPlanVarPrev();
	}
	
	/**
	 * 	Update PlanVarPrev with the passed value
	 *	@param number
	 */
	public void setPlanVarPrev(short number)  throws CFException{
		workFields.setPlanVarPrev(number);
	}

	public void setPlanVarPrev(int number)  throws CFException{
		workFields.setPlanVarPrev((short)number);
	}

	public void setPlanVarPrev(long number)  throws CFException{
		workFields.setPlanVarPrev((short)number);
	}



	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}


	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public ReadPlanAltDb2OutCtx getReadPlanAltDb2OutCtx() {
            return new ReadPlanAltDb2OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += feSpiAltPlanRecord.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public ReadPlanAltDb2InCtx clone() {
        ReadPlanAltDb2InCtx cloneObj = new ReadPlanAltDb2InCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.feSpiAltPlanRecord = new FeSpiAltPlanRecord();
        cloneObj.feSpiAltPlanRecord.set(feSpiAltPlanRecord.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public ReadPlanAltDb2InCtx getReadPlanAltDb2InCtx() {
            return new ReadPlanAltDb2InCtx();
    }
     public class ReadPlanAltDb2OutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     FeSpiAltPlanRecord feSpiAltPlanRecord = O529351uCtx.this.getFeSpiAltPlanRecord();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = O529351uCtx.this.getDsmCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of planDosDd
	 *	@return planDosDd
	 */
	public int getPlanDosDd() throws CFException {
   		return workFields.getPlanDosDt().getPlanDosDd();
	}


	/**
	 *	Returns String value of planDosDd
	 *	@return planDosDd
	 */
	public char[]  getPlanDosDdString() throws CFException {
	     return String.valueOf(workFields.getPlanDosDt().getPlanDosDdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDosDdIsNumeric()  throws CFException{
	    return workFields.getPlanDosDt().planDosDdIsNumeric();
	}

	/**
	 * 	Update PlanDosDd with the passed value
	 *	@param number
	 */
	public void setPlanDosDd(int number)  throws CFException{
		workFields.getPlanDosDt().setPlanDosDd(number);
	}
	

	public void setPlanDosDd(long number)  throws CFException{
	    workFields.getPlanDosDt().setPlanDosDd(number);
	}
	
	
	/**
	 * 	Update PlanDosDd with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDosDd(char[] value)  throws CFException {
		workFields.getPlanDosDt().setPlanDosDd(value);
	}
	
	/**
	 * 	Update PlanDosDd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDosDdString(char[] value)  throws CFException{
		workFields.getPlanDosDt().setPlanDosDd(value);
	}	

	/**
	 *	Test condition "Y" for isMmiAltNotFound()
	 *	@return  Returns true if isMmiAltNotFound() is "Y"
	 */
   public boolean isMmiAltNotFound() throws CFException {
      return work.isMmiAltNotFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setMmiAltNotFoundTrue()  throws CFException{  			
    	work.setMmiAltNotFoundTrue();
   	}
	/**
	 *	Returns the value of uPolicyNo51
	 *	@return uPolicyNo51
	 */
   public char[] getUPolicyNo51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUPolicyNo51();
   }

  
	/**
	*  set variable uPolicyNo51
	*  @param value
	**/
   public void setUPolicyNo51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(value);
   } 

     /**
	 * 	Update UPolicyNo51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUPolicyNo51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex);
   	
   }
   
   public void setUPolicyNo51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UPolicyNo51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUPolicyNo51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UPolicyNo51 with another Field
	 *	@param value
	 */
   public void setUPolicyNo51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source);
   }  
   
     /**
	 * 	Update UPolicyNo51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUPolicyNo51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UPolicyNo51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUPolicyNo51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPolicyNo51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of planYy
	 *	@return planYy
	 */
	public int getPlanYy() throws CFException {
   		return workFields.getPlanDt().getPlanYy();
	}


	/**
	 *	Returns String value of planYy
	 *	@return planYy
	 */
	public char[]  getPlanYyString() throws CFException {
	     return String.valueOf(workFields.getPlanDt().getPlanYyString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planYyIsNumeric()  throws CFException{
	    return workFields.getPlanDt().planYyIsNumeric();
	}

	/**
	 * 	Update PlanYy with the passed value
	 *	@param number
	 */
	public void setPlanYy(int number)  throws CFException{
		workFields.getPlanDt().setPlanYy(number);
	}
	

	public void setPlanYy(long number)  throws CFException{
	    workFields.getPlanDt().setPlanYy(number);
	}
	
	
	/**
	 * 	Update PlanYy with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanYy(char[] value)  throws CFException {
		workFields.getPlanDt().setPlanYy(value);
	}
	
	/**
	 * 	Update PlanYy with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanYyString(char[] value)  throws CFException{
		workFields.getPlanDt().setPlanYy(value);
	}	

public int getULineDosDate51(int index) throws CFException {  
        return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineDosDate51();
}
	/**
	 * 	Update ULineDosDate51 with the passed value
	 *	@param number
	 */
	public void setULineDosDate51(int index,int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDosDate51(number);
	}


	public void setULineDosDate51(int index,long number)  throws CFException{
	    dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDosDate51(number);
	}
	

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of planVarFoundSw
	 *	@return planVarFoundSw
	 */
   public char[] getPlanVarFoundSw() throws CFException  {              
   		return work.getPlanVarFoundSw();
   }

  
	/**
	*  set variable planVarFoundSw
	*  @param value
	**/
   public void setPlanVarFoundSw(char[] value) throws CFException {
      work.setPlanVarFoundSw(value);
   } 

	/**
	 *	Returns the value of d51uReqCallingProgram
	 *	@return d51uReqCallingProgram
	 */
   public char[] getD51uReqCallingProgram() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uReqCallingProgram();
   }

  
	/**
	*  set variable d51uReqCallingProgram
	*  @param value
	**/
   public void setD51uReqCallingProgram(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().setD51uReqCallingProgram(value);
   } 

     /**
	 * 	Update D51uReqCallingProgram 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uReqCallingProgram(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().setD51uReqCallingProgram(source, sourceIndex);
   	
   }
   
   public void setD51uReqCallingProgram(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().setD51uReqCallingProgram(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uReqCallingProgram 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uReqCallingProgram(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().setD51uReqCallingProgram(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uReqCallingProgram with another Field
	 *	@param value
	 */
   public void setD51uReqCallingProgram(Field source) {
      vyspi51uCallArea.getD51uRequestFields().setD51uReqCallingProgram(source);
   }  
   
     /**
	 * 	Update D51uReqCallingProgram 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uReqCallingProgram(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().setD51uReqCallingProgram(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uReqCallingProgram 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uReqCallingProgram(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().setD51uReqCallingProgram(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of planCc
	 *	@return planCc
	 */
	public int getPlanCc() throws CFException {
   		return workFields.getPlanDt().getPlanCc();
	}


	/**
	 *	Returns String value of planCc
	 *	@return planCc
	 */
	public char[]  getPlanCcString() throws CFException {
	     return String.valueOf(workFields.getPlanDt().getPlanCcString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planCcIsNumeric()  throws CFException{
	    return workFields.getPlanDt().planCcIsNumeric();
	}

	/**
	 * 	Update PlanCc with the passed value
	 *	@param number
	 */
	public void setPlanCc(int number)  throws CFException{
		workFields.getPlanDt().setPlanCc(number);
	}
	

	public void setPlanCc(long number)  throws CFException{
	    workFields.getPlanDt().setPlanCc(number);
	}
	
	
	/**
	 * 	Update PlanCc with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanCc(char[] value)  throws CFException {
		workFields.getPlanDt().setPlanCc(value);
	}
	
	/**
	 * 	Update PlanCc with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanCcString(char[] value)  throws CFException{
		workFields.getPlanDt().setPlanCc(value);
	}	

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Returns the value of d51uKeyPlan
	 *	@return d51uKeyPlan
	 */
   public char[] getD51uKeyPlan() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyPlan();
   }

  
	/**
	*  set variable d51uKeyPlan
	*  @param value
	**/
   public void setD51uKeyPlan(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(value);
   } 

     /**
	 * 	Update D51uKeyPlan 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyPlan(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source, sourceIndex);
   	
   }
   
   public void setD51uKeyPlan(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyPlan 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyPlan(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyPlan with another Field
	 *	@param value
	 */
   public void setD51uKeyPlan(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source);
   }  
   
     /**
	 * 	Update D51uKeyPlan 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyPlan(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyPlan 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyPlan(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "I" for isM51uIllogicalCond()
	 *	@return  Returns true if isM51uIllogicalCond() is "I"
	 */
   public boolean isM51uIllogicalCond() throws CFException {
      return dfhcommarea.getLinkAreaM51u().getM51uFlags().isM51uIllogicalCond();
   }

	/**
	*  set values "I"
	*/
   	public void setM51uIllogicalCondTrue()  throws CFException{  			
    	dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondTrue();
   	}
	/**
	 *	Returns the value of planDosMm
	 *	@return planDosMm
	 */
	public int getPlanDosMm() throws CFException {
   		return workFields.getPlanDosDt().getPlanDosMm();
	}


	/**
	 *	Returns String value of planDosMm
	 *	@return planDosMm
	 */
	public char[]  getPlanDosMmString() throws CFException {
	     return String.valueOf(workFields.getPlanDosDt().getPlanDosMmString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDosMmIsNumeric()  throws CFException{
	    return workFields.getPlanDosDt().planDosMmIsNumeric();
	}

	/**
	 * 	Update PlanDosMm with the passed value
	 *	@param number
	 */
	public void setPlanDosMm(int number)  throws CFException{
		workFields.getPlanDosDt().setPlanDosMm(number);
	}
	

	public void setPlanDosMm(long number)  throws CFException{
	    workFields.getPlanDosDt().setPlanDosMm(number);
	}
	
	
	/**
	 * 	Update PlanDosMm with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDosMm(char[] value)  throws CFException {
		workFields.getPlanDosDt().setPlanDosMm(value);
	}
	
	/**
	 * 	Update PlanDosMm with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDosMmString(char[] value)  throws CFException{
		workFields.getPlanDosDt().setPlanDosMm(value);
	}	

	/**
	 *	Returns the value of planVarPrev
	 *	@return planVarPrev
	 */
	public short getPlanVarPrev() throws CFException {        
   		return workFields.getPlanVarPrev();
	}
	
	/**
	 * 	Update PlanVarPrev with the passed value
	 *	@param number
	 */
	public void setPlanVarPrev(short number)  throws CFException{
		workFields.setPlanVarPrev(number);
	}

	public void setPlanVarPrev(int number)  throws CFException{
		workFields.setPlanVarPrev((short)number);
	}

	public void setPlanVarPrev(long number)  throws CFException{
		workFields.setPlanVarPrev((short)number);
	}



	/**
	 *	Test condition "O" for isD51uReqCallerOnline()
	 *	@return  Returns true if isD51uReqCallerOnline() is "O"
	 */
   public boolean isD51uReqCallerOnline() throws CFException {
      return vyspi51uCallArea.getD51uRequestFields().isD51uReqCallerOnline();
   }

	/**
	*  set values "O"
	*/
   	public void setD51uReqCallerOnlineTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uRequestFields().setD51uReqCallerOnlineTrue();
   	}
public int getFesaSpiNbr() throws CFException {  
        return feSpiAltPlanRecord.getFesaKey().getFesaSpiNbr();
}
	/**
	 * 	Update FesaSpiNbr with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr(int number)  throws CFException{
		feSpiAltPlanRecord.getFesaKey().setFesaSpiNbr(number);
	}


	public void setFesaSpiNbr(long number)  throws CFException{
	    feSpiAltPlanRecord.getFesaKey().setFesaSpiNbr(number);
	}
	

	/**
	 *	Returns the value of planDosDate
	 *	@return planDosDate
	 */
	public long getPlanDosDate() throws CFException {
   		return workFields.getPlanDosDate();
	}


	/**
	 *	Returns String value of planDosDate
	 *	@return planDosDate
	 */
	public char[]  getPlanDosDateString() throws CFException {
	     return String.valueOf(workFields.getPlanDosDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDosDateIsNumeric()  throws CFException{
	    return workFields.planDosDateIsNumeric();
	}

	/**
	 * 	Update PlanDosDate with the passed value
	 *	@param number
	 */
	public void setPlanDosDate(long number)  throws CFException{
		workFields.setPlanDosDate(number);
	}
	

	
	/**
	 * 	Update PlanDosDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDosDate(char[] value)  throws CFException {
		workFields.setPlanDosDate(value);
	}
	
	/**
	 * 	Update PlanDosDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDosDateString(char[] value)  throws CFException{
		workFields.setPlanDosDate(value);
	}	

public int getFesaPlanVar() throws CFException {  
        return feSpiAltPlanRecord.getFesaKey().getFesaPlanVar();
}
	/**
	 * 	Update FesaPlanVar with the passed value
	 *	@param number
	 */
	public void setFesaPlanVar(int number)  throws CFException{
		feSpiAltPlanRecord.getFesaKey().setFesaPlanVar(number);
	}


	public void setFesaPlanVar(long number)  throws CFException{
	    feSpiAltPlanRecord.getFesaKey().setFesaPlanVar(number);
	}
	

	/**
	 *	Returns the value of planDosYy
	 *	@return planDosYy
	 */
	public int getPlanDosYy() throws CFException {
   		return workFields.getPlanDosDt().getPlanDosYy();
	}


	/**
	 *	Returns String value of planDosYy
	 *	@return planDosYy
	 */
	public char[]  getPlanDosYyString() throws CFException {
	     return String.valueOf(workFields.getPlanDosDt().getPlanDosYyString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDosYyIsNumeric()  throws CFException{
	    return workFields.getPlanDosDt().planDosYyIsNumeric();
	}

	/**
	 * 	Update PlanDosYy with the passed value
	 *	@param number
	 */
	public void setPlanDosYy(int number)  throws CFException{
		workFields.getPlanDosDt().setPlanDosYy(number);
	}
	

	public void setPlanDosYy(long number)  throws CFException{
	    workFields.getPlanDosDt().setPlanDosYy(number);
	}
	
	
	/**
	 * 	Update PlanDosYy with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDosYy(char[] value)  throws CFException {
		workFields.getPlanDosDt().setPlanDosYy(value);
	}
	
	/**
	 * 	Update PlanDosYy with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDosYyString(char[] value)  throws CFException{
		workFields.getPlanDosDt().setPlanDosYy(value);
	}	

	/**
	 *	Test condition 1 for isD51uNotFound()
	 *	@return  Returns true if isD51uNotFound() is 1
	 */
   public boolean isD51uNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uNotFound();
   }

	/**
	*  set values 1
	*/
   	public void setD51uNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uNotFoundTrue();
   	}
	/**
	 *	Returns the value of d51uKeyStatus
	 *	@return d51uKeyStatus
	 */
   public char[] getD51uKeyStatus() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyStatus();
   }

  
	/**
	*  set variable d51uKeyStatus
	*  @param value
	**/
   public void setD51uKeyStatus(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(value);
   } 

     /**
	 * 	Update D51uKeyStatus 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyStatus(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex);
   	
   }
   
   public void setD51uKeyStatus(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyStatus 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyStatus(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyStatus with another Field
	 *	@param value
	 */
   public void setD51uKeyStatus(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source);
   }  
   
     /**
	 * 	Update D51uKeyStatus 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyStatus(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyStatus 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyStatus(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesaPolicy
	 *	@return fesaPolicy
	 */
   public char[] getFesaPolicy() throws CFException  {              
   		return feSpiAltPlanRecord.getFesaKey().getFesaPolicy();
   }

  
	/**
	*  set variable fesaPolicy
	*  @param value
	**/
   public void setFesaPolicy(char[] value) throws CFException {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(value);
   } 

     /**
	 * 	Update FesaPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaPolicy(char[] source, int sourceIndex) throws CFException {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex);
   	
   }
   
   public void setFesaPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaPolicy with another Field
	 *	@param value
	 */
   public void setFesaPolicy(Field source) {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source);
   }  
   
     /**
	 * 	Update FesaPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaPolicy(Field source, int sourceIndex,int sourceLen) {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      feSpiAltPlanRecord.getFesaKey().setFesaPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02DsplErrInd
	 *	@return w02DsplErrInd
	 */
   public char[] getW02DsplErrInd() throws CFException  {              
   		return w02DsplMsgArea.getW02DsplErrInd();
   }

  
	/**
	*  set variable w02DsplErrInd
	*  @param value
	**/
   public void setW02DsplErrInd(char[] value) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(value);
   } 

     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex);
   	
   }
   
   public void setW02DsplErrInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02DsplErrInd with another Field
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source) {
      w02DsplMsgArea.setW02DsplErrInd(source);
   }  
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 1 for isD51uReqSelectPlan()
	 *	@return  Returns true if isD51uReqSelectPlan() is 1
	 */
   public boolean isD51uReqSelectPlan() throws CFException {
      return vyspi51uCallArea.getD51uRequestFields().isD51uReqSelectPlan();
   }

	/**
	*  set values 1
	*/
   	public void setD51uReqSelectPlanTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uRequestFields().setD51uReqSelectPlanTrue();
   	}
	/**
	 *	Returns the value of planDate
	 *	@return planDate
	 */
	public long getPlanDate() throws CFException {
   		return workFields.getPlanDate();
	}


	/**
	 *	Returns String value of planDate
	 *	@return planDate
	 */
	public char[]  getPlanDateString() throws CFException {
	     return String.valueOf(workFields.getPlanDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDateIsNumeric()  throws CFException{
	    return workFields.planDateIsNumeric();
	}

	/**
	 * 	Update PlanDate with the passed value
	 *	@param number
	 */
	public void setPlanDate(long number)  throws CFException{
		workFields.setPlanDate(number);
	}
	

	
	/**
	 * 	Update PlanDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDate(char[] value)  throws CFException {
		workFields.setPlanDate(value);
	}
	
	/**
	 * 	Update PlanDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDateString(char[] value)  throws CFException{
		workFields.setPlanDate(value);
	}	

	/**
	 *	Returns the value of d51uKeyFeSpi
	 *	@return d51uKeyFeSpi
	 */
   public char[] getD51uKeyFeSpi() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyFeSpi();
   }

  
	/**
	*  set variable d51uKeyFeSpi
	*  @param value
	**/
   public void setD51uKeyFeSpi(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(value);
   } 

     /**
	 * 	Update D51uKeyFeSpi 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyFeSpi(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex);
   	
   }
   
   public void setD51uKeyFeSpi(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyFeSpi(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyFeSpi with another Field
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source);
   }  
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uInvReason
	 *	@return d51uInvReason
	 */
	public int getD51uInvReason() throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uInvReason();
	}


	/**
	 *	Returns String value of d51uInvReason
	 *	@return d51uInvReason
	 */
	public char[]  getD51uInvReasonString() throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uInvReasonString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uInvReasonIsNumeric()  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().d51uInvReasonIsNumeric();
	}

	/**
	 * 	Update D51uInvReason with the passed value
	 *	@param number
	 */
	public void setD51uInvReason(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(number);
	}
	

	public void setD51uInvReason(long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(number);
	}
	
	
	/**
	 * 	Update D51uInvReason with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uInvReason(char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(value);
	}
	
	/**
	 * 	Update D51uInvReason with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uInvReasonString(char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(value);
	}	

	/**
	 *	Returns the value of planDd
	 *	@return planDd
	 */
	public int getPlanDd() throws CFException {
   		return workFields.getPlanDt().getPlanDd();
	}


	/**
	 *	Returns String value of planDd
	 *	@return planDd
	 */
	public char[]  getPlanDdString() throws CFException {
	     return String.valueOf(workFields.getPlanDt().getPlanDdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planDdIsNumeric()  throws CFException{
	    return workFields.getPlanDt().planDdIsNumeric();
	}

	/**
	 * 	Update PlanDd with the passed value
	 *	@param number
	 */
	public void setPlanDd(int number)  throws CFException{
		workFields.getPlanDt().setPlanDd(number);
	}
	

	public void setPlanDd(long number)  throws CFException{
	    workFields.getPlanDt().setPlanDd(number);
	}
	
	
	/**
	 * 	Update PlanDd with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanDd(char[] value)  throws CFException {
		workFields.getPlanDt().setPlanDd(value);
	}
	
	/**
	 * 	Update PlanDd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanDdString(char[] value)  throws CFException{
		workFields.getPlanDt().setPlanDd(value);
	}	

	/**
	 *	Returns the value of dsmFuncCd
	 *	@return dsmFuncCd
	 */
	public int getDsmFuncCd() throws CFException {
   		return dsmCallArea.getDsmCommonArea().getDsmFuncCd();
	}


	/**
	 *	Returns String value of dsmFuncCd
	 *	@return dsmFuncCd
	 */
	public char[]  getDsmFuncCdString() throws CFException {
	     return String.valueOf(dsmCallArea.getDsmCommonArea().getDsmFuncCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dsmFuncCdIsNumeric()  throws CFException{
	    return dsmCallArea.getDsmCommonArea().dsmFuncCdIsNumeric();
	}

	/**
	 * 	Update DsmFuncCd with the passed value
	 *	@param number
	 */
	public void setDsmFuncCd(int number)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmFuncCd(number);
	}
	

	public void setDsmFuncCd(long number)  throws CFException{
	    dsmCallArea.getDsmCommonArea().setDsmFuncCd(number);
	}
	
	
	/**
	 * 	Update DsmFuncCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setDsmFuncCd(char[] value)  throws CFException {
		dsmCallArea.getDsmCommonArea().setDsmFuncCd(value);
	}
	
	/**
	 * 	Update DsmFuncCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDsmFuncCdString(char[] value)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmFuncCd(value);
	}	

	/**
	 *	Returns the value of d51uKeyPolicy
	 *	@return d51uKeyPolicy
	 */
   public char[] getD51uKeyPolicy() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyPolicy();
   }

  
	/**
	*  set variable d51uKeyPolicy
	*  @param value
	**/
   public void setD51uKeyPolicy(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(value);
   } 

     /**
	 * 	Update D51uKeyPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyPolicy(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source, sourceIndex);
   	
   }
   
   public void setD51uKeyPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyPolicy with another Field
	 *	@param value
	 */
   public void setD51uKeyPolicy(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source);
   }  
   
     /**
	 * 	Update D51uKeyPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyPolicy(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRequestFields
	 *	@return d51uRequestFields
	 */   
	 public D51uRequestFields getD51uRequestFields() {
   	return vyspi51uCallArea.getD51uRequestFields();
   }

   /**
	* 	Update D51uRequestFields with the passed value
	*	@param value
	*/
   public void setD51uRequestFields(char[] value) throws CFException {
      vyspi51uCallArea.setD51uRequestFields(value);
   }   

     /**
	 * 	Update D51uRequestFields 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setD51uRequestFields(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	vyspi51uCallArea.setD51uRequestFields(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRequestFields 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRequestFields(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	vyspi51uCallArea.setD51uRequestFields(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRequestFields with another Field
	 *	@param value
	 */
   public void setD51uRequestFields(Field source) {
   	vyspi51uCallArea.setD51uRequestFields(source);
   }  
   
     /**
	 * 	Update D51uRequestFields 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setD51uRequestFields(Field source, int sourceIndex,int sourceLen) {
   	vyspi51uCallArea.setD51uRequestFields(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRequestFields 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRequestFields(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	vyspi51uCallArea.setD51uRequestFields(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getFesaEffDate() throws CFException {  
        return feSpiAltPlanRecord.getFesaKey().getFesaEffDate();
}
	/**
	 * 	Update FesaEffDate with the passed value
	 *	@param number
	 */
	public void setFesaEffDate(int number)  throws CFException{
		feSpiAltPlanRecord.getFesaKey().setFesaEffDate(number);
	}


	public void setFesaEffDate(long number)  throws CFException{
	    feSpiAltPlanRecord.getFesaKey().setFesaEffDate(number);
	}
	

	/**
	 *	Returns the value of d51uReqDosDate
	 *	@return d51uReqDosDate
	 */
   public char[] getD51uReqDosDate() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().getD51uReqDosDate();
   }

  
	/**
	*  set variable d51uReqDosDate
	*  @param value
	**/
   public void setD51uReqDosDate(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(value);
   } 

     /**
	 * 	Update D51uReqDosDate 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uReqDosDate(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source, sourceIndex);
   	
   }
   
   public void setD51uReqDosDate(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uReqDosDate 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uReqDosDate(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uReqDosDate with another Field
	 *	@param value
	 */
   public void setD51uReqDosDate(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source);
   }  
   
     /**
	 * 	Update D51uReqDosDate 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uReqDosDate(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uReqDosDate 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uReqDosDate(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02MainProg
	 *	@return w02MainProg
	 */
   public char[] getW02MainProg() throws CFException  {              
   		return w02DsplMsgArea.getW02MainProg();
   }

  
	/**
	*  set variable w02MainProg
	*  @param value
	**/
   public void setW02MainProg(char[] value) throws CFException {
      w02DsplMsgArea.setW02MainProg(value);
   } 

     /**
	 * 	Update W02MainProg 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02MainProg(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02MainProg(source, sourceIndex);
   	
   }
   
   public void setW02MainProg(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02MainProg(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02MainProg 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02MainProg(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02MainProg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02MainProg with another Field
	 *	@param value
	 */
   public void setW02MainProg(Field source) {
      w02DsplMsgArea.setW02MainProg(source);
   }  
   
     /**
	 * 	Update W02MainProg 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02MainProg(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02MainProg(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02MainProg 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02MainProg(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02MainProg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uPlanVar51
	 *	@return uPlanVar51
	 */
	public short getUPlanVar51() throws CFException {        
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUPlanVar51();
	}
	
	/**
	 * 	Update UPlanVar51 with the passed value
	 *	@param number
	 */
	public void setUPlanVar51(short number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51(number);
	}

	public void setUPlanVar51(int number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51((short)number);
	}

	public void setUPlanVar51(long number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUPlanVar51((short)number);
	}



	/**
	 *	Returns the value of dSub
	 *	@return dSub
	 */
	public int getDSub() throws CFException {        
   		return work.getDSub();
	}
	
	/**
	 * 	Update DSub with the passed value
	 *	@param number
	 */
	public void setDSub(int number)  throws CFException{
		work.setDSub(number);
	}


	public void setDSub(long number)  throws CFException{
		work.setDSub((int)number);
	}


	/**
	 *	Returns the value of d51uReturnCode
	 *	@return d51uReturnCode
	 */
	public int getD51uReturnCode() throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnCode();
	}


	/**
	 *	Returns String value of d51uReturnCode
	 *	@return d51uReturnCode
	 */
	public char[]  getD51uReturnCodeString() throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnCodeString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uReturnCodeIsNumeric()  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().d51uReturnCodeIsNumeric();
	}

	/**
	 * 	Update D51uReturnCode with the passed value
	 *	@param number
	 */
	public void setD51uReturnCode(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uReturnCode(number);
	}
	

	public void setD51uReturnCode(long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uReturnCode(number);
	}
	
	
	/**
	 * 	Update D51uReturnCode with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uReturnCode(char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uReturnCode(value);
	}
	
	/**
	 * 	Update D51uReturnCode with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uReturnCodeString(char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uReturnCode(value);
	}	

	/**
	 *	Returns the value of planMm
	 *	@return planMm
	 */
	public int getPlanMm() throws CFException {
   		return workFields.getPlanDt().getPlanMm();
	}


	/**
	 *	Returns String value of planMm
	 *	@return planMm
	 */
	public char[]  getPlanMmString() throws CFException {
	     return String.valueOf(workFields.getPlanDt().getPlanMmString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planMmIsNumeric()  throws CFException{
	    return workFields.getPlanDt().planMmIsNumeric();
	}

	/**
	 * 	Update PlanMm with the passed value
	 *	@param number
	 */
	public void setPlanMm(int number)  throws CFException{
		workFields.getPlanDt().setPlanMm(number);
	}
	

	public void setPlanMm(long number)  throws CFException{
	    workFields.getPlanDt().setPlanMm(number);
	}
	
	
	/**
	 * 	Update PlanMm with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanMm(char[] value)  throws CFException {
		workFields.getPlanDt().setPlanMm(value);
	}
	
	/**
	 * 	Update PlanMm with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanMmString(char[] value)  throws CFException{
		workFields.getPlanDt().setPlanMm(value);
	}	

	/**
	 *	Returns the value of vyspi51uCallArea
	 *	@return vyspi51uCallArea
	 */   
	 public Vyspi51uCallArea getVyspi51uCallArea() {
   	return vyspi51uCallArea;
   }


	/**
	 *	Returns the value of w02AbendingProg
	 *	@return w02AbendingProg
	 */
   public char[] getW02AbendingProg() throws CFException  {              
   		return w02DsplMsgArea.getW02AbendingProg();
   }

  
	/**
	*  set variable w02AbendingProg
	*  @param value
	**/
   public void setW02AbendingProg(char[] value) throws CFException {
      w02DsplMsgArea.setW02AbendingProg(value);
   } 

     /**
	 * 	Update W02AbendingProg 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02AbendingProg(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex);
   	
   }
   
   public void setW02AbendingProg(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02AbendingProg 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02AbendingProg(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02AbendingProg with another Field
	 *	@param value
	 */
   public void setW02AbendingProg(Field source) {
      w02DsplMsgArea.setW02AbendingProg(source);
   }  
   
     /**
	 * 	Update W02AbendingProg 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02AbendingProg(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02AbendingProg 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02AbendingProg(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsmCallArea
	 *	@return dsmCallArea
	 */   
	 public DsmCallArea getDsmCallArea() {
   	return dsmCallArea;
   }


	/**
	 *	Test condition 0 for isD51uGoodReturn()
	 *	@return  Returns true if isD51uGoodReturn() is 0
	 */
   public boolean isD51uGoodReturn() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uGoodReturn();
   }

	/**
	*  set values 0
	*/
   	public void setD51uGoodReturnTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uGoodReturnTrue();
   	}
	/**
	 *	Returns the value of w02RespCd
	 *	@return w02RespCd
	 */
	public long getW02RespCd() throws CFException {
   		return w02DsplMsgArea.getW02RespCd();
	}


	/**
	 *	Returns String value of w02RespCd
	 *	@return w02RespCd
	 */
	public char[]  getW02RespCdString() throws CFException {
	     return String.valueOf(w02DsplMsgArea.getW02RespCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean w02RespCdIsNumeric()  throws CFException{
	    return w02DsplMsgArea.w02RespCdIsNumeric();
	}

	/**
	 * 	Update W02RespCd with the passed value
	 *	@param number
	 */
	public void setW02RespCd(long number)  throws CFException{
		w02DsplMsgArea.setW02RespCd(number);
	}
	

	
	/**
	 * 	Update W02RespCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setW02RespCd(char[] value)  throws CFException {
		w02DsplMsgArea.setW02RespCd(value);
	}
	
	/**
	 * 	Update W02RespCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setW02RespCdString(char[] value)  throws CFException{
		w02DsplMsgArea.setW02RespCd(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += feSpiAltPlanRecord.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public ReadPlanAltDb2OutCtx clone() {
        ReadPlanAltDb2OutCtx cloneObj = new ReadPlanAltDb2OutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.feSpiAltPlanRecord = new FeSpiAltPlanRecord();
        cloneObj.feSpiAltPlanRecord.set(feSpiAltPlanRecord.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public ReadPlanAltDb2OutCtx getReadPlanAltDb2OutCtx() {
            return new ReadPlanAltDb2OutCtx();
    }
     public class BuildPlanAltTable2020DInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();

	/**
	 *	Returns the value of d51uRetPriDiagInd
	 *	@return d51uRetPriDiagInd
	 */
   public char[] getD51uRetPriDiagInd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetPriDiagInd();
   }

  
	/**
	*  set variable d51uRetPriDiagInd
	*  @param value
	**/
   public void setD51uRetPriDiagInd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(value);
   } 

     /**
	 * 	Update D51uRetPriDiagInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetPriDiagInd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source, sourceIndex);
   	
   }
   
   public void setD51uRetPriDiagInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetPriDiagInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPriDiagInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetPriDiagInd with another Field
	 *	@param value
	 */
   public void setD51uRetPriDiagInd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source);
   }  
   
     /**
	 * 	Update D51uRetPriDiagInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetPriDiagInd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetPriDiagInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPriDiagInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRetPlan
	 *	@return d51uRetPlan
	 */
	public int getD51uRetPlan(int index) throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetPlan();
	}


	/**
	 *	Returns String value of d51uRetPlan
	 *	@return d51uRetPlan
	 */
	public char[]  getD51uRetPlanString(int index) throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetPlanString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uRetPlanIsNumeric(int index)  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index - 1).d51uRetPlanIsNumeric();
	}

	/**
	 * 	Update D51uRetPlan with the passed value
	 *	@param number
	 */
	public void setD51uRetPlan(int index,int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPlan(number);
	}
	

	public void setD51uRetPlan(int index,long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPlan(number);
	}
	
	
	/**
	 * 	Update D51uRetPlan with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uRetPlan(int index,char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPlan(value);
	}
	
	/**
	 * 	Update D51uRetPlan with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uRetPlanString(int index,char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPlan(value);
	}	

	/**
	 *	Returns the value of dSub
	 *	@return dSub
	 */
	public int getDSub() throws CFException {        
   		return work.getDSub();
	}
	
	/**
	 * 	Update DSub with the passed value
	 *	@param number
	 */
	public void setDSub(int number)  throws CFException{
		work.setDSub(number);
	}


	public void setDSub(long number)  throws CFException{
		work.setDSub((int)number);
	}


	/**
	 *	Returns the value of polNo
	 *	@return polNo
	 */
   public char[] getPolNo() throws CFException  {              
   		return workFields.getPolNo();
   }

  
	/**
	*  set variable polNo
	*  @param value
	**/
   public void setPolNo(char[] value) throws CFException {
      workFields.setPolNo(value);
   } 

     /**
	 * 	Update PolNo 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPolNo(char[] source, int sourceIndex) throws CFException {
      workFields.setPolNo(source, sourceIndex);
   	
   }
   
   public void setPolNo(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setPolNo(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PolNo 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPolNo(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setPolNo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PolNo with another Field
	 *	@param value
	 */
   public void setPolNo(Field source) {
      workFields.setPolNo(source);
   }  
   
     /**
	 * 	Update PolNo 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPolNo(Field source, int sourceIndex,int sourceLen) {
      workFields.setPolNo(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PolNo 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPolNo(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setPolNo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrOfPlanVar
	 *	@return nbrOfPlanVar
	 */
	public int getNbrOfPlanVar() throws CFException {        
   		return workFields.getNbrOfPlanVar();
	}
	
	/**
	 * 	Update NbrOfPlanVar with the passed value
	 *	@param number
	 */
	public void setNbrOfPlanVar(int number)  throws CFException{
		workFields.setNbrOfPlanVar(number);
	}


	public void setNbrOfPlanVar(long number)  throws CFException{
		workFields.setNbrOfPlanVar((int)number);
	}


	/**
	 *	Returns the value of d51uRetFeSpi
	 *	@return d51uRetFeSpi
	 */
   public char[] getD51uRetFeSpi(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetFeSpi();
   }

  
	/**
	*  set variable d51uRetFeSpi
	*  @param value
	**/
   public void setD51uRetFeSpi(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(value);
   } 

     /**
	 * 	Update D51uRetFeSpi 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetFeSpi(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source, sourceIndex);
   	
   }
   
   public void setD51uRetFeSpi(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetFeSpi 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetFeSpi(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetFeSpi with another Field
	 *	@param value
	 */
   public void setD51uRetFeSpi(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source);
   }  
   
     /**
	 * 	Update D51uRetFeSpi 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetFeSpi(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetFeSpi 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetFeSpi(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRetPosTierCd
	 *	@return d51uRetPosTierCd
	 */
   public char[] getD51uRetPosTierCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetPosTierCd();
   }

  
	/**
	*  set variable d51uRetPosTierCd
	*  @param value
	**/
   public void setD51uRetPosTierCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(value);
   } 

     /**
	 * 	Update D51uRetPosTierCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetPosTierCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source, sourceIndex);
   	
   }
   
   public void setD51uRetPosTierCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetPosTierCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPosTierCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetPosTierCd with another Field
	 *	@param value
	 */
   public void setD51uRetPosTierCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source);
   }  
   
     /**
	 * 	Update D51uRetPosTierCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetPosTierCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetPosTierCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPosTierCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of planVarPrev
	 *	@return planVarPrev
	 */
	public short getPlanVarPrev() throws CFException {        
   		return workFields.getPlanVarPrev();
	}
	
	/**
	 * 	Update PlanVarPrev with the passed value
	 *	@param number
	 */
	public void setPlanVarPrev(short number)  throws CFException{
		workFields.setPlanVarPrev(number);
	}

	public void setPlanVarPrev(int number)  throws CFException{
		workFields.setPlanVarPrev((short)number);
	}

	public void setPlanVarPrev(long number)  throws CFException{
		workFields.setPlanVarPrev((short)number);
	}



	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}


	/**
	 *	Returns the value of d51uRetDiagElgInd
	 *	@return d51uRetDiagElgInd
	 */
   public char[] getD51uRetDiagElgInd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetDiagElgInd();
   }

  
	/**
	*  set variable d51uRetDiagElgInd
	*  @param value
	**/
   public void setD51uRetDiagElgInd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(value);
   } 

     /**
	 * 	Update D51uRetDiagElgInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetDiagElgInd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source, sourceIndex);
   	
   }
   
   public void setD51uRetDiagElgInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetDiagElgInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDiagElgInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetDiagElgInd with another Field
	 *	@param value
	 */
   public void setD51uRetDiagElgInd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source);
   }  
   
     /**
	 * 	Update D51uRetDiagElgInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetDiagElgInd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetDiagElgInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDiagElgInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRetPolicy
	 *	@return d51uRetPolicy
	 */
   public char[] getD51uRetPolicy(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetPolicy();
   }

  
	/**
	*  set variable d51uRetPolicy
	*  @param value
	**/
   public void setD51uRetPolicy(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(value);
   } 

     /**
	 * 	Update D51uRetPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetPolicy(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source, sourceIndex);
   	
   }
   
   public void setD51uRetPolicy(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPolicy(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetPolicy with another Field
	 *	@param value
	 */
   public void setD51uRetPolicy(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source);
   }  
   
     /**
	 * 	Update D51uRetPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetPolicy(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPolicy(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public BuildPlanAltTable2020DOutCtx getBuildPlanAltTable2020DOutCtx() {
            return new BuildPlanAltTable2020DOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public BuildPlanAltTable2020DInCtx clone() {
        BuildPlanAltTable2020DInCtx cloneObj = new BuildPlanAltTable2020DInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public BuildPlanAltTable2020DInCtx getBuildPlanAltTable2020DInCtx() {
            return new BuildPlanAltTable2020DInCtx();
    }
     public class BuildPlanAltTable2020DOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();

	/**
	 *	Returns the value of fesaPolicy01
	 *	@return fesaPolicy01
	 */
   public char[] getFesaPolicy01(int index) throws CFException  {              
   		return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaPolicy01();
   }

  
	/**
	*  set variable fesaPolicy01
	*  @param value
	**/
   public void setFesaPolicy01(int index,char[] value) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(value);
   } 

     /**
	 * 	Update FesaPolicy01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaPolicy01(int index,char[] source, int sourceIndex) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex);
   	
   }
   
   public void setFesaPolicy01(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaPolicy01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy01(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaPolicy01 with another Field
	 *	@param value
	 */
   public void setFesaPolicy01(int index,Field source) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source);
   }  
   
     /**
	 * 	Update FesaPolicy01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaPolicy01(int index,Field source, int sourceIndex,int sourceLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaPolicy01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaPolicy01(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPolicy01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesaSpiDiagElgInd
	 *	@return fesaSpiDiagElgInd
	 */
   public char[] getFesaSpiDiagElgInd(int index) throws CFException  {              
   		return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiDiagElgInd();
   }

  
	/**
	*  set variable fesaSpiDiagElgInd
	*  @param value
	**/
   public void setFesaSpiDiagElgInd(int index,char[] value) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(value);
   } 

     /**
	 * 	Update FesaSpiDiagElgInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,char[] source, int sourceIndex) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex);
   	
   }
   
   public void setFesaSpiDiagElgInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaSpiDiagElgInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaSpiDiagElgInd with another Field
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,Field source) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source);
   }  
   
     /**
	 * 	Update FesaSpiDiagElgInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,Field source, int sourceIndex,int sourceLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaSpiDiagElgInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesaPosTierCd
	 *	@return fesaPosTierCd
	 */
   public char[] getFesaPosTierCd(int index) throws CFException  {              
   		return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaPosTierCd();
   }

  
	/**
	*  set variable fesaPosTierCd
	*  @param value
	**/
   public void setFesaPosTierCd(int index,char[] value) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(value);
   } 

     /**
	 * 	Update FesaPosTierCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,char[] source, int sourceIndex) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex);
   	
   }
   
   public void setFesaPosTierCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaPosTierCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaPosTierCd with another Field
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,Field source) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source);
   }  
   
     /**
	 * 	Update FesaPosTierCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,Field source, int sourceIndex,int sourceLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaPosTierCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesaSpiPriDiagInd
	 *	@return fesaSpiPriDiagInd
	 */
   public char[] getFesaSpiPriDiagInd(int index) throws CFException  {              
   		return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiPriDiagInd();
   }

  
	/**
	*  set variable fesaSpiPriDiagInd
	*  @param value
	**/
   public void setFesaSpiPriDiagInd(int index,char[] value) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(value);
   } 

     /**
	 * 	Update FesaSpiPriDiagInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaSpiPriDiagInd(int index,char[] source, int sourceIndex) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source, sourceIndex);
   	
   }
   
   public void setFesaSpiPriDiagInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaSpiPriDiagInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaSpiPriDiagInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaSpiPriDiagInd with another Field
	 *	@param value
	 */
   public void setFesaSpiPriDiagInd(int index,Field source) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source);
   }  
   
     /**
	 * 	Update FesaSpiPriDiagInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaSpiPriDiagInd(int index,Field source, int sourceIndex,int sourceLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaSpiPriDiagInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaSpiPriDiagInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRetFeSpi
	 *	@return d51uRetFeSpi
	 */
   public char[] getD51uRetFeSpi(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetFeSpi();
   }

  
	/**
	*  set variable d51uRetFeSpi
	*  @param value
	**/
   public void setD51uRetFeSpi(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(value);
   } 

     /**
	 * 	Update D51uRetFeSpi 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetFeSpi(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source, sourceIndex);
   	
   }
   
   public void setD51uRetFeSpi(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetFeSpi 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetFeSpi(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetFeSpi with another Field
	 *	@param value
	 */
   public void setD51uRetFeSpi(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source);
   }  
   
     /**
	 * 	Update D51uRetFeSpi 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetFeSpi(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetFeSpi 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetFeSpi(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getFesaPlanVar01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaPlanVar01();
}
	/**
	 * 	Update FesaPlanVar01 with the passed value
	 *	@param number
	 */
	public void setFesaPlanVar01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPlanVar01(number);
	}


	public void setFesaPlanVar01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPlanVar01(number);
	}
	

	/**
	 *	Returns the value of d51uRetPosTierCd
	 *	@return d51uRetPosTierCd
	 */
   public char[] getD51uRetPosTierCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetPosTierCd();
   }

  
	/**
	*  set variable d51uRetPosTierCd
	*  @param value
	**/
   public void setD51uRetPosTierCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(value);
   } 

     /**
	 * 	Update D51uRetPosTierCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetPosTierCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source, sourceIndex);
   	
   }
   
   public void setD51uRetPosTierCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetPosTierCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPosTierCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetPosTierCd with another Field
	 *	@param value
	 */
   public void setD51uRetPosTierCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source);
   }  
   
     /**
	 * 	Update D51uRetPosTierCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetPosTierCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetPosTierCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPosTierCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRetDiagElgInd
	 *	@return d51uRetDiagElgInd
	 */
   public char[] getD51uRetDiagElgInd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetDiagElgInd();
   }

  
	/**
	*  set variable d51uRetDiagElgInd
	*  @param value
	**/
   public void setD51uRetDiagElgInd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(value);
   } 

     /**
	 * 	Update D51uRetDiagElgInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetDiagElgInd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source, sourceIndex);
   	
   }
   
   public void setD51uRetDiagElgInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetDiagElgInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDiagElgInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetDiagElgInd with another Field
	 *	@param value
	 */
   public void setD51uRetDiagElgInd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source);
   }  
   
     /**
	 * 	Update D51uRetDiagElgInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetDiagElgInd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetDiagElgInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDiagElgInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRetPolicy
	 *	@return d51uRetPolicy
	 */
   public char[] getD51uRetPolicy(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetPolicy();
   }

  
	/**
	*  set variable d51uRetPolicy
	*  @param value
	**/
   public void setD51uRetPolicy(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(value);
   } 

     /**
	 * 	Update D51uRetPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetPolicy(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source, sourceIndex);
   	
   }
   
   public void setD51uRetPolicy(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPolicy(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetPolicy with another Field
	 *	@param value
	 */
   public void setD51uRetPolicy(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source);
   }  
   
     /**
	 * 	Update D51uRetPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetPolicy(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPolicy(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRetPriDiagInd
	 *	@return d51uRetPriDiagInd
	 */
   public char[] getD51uRetPriDiagInd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetPriDiagInd();
   }

  
	/**
	*  set variable d51uRetPriDiagInd
	*  @param value
	**/
   public void setD51uRetPriDiagInd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(value);
   } 

     /**
	 * 	Update D51uRetPriDiagInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetPriDiagInd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source, sourceIndex);
   	
   }
   
   public void setD51uRetPriDiagInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetPriDiagInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPriDiagInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetPriDiagInd with another Field
	 *	@param value
	 */
   public void setD51uRetPriDiagInd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source);
   }  
   
     /**
	 * 	Update D51uRetPriDiagInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetPriDiagInd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetPriDiagInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPriDiagInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRetPlan
	 *	@return d51uRetPlan
	 */
	public int getD51uRetPlan(int index) throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetPlan();
	}


	/**
	 *	Returns String value of d51uRetPlan
	 *	@return d51uRetPlan
	 */
	public char[]  getD51uRetPlanString(int index) throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetPlanString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uRetPlanIsNumeric(int index)  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index - 1).d51uRetPlanIsNumeric();
	}

	/**
	 * 	Update D51uRetPlan with the passed value
	 *	@param number
	 */
	public void setD51uRetPlan(int index,int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPlan(number);
	}
	

	public void setD51uRetPlan(int index,long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPlan(number);
	}
	
	
	/**
	 * 	Update D51uRetPlan with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uRetPlan(int index,char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPlan(value);
	}
	
	/**
	 * 	Update D51uRetPlan with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uRetPlanString(int index,char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPlan(value);
	}	

	/**
	 *	Returns the value of dSub
	 *	@return dSub
	 */
	public int getDSub() throws CFException {        
   		return work.getDSub();
	}
	
	/**
	 * 	Update DSub with the passed value
	 *	@param number
	 */
	public void setDSub(int number)  throws CFException{
		work.setDSub(number);
	}


	public void setDSub(long number)  throws CFException{
		work.setDSub((int)number);
	}


	/**
	 *	Returns the value of planVarFoundSw
	 *	@return planVarFoundSw
	 */
   public char[] getPlanVarFoundSw() throws CFException  {              
   		return work.getPlanVarFoundSw();
   }

  
	/**
	*  set variable planVarFoundSw
	*  @param value
	**/
   public void setPlanVarFoundSw(char[] value) throws CFException {
      work.setPlanVarFoundSw(value);
   } 

	/**
	 *	Returns the value of nbrOfPlanVar
	 *	@return nbrOfPlanVar
	 */
	public int getNbrOfPlanVar() throws CFException {        
   		return workFields.getNbrOfPlanVar();
	}
	
	/**
	 * 	Update NbrOfPlanVar with the passed value
	 *	@param number
	 */
	public void setNbrOfPlanVar(int number)  throws CFException{
		workFields.setNbrOfPlanVar(number);
	}


	public void setNbrOfPlanVar(long number)  throws CFException{
		workFields.setNbrOfPlanVar((int)number);
	}


public int getFesaSpiNbr01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiNbr01();
}
	/**
	 * 	Update FesaSpiNbr01 with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}


	public void setFesaSpiNbr01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}
	

	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public BuildPlanAltTable2020DOutCtx clone() {
        BuildPlanAltTable2020DOutCtx cloneObj = new BuildPlanAltTable2020DOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public BuildPlanAltTable2020DOutCtx getBuildPlanAltTable2020DOutCtx() {
            return new BuildPlanAltTable2020DOutCtx();
    }
     public class ReadSpiRulesDb2InCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = O529351uCtx.this.getDsmCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of uCauseCd51
	 *	@return uCauseCd51
	 */
   public char[] getUCauseCd51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUCauseCd51();
   }

  
	/**
	*  set variable uCauseCd51
	*  @param value
	**/
   public void setUCauseCd51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(value);
   } 

     /**
	 * 	Update UCauseCd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUCauseCd51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex);
   	
   }
   
   public void setUCauseCd51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UCauseCd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUCauseCd51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UCauseCd51 with another Field
	 *	@param value
	 */
   public void setUCauseCd51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source);
   }  
   
     /**
	 * 	Update UCauseCd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUCauseCd51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UCauseCd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUCauseCd51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 1 for isD51uNotFound()
	 *	@return  Returns true if isD51uNotFound() is 1
	 */
   public boolean isD51uNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uNotFound();
   }

	/**
	*  set values 1
	*/
   	public void setD51uNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uNotFoundTrue();
   	}
	/**
	 *	Returns the value of fesaSpiPriDiagInd
	 *	@return fesaSpiPriDiagInd
	 */
   public char[] getFesaSpiPriDiagInd(int index) throws CFException  {              
   		return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiPriDiagInd();
   }

  
	/**
	*  set variable fesaSpiPriDiagInd
	*  @param value
	**/
   public void setFesaSpiPriDiagInd(int index,char[] value) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(value);
   } 

     /**
	 * 	Update FesaSpiPriDiagInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaSpiPriDiagInd(int index,char[] source, int sourceIndex) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source, sourceIndex);
   	
   }
   
   public void setFesaSpiPriDiagInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaSpiPriDiagInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaSpiPriDiagInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaSpiPriDiagInd with another Field
	 *	@param value
	 */
   public void setFesaSpiPriDiagInd(int index,Field source) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source);
   }  
   
     /**
	 * 	Update FesaSpiPriDiagInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaSpiPriDiagInd(int index,Field source, int sourceIndex,int sourceLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaSpiPriDiagInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaSpiPriDiagInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiPriDiagInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d529351uDb2Dsm
	 *	@return d529351uDb2Dsm
	 */
   public char[] getD529351uDb2Dsm() throws CFException  {              
   		return work.getD529351uDb2Dsm();
   }

  
	/**
	*  set variable d529351uDb2Dsm
	*  @param value
	**/
   public void setD529351uDb2Dsm(char[] value) throws CFException {
      work.setD529351uDb2Dsm(value);
   } 

	/**
	 *	Returns the value of d51uInvReason
	 *	@return d51uInvReason
	 */
	public int getD51uInvReason() throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uInvReason();
	}


	/**
	 *	Returns String value of d51uInvReason
	 *	@return d51uInvReason
	 */
	public char[]  getD51uInvReasonString() throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uInvReasonString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uInvReasonIsNumeric()  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().d51uInvReasonIsNumeric();
	}

	/**
	 * 	Update D51uInvReason with the passed value
	 *	@param number
	 */
	public void setD51uInvReason(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(number);
	}
	

	public void setD51uInvReason(long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(number);
	}
	
	
	/**
	 * 	Update D51uInvReason with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uInvReason(char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(value);
	}
	
	/**
	 * 	Update D51uInvReason with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uInvReasonString(char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(value);
	}	

	/**
	 *	Returns the value of uDiagnosisCode51
	 *	@return uDiagnosisCode51
	 */
   public char[] getUDiagnosisCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUDiagnosisCode51(index);
   }

  
	/**
	*  set variable uDiagnosisCode51
	*  @param value
	**/
   public void setUDiagnosisCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUDiagnosisCode51((index),value);
   } 

	/**
	 *	Returns the value of uIcdVerNbr51
	 *	@return uIcdVerNbr51
	 */
   public char[] getUIcdVerNbr51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUIcdVerNbr51();
   }

  
	/**
	*  set variable uIcdVerNbr51
	*  @param value
	**/
   public void setUIcdVerNbr51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(value);
   } 

     /**
	 * 	Update UIcdVerNbr51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUIcdVerNbr51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex);
   	
   }
   
   public void setUIcdVerNbr51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UIcdVerNbr51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUIcdVerNbr51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UIcdVerNbr51 with another Field
	 *	@param value
	 */
   public void setUIcdVerNbr51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source);
   }  
   
     /**
	 * 	Update UIcdVerNbr51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUIcdVerNbr51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UIcdVerNbr51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUIcdVerNbr51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of vyspi51uCallArea
	 *	@return vyspi51uCallArea
	 */   
	 public Vyspi51uCallArea getVyspi51uCallArea() {
   	return vyspi51uCallArea;
   }


	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Returns the value of uProvType51
	 *	@return uProvType51
	 */
   public char[] getUProvType51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUProvType51();
   }

  
	/**
	*  set variable uProvType51
	*  @param value
	**/
   public void setUProvType51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(value);
   } 

     /**
	 * 	Update UProvType51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUProvType51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex);
   	
   }
   
   public void setUProvType51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UProvType51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUProvType51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UProvType51 with another Field
	 *	@param value
	 */
   public void setUProvType51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source);
   }  
   
     /**
	 * 	Update UProvType51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUProvType51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UProvType51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUProvType51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsmCallArea
	 *	@return dsmCallArea
	 */   
	 public DsmCallArea getDsmCallArea() {
   	return dsmCallArea;
   }


public int getFesaSpiNbr01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiNbr01();
}
	/**
	 * 	Update FesaSpiNbr01 with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}


	public void setFesaSpiNbr01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}
	

	/**
	 *	Returns the value of uLineServiceCode51
	 *	@return uLineServiceCode51
	 */
   public char[] getULineServiceCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineServiceCode51();
   }

  
	/**
	*  set variable uLineServiceCode51
	*  @param value
	**/
   public void setULineServiceCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(value);
   } 

     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex);
   	
   }
   
   public void setULineServiceCode51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULineServiceCode51 with another Field
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source);
   }  
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uCpeDescCd51
	 *	@return uCpeDescCd51
	 */
   public char[] getUCpeDescCd51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUCpeDescCd51();
   }

  
	/**
	*  set variable uCpeDescCd51
	*  @param value
	**/
   public void setUCpeDescCd51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(value);
   } 

     /**
	 * 	Update UCpeDescCd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUCpeDescCd51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source, sourceIndex);
   	
   }
   
   public void setUCpeDescCd51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UCpeDescCd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUCpeDescCd51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UCpeDescCd51 with another Field
	 *	@param value
	 */
   public void setUCpeDescCd51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source);
   }  
   
     /**
	 * 	Update UCpeDescCd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUCpeDescCd51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UCpeDescCd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUCpeDescCd51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 0 for isD51uGoodReturn()
	 *	@return  Returns true if isD51uGoodReturn() is 0
	 */
   public boolean isD51uGoodReturn() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uGoodReturn();
   }

	/**
	*  set values 0
	*/
   	public void setD51uGoodReturnTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uGoodReturnTrue();
   	}
	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}


	/**
	 *	Returns the value of uLinePos51
	 *	@return uLinePos51
	 */
   public char[] getULinePos51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULinePos51();
   }

  
	/**
	*  set variable uLinePos51
	*  @param value
	**/
   public void setULinePos51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(value);
   } 

     /**
	 * 	Update ULinePos51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULinePos51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex);
   	
   }
   
   public void setULinePos51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULinePos51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULinePos51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULinePos51 with another Field
	 *	@param value
	 */
   public void setULinePos51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source);
   }  
   
     /**
	 * 	Update ULinePos51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULinePos51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULinePos51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULinePos51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public ReadSpiRulesDb2OutCtx getReadSpiRulesDb2OutCtx() {
            return new ReadSpiRulesDb2OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public ReadSpiRulesDb2InCtx clone() {
        ReadSpiRulesDb2InCtx cloneObj = new ReadSpiRulesDb2InCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public ReadSpiRulesDb2InCtx getReadSpiRulesDb2InCtx() {
            return new ReadSpiRulesDb2InCtx();
    }
     public class ReadSpiRulesDb2OutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = O529351uCtx.this.getDsmCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of d51uTestCaus
	 *	@return d51uTestCaus
	 */
   public char[] getD51uTestCaus() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestCaus();
   }

  
	/**
	*  set variable d51uTestCaus
	*  @param value
	**/
   public void setD51uTestCaus(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(value);
   } 

     /**
	 * 	Update D51uTestCaus 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestCaus(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source, sourceIndex);
   	
   }
   
   public void setD51uTestCaus(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestCaus 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestCaus(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestCaus with another Field
	 *	@param value
	 */
   public void setD51uTestCaus(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source);
   }  
   
     /**
	 * 	Update D51uTestCaus 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestCaus(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestCaus 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestCaus(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag01
	 *	@return d51uTestDiag01
	 */
   public char[] getD51uTestDiag01() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag01();
   }

  
	/**
	*  set variable d51uTestDiag01
	*  @param value
	**/
   public void setD51uTestDiag01(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(value);
   } 

     /**
	 * 	Update D51uTestDiag01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag01(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag01 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag01(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source);
   }  
   
     /**
	 * 	Update D51uTestDiag01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag01(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestProvTyp
	 *	@return d51uTestProvTyp
	 */
   public char[] getD51uTestProvTyp() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestProvTyp();
   }

  
	/**
	*  set variable d51uTestProvTyp
	*  @param value
	**/
   public void setD51uTestProvTyp(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(value);
   } 

     /**
	 * 	Update D51uTestProvTyp 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestProvTyp(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source, sourceIndex);
   	
   }
   
   public void setD51uTestProvTyp(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestProvTyp 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestProvTyp(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestProvTyp with another Field
	 *	@param value
	 */
   public void setD51uTestProvTyp(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source);
   }  
   
     /**
	 * 	Update D51uTestProvTyp 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestProvTyp(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestProvTyp 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestProvTyp(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uCauseCd51
	 *	@return uCauseCd51
	 */
   public char[] getUCauseCd51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUCauseCd51();
   }

  
	/**
	*  set variable uCauseCd51
	*  @param value
	**/
   public void setUCauseCd51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(value);
   } 

     /**
	 * 	Update UCauseCd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUCauseCd51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex);
   	
   }
   
   public void setUCauseCd51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UCauseCd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUCauseCd51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UCauseCd51 with another Field
	 *	@param value
	 */
   public void setUCauseCd51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source);
   }  
   
     /**
	 * 	Update UCauseCd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUCauseCd51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UCauseCd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUCauseCd51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag03
	 *	@return d51uTestDiag03
	 */
   public char[] getD51uTestDiag03() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag03();
   }

  
	/**
	*  set variable d51uTestDiag03
	*  @param value
	**/
   public void setD51uTestDiag03(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(value);
   } 

     /**
	 * 	Update D51uTestDiag03 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag03(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag03(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag03 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag03(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag03 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag03(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source);
   }  
   
     /**
	 * 	Update D51uTestDiag03 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag03(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag03 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag03(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag05
	 *	@return d51uTestDiag05
	 */
   public char[] getD51uTestDiag05() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag05();
   }

  
	/**
	*  set variable d51uTestDiag05
	*  @param value
	**/
   public void setD51uTestDiag05(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(value);
   } 

     /**
	 * 	Update D51uTestDiag05 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag05(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag05(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag05 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag05(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag05 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag05(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source);
   }  
   
     /**
	 * 	Update D51uTestDiag05 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag05(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag05 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag05(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag23
	 *	@return d51uTestDiag23
	 */
   public char[] getD51uTestDiag23() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag23();
   }

  
	/**
	*  set variable d51uTestDiag23
	*  @param value
	**/
   public void setD51uTestDiag23(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(value);
   } 

     /**
	 * 	Update D51uTestDiag23 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag23(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag23(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag23 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag23(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag23 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag23(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source);
   }  
   
     /**
	 * 	Update D51uTestDiag23 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag23(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag23 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag23(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag02
	 *	@return d51uTestDiag02
	 */
   public char[] getD51uTestDiag02() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag02();
   }

  
	/**
	*  set variable d51uTestDiag02
	*  @param value
	**/
   public void setD51uTestDiag02(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(value);
   } 

     /**
	 * 	Update D51uTestDiag02 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag02(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag02(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag02 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag02(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag02 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag02(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source);
   }  
   
     /**
	 * 	Update D51uTestDiag02 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag02(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag02 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag02(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag24
	 *	@return d51uTestDiag24
	 */
   public char[] getD51uTestDiag24() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag24();
   }

  
	/**
	*  set variable d51uTestDiag24
	*  @param value
	**/
   public void setD51uTestDiag24(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(value);
   } 

     /**
	 * 	Update D51uTestDiag24 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag24(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag24(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag24 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag24(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag24 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag24(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source);
   }  
   
     /**
	 * 	Update D51uTestDiag24 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag24(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag24 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag24(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uReqCallingProgram
	 *	@return d51uReqCallingProgram
	 */
   public char[] getD51uReqCallingProgram() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uReqCallingProgram();
   }

  
	/**
	*  set variable d51uReqCallingProgram
	*  @param value
	**/
   public void setD51uReqCallingProgram(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().setD51uReqCallingProgram(value);
   } 

     /**
	 * 	Update D51uReqCallingProgram 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uReqCallingProgram(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().setD51uReqCallingProgram(source, sourceIndex);
   	
   }
   
   public void setD51uReqCallingProgram(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().setD51uReqCallingProgram(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uReqCallingProgram 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uReqCallingProgram(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().setD51uReqCallingProgram(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uReqCallingProgram with another Field
	 *	@param value
	 */
   public void setD51uReqCallingProgram(Field source) {
      vyspi51uCallArea.getD51uRequestFields().setD51uReqCallingProgram(source);
   }  
   
     /**
	 * 	Update D51uReqCallingProgram 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uReqCallingProgram(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().setD51uReqCallingProgram(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uReqCallingProgram 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uReqCallingProgram(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().setD51uReqCallingProgram(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "I" for isM51uIllogicalCond()
	 *	@return  Returns true if isM51uIllogicalCond() is "I"
	 */
   public boolean isM51uIllogicalCond() throws CFException {
      return dfhcommarea.getLinkAreaM51u().getM51uFlags().isM51uIllogicalCond();
   }

	/**
	*  set values "I"
	*/
   	public void setM51uIllogicalCondTrue()  throws CFException{  			
    	dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondTrue();
   	}
	/**
	 *	Returns the value of d51uTestDiag10
	 *	@return d51uTestDiag10
	 */
   public char[] getD51uTestDiag10() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag10();
   }

  
	/**
	*  set variable d51uTestDiag10
	*  @param value
	**/
   public void setD51uTestDiag10(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(value);
   } 

     /**
	 * 	Update D51uTestDiag10 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag10(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag10(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag10 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag10(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag10 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag10(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source);
   }  
   
     /**
	 * 	Update D51uTestDiag10 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag10(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag10 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag10(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag04
	 *	@return d51uTestDiag04
	 */
   public char[] getD51uTestDiag04() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag04();
   }

  
	/**
	*  set variable d51uTestDiag04
	*  @param value
	**/
   public void setD51uTestDiag04(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(value);
   } 

     /**
	 * 	Update D51uTestDiag04 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag04(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag04(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag04 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag04(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag04 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag04(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source);
   }  
   
     /**
	 * 	Update D51uTestDiag04 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag04(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag04 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag04(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uKeyFeSpi
	 *	@return d51uKeyFeSpi
	 */
   public char[] getD51uKeyFeSpi() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyFeSpi();
   }

  
	/**
	*  set variable d51uKeyFeSpi
	*  @param value
	**/
   public void setD51uKeyFeSpi(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(value);
   } 

     /**
	 * 	Update D51uKeyFeSpi 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyFeSpi(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex);
   	
   }
   
   public void setD51uKeyFeSpi(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyFeSpi(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyFeSpi with another Field
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source);
   }  
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of primDiagFound
	 *	@return primDiagFound
	 */
   public char[] getPrimDiagFound() throws CFException  {              
   		return work.getPrimDiagFound();
   }

  
	/**
	*  set variable primDiagFound
	*  @param value
	**/
   public void setPrimDiagFound(char[] value) throws CFException {
      work.setPrimDiagFound(value);
   } 

	/**
	 *	Returns the value of d51uRequestFields
	 *	@return d51uRequestFields
	 */   
	 public D51uRequestFields getD51uRequestFields() {
   	return vyspi51uCallArea.getD51uRequestFields();
   }

   /**
	* 	Update D51uRequestFields with the passed value
	*	@param value
	*/
   public void setD51uRequestFields(char[] value) throws CFException {
      vyspi51uCallArea.setD51uRequestFields(value);
   }   

     /**
	 * 	Update D51uRequestFields 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setD51uRequestFields(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	vyspi51uCallArea.setD51uRequestFields(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRequestFields 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRequestFields(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	vyspi51uCallArea.setD51uRequestFields(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRequestFields with another Field
	 *	@param value
	 */
   public void setD51uRequestFields(Field source) {
   	vyspi51uCallArea.setD51uRequestFields(source);
   }  
   
     /**
	 * 	Update D51uRequestFields 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setD51uRequestFields(Field source, int sourceIndex,int sourceLen) {
   	vyspi51uCallArea.setD51uRequestFields(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRequestFields 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRequestFields(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	vyspi51uCallArea.setD51uRequestFields(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02MainProg
	 *	@return w02MainProg
	 */
   public char[] getW02MainProg() throws CFException  {              
   		return w02DsplMsgArea.getW02MainProg();
   }

  
	/**
	*  set variable w02MainProg
	*  @param value
	**/
   public void setW02MainProg(char[] value) throws CFException {
      w02DsplMsgArea.setW02MainProg(value);
   } 

     /**
	 * 	Update W02MainProg 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02MainProg(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02MainProg(source, sourceIndex);
   	
   }
   
   public void setW02MainProg(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02MainProg(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02MainProg 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02MainProg(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02MainProg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02MainProg with another Field
	 *	@param value
	 */
   public void setW02MainProg(Field source) {
      w02DsplMsgArea.setW02MainProg(source);
   }  
   
     /**
	 * 	Update W02MainProg 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02MainProg(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02MainProg(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02MainProg 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02MainProg(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02MainProg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag09
	 *	@return d51uTestDiag09
	 */
   public char[] getD51uTestDiag09() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag09();
   }

  
	/**
	*  set variable d51uTestDiag09
	*  @param value
	**/
   public void setD51uTestDiag09(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(value);
   } 

     /**
	 * 	Update D51uTestDiag09 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag09(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag09(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag09 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag09(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag09 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag09(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source);
   }  
   
     /**
	 * 	Update D51uTestDiag09 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag09(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag09 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag09(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of vyspi51uCallArea
	 *	@return vyspi51uCallArea
	 */   
	 public Vyspi51uCallArea getVyspi51uCallArea() {
   	return vyspi51uCallArea;
   }


	/**
	 *	Returns the value of w02AbendingProg
	 *	@return w02AbendingProg
	 */
   public char[] getW02AbendingProg() throws CFException  {              
   		return w02DsplMsgArea.getW02AbendingProg();
   }

  
	/**
	*  set variable w02AbendingProg
	*  @param value
	**/
   public void setW02AbendingProg(char[] value) throws CFException {
      w02DsplMsgArea.setW02AbendingProg(value);
   } 

     /**
	 * 	Update W02AbendingProg 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02AbendingProg(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex);
   	
   }
   
   public void setW02AbendingProg(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02AbendingProg 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02AbendingProg(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02AbendingProg with another Field
	 *	@param value
	 */
   public void setW02AbendingProg(Field source) {
      w02DsplMsgArea.setW02AbendingProg(source);
   }  
   
     /**
	 * 	Update W02AbendingProg 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02AbendingProg(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02AbendingProg 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02AbendingProg(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag16
	 *	@return d51uTestDiag16
	 */
   public char[] getD51uTestDiag16() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag16();
   }

  
	/**
	*  set variable d51uTestDiag16
	*  @param value
	**/
   public void setD51uTestDiag16(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(value);
   } 

     /**
	 * 	Update D51uTestDiag16 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag16(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag16(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag16 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag16(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag16 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag16(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source);
   }  
   
     /**
	 * 	Update D51uTestDiag16 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag16(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag16 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag16(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestCpeDescCd
	 *	@return d51uTestCpeDescCd
	 */
   public char[] getD51uTestCpeDescCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestCpeDescCd();
   }

  
	/**
	*  set variable d51uTestCpeDescCd
	*  @param value
	**/
   public void setD51uTestCpeDescCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(value);
   } 

     /**
	 * 	Update D51uTestCpeDescCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestCpeDescCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source, sourceIndex);
   	
   }
   
   public void setD51uTestCpeDescCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestCpeDescCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestCpeDescCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestCpeDescCd with another Field
	 *	@param value
	 */
   public void setD51uTestCpeDescCd(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source);
   }  
   
     /**
	 * 	Update D51uTestCpeDescCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestCpeDescCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestCpeDescCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestCpeDescCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uProvType51
	 *	@return uProvType51
	 */
   public char[] getUProvType51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUProvType51();
   }

  
	/**
	*  set variable uProvType51
	*  @param value
	**/
   public void setUProvType51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(value);
   } 

     /**
	 * 	Update UProvType51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUProvType51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex);
   	
   }
   
   public void setUProvType51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UProvType51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUProvType51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UProvType51 with another Field
	 *	@param value
	 */
   public void setUProvType51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source);
   }  
   
     /**
	 * 	Update UProvType51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUProvType51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UProvType51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUProvType51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag22
	 *	@return d51uTestDiag22
	 */
   public char[] getD51uTestDiag22() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag22();
   }

  
	/**
	*  set variable d51uTestDiag22
	*  @param value
	**/
   public void setD51uTestDiag22(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(value);
   } 

     /**
	 * 	Update D51uTestDiag22 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag22(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag22(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag22 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag22(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag22 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag22(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source);
   }  
   
     /**
	 * 	Update D51uTestDiag22 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag22(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag22 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag22(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestPos
	 *	@return d51uTestPos
	 */
   public char[] getD51uTestPos() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestPos();
   }

  
	/**
	*  set variable d51uTestPos
	*  @param value
	**/
   public void setD51uTestPos(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(value);
   } 

     /**
	 * 	Update D51uTestPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestPos(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source, sourceIndex);
   	
   }
   
   public void setD51uTestPos(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestPos(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestPos with another Field
	 *	@param value
	 */
   public void setD51uTestPos(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source);
   }  
   
     /**
	 * 	Update D51uTestPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestPos(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestPos(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uLinePos51
	 *	@return uLinePos51
	 */
   public char[] getULinePos51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULinePos51();
   }

  
	/**
	*  set variable uLinePos51
	*  @param value
	**/
   public void setULinePos51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(value);
   } 

     /**
	 * 	Update ULinePos51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULinePos51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex);
   	
   }
   
   public void setULinePos51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULinePos51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULinePos51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULinePos51 with another Field
	 *	@param value
	 */
   public void setULinePos51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source);
   }  
   
     /**
	 * 	Update ULinePos51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULinePos51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULinePos51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULinePos51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 2 for isD51uReqSelectRule()
	 *	@return  Returns true if isD51uReqSelectRule() is 2
	 */
   public boolean isD51uReqSelectRule() throws CFException {
      return vyspi51uCallArea.getD51uRequestFields().isD51uReqSelectRule();
   }

	/**
	*  set values 2
	*/
   	public void setD51uReqSelectRuleTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uRequestFields().setD51uReqSelectRuleTrue();
   	}
	/**
	 *	Returns the value of d51uTestDiag19
	 *	@return d51uTestDiag19
	 */
   public char[] getD51uTestDiag19() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag19();
   }

  
	/**
	*  set variable d51uTestDiag19
	*  @param value
	**/
   public void setD51uTestDiag19(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(value);
   } 

     /**
	 * 	Update D51uTestDiag19 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag19(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag19(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag19 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag19(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag19 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag19(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source);
   }  
   
     /**
	 * 	Update D51uTestDiag19 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag19(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag19 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag19(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of d51uLstClmIcdInd
	 *	@return d51uLstClmIcdInd
	 */
   public char[] getD51uLstClmIcdInd() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().getD51uLstClmIcdInd();
   }

  
	/**
	*  set variable d51uLstClmIcdInd
	*  @param value
	**/
   public void setD51uLstClmIcdInd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(value);
   } 

     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex);
   	
   }
   
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uLstClmIcdInd with another Field
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source);
   }  
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag17
	 *	@return d51uTestDiag17
	 */
   public char[] getD51uTestDiag17() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag17();
   }

  
	/**
	*  set variable d51uTestDiag17
	*  @param value
	**/
   public void setD51uTestDiag17(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(value);
   } 

     /**
	 * 	Update D51uTestDiag17 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag17(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag17(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag17 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag17(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag17 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag17(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source);
   }  
   
     /**
	 * 	Update D51uTestDiag17 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag17(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag17 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag17(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag11
	 *	@return d51uTestDiag11
	 */
   public char[] getD51uTestDiag11() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag11();
   }

  
	/**
	*  set variable d51uTestDiag11
	*  @param value
	**/
   public void setD51uTestDiag11(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(value);
   } 

     /**
	 * 	Update D51uTestDiag11 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag11(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag11(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag11 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag11(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag11 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag11(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source);
   }  
   
     /**
	 * 	Update D51uTestDiag11 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag11(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag11 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag11(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag06
	 *	@return d51uTestDiag06
	 */
   public char[] getD51uTestDiag06() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag06();
   }

  
	/**
	*  set variable d51uTestDiag06
	*  @param value
	**/
   public void setD51uTestDiag06(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(value);
   } 

     /**
	 * 	Update D51uTestDiag06 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag06(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag06(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag06 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag06(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag06 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag06(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source);
   }  
   
     /**
	 * 	Update D51uTestDiag06 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag06(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag06 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag06(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag14
	 *	@return d51uTestDiag14
	 */
   public char[] getD51uTestDiag14() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag14();
   }

  
	/**
	*  set variable d51uTestDiag14
	*  @param value
	**/
   public void setD51uTestDiag14(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(value);
   } 

     /**
	 * 	Update D51uTestDiag14 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag14(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag14(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag14 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag14(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag14 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag14(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source);
   }  
   
     /**
	 * 	Update D51uTestDiag14 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag14(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag14 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag14(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag13
	 *	@return d51uTestDiag13
	 */
   public char[] getD51uTestDiag13() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag13();
   }

  
	/**
	*  set variable d51uTestDiag13
	*  @param value
	**/
   public void setD51uTestDiag13(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(value);
   } 

     /**
	 * 	Update D51uTestDiag13 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag13(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag13(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag13 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag13(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag13 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag13(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source);
   }  
   
     /**
	 * 	Update D51uTestDiag13 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag13(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag13 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag13(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getFesaSpiNbr01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiNbr01();
}
	/**
	 * 	Update FesaSpiNbr01 with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}


	public void setFesaSpiNbr01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}
	

	/**
	 *	Returns the value of uLineServiceCode51
	 *	@return uLineServiceCode51
	 */
   public char[] getULineServiceCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineServiceCode51();
   }

  
	/**
	*  set variable uLineServiceCode51
	*  @param value
	**/
   public void setULineServiceCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(value);
   } 

     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex);
   	
   }
   
   public void setULineServiceCode51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULineServiceCode51 with another Field
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source);
   }  
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "O" for isD51uReqCallerOnline()
	 *	@return  Returns true if isD51uReqCallerOnline() is "O"
	 */
   public boolean isD51uReqCallerOnline() throws CFException {
      return vyspi51uCallArea.getD51uRequestFields().isD51uReqCallerOnline();
   }

	/**
	*  set values "O"
	*/
   	public void setD51uReqCallerOnlineTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uRequestFields().setD51uReqCallerOnlineTrue();
   	}
	/**
	 *	Returns the value of d51uTestDiag12
	 *	@return d51uTestDiag12
	 */
   public char[] getD51uTestDiag12() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag12();
   }

  
	/**
	*  set variable d51uTestDiag12
	*  @param value
	**/
   public void setD51uTestDiag12(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(value);
   } 

     /**
	 * 	Update D51uTestDiag12 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag12(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag12(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag12 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag12(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag12 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag12(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source);
   }  
   
     /**
	 * 	Update D51uTestDiag12 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag12(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag12 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag12(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag18
	 *	@return d51uTestDiag18
	 */
   public char[] getD51uTestDiag18() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag18();
   }

  
	/**
	*  set variable d51uTestDiag18
	*  @param value
	**/
   public void setD51uTestDiag18(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(value);
   } 

     /**
	 * 	Update D51uTestDiag18 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag18(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag18(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag18 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag18(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag18 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag18(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source);
   }  
   
     /**
	 * 	Update D51uTestDiag18 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag18(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag18 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag18(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uKeyStatus
	 *	@return d51uKeyStatus
	 */
   public char[] getD51uKeyStatus() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyStatus();
   }

  
	/**
	*  set variable d51uKeyStatus
	*  @param value
	**/
   public void setD51uKeyStatus(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(value);
   } 

     /**
	 * 	Update D51uKeyStatus 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyStatus(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex);
   	
   }
   
   public void setD51uKeyStatus(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyStatus 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyStatus(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyStatus with another Field
	 *	@param value
	 */
   public void setD51uKeyStatus(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source);
   }  
   
     /**
	 * 	Update D51uKeyStatus 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyStatus(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyStatus 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyStatus(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag25
	 *	@return d51uTestDiag25
	 */
   public char[] getD51uTestDiag25() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag25();
   }

  
	/**
	*  set variable d51uTestDiag25
	*  @param value
	**/
   public void setD51uTestDiag25(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(value);
   } 

     /**
	 * 	Update D51uTestDiag25 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag25(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag25(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag25 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag25(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag25 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag25(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source);
   }  
   
     /**
	 * 	Update D51uTestDiag25 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag25(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag25 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag25(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02DsplErrInd
	 *	@return w02DsplErrInd
	 */
   public char[] getW02DsplErrInd() throws CFException  {              
   		return w02DsplMsgArea.getW02DsplErrInd();
   }

  
	/**
	*  set variable w02DsplErrInd
	*  @param value
	**/
   public void setW02DsplErrInd(char[] value) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(value);
   } 

     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex);
   	
   }
   
   public void setW02DsplErrInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02DsplErrInd with another Field
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source) {
      w02DsplMsgArea.setW02DsplErrInd(source);
   }  
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uInvReason
	 *	@return d51uInvReason
	 */
	public int getD51uInvReason() throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uInvReason();
	}


	/**
	 *	Returns String value of d51uInvReason
	 *	@return d51uInvReason
	 */
	public char[]  getD51uInvReasonString() throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uInvReasonString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uInvReasonIsNumeric()  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().d51uInvReasonIsNumeric();
	}

	/**
	 * 	Update D51uInvReason with the passed value
	 *	@param number
	 */
	public void setD51uInvReason(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(number);
	}
	

	public void setD51uInvReason(long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(number);
	}
	
	
	/**
	 * 	Update D51uInvReason with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uInvReason(char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(value);
	}
	
	/**
	 * 	Update D51uInvReason with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uInvReasonString(char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(value);
	}	

	/**
	 *	Returns the value of uDiagnosisCode51
	 *	@return uDiagnosisCode51
	 */
   public char[] getUDiagnosisCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUDiagnosisCode51(index);
   }

  
	/**
	*  set variable uDiagnosisCode51
	*  @param value
	**/
   public void setUDiagnosisCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUDiagnosisCode51((index),value);
   } 

	/**
	 *	Returns the value of dsmFuncCd
	 *	@return dsmFuncCd
	 */
	public int getDsmFuncCd() throws CFException {
   		return dsmCallArea.getDsmCommonArea().getDsmFuncCd();
	}


	/**
	 *	Returns String value of dsmFuncCd
	 *	@return dsmFuncCd
	 */
	public char[]  getDsmFuncCdString() throws CFException {
	     return String.valueOf(dsmCallArea.getDsmCommonArea().getDsmFuncCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dsmFuncCdIsNumeric()  throws CFException{
	    return dsmCallArea.getDsmCommonArea().dsmFuncCdIsNumeric();
	}

	/**
	 * 	Update DsmFuncCd with the passed value
	 *	@param number
	 */
	public void setDsmFuncCd(int number)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmFuncCd(number);
	}
	

	public void setDsmFuncCd(long number)  throws CFException{
	    dsmCallArea.getDsmCommonArea().setDsmFuncCd(number);
	}
	
	
	/**
	 * 	Update DsmFuncCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setDsmFuncCd(char[] value)  throws CFException {
		dsmCallArea.getDsmCommonArea().setDsmFuncCd(value);
	}
	
	/**
	 * 	Update DsmFuncCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDsmFuncCdString(char[] value)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmFuncCd(value);
	}	

	/**
	 *	Returns the value of d51uTestSvcCd
	 *	@return d51uTestSvcCd
	 */
   public char[] getD51uTestSvcCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestSvcCd();
   }

  
	/**
	*  set variable d51uTestSvcCd
	*  @param value
	**/
   public void setD51uTestSvcCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(value);
   } 

     /**
	 * 	Update D51uTestSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestSvcCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source, sourceIndex);
   	
   }
   
   public void setD51uTestSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestSvcCd with another Field
	 *	@param value
	 */
   public void setD51uTestSvcCd(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source);
   }  
   
     /**
	 * 	Update D51uTestSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestSvcCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag15
	 *	@return d51uTestDiag15
	 */
   public char[] getD51uTestDiag15() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag15();
   }

  
	/**
	*  set variable d51uTestDiag15
	*  @param value
	**/
   public void setD51uTestDiag15(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(value);
   } 

     /**
	 * 	Update D51uTestDiag15 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag15(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag15(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag15 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag15(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag15 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag15(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source);
   }  
   
     /**
	 * 	Update D51uTestDiag15 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag15(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag15 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag15(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag07
	 *	@return d51uTestDiag07
	 */
   public char[] getD51uTestDiag07() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag07();
   }

  
	/**
	*  set variable d51uTestDiag07
	*  @param value
	**/
   public void setD51uTestDiag07(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(value);
   } 

     /**
	 * 	Update D51uTestDiag07 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag07(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag07(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag07 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag07(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag07 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag07(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source);
   }  
   
     /**
	 * 	Update D51uTestDiag07 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag07(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag07 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag07(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag21
	 *	@return d51uTestDiag21
	 */
   public char[] getD51uTestDiag21() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag21();
   }

  
	/**
	*  set variable d51uTestDiag21
	*  @param value
	**/
   public void setD51uTestDiag21(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(value);
   } 

     /**
	 * 	Update D51uTestDiag21 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag21(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag21(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag21 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag21(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag21 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag21(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source);
   }  
   
     /**
	 * 	Update D51uTestDiag21 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag21(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag21 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag21(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag20
	 *	@return d51uTestDiag20
	 */
   public char[] getD51uTestDiag20() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag20();
   }

  
	/**
	*  set variable d51uTestDiag20
	*  @param value
	**/
   public void setD51uTestDiag20(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(value);
   } 

     /**
	 * 	Update D51uTestDiag20 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag20(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag20(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag20 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag20(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag20 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag20(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source);
   }  
   
     /**
	 * 	Update D51uTestDiag20 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag20(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag20 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag20(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsmCallArea
	 *	@return dsmCallArea
	 */   
	 public DsmCallArea getDsmCallArea() {
   	return dsmCallArea;
   }


	/**
	 *	Returns the value of uCpeDescCd51
	 *	@return uCpeDescCd51
	 */
   public char[] getUCpeDescCd51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUCpeDescCd51();
   }

  
	/**
	*  set variable uCpeDescCd51
	*  @param value
	**/
   public void setUCpeDescCd51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(value);
   } 

     /**
	 * 	Update UCpeDescCd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUCpeDescCd51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source, sourceIndex);
   	
   }
   
   public void setUCpeDescCd51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UCpeDescCd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUCpeDescCd51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UCpeDescCd51 with another Field
	 *	@param value
	 */
   public void setUCpeDescCd51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source);
   }  
   
     /**
	 * 	Update UCpeDescCd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUCpeDescCd51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UCpeDescCd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUCpeDescCd51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag08
	 *	@return d51uTestDiag08
	 */
   public char[] getD51uTestDiag08() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag08();
   }

  
	/**
	*  set variable d51uTestDiag08
	*  @param value
	**/
   public void setD51uTestDiag08(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(value);
   } 

     /**
	 * 	Update D51uTestDiag08 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag08(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag08(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag08 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag08(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag08 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag08(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source);
   }  
   
     /**
	 * 	Update D51uTestDiag08 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag08(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag08 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag08(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of w02RespCd
	 *	@return w02RespCd
	 */
	public long getW02RespCd() throws CFException {
   		return w02DsplMsgArea.getW02RespCd();
	}


	/**
	 *	Returns String value of w02RespCd
	 *	@return w02RespCd
	 */
	public char[]  getW02RespCdString() throws CFException {
	     return String.valueOf(w02DsplMsgArea.getW02RespCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean w02RespCdIsNumeric()  throws CFException{
	    return w02DsplMsgArea.w02RespCdIsNumeric();
	}

	/**
	 * 	Update W02RespCd with the passed value
	 *	@param number
	 */
	public void setW02RespCd(long number)  throws CFException{
		w02DsplMsgArea.setW02RespCd(number);
	}
	

	
	/**
	 * 	Update W02RespCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setW02RespCd(char[] value)  throws CFException {
		w02DsplMsgArea.setW02RespCd(value);
	}
	
	/**
	 * 	Update W02RespCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setW02RespCdString(char[] value)  throws CFException{
		w02DsplMsgArea.setW02RespCd(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public ReadSpiRulesDb2OutCtx clone() {
        ReadSpiRulesDb2OutCtx cloneObj = new ReadSpiRulesDb2OutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public ReadSpiRulesDb2OutCtx getReadSpiRulesDb2OutCtx() {
            return new ReadSpiRulesDb2OutCtx();
    }
     public class PopulatePriDiagInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of s2
	 *	@return s2
	 */
	public int getS2() throws CFException {        
   		return work.getS2();
	}
	
	/**
	 * 	Update S2 with the passed value
	 *	@param number
	 */
	public void setS2(int number)  throws CFException{
		work.setS2(number);
	}


	public void setS2(long number)  throws CFException{
		work.setS2((int)number);
	}


	/**
	 *	Returns the value of point1
	 *	@return point1
	 */
	public int getPoint1() throws CFException {
   		return workFields.getPoint().getPoint1();
	}


	/**
	 *	Returns String value of point1
	 *	@return point1
	 */
	public char[]  getPoint1String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint1String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point1IsNumeric()  throws CFException{
	    return workFields.getPoint().point1IsNumeric();
	}

	/**
	 * 	Update Point1 with the passed value
	 *	@param number
	 */
	public void setPoint1(int number)  throws CFException{
		workFields.getPoint().setPoint1(number);
	}
	

	public void setPoint1(long number)  throws CFException{
	    workFields.getPoint().setPoint1(number);
	}
	
	
	/**
	 * 	Update Point1 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint1(char[] value)  throws CFException {
		workFields.getPoint().setPoint1(value);
	}
	
	/**
	 * 	Update Point1 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint1String(char[] value)  throws CFException{
		workFields.getPoint().setPoint1(value);
	}	

	/**
	 *	Returns the value of uLineDiagPointer51
	 *	@return uLineDiagPointer51
	 */
   public char[] getULineDiagPointer51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineDiagPointer51();
   }

  
	/**
	*  set variable uLineDiagPointer51
	*  @param value
	**/
   public void setULineDiagPointer51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(value);
   } 

     /**
	 * 	Update ULineDiagPointer51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex);
   	
   }
   
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULineDiagPointer51 with another Field
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source);
   }  
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uMedicalClaim51
	 *	@return uMedicalClaim51
	 */
   public char[] getUMedicalClaim51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUMedicalClaim51();
   }

  
	/**
	*  set variable uMedicalClaim51
	*  @param value
	**/
   public void setUMedicalClaim51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(value);
   } 

     /**
	 * 	Update UMedicalClaim51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUMedicalClaim51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex);
   	
   }
   
   public void setUMedicalClaim51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UMedicalClaim51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUMedicalClaim51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UMedicalClaim51 with another Field
	 *	@param value
	 */
   public void setUMedicalClaim51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source);
   }  
   
     /**
	 * 	Update UMedicalClaim51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUMedicalClaim51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UMedicalClaim51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUMedicalClaim51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uDiagnosisCode51
	 *	@return uDiagnosisCode51
	 */
   public char[] getUDiagnosisCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUDiagnosisCode51(index);
   }

  
	/**
	*  set variable uDiagnosisCode51
	*  @param value
	**/
   public void setUDiagnosisCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUDiagnosisCode51((index),value);
   } 

	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public PopulatePriDiagOutCtx getPopulatePriDiagOutCtx() {
            return new PopulatePriDiagOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public PopulatePriDiagInCtx clone() {
        PopulatePriDiagInCtx cloneObj = new PopulatePriDiagInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public PopulatePriDiagInCtx getPopulatePriDiagInCtx() {
            return new PopulatePriDiagInCtx();
    }
     public class PopulatePriDiagOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of d51uTestDiag01
	 *	@return d51uTestDiag01
	 */
   public char[] getD51uTestDiag01() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag01();
   }

  
	/**
	*  set variable d51uTestDiag01
	*  @param value
	**/
   public void setD51uTestDiag01(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(value);
   } 

     /**
	 * 	Update D51uTestDiag01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag01(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag01 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag01(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source);
   }  
   
     /**
	 * 	Update D51uTestDiag01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag01(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isPrimDiagFound1()
	 *	@return  Returns true if isPrimDiagFound1() is "Y"
	 */
   public boolean isPrimDiagFound1() throws CFException {
      return work.isPrimDiagFound1();
   }

	/**
	*  set values "Y"
	*/
   	public void setPrimDiagFound1True()  throws CFException{  			
    	work.setPrimDiagFound1True();
   	}
	/**
	 *	Returns the value of s2
	 *	@return s2
	 */
	public int getS2() throws CFException {        
   		return work.getS2();
	}
	
	/**
	 * 	Update S2 with the passed value
	 *	@param number
	 */
	public void setS2(int number)  throws CFException{
		work.setS2(number);
	}


	public void setS2(long number)  throws CFException{
		work.setS2((int)number);
	}


	/**
	 *	Returns the value of point1
	 *	@return point1
	 */
	public int getPoint1() throws CFException {
   		return workFields.getPoint().getPoint1();
	}


	/**
	 *	Returns String value of point1
	 *	@return point1
	 */
	public char[]  getPoint1String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint1String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point1IsNumeric()  throws CFException{
	    return workFields.getPoint().point1IsNumeric();
	}

	/**
	 * 	Update Point1 with the passed value
	 *	@param number
	 */
	public void setPoint1(int number)  throws CFException{
		workFields.getPoint().setPoint1(number);
	}
	

	public void setPoint1(long number)  throws CFException{
	    workFields.getPoint().setPoint1(number);
	}
	
	
	/**
	 * 	Update Point1 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint1(char[] value)  throws CFException {
		workFields.getPoint().setPoint1(value);
	}
	
	/**
	 * 	Update Point1 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint1String(char[] value)  throws CFException{
		workFields.getPoint().setPoint1(value);
	}	

	/**
	 *	Returns the value of uLineDiagPointer51
	 *	@return uLineDiagPointer51
	 */
   public char[] getULineDiagPointer51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineDiagPointer51();
   }

  
	/**
	*  set variable uLineDiagPointer51
	*  @param value
	**/
   public void setULineDiagPointer51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(value);
   } 

     /**
	 * 	Update ULineDiagPointer51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex);
   	
   }
   
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULineDiagPointer51 with another Field
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source);
   }  
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uDiagnosisCode51
	 *	@return uDiagnosisCode51
	 */
   public char[] getUDiagnosisCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUDiagnosisCode51(index);
   }

  
	/**
	*  set variable uDiagnosisCode51
	*  @param value
	**/
   public void setUDiagnosisCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUDiagnosisCode51((index),value);
   } 

	/**
	 *	Returns the value of point
	 *	@return point
	 */   
	 public Point getPoint() {
   	return workFields.getPoint();
   }

   /**
	* 	Update Point with the passed value
	*	@param value
	*/
   public void setPoint(char[] value) throws CFException {
      workFields.setPoint(value);
   }   

     /**
	 * 	Update Point 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setPoint(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	workFields.setPoint(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Point 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPoint(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setPoint(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Point with another Field
	 *	@param value
	 */
   public void setPoint(Field source) {
   	workFields.setPoint(source);
   }  
   
     /**
	 * 	Update Point 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setPoint(Field source, int sourceIndex,int sourceLen) {
   	workFields.setPoint(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Point 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPoint(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setPoint(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public PopulatePriDiagOutCtx clone() {
        PopulatePriDiagOutCtx cloneObj = new PopulatePriDiagOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public PopulatePriDiagOutCtx getPopulatePriDiagOutCtx() {
            return new PopulatePriDiagOutCtx();
    }
     public class SpiRulesProcess2100DInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();

	/**
	 *	Returns the value of d51uRetDrvCau
	 *	@return d51uRetDrvCau
	 */
   public char[] getD51uRetDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).getD51uRetDrvCau();
   }

  
	/**
	*  set variable d51uRetDrvCau
	*  @param value
	**/
   public void setD51uRetDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(value);
   } 

     /**
	 * 	Update D51uRetDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uRetDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetDrvCau with another Field
	 *	@param value
	 */
   public void setD51uRetDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source);
   }  
   
     /**
	 * 	Update D51uRetDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRetDrvPos
	 *	@return d51uRetDrvPos
	 */
   public char[] getD51uRetDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).getD51uRetDrvPos();
   }

  
	/**
	*  set variable d51uRetDrvPos
	*  @param value
	**/
   public void setD51uRetDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(value);
   } 

     /**
	 * 	Update D51uRetDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uRetDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetDrvPos with another Field
	 *	@param value
	 */
   public void setD51uRetDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source);
   }  
   
     /**
	 * 	Update D51uRetDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRetDrvSvc
	 *	@return d51uRetDrvSvc
	 */
   public char[] getD51uRetDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).getD51uRetDrvSvc();
   }

  
	/**
	*  set variable d51uRetDrvSvc
	*  @param value
	**/
   public void setD51uRetDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(value);
   } 

     /**
	 * 	Update D51uRetDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uRetDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uRetDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uRetDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of keySub
	 *	@return keySub
	 */
	public int getKeySub() throws CFException {        
   		return work.getKeySub();
	}
	
	/**
	 * 	Update KeySub with the passed value
	 *	@param number
	 */
	public void setKeySub(int number)  throws CFException{
		work.setKeySub(number);
	}


	public void setKeySub(long number)  throws CFException{
		work.setKeySub((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public SpiRulesProcess2100DOutCtx getSpiRulesProcess2100DOutCtx() {
            return new SpiRulesProcess2100DOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public SpiRulesProcess2100DInCtx clone() {
        SpiRulesProcess2100DInCtx cloneObj = new SpiRulesProcess2100DInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public SpiRulesProcess2100DInCtx getSpiRulesProcess2100DInCtx() {
            return new SpiRulesProcess2100DInCtx();
    }
     public class SpiRulesProcess2100DOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();

	/**
	 *	Returns the value of d51uRetDrvCau
	 *	@return d51uRetDrvCau
	 */
   public char[] getD51uRetDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).getD51uRetDrvCau();
   }

  
	/**
	*  set variable d51uRetDrvCau
	*  @param value
	**/
   public void setD51uRetDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(value);
   } 

     /**
	 * 	Update D51uRetDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uRetDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetDrvCau with another Field
	 *	@param value
	 */
   public void setD51uRetDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source);
   }  
   
     /**
	 * 	Update D51uRetDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cflgSvc
	 *	@return cflgSvc
	 */
   public char[] getCflgSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgSvc();
   }

  
	/**
	*  set variable cflgSvc
	*  @param value
	**/
   public void setCflgSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgSvc(value);
   } 

     /**
	 * 	Update CflgSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex);
   	
   }
   
   public void setCflgSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgSvc with another Field
	 *	@param value
	 */
   public void setCflgSvc(Field source) {
      workFields.getHoldTransData2().setCflgSvc(source);
   }  
   
     /**
	 * 	Update CflgSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndSvc
	 *	@return fcndSvc
	 */
   public char[] getFcndSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndSvc();
   }

  
	/**
	*  set variable fcndSvc
	*  @param value
	**/
   public void setFcndSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndSvc(value);
   } 

     /**
	 * 	Update FcndSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex);
   	
   }
   
   public void setFcndSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndSvc with another Field
	 *	@param value
	 */
   public void setFcndSvc(Field source) {
      workFields.getHoldTransData2().setFcndSvc(source);
   }  
   
     /**
	 * 	Update FcndSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaSvc
	 *	@return ripaSvc
	 */
   public char[] getRipaSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaSvc();
   }

  
	/**
	*  set variable ripaSvc
	*  @param value
	**/
   public void setRipaSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaSvc(value);
   } 

     /**
	 * 	Update RipaSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex);
   	
   }
   
   public void setRipaSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaSvc with another Field
	 *	@param value
	 */
   public void setRipaSvc(Field source) {
      workFields.getHoldTransData2().setRipaSvc(source);
   }  
   
     /**
	 * 	Update RipaSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ipaCodeFound
	 *	@return ipaCodeFound
	 */
   public char[] getIpaCodeFound() throws CFException  {              
   		return work.getIpaCodeFound();
   }

  
	/**
	*  set variable ipaCodeFound
	*  @param value
	**/
   public void setIpaCodeFound(char[] value) throws CFException {
      work.setIpaCodeFound(value);
   } 

	/**
	 *	Returns the value of fcndPs
	 *	@return fcndPs
	 */
   public char[] getFcndPs() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndPs();
   }

  
	/**
	*  set variable fcndPs
	*  @param value
	**/
   public void setFcndPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndPs(value);
   } 

     /**
	 * 	Update FcndPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex);
   	
   }
   
   public void setFcndPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndPs with another Field
	 *	@param value
	 */
   public void setFcndPs(Field source) {
      workFields.getHoldTransData2().setFcndPs(source);
   }  
   
     /**
	 * 	Update FcndPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cflgCauseCd
	 *	@return cflgCauseCd
	 */
   public char[] getCflgCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgCauseCd();
   }

  
	/**
	*  set variable cflgCauseCd
	*  @param value
	**/
   public void setCflgCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgCauseCd(value);
   } 

     /**
	 * 	Update CflgCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex);
   	
   }
   
   public void setCflgCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgCauseCd with another Field
	 *	@param value
	 */
   public void setCflgCauseCd(Field source) {
      workFields.getHoldTransData2().setCflgCauseCd(source);
   }  
   
     /**
	 * 	Update CflgCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cflgPs
	 *	@return cflgPs
	 */
   public char[] getCflgPs() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgPs();
   }

  
	/**
	*  set variable cflgPs
	*  @param value
	**/
   public void setCflgPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgPs(value);
   } 

     /**
	 * 	Update CflgPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex);
   	
   }
   
   public void setCflgPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgPs with another Field
	 *	@param value
	 */
   public void setCflgPs(Field source) {
      workFields.getHoldTransData2().setCflgPs(source);
   }  
   
     /**
	 * 	Update CflgPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdPs
	 *	@return ricdPs
	 */
   public char[] getRicdPs() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdPs();
   }

  
	/**
	*  set variable ricdPs
	*  @param value
	**/
   public void setRicdPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdPs(value);
   } 

     /**
	 * 	Update RicdPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex);
   	
   }
   
   public void setRicdPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdPs with another Field
	 *	@param value
	 */
   public void setRicdPs(Field source) {
      workFields.getHoldTransData2().setRicdPs(source);
   }  
   
     /**
	 * 	Update RicdPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevSvc
	 *	@return prevSvc
	 */
   public char[] getPrevSvc() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevSvc();
   }

  
	/**
	*  set variable prevSvc
	*  @param value
	**/
   public void setPrevSvc(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(value);
   } 

     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex);
   	
   }
   
   public void setPrevSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevSvc with another Field
	 *	@param value
	 */
   public void setPrevSvc(Field source) {
      workFields.getPrevMatchedKey().setPrevSvc(source);
   }  
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of fromPrvFound
	 *	@return fromPrvFound
	 */
   public char[] getFromPrvFound() throws CFException  {              
   		return work.getFromPrvFound();
   }

  
	/**
	*  set variable fromPrvFound
	*  @param value
	**/
   public void setFromPrvFound(char[] value) throws CFException {
      work.setFromPrvFound(value);
   } 

	/**
	 *	Returns the value of ptypCauseCd
	 *	@return ptypCauseCd
	 */
   public char[] getPtypCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypCauseCd();
   }

  
	/**
	*  set variable ptypCauseCd
	*  @param value
	**/
   public void setPtypCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypCauseCd(value);
   } 

     /**
	 * 	Update PtypCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex);
   	
   }
   
   public void setPtypCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypCauseCd with another Field
	 *	@param value
	 */
   public void setPtypCauseCd(Field source) {
      workFields.getHoldTransData2().setPtypCauseCd(source);
   }  
   
     /**
	 * 	Update PtypCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdSvc
	 *	@return ricdSvc
	 */
   public char[] getRicdSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdSvc();
   }

  
	/**
	*  set variable ricdSvc
	*  @param value
	**/
   public void setRicdSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdSvc(value);
   } 

     /**
	 * 	Update RicdSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex);
   	
   }
   
   public void setRicdSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdSvc with another Field
	 *	@param value
	 */
   public void setRicdSvc(Field source) {
      workFields.getHoldTransData2().setRicdSvc(source);
   }  
   
     /**
	 * 	Update RicdSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isKeyComplete1()
	 *	@return  Returns true if isKeyComplete1() is "Y"
	 */
   public boolean isKeyComplete1() throws CFException {
      return work.isKeyComplete1();
   }

	/**
	*  set values "Y"
	*/
   	public void setKeyComplete1True()  throws CFException{  			
    	work.setKeyComplete1True();
   	}
	/**
	 *	Returns the value of fcndCauseCd
	 *	@return fcndCauseCd
	 */
   public char[] getFcndCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndCauseCd();
   }

  
	/**
	*  set variable fcndCauseCd
	*  @param value
	**/
   public void setFcndCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndCauseCd(value);
   } 

     /**
	 * 	Update FcndCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex);
   	
   }
   
   public void setFcndCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndCauseCd with another Field
	 *	@param value
	 */
   public void setFcndCauseCd(Field source) {
      workFields.getHoldTransData2().setFcndCauseCd(source);
   }  
   
     /**
	 * 	Update FcndCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fromSvcFound
	 *	@return fromSvcFound
	 */
   public char[] getFromSvcFound() throws CFException  {              
   		return work.getFromSvcFound();
   }

  
	/**
	*  set variable fromSvcFound
	*  @param value
	**/
   public void setFromSvcFound(char[] value) throws CFException {
      work.setFromSvcFound(value);
   } 

	/**
	 *	Returns the value of ptypPs
	 *	@return ptypPs
	 */
   public char[] getPtypPs() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypPs();
   }

  
	/**
	*  set variable ptypPs
	*  @param value
	**/
   public void setPtypPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypPs(value);
   } 

     /**
	 * 	Update PtypPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex);
   	
   }
   
   public void setPtypPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypPs with another Field
	 *	@param value
	 */
   public void setPtypPs(Field source) {
      workFields.getHoldTransData2().setPtypPs(source);
   }  
   
     /**
	 * 	Update PtypPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fromPsFound
	 *	@return fromPsFound
	 */
   public char[] getFromPsFound() throws CFException  {              
   		return work.getFromPsFound();
   }

  
	/**
	*  set variable fromPsFound
	*  @param value
	**/
   public void setFromPsFound(char[] value) throws CFException {
      work.setFromPsFound(value);
   } 

	/**
	 *	Returns the value of causSvc
	 *	@return causSvc
	 */
   public char[] getCausSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getCausSvc();
   }

  
	/**
	*  set variable causSvc
	*  @param value
	**/
   public void setCausSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausSvc(value);
   } 

     /**
	 * 	Update CausSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex);
   	
   }
   
   public void setCausSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausSvc with another Field
	 *	@param value
	 */
   public void setCausSvc(Field source) {
      workFields.getHoldTransData2().setCausSvc(source);
   }  
   
     /**
	 * 	Update CausSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRetDrvPos
	 *	@return d51uRetDrvPos
	 */
   public char[] getD51uRetDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).getD51uRetDrvPos();
   }

  
	/**
	*  set variable d51uRetDrvPos
	*  @param value
	**/
   public void setD51uRetDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(value);
   } 

     /**
	 * 	Update D51uRetDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uRetDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetDrvPos with another Field
	 *	@param value
	 */
   public void setD51uRetDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source);
   }  
   
     /**
	 * 	Update D51uRetDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevCauseCd
	 *	@return prevCauseCd
	 */
   public char[] getPrevCauseCd() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevCauseCd();
   }

  
	/**
	*  set variable prevCauseCd
	*  @param value
	**/
   public void setPrevCauseCd(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(value);
   } 

     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex);
   	
   }
   
   public void setPrevCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevCauseCd with another Field
	 *	@param value
	 */
   public void setPrevCauseCd(Field source) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source);
   }  
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causPs
	 *	@return causPs
	 */
   public char[] getCausPs() throws CFException  {              
   		return workFields.getHoldTransData2().getCausPs();
   }

  
	/**
	*  set variable causPs
	*  @param value
	**/
   public void setCausPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausPs(value);
   } 

     /**
	 * 	Update CausPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex);
   	
   }
   
   public void setCausPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausPs with another Field
	 *	@param value
	 */
   public void setCausPs(Field source) {
      workFields.getHoldTransData2().setCausPs(source);
   }  
   
     /**
	 * 	Update CausPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of keyComplete
	 *	@return keyComplete
	 */
   public char[] getKeyComplete() throws CFException  {              
   		return work.getKeyComplete();
   }

  
	/**
	*  set variable keyComplete
	*  @param value
	**/
   public void setKeyComplete(char[] value) throws CFException {
      work.setKeyComplete(value);
   } 

	/**
	 *	Returns the value of ripaPs
	 *	@return ripaPs
	 */
   public char[] getRipaPs() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaPs();
   }

  
	/**
	*  set variable ripaPs
	*  @param value
	**/
   public void setRipaPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaPs(value);
   } 

     /**
	 * 	Update RipaPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex);
   	
   }
   
   public void setRipaPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaPs with another Field
	 *	@param value
	 */
   public void setRipaPs(Field source) {
      workFields.getHoldTransData2().setRipaPs(source);
   }  
   
     /**
	 * 	Update RipaPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of frtoCauseCd
	 *	@return frtoCauseCd
	 */
   public char[] getFrtoCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoCauseCd();
   }

  
	/**
	*  set variable frtoCauseCd
	*  @param value
	**/
   public void setFrtoCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoCauseCd(value);
   } 

     /**
	 * 	Update FrtoCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex);
   	
   }
   
   public void setFrtoCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoCauseCd with another Field
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source) {
      workFields.getHoldTransData2().setFrtoCauseCd(source);
   }  
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fromCauseFound
	 *	@return fromCauseFound
	 */
   public char[] getFromCauseFound() throws CFException  {              
   		return work.getFromCauseFound();
   }

  
	/**
	*  set variable fromCauseFound
	*  @param value
	**/
   public void setFromCauseFound(char[] value) throws CFException {
      work.setFromCauseFound(value);
   } 

	/**
	 *	Returns the value of ipaAndGtnFound
	 *	@return ipaAndGtnFound
	 */
   public char[] getIpaAndGtnFound() throws CFException  {              
   		return work.getIpaAndGtnFound();
   }

  
	/**
	*  set variable ipaAndGtnFound
	*  @param value
	**/
   public void setIpaAndGtnFound(char[] value) throws CFException {
      work.setIpaAndGtnFound(value);
   } 

	/**
	 *	Returns the value of ricdCauseCd
	 *	@return ricdCauseCd
	 */
   public char[] getRicdCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdCauseCd();
   }

  
	/**
	*  set variable ricdCauseCd
	*  @param value
	**/
   public void setRicdCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdCauseCd(value);
   } 

     /**
	 * 	Update RicdCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex);
   	
   }
   
   public void setRicdCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdCauseCd with another Field
	 *	@param value
	 */
   public void setRicdCauseCd(Field source) {
      workFields.getHoldTransData2().setRicdCauseCd(source);
   }  
   
     /**
	 * 	Update RicdCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fromIcd9Found
	 *	@return fromIcd9Found
	 */
   public char[] getFromIcd9Found() throws CFException  {              
   		return work.getFromIcd9Found();
   }

  
	/**
	*  set variable fromIcd9Found
	*  @param value
	**/
   public void setFromIcd9Found(char[] value) throws CFException {
      work.setFromIcd9Found(value);
   } 

	/**
	 *	Returns the value of prevPs
	 *	@return prevPs
	 */
   public char[] getPrevPs() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevPs();
   }

  
	/**
	*  set variable prevPs
	*  @param value
	**/
   public void setPrevPs(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(value);
   } 

     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex);
   	
   }
   
   public void setPrevPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevPs with another Field
	 *	@param value
	 */
   public void setPrevPs(Field source) {
      workFields.getPrevMatchedKey().setPrevPs(source);
   }  
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of keySub
	 *	@return keySub
	 */
	public int getKeySub() throws CFException {        
   		return work.getKeySub();
	}
	
	/**
	 * 	Update KeySub with the passed value
	 *	@param number
	 */
	public void setKeySub(int number)  throws CFException{
		work.setKeySub(number);
	}


	public void setKeySub(long number)  throws CFException{
		work.setKeySub((int)number);
	}


	/**
	 *	Returns the value of cpeFlgFound
	 *	@return cpeFlgFound
	 */
   public char[] getCpeFlgFound() throws CFException  {              
   		return work.getCpeFlgFound();
   }

  
	/**
	*  set variable cpeFlgFound
	*  @param value
	**/
   public void setCpeFlgFound(char[] value) throws CFException {
      work.setCpeFlgFound(value);
   } 

	/**
	 *	Returns the value of ripaCauseCd
	 *	@return ripaCauseCd
	 */
   public char[] getRipaCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaCauseCd();
   }

  
	/**
	*  set variable ripaCauseCd
	*  @param value
	**/
   public void setRipaCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaCauseCd(value);
   } 

     /**
	 * 	Update RipaCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex);
   	
   }
   
   public void setRipaCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaCauseCd with another Field
	 *	@param value
	 */
   public void setRipaCauseCd(Field source) {
      workFields.getHoldTransData2().setRipaCauseCd(source);
   }  
   
     /**
	 * 	Update RipaCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypSvc
	 *	@return ptypSvc
	 */
   public char[] getPtypSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypSvc();
   }

  
	/**
	*  set variable ptypSvc
	*  @param value
	**/
   public void setPtypSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypSvc(value);
   } 

     /**
	 * 	Update PtypSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex);
   	
   }
   
   public void setPtypSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypSvc with another Field
	 *	@param value
	 */
   public void setPtypSvc(Field source) {
      workFields.getHoldTransData2().setPtypSvc(source);
   }  
   
     /**
	 * 	Update PtypSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of frtoPs
	 *	@return frtoPs
	 */
   public char[] getFrtoPs() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoPs();
   }

  
	/**
	*  set variable frtoPs
	*  @param value
	**/
   public void setFrtoPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoPs(value);
   } 

     /**
	 * 	Update FrtoPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex);
   	
   }
   
   public void setFrtoPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoPs with another Field
	 *	@param value
	 */
   public void setFrtoPs(Field source) {
      workFields.getHoldTransData2().setFrtoPs(source);
   }  
   
     /**
	 * 	Update FrtoPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causCauseCd
	 *	@return causCauseCd
	 */
   public char[] getCausCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getCausCauseCd();
   }

  
	/**
	*  set variable causCauseCd
	*  @param value
	**/
   public void setCausCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausCauseCd(value);
   } 

     /**
	 * 	Update CausCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex);
   	
   }
   
   public void setCausCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausCauseCd with another Field
	 *	@param value
	 */
   public void setCausCauseCd(Field source) {
      workFields.getHoldTransData2().setCausCauseCd(source);
   }  
   
     /**
	 * 	Update CausCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRetDrvSvc
	 *	@return d51uRetDrvSvc
	 */
   public char[] getD51uRetDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).getD51uRetDrvSvc();
   }

  
	/**
	*  set variable d51uRetDrvSvc
	*  @param value
	**/
   public void setD51uRetDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(value);
   } 

     /**
	 * 	Update D51uRetDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uRetDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uRetDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uRetDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of frtoSvc
	 *	@return frtoSvc
	 */
   public char[] getFrtoSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoSvc();
   }

  
	/**
	*  set variable frtoSvc
	*  @param value
	**/
   public void setFrtoSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoSvc(value);
   } 

     /**
	 * 	Update FrtoSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex);
   	
   }
   
   public void setFrtoSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoSvc with another Field
	 *	@param value
	 */
   public void setFrtoSvc(Field source) {
      workFields.getHoldTransData2().setFrtoSvc(source);
   }  
   
     /**
	 * 	Update FrtoSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public SpiRulesProcess2100DOutCtx clone() {
        SpiRulesProcess2100DOutCtx cloneObj = new SpiRulesProcess2100DOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public SpiRulesProcess2100DOutCtx getSpiRulesProcess2100DOutCtx() {
            return new SpiRulesProcess2100DOutCtx();
    }
     public class MatchingRtnInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = O529351uCtx.this.getDsmCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of fesaSpiDiagElgInd
	 *	@return fesaSpiDiagElgInd
	 */
   public char[] getFesaSpiDiagElgInd(int index) throws CFException  {              
   		return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiDiagElgInd();
   }

  
	/**
	*  set variable fesaSpiDiagElgInd
	*  @param value
	**/
   public void setFesaSpiDiagElgInd(int index,char[] value) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(value);
   } 

     /**
	 * 	Update FesaSpiDiagElgInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,char[] source, int sourceIndex) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex);
   	
   }
   
   public void setFesaSpiDiagElgInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaSpiDiagElgInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaSpiDiagElgInd with another Field
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,Field source) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source);
   }  
   
     /**
	 * 	Update FesaSpiDiagElgInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,Field source, int sourceIndex,int sourceLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaSpiDiagElgInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cflgSvc
	 *	@return cflgSvc
	 */
   public char[] getCflgSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgSvc();
   }

  
	/**
	*  set variable cflgSvc
	*  @param value
	**/
   public void setCflgSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgSvc(value);
   } 

     /**
	 * 	Update CflgSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex);
   	
   }
   
   public void setCflgSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgSvc with another Field
	 *	@param value
	 */
   public void setCflgSvc(Field source) {
      workFields.getHoldTransData2().setCflgSvc(source);
   }  
   
     /**
	 * 	Update CflgSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaSvc
	 *	@return ripaSvc
	 */
   public char[] getRipaSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaSvc();
   }

  
	/**
	*  set variable ripaSvc
	*  @param value
	**/
   public void setRipaSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaSvc(value);
   } 

     /**
	 * 	Update RipaSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex);
   	
   }
   
   public void setRipaSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaSvc with another Field
	 *	@param value
	 */
   public void setRipaSvc(Field source) {
      workFields.getHoldTransData2().setRipaSvc(source);
   }  
   
     /**
	 * 	Update RipaSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uIcdCnt
	 *	@return d51uIcdCnt
	 */
	public int getD51uIcdCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uIcdCnt();
	}
	
	/**
	 * 	Update D51uIcdCnt with the passed value
	 *	@param number
	 */
	public void setD51uIcdCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIcdCnt(number);
	}


	public void setD51uIcdCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIcdCnt((int)number);
	}


	/**
	 *	Returns the value of cflgCauseCd
	 *	@return cflgCauseCd
	 */
   public char[] getCflgCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgCauseCd();
   }

  
	/**
	*  set variable cflgCauseCd
	*  @param value
	**/
   public void setCflgCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgCauseCd(value);
   } 

     /**
	 * 	Update CflgCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex);
   	
   }
   
   public void setCflgCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgCauseCd with another Field
	 *	@param value
	 */
   public void setCflgCauseCd(Field source) {
      workFields.getHoldTransData2().setCflgCauseCd(source);
   }  
   
     /**
	 * 	Update CflgCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uMoreIcdCnt
	 *	@return d51uMoreIcdCnt
	 */
	public int getD51uMoreIcdCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uMoreIcdCnt();
	}
	
	/**
	 * 	Update D51uMoreIcdCnt with the passed value
	 *	@param number
	 */
	public void setD51uMoreIcdCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uMoreIcdCnt(number);
	}


	public void setD51uMoreIcdCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uMoreIcdCnt((int)number);
	}


	/**
	 *	Returns the value of ricdPs
	 *	@return ricdPs
	 */
   public char[] getRicdPs() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdPs();
   }

  
	/**
	*  set variable ricdPs
	*  @param value
	**/
   public void setRicdPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdPs(value);
   } 

     /**
	 * 	Update RicdPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex);
   	
   }
   
   public void setRicdPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdPs with another Field
	 *	@param value
	 */
   public void setRicdPs(Field source) {
      workFields.getHoldTransData2().setRicdPs(source);
   }  
   
     /**
	 * 	Update RicdPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRipaClmIpa1Cd
	 *	@return d51uRipaClmIpa1Cd
	 */
	public int getD51uRipaClmIpa1Cd(int index) throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa1Cd();
	}


	/**
	 *	Returns String value of d51uRipaClmIpa1Cd
	 *	@return d51uRipaClmIpa1Cd
	 */
	public char[]  getD51uRipaClmIpa1CdString(int index) throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa1CdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uRipaClmIpa1CdIsNumeric(int index)  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index - 1).d51uRipaClmIpa1CdIsNumeric();
	}

	/**
	 * 	Update D51uRipaClmIpa1Cd with the passed value
	 *	@param number
	 */
	public void setD51uRipaClmIpa1Cd(int index,int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa1Cd(number);
	}
	

	public void setD51uRipaClmIpa1Cd(int index,long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa1Cd(number);
	}
	
	
	/**
	 * 	Update D51uRipaClmIpa1Cd with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa1Cd(int index,char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa1Cd(value);
	}
	
	/**
	 * 	Update D51uRipaClmIpa1Cd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa1CdString(int index,char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa1Cd(value);
	}	

	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Returns the value of ricdSvc
	 *	@return ricdSvc
	 */
   public char[] getRicdSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdSvc();
   }

  
	/**
	*  set variable ricdSvc
	*  @param value
	**/
   public void setRicdSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdSvc(value);
   } 

     /**
	 * 	Update RicdSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex);
   	
   }
   
   public void setRicdSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdSvc with another Field
	 *	@param value
	 */
   public void setRicdSvc(Field source) {
      workFields.getHoldTransData2().setRicdSvc(source);
   }  
   
     /**
	 * 	Update RicdSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndCauseCd
	 *	@return fcndCauseCd
	 */
   public char[] getFcndCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndCauseCd();
   }

  
	/**
	*  set variable fcndCauseCd
	*  @param value
	**/
   public void setFcndCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndCauseCd(value);
   } 

     /**
	 * 	Update FcndCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex);
   	
   }
   
   public void setFcndCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndCauseCd with another Field
	 *	@param value
	 */
   public void setFcndCauseCd(Field source) {
      workFields.getHoldTransData2().setFcndCauseCd(source);
   }  
   
     /**
	 * 	Update FcndCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypPs
	 *	@return ptypPs
	 */
   public char[] getPtypPs() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypPs();
   }

  
	/**
	*  set variable ptypPs
	*  @param value
	**/
   public void setPtypPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypPs(value);
   } 

     /**
	 * 	Update PtypPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex);
   	
   }
   
   public void setPtypPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypPs with another Field
	 *	@param value
	 */
   public void setPtypPs(Field source) {
      workFields.getHoldTransData2().setPtypPs(source);
   }  
   
     /**
	 * 	Update PtypPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Returns the value of d51uRetRuleSw
	 *	@return d51uRetRuleSw
	 */
   public char[] getD51uRetRuleSw(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).getD51uRetRuleSw();
   }

  
	/**
	*  set variable d51uRetRuleSw
	*  @param value
	**/
   public void setD51uRetRuleSw(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetRuleSw(value);
   } 

     /**
	 * 	Update D51uRetRuleSw 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetRuleSw(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetRuleSw(source, sourceIndex);
   	
   }
   
   public void setD51uRetRuleSw(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetRuleSw(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetRuleSw 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetRuleSw(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetRuleSw(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetRuleSw with another Field
	 *	@param value
	 */
   public void setD51uRetRuleSw(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetRuleSw(source);
   }  
   
     /**
	 * 	Update D51uRetRuleSw 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetRuleSw(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetRuleSw(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetRuleSw 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetRuleSw(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetRuleSw(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevCauseCd
	 *	@return prevCauseCd
	 */
   public char[] getPrevCauseCd() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevCauseCd();
   }

  
	/**
	*  set variable prevCauseCd
	*  @param value
	**/
   public void setPrevCauseCd(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(value);
   } 

     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex);
   	
   }
   
   public void setPrevCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevCauseCd with another Field
	 *	@param value
	 */
   public void setPrevCauseCd(Field source) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source);
   }  
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaPs
	 *	@return ripaPs
	 */
   public char[] getRipaPs() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaPs();
   }

  
	/**
	*  set variable ripaPs
	*  @param value
	**/
   public void setRipaPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaPs(value);
   } 

     /**
	 * 	Update RipaPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex);
   	
   }
   
   public void setRipaPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaPs with another Field
	 *	@param value
	 */
   public void setRipaPs(Field source) {
      workFields.getHoldTransData2().setRipaPs(source);
   }  
   
     /**
	 * 	Update RipaPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of frtoCauseCd
	 *	@return frtoCauseCd
	 */
   public char[] getFrtoCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoCauseCd();
   }

  
	/**
	*  set variable frtoCauseCd
	*  @param value
	**/
   public void setFrtoCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoCauseCd(value);
   } 

     /**
	 * 	Update FrtoCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex);
   	
   }
   
   public void setFrtoCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoCauseCd with another Field
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source) {
      workFields.getHoldTransData2().setFrtoCauseCd(source);
   }  
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesaPosTierCd
	 *	@return fesaPosTierCd
	 */
   public char[] getFesaPosTierCd(int index) throws CFException  {              
   		return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaPosTierCd();
   }

  
	/**
	*  set variable fesaPosTierCd
	*  @param value
	**/
   public void setFesaPosTierCd(int index,char[] value) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(value);
   } 

     /**
	 * 	Update FesaPosTierCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,char[] source, int sourceIndex) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex);
   	
   }
   
   public void setFesaPosTierCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaPosTierCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaPosTierCd with another Field
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,Field source) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source);
   }  
   
     /**
	 * 	Update FesaPosTierCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,Field source, int sourceIndex,int sourceLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaPosTierCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isIpaCodeFound1()
	 *	@return  Returns true if isIpaCodeFound1() is "Y"
	 */
   public boolean isIpaCodeFound1() throws CFException {
      return work.isIpaCodeFound1();
   }

	/**
	*  set values "Y"
	*/
   	public void setIpaCodeFound1True()  throws CFException{  			
    	work.setIpaCodeFound1True();
   	}
	/**
	 *	Returns the value of d51uKeyFeSpi
	 *	@return d51uKeyFeSpi
	 */
   public char[] getD51uKeyFeSpi() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyFeSpi();
   }

  
	/**
	*  set variable d51uKeyFeSpi
	*  @param value
	**/
   public void setD51uKeyFeSpi(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(value);
   } 

     /**
	 * 	Update D51uKeyFeSpi 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyFeSpi(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex);
   	
   }
   
   public void setD51uKeyFeSpi(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyFeSpi(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyFeSpi with another Field
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source);
   }  
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causeSub
	 *	@return causeSub
	 */
	public int getCauseSub() throws CFException {        
   		return work.getCauseSub();
	}
	
	/**
	 * 	Update CauseSub with the passed value
	 *	@param number
	 */
	public void setCauseSub(int number)  throws CFException{
		work.setCauseSub(number);
	}


	public void setCauseSub(long number)  throws CFException{
		work.setCauseSub((int)number);
	}


	/**
	 *	Returns the value of pvSub
	 *	@return pvSub
	 */
	public int getPvSub() throws CFException {        
   		return work.getPvSub();
	}
	
	/**
	 * 	Update PvSub with the passed value
	 *	@param number
	 */
	public void setPvSub(int number)  throws CFException{
		work.setPvSub(number);
	}


	public void setPvSub(long number)  throws CFException{
		work.setPvSub((int)number);
	}


	/**
	 *	Returns the value of d51uCflgCnt
	 *	@return d51uCflgCnt
	 */
	public int getD51uCflgCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uCflgCnt();
	}
	
	/**
	 * 	Update D51uCflgCnt with the passed value
	 *	@param number
	 */
	public void setD51uCflgCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uCflgCnt(number);
	}


	public void setD51uCflgCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uCflgCnt((int)number);
	}


	/**
	 *	Returns the value of vyspi51uCallArea
	 *	@return vyspi51uCallArea
	 */   
	 public Vyspi51uCallArea getVyspi51uCallArea() {
   	return vyspi51uCallArea;
   }


	/**
	 *	Test condition "Y" for isFromPrvFound1()
	 *	@return  Returns true if isFromPrvFound1() is "Y"
	 */
   public boolean isFromPrvFound1() throws CFException {
      return work.isFromPrvFound1();
   }

	/**
	*  set values "Y"
	*/
   	public void setFromPrvFound1True()  throws CFException{  			
    	work.setFromPrvFound1True();
   	}
	/**
	 *	Test condition "Y" for isSearchComplete1()
	 *	@return  Returns true if isSearchComplete1() is "Y"
	 */
   public boolean isSearchComplete1() throws CFException {
      return work.isSearchComplete1();
   }

	/**
	*  set values "Y"
	*/
   	public void setSearchComplete1True()  throws CFException{  			
    	work.setSearchComplete1True();
   	}
	/**
	 *	Returns the value of d51uFrtoCnt
	 *	@return d51uFrtoCnt
	 */
	public int getD51uFrtoCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uFrtoCnt();
	}
	
	/**
	 * 	Update D51uFrtoCnt with the passed value
	 *	@param number
	 */
	public void setD51uFrtoCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uFrtoCnt(number);
	}


	public void setD51uFrtoCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uFrtoCnt((int)number);
	}


	/**
	 *	Test condition 0 for isD51uGoodReturn()
	 *	@return  Returns true if isD51uGoodReturn() is 0
	 */
   public boolean isD51uGoodReturn() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uGoodReturn();
   }

	/**
	*  set values 0
	*/
   	public void setD51uGoodReturnTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uGoodReturnTrue();
   	}
	/**
	 *	Returns the value of d51uPlnvCnt
	 *	@return d51uPlnvCnt
	 */
	public int getD51uPlnvCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uPlnvCnt();
	}
	
	/**
	 * 	Update D51uPlnvCnt with the passed value
	 *	@param number
	 */
	public void setD51uPlnvCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uPlnvCnt(number);
	}


	public void setD51uPlnvCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uPlnvCnt((int)number);
	}


	/**
	 *	Returns the value of d51uPtypCnt
	 *	@return d51uPtypCnt
	 */
	public int getD51uPtypCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uPtypCnt();
	}
	
	/**
	 * 	Update D51uPtypCnt with the passed value
	 *	@param number
	 */
	public void setD51uPtypCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uPtypCnt(number);
	}


	public void setD51uPtypCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uPtypCnt((int)number);
	}


	/**
	 *	Returns the value of fcndSvc
	 *	@return fcndSvc
	 */
   public char[] getFcndSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndSvc();
   }

  
	/**
	*  set variable fcndSvc
	*  @param value
	**/
   public void setFcndSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndSvc(value);
   } 

     /**
	 * 	Update FcndSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex);
   	
   }
   
   public void setFcndSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndSvc with another Field
	 *	@param value
	 */
   public void setFcndSvc(Field source) {
      workFields.getHoldTransData2().setFcndSvc(source);
   }  
   
     /**
	 * 	Update FcndSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d529351uDb2Dsm
	 *	@return d529351uDb2Dsm
	 */
   public char[] getD529351uDb2Dsm() throws CFException  {              
   		return work.getD529351uDb2Dsm();
   }

  
	/**
	*  set variable d529351uDb2Dsm
	*  @param value
	**/
   public void setD529351uDb2Dsm(char[] value) throws CFException {
      work.setD529351uDb2Dsm(value);
   } 

	/**
	 *	Returns the value of fcndPs
	 *	@return fcndPs
	 */
   public char[] getFcndPs() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndPs();
   }

  
	/**
	*  set variable fcndPs
	*  @param value
	**/
   public void setFcndPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndPs(value);
   } 

     /**
	 * 	Update FcndPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex);
   	
   }
   
   public void setFcndPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndPs with another Field
	 *	@param value
	 */
   public void setFcndPs(Field source) {
      workFields.getHoldTransData2().setFcndPs(source);
   }  
   
     /**
	 * 	Update FcndPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isIpaAndGtnFound1()
	 *	@return  Returns true if isIpaAndGtnFound1() is "Y"
	 */
   public boolean isIpaAndGtnFound1() throws CFException {
      return work.isIpaAndGtnFound1();
   }

	/**
	*  set values "Y"
	*/
   	public void setIpaAndGtnFound1True()  throws CFException{  			
    	work.setIpaAndGtnFound1True();
   	}
	/**
	 *	Returns the value of iSub
	 *	@return iSub
	 */
	public int getISub() throws CFException {        
   		return work.getISub();
	}
	
	/**
	 * 	Update ISub with the passed value
	 *	@param number
	 */
	public void setISub(int number)  throws CFException{
		work.setISub(number);
	}


	public void setISub(long number)  throws CFException{
		work.setISub((int)number);
	}


	/**
	 *	Test condition "Y" for isCpeFlgFound1()
	 *	@return  Returns true if isCpeFlgFound1() is "Y"
	 */
   public boolean isCpeFlgFound1() throws CFException {
      return work.isCpeFlgFound1();
   }

	/**
	*  set values "Y"
	*/
   	public void setCpeFlgFound1True()  throws CFException{  			
    	work.setCpeFlgFound1True();
   	}
	/**
	 *	Returns the value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public short getNbrMatchedPrev() throws CFException {
   		return workFields.getNbrMatchedPrev();
	}

    /**
	 *	Returns the String value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public char[]  getNbrMatchedPrevActualString() {
		return workFields.getNbrMatchedPrevActualString();
	}

	/**
	 *	Returns String value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public char[]  getNbrMatchedPrevString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedPrevString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedPrevIsNumeric()  throws CFException{
	    return workFields.nbrMatchedPrevIsNumeric();
	}

	/**
	 * 	Update NbrMatchedPrev with the passed value
	 *	@param number
	 */
	public void setNbrMatchedPrev(short number)  throws CFException{
		workFields.setNbrMatchedPrev(number);
	}
	
	public void setNbrMatchedPrev(int number)  throws CFException{
	    workFields.setNbrMatchedPrev(number);
	}
	public void setNbrMatchedPrev(long number)  throws CFException{
	    workFields.setNbrMatchedPrev(number);
	}
	

	
	/**
	 * 	Update NbrMatchedPrev with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedPrev(char[] value)  throws CFException {
		workFields.setNbrMatchedPrev(value);
	}
	
	/**
	 * 	Update NbrMatchedPrev with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedPrevString(char[] value)  throws CFException{
		workFields.setNbrMatchedPrev(value);
	}	

	/**
	 *	Returns the value of cflgPs
	 *	@return cflgPs
	 */
   public char[] getCflgPs() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgPs();
   }

  
	/**
	*  set variable cflgPs
	*  @param value
	**/
   public void setCflgPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgPs(value);
   } 

     /**
	 * 	Update CflgPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex);
   	
   }
   
   public void setCflgPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgPs with another Field
	 *	@param value
	 */
   public void setCflgPs(Field source) {
      workFields.getHoldTransData2().setCflgPs(source);
   }  
   
     /**
	 * 	Update CflgPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausCnt
	 *	@return d51uCausCnt
	 */
	public int getD51uCausCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uCausCnt();
	}
	
	/**
	 * 	Update D51uCausCnt with the passed value
	 *	@param number
	 */
	public void setD51uCausCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uCausCnt(number);
	}


	public void setD51uCausCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uCausCnt((int)number);
	}


	/**
	 *	Test condition "Y" for isFromSvcFound1()
	 *	@return  Returns true if isFromSvcFound1() is "Y"
	 */
   public boolean isFromSvcFound1() throws CFException {
      return work.isFromSvcFound1();
   }

	/**
	*  set values "Y"
	*/
   	public void setFromSvcFound1True()  throws CFException{  			
    	work.setFromSvcFound1True();
   	}
	/**
	 *	Returns the value of prevSvc
	 *	@return prevSvc
	 */
   public char[] getPrevSvc() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevSvc();
   }

  
	/**
	*  set variable prevSvc
	*  @param value
	**/
   public void setPrevSvc(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(value);
   } 

     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex);
   	
   }
   
   public void setPrevSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevSvc with another Field
	 *	@param value
	 */
   public void setPrevSvc(Field source) {
      workFields.getPrevMatchedKey().setPrevSvc(source);
   }  
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isFromIcd9Found1()
	 *	@return  Returns true if isFromIcd9Found1() is "Y"
	 */
   public boolean isFromIcd9Found1() throws CFException {
      return work.isFromIcd9Found1();
   }

	/**
	*  set values "Y"
	*/
   	public void setFromIcd9Found1True()  throws CFException{  			
    	work.setFromIcd9Found1True();
   	}
	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of uIcdVerNbr51
	 *	@return uIcdVerNbr51
	 */
   public char[] getUIcdVerNbr51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUIcdVerNbr51();
   }

  
	/**
	*  set variable uIcdVerNbr51
	*  @param value
	**/
   public void setUIcdVerNbr51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(value);
   } 

     /**
	 * 	Update UIcdVerNbr51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUIcdVerNbr51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex);
   	
   }
   
   public void setUIcdVerNbr51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UIcdVerNbr51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUIcdVerNbr51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UIcdVerNbr51 with another Field
	 *	@param value
	 */
   public void setUIcdVerNbr51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source);
   }  
   
     /**
	 * 	Update UIcdVerNbr51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUIcdVerNbr51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UIcdVerNbr51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUIcdVerNbr51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypCauseCd
	 *	@return ptypCauseCd
	 */
   public char[] getPtypCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypCauseCd();
   }

  
	/**
	*  set variable ptypCauseCd
	*  @param value
	**/
   public void setPtypCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypCauseCd(value);
   } 

     /**
	 * 	Update PtypCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex);
   	
   }
   
   public void setPtypCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypCauseCd with another Field
	 *	@param value
	 */
   public void setPtypCauseCd(Field source) {
      workFields.getHoldTransData2().setPtypCauseCd(source);
   }  
   
     /**
	 * 	Update PtypCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of svcSub
	 *	@return svcSub
	 */
	public int getSvcSub() throws CFException {        
   		return work.getSvcSub();
	}
	
	/**
	 * 	Update SvcSub with the passed value
	 *	@param number
	 */
	public void setSvcSub(int number)  throws CFException{
		work.setSvcSub(number);
	}


	public void setSvcSub(long number)  throws CFException{
		work.setSvcSub((int)number);
	}


	/**
	 *	Returns the value of d51uIpaCnt
	 *	@return d51uIpaCnt
	 */
	public int getD51uIpaCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uIpaCnt();
	}
	
	/**
	 * 	Update D51uIpaCnt with the passed value
	 *	@param number
	 */
	public void setD51uIpaCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIpaCnt(number);
	}


	public void setD51uIpaCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIpaCnt((int)number);
	}


	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isFromPsFound1()
	 *	@return  Returns true if isFromPsFound1() is "Y"
	 */
   public boolean isFromPsFound1() throws CFException {
      return work.isFromPsFound1();
   }

	/**
	*  set values "Y"
	*/
   	public void setFromPsFound1True()  throws CFException{  			
    	work.setFromPsFound1True();
   	}
	/**
	 *	Returns the value of cflgSub
	 *	@return cflgSub
	 */
	public int getCflgSub() throws CFException {        
   		return work.getCflgSub();
	}
	
	/**
	 * 	Update CflgSub with the passed value
	 *	@param number
	 */
	public void setCflgSub(int number)  throws CFException{
		work.setCflgSub(number);
	}


	public void setCflgSub(long number)  throws CFException{
		work.setCflgSub((int)number);
	}


	/**
	 *	Returns the value of causSvc
	 *	@return causSvc
	 */
   public char[] getCausSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getCausSvc();
   }

  
	/**
	*  set variable causSvc
	*  @param value
	**/
   public void setCausSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausSvc(value);
   } 

     /**
	 * 	Update CausSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex);
   	
   }
   
   public void setCausSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausSvc with another Field
	 *	@param value
	 */
   public void setCausSvc(Field source) {
      workFields.getHoldTransData2().setCausSvc(source);
   }  
   
     /**
	 * 	Update CausSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFcndCnt
	 *	@return d51uFcndCnt
	 */
	public int getD51uFcndCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uFcndCnt();
	}
	
	/**
	 * 	Update D51uFcndCnt with the passed value
	 *	@param number
	 */
	public void setD51uFcndCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uFcndCnt(number);
	}


	public void setD51uFcndCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uFcndCnt((int)number);
	}


public int getFesaSpiNbr01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiNbr01();
}
	/**
	 * 	Update FesaSpiNbr01 with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}


	public void setFesaSpiNbr01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}
	

	/**
	 *	Returns the value of causPs
	 *	@return causPs
	 */
   public char[] getCausPs() throws CFException  {              
   		return workFields.getHoldTransData2().getCausPs();
   }

  
	/**
	*  set variable causPs
	*  @param value
	**/
   public void setCausPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausPs(value);
   } 

     /**
	 * 	Update CausPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex);
   	
   }
   
   public void setCausPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausPs with another Field
	 *	@param value
	 */
   public void setCausPs(Field source) {
      workFields.getHoldTransData2().setCausPs(source);
   }  
   
     /**
	 * 	Update CausPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of icd9Sub
	 *	@return icd9Sub
	 */
	public int getIcd9Sub() throws CFException {        
   		return work.getIcd9Sub();
	}
	
	/**
	 * 	Update Icd9Sub with the passed value
	 *	@param number
	 */
	public void setIcd9Sub(int number)  throws CFException{
		work.setIcd9Sub(number);
	}


	public void setIcd9Sub(long number)  throws CFException{
		work.setIcd9Sub((int)number);
	}


	/**
	 *	Returns the value of posSub
	 *	@return posSub
	 */
	public int getPosSub() throws CFException {        
   		return work.getPosSub();
	}
	
	/**
	 * 	Update PosSub with the passed value
	 *	@param number
	 */
	public void setPosSub(int number)  throws CFException{
		work.setPosSub(number);
	}


	public void setPosSub(long number)  throws CFException{
		work.setPosSub((int)number);
	}


	/**
	 *	Returns the value of psSub
	 *	@return psSub
	 */
	public int getPsSub() throws CFException {        
   		return work.getPsSub();
	}
	
	/**
	 * 	Update PsSub with the passed value
	 *	@param number
	 */
	public void setPsSub(int number)  throws CFException{
		work.setPsSub(number);
	}


	public void setPsSub(long number)  throws CFException{
		work.setPsSub((int)number);
	}


	/**
	 *	Test condition 1 for isD51uNotFound()
	 *	@return  Returns true if isD51uNotFound() is 1
	 */
   public boolean isD51uNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uNotFound();
   }

	/**
	*  set values 1
	*/
   	public void setD51uNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uNotFoundTrue();
   	}
	/**
	 *	Returns the value of d51uMoreIcdRecords
	 *	@return d51uMoreIcdRecords
	 */
   public char[] getD51uMoreIcdRecords() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uMoreIcdRecords();
   }

  
	/**
	*  set variable d51uMoreIcdRecords
	*  @param value
	**/
   public void setD51uMoreIcdRecords(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uMoreIcdRecords(value);
   } 

     /**
	 * 	Update D51uMoreIcdRecords 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uMoreIcdRecords(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uMoreIcdRecords(source, sourceIndex);
   	
   }
   
   public void setD51uMoreIcdRecords(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uMoreIcdRecords(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uMoreIcdRecords 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uMoreIcdRecords(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uMoreIcdRecords(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uMoreIcdRecords with another Field
	 *	@param value
	 */
   public void setD51uMoreIcdRecords(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uMoreIcdRecords(source);
   }  
   
     /**
	 * 	Update D51uMoreIcdRecords 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uMoreIcdRecords(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uMoreIcdRecords(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uMoreIcdRecords 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uMoreIcdRecords(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uMoreIcdRecords(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdCauseCd
	 *	@return ricdCauseCd
	 */
   public char[] getRicdCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdCauseCd();
   }

  
	/**
	*  set variable ricdCauseCd
	*  @param value
	**/
   public void setRicdCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdCauseCd(value);
   } 

     /**
	 * 	Update RicdCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex);
   	
   }
   
   public void setRicdCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdCauseCd with another Field
	 *	@param value
	 */
   public void setRicdCauseCd(Field source) {
      workFields.getHoldTransData2().setRicdCauseCd(source);
   }  
   
     /**
	 * 	Update RicdCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uInvReason
	 *	@return d51uInvReason
	 */
	public int getD51uInvReason() throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uInvReason();
	}


	/**
	 *	Returns String value of d51uInvReason
	 *	@return d51uInvReason
	 */
	public char[]  getD51uInvReasonString() throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uInvReasonString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uInvReasonIsNumeric()  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().d51uInvReasonIsNumeric();
	}

	/**
	 * 	Update D51uInvReason with the passed value
	 *	@param number
	 */
	public void setD51uInvReason(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(number);
	}
	

	public void setD51uInvReason(long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(number);
	}
	
	
	/**
	 * 	Update D51uInvReason with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uInvReason(char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(value);
	}
	
	/**
	 * 	Update D51uInvReason with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uInvReasonString(char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(value);
	}	

	/**
	 *	Returns the value of prevPs
	 *	@return prevPs
	 */
   public char[] getPrevPs() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevPs();
   }

  
	/**
	*  set variable prevPs
	*  @param value
	**/
   public void setPrevPs(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(value);
   } 

     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex);
   	
   }
   
   public void setPrevPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevPs with another Field
	 *	@param value
	 */
   public void setPrevPs(Field source) {
      workFields.getPrevMatchedKey().setPrevPs(source);
   }  
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of keySub
	 *	@return keySub
	 */
	public int getKeySub() throws CFException {        
   		return work.getKeySub();
	}
	
	/**
	 * 	Update KeySub with the passed value
	 *	@param number
	 */
	public void setKeySub(int number)  throws CFException{
		work.setKeySub(number);
	}


	public void setKeySub(long number)  throws CFException{
		work.setKeySub((int)number);
	}


	/**
	 *	Returns the value of ripaCauseCd
	 *	@return ripaCauseCd
	 */
   public char[] getRipaCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaCauseCd();
   }

  
	/**
	*  set variable ripaCauseCd
	*  @param value
	**/
   public void setRipaCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaCauseCd(value);
   } 

     /**
	 * 	Update RipaCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex);
   	
   }
   
   public void setRipaCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaCauseCd with another Field
	 *	@param value
	 */
   public void setRipaCauseCd(Field source) {
      workFields.getHoldTransData2().setRipaCauseCd(source);
   }  
   
     /**
	 * 	Update RipaCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypSvc
	 *	@return ptypSvc
	 */
   public char[] getPtypSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypSvc();
   }

  
	/**
	*  set variable ptypSvc
	*  @param value
	**/
   public void setPtypSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypSvc(value);
   } 

     /**
	 * 	Update PtypSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex);
   	
   }
   
   public void setPtypSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypSvc with another Field
	 *	@param value
	 */
   public void setPtypSvc(Field source) {
      workFields.getHoldTransData2().setPtypSvc(source);
   }  
   
     /**
	 * 	Update PtypSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isFromCauseFound1()
	 *	@return  Returns true if isFromCauseFound1() is "Y"
	 */
   public boolean isFromCauseFound1() throws CFException {
      return work.isFromCauseFound1();
   }

	/**
	*  set values "Y"
	*/
   	public void setFromCauseFound1True()  throws CFException{  			
    	work.setFromCauseFound1True();
   	}
	/**
	 *	Returns the value of dsmCallArea
	 *	@return dsmCallArea
	 */   
	 public DsmCallArea getDsmCallArea() {
   	return dsmCallArea;
   }


	/**
	 *	Returns the value of frtoPs
	 *	@return frtoPs
	 */
   public char[] getFrtoPs() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoPs();
   }

  
	/**
	*  set variable frtoPs
	*  @param value
	**/
   public void setFrtoPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoPs(value);
   } 

     /**
	 * 	Update FrtoPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex);
   	
   }
   
   public void setFrtoPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoPs with another Field
	 *	@param value
	 */
   public void setFrtoPs(Field source) {
      workFields.getHoldTransData2().setFrtoPs(source);
   }  
   
     /**
	 * 	Update FrtoPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causCauseCd
	 *	@return causCauseCd
	 */
   public char[] getCausCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getCausCauseCd();
   }

  
	/**
	*  set variable causCauseCd
	*  @param value
	**/
   public void setCausCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausCauseCd(value);
   } 

     /**
	 * 	Update CausCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex);
   	
   }
   
   public void setCausCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausCauseCd with another Field
	 *	@param value
	 */
   public void setCausCauseCd(Field source) {
      workFields.getHoldTransData2().setCausCauseCd(source);
   }  
   
     /**
	 * 	Update CausCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of frtoSvc
	 *	@return frtoSvc
	 */
   public char[] getFrtoSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoSvc();
   }

  
	/**
	*  set variable frtoSvc
	*  @param value
	**/
   public void setFrtoSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoSvc(value);
   } 

     /**
	 * 	Update FrtoSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex);
   	
   }
   
   public void setFrtoSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoSvc with another Field
	 *	@param value
	 */
   public void setFrtoSvc(Field source) {
      workFields.getHoldTransData2().setFrtoSvc(source);
   }  
   
     /**
	 * 	Update FrtoSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public MatchingRtnOutCtx getMatchingRtnOutCtx() {
            return new MatchingRtnOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public MatchingRtnInCtx clone() {
        MatchingRtnInCtx cloneObj = new MatchingRtnInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public MatchingRtnInCtx getMatchingRtnInCtx() {
            return new MatchingRtnInCtx();
    }
     public class MatchingRtnOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = O529351uCtx.this.getDsmCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();
     W02DsplMsgArea w02DsplMsgArea = O529351uCtx.this.getW02DsplMsgArea();

	/**
	 *	Returns the value of fesaSpiDiagElgInd
	 *	@return fesaSpiDiagElgInd
	 */
   public char[] getFesaSpiDiagElgInd(int index) throws CFException  {              
   		return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiDiagElgInd();
   }

  
	/**
	*  set variable fesaSpiDiagElgInd
	*  @param value
	**/
   public void setFesaSpiDiagElgInd(int index,char[] value) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(value);
   } 

     /**
	 * 	Update FesaSpiDiagElgInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,char[] source, int sourceIndex) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex);
   	
   }
   
   public void setFesaSpiDiagElgInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaSpiDiagElgInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaSpiDiagElgInd with another Field
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,Field source) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source);
   }  
   
     /**
	 * 	Update FesaSpiDiagElgInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,Field source, int sourceIndex,int sourceLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaSpiDiagElgInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaSpiDiagElgInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cflgSvc
	 *	@return cflgSvc
	 */
   public char[] getCflgSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgSvc();
   }

  
	/**
	*  set variable cflgSvc
	*  @param value
	**/
   public void setCflgSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgSvc(value);
   } 

     /**
	 * 	Update CflgSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex);
   	
   }
   
   public void setCflgSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgSvc with another Field
	 *	@param value
	 */
   public void setCflgSvc(Field source) {
      workFields.getHoldTransData2().setCflgSvc(source);
   }  
   
     /**
	 * 	Update CflgSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uLstClmIcdSvc
	 *	@return d51uLstClmIcdSvc
	 */
   public char[] getD51uLstClmIcdSvc() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().getD51uLstClmIcdSvc();
   }

  
	/**
	*  set variable d51uLstClmIcdSvc
	*  @param value
	**/
   public void setD51uLstClmIcdSvc(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(value);
   } 

     /**
	 * 	Update D51uLstClmIcdSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uLstClmIcdSvc(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source, sourceIndex);
   	
   }
   
   public void setD51uLstClmIcdSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uLstClmIcdSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uLstClmIcdSvc with another Field
	 *	@param value
	 */
   public void setD51uLstClmIcdSvc(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source);
   }  
   
     /**
	 * 	Update D51uLstClmIcdSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uLstClmIcdSvc(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uLstClmIcdSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaSvc
	 *	@return ripaSvc
	 */
   public char[] getRipaSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaSvc();
   }

  
	/**
	*  set variable ripaSvc
	*  @param value
	**/
   public void setRipaSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaSvc(value);
   } 

     /**
	 * 	Update RipaSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex);
   	
   }
   
   public void setRipaSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaSvc with another Field
	 *	@param value
	 */
   public void setRipaSvc(Field source) {
      workFields.getHoldTransData2().setRipaSvc(source);
   }  
   
     /**
	 * 	Update RipaSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cflgCauseCd
	 *	@return cflgCauseCd
	 */
   public char[] getCflgCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgCauseCd();
   }

  
	/**
	*  set variable cflgCauseCd
	*  @param value
	**/
   public void setCflgCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgCauseCd(value);
   } 

     /**
	 * 	Update CflgCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex);
   	
   }
   
   public void setCflgCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgCauseCd with another Field
	 *	@param value
	 */
   public void setCflgCauseCd(Field source) {
      workFields.getHoldTransData2().setCflgCauseCd(source);
   }  
   
     /**
	 * 	Update CflgCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdPs
	 *	@return ricdPs
	 */
   public char[] getRicdPs() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdPs();
   }

  
	/**
	*  set variable ricdPs
	*  @param value
	**/
   public void setRicdPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdPs(value);
   } 

     /**
	 * 	Update RicdPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex);
   	
   }
   
   public void setRicdPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdPs with another Field
	 *	@param value
	 */
   public void setRicdPs(Field source) {
      workFields.getHoldTransData2().setRicdPs(source);
   }  
   
     /**
	 * 	Update RicdPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Returns the value of ricdSvc
	 *	@return ricdSvc
	 */
   public char[] getRicdSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdSvc();
   }

  
	/**
	*  set variable ricdSvc
	*  @param value
	**/
   public void setRicdSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdSvc(value);
   } 

     /**
	 * 	Update RicdSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex);
   	
   }
   
   public void setRicdSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdSvc with another Field
	 *	@param value
	 */
   public void setRicdSvc(Field source) {
      workFields.getHoldTransData2().setRicdSvc(source);
   }  
   
     /**
	 * 	Update RicdSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndCauseCd
	 *	@return fcndCauseCd
	 */
   public char[] getFcndCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndCauseCd();
   }

  
	/**
	*  set variable fcndCauseCd
	*  @param value
	**/
   public void setFcndCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndCauseCd(value);
   } 

     /**
	 * 	Update FcndCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex);
   	
   }
   
   public void setFcndCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndCauseCd with another Field
	 *	@param value
	 */
   public void setFcndCauseCd(Field source) {
      workFields.getHoldTransData2().setFcndCauseCd(source);
   }  
   
     /**
	 * 	Update FcndCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypPs
	 *	@return ptypPs
	 */
   public char[] getPtypPs() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypPs();
   }

  
	/**
	*  set variable ptypPs
	*  @param value
	**/
   public void setPtypPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypPs(value);
   } 

     /**
	 * 	Update PtypPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex);
   	
   }
   
   public void setPtypPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypPs with another Field
	 *	@param value
	 */
   public void setPtypPs(Field source) {
      workFields.getHoldTransData2().setPtypPs(source);
   }  
   
     /**
	 * 	Update PtypPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "I" for isM51uIllogicalCond()
	 *	@return  Returns true if isM51uIllogicalCond() is "I"
	 */
   public boolean isM51uIllogicalCond() throws CFException {
      return dfhcommarea.getLinkAreaM51u().getM51uFlags().isM51uIllogicalCond();
   }

	/**
	*  set values "I"
	*/
   	public void setM51uIllogicalCondTrue()  throws CFException{  			
    	dfhcommarea.getLinkAreaM51u().getM51uFlags().setM51uIllogicalCondTrue();
   	}
	/**
	 *	Returns the value of prevCauseCd
	 *	@return prevCauseCd
	 */
   public char[] getPrevCauseCd() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevCauseCd();
   }

  
	/**
	*  set variable prevCauseCd
	*  @param value
	**/
   public void setPrevCauseCd(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(value);
   } 

     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex);
   	
   }
   
   public void setPrevCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevCauseCd with another Field
	 *	@param value
	 */
   public void setPrevCauseCd(Field source) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source);
   }  
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaPs
	 *	@return ripaPs
	 */
   public char[] getRipaPs() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaPs();
   }

  
	/**
	*  set variable ripaPs
	*  @param value
	**/
   public void setRipaPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaPs(value);
   } 

     /**
	 * 	Update RipaPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex);
   	
   }
   
   public void setRipaPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaPs with another Field
	 *	@param value
	 */
   public void setRipaPs(Field source) {
      workFields.getHoldTransData2().setRipaPs(source);
   }  
   
     /**
	 * 	Update RipaPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of frtoCauseCd
	 *	@return frtoCauseCd
	 */
   public char[] getFrtoCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoCauseCd();
   }

  
	/**
	*  set variable frtoCauseCd
	*  @param value
	**/
   public void setFrtoCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoCauseCd(value);
   } 

     /**
	 * 	Update FrtoCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex);
   	
   }
   
   public void setFrtoCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoCauseCd with another Field
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source) {
      workFields.getHoldTransData2().setFrtoCauseCd(source);
   }  
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fesaPosTierCd
	 *	@return fesaPosTierCd
	 */
   public char[] getFesaPosTierCd(int index) throws CFException  {              
   		return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaPosTierCd();
   }

  
	/**
	*  set variable fesaPosTierCd
	*  @param value
	**/
   public void setFesaPosTierCd(int index,char[] value) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(value);
   } 

     /**
	 * 	Update FesaPosTierCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,char[] source, int sourceIndex) throws CFException {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex);
   	
   }
   
   public void setFesaPosTierCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FesaPosTierCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FesaPosTierCd with another Field
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,Field source) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source);
   }  
   
     /**
	 * 	Update FesaPosTierCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,Field source, int sourceIndex,int sourceLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FesaPosTierCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFesaPosTierCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uKeyFeSpi
	 *	@return d51uKeyFeSpi
	 */
   public char[] getD51uKeyFeSpi() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyFeSpi();
   }

  
	/**
	*  set variable d51uKeyFeSpi
	*  @param value
	**/
   public void setD51uKeyFeSpi(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(value);
   } 

     /**
	 * 	Update D51uKeyFeSpi 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyFeSpi(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex);
   	
   }
   
   public void setD51uKeyFeSpi(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyFeSpi(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyFeSpi with another Field
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source);
   }  
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of holdSvc
	 *	@return holdSvc
	 */
   public char[] getHoldSvc() throws CFException  {              
   		return workFields.getHoldTransData().getHoldSvc();
   }

  
	/**
	*  set variable holdSvc
	*  @param value
	**/
   public void setHoldSvc(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldSvc(value);
   } 

     /**
	 * 	Update HoldSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex);
   	
   }
   
   public void setHoldSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldSvc with another Field
	 *	@param value
	 */
   public void setHoldSvc(Field source) {
      workFields.getHoldTransData().setHoldSvc(source);
   }  
   
     /**
	 * 	Update HoldSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causeSub
	 *	@return causeSub
	 */
	public int getCauseSub() throws CFException {        
   		return work.getCauseSub();
	}
	
	/**
	 * 	Update CauseSub with the passed value
	 *	@param number
	 */
	public void setCauseSub(int number)  throws CFException{
		work.setCauseSub(number);
	}


	public void setCauseSub(long number)  throws CFException{
		work.setCauseSub((int)number);
	}


	/**
	 *	Returns the value of pvSub
	 *	@return pvSub
	 */
	public int getPvSub() throws CFException {        
   		return work.getPvSub();
	}
	
	/**
	 * 	Update PvSub with the passed value
	 *	@param number
	 */
	public void setPvSub(int number)  throws CFException{
		work.setPvSub(number);
	}


	public void setPvSub(long number)  throws CFException{
		work.setPvSub((int)number);
	}


	/**
	 *	Returns the value of w02MainProg
	 *	@return w02MainProg
	 */
   public char[] getW02MainProg() throws CFException  {              
   		return w02DsplMsgArea.getW02MainProg();
   }

  
	/**
	*  set variable w02MainProg
	*  @param value
	**/
   public void setW02MainProg(char[] value) throws CFException {
      w02DsplMsgArea.setW02MainProg(value);
   } 

     /**
	 * 	Update W02MainProg 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02MainProg(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02MainProg(source, sourceIndex);
   	
   }
   
   public void setW02MainProg(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02MainProg(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02MainProg 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02MainProg(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02MainProg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02MainProg with another Field
	 *	@param value
	 */
   public void setW02MainProg(Field source) {
      w02DsplMsgArea.setW02MainProg(source);
   }  
   
     /**
	 * 	Update W02MainProg 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02MainProg(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02MainProg(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02MainProg 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02MainProg(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02MainProg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of vyspi51uCallArea
	 *	@return vyspi51uCallArea
	 */   
	 public Vyspi51uCallArea getVyspi51uCallArea() {
   	return vyspi51uCallArea;
   }


	/**
	 *	Returns the value of w02AbendingProg
	 *	@return w02AbendingProg
	 */
   public char[] getW02AbendingProg() throws CFException  {              
   		return w02DsplMsgArea.getW02AbendingProg();
   }

  
	/**
	*  set variable w02AbendingProg
	*  @param value
	**/
   public void setW02AbendingProg(char[] value) throws CFException {
      w02DsplMsgArea.setW02AbendingProg(value);
   } 

     /**
	 * 	Update W02AbendingProg 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02AbendingProg(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex);
   	
   }
   
   public void setW02AbendingProg(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02AbendingProg 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02AbendingProg(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02AbendingProg with another Field
	 *	@param value
	 */
   public void setW02AbendingProg(Field source) {
      w02DsplMsgArea.setW02AbendingProg(source);
   }  
   
     /**
	 * 	Update W02AbendingProg 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02AbendingProg(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02AbendingProg 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02AbendingProg(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02AbendingProg(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isFirstTimeMoreIcd()
	 *	@return  Returns true if isFirstTimeMoreIcd() is "Y"
	 */
   public boolean isFirstTimeMoreIcd() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isFirstTimeMoreIcd();
   }

	/**
	*  set values "Y"
	*/
   	public void setFirstTimeMoreIcdTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setFirstTimeMoreIcdTrue();
   	}
	/**
	 *	Returns the value of holdPs
	 *	@return holdPs
	 */
   public char[] getHoldPs() throws CFException  {              
   		return workFields.getHoldTransData().getHoldPs();
   }

  
	/**
	*  set variable holdPs
	*  @param value
	**/
   public void setHoldPs(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldPs(value);
   } 

     /**
	 * 	Update HoldPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex);
   	
   }
   
   public void setHoldPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldPs with another Field
	 *	@param value
	 */
   public void setHoldPs(Field source) {
      workFields.getHoldTransData().setHoldPs(source);
   }  
   
     /**
	 * 	Update HoldPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sameTable
	 *	@return sameTable
	 */
   public char[] getSameTable() throws CFException  {              
   		return work.getSameTable();
   }

  
	/**
	*  set variable sameTable
	*  @param value
	**/
   public void setSameTable(char[] value) throws CFException {
      work.setSameTable(value);
   } 

	/**
	 *	Returns the value of holdDiagElgInd
	 *	@return holdDiagElgInd
	 */
   public char[] getHoldDiagElgInd() throws CFException  {              
   		return workFields.getHoldTransData().getHoldDiagElgInd();
   }

  
	/**
	*  set variable holdDiagElgInd
	*  @param value
	**/
   public void setHoldDiagElgInd(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldDiagElgInd(value);
   } 

     /**
	 * 	Update HoldDiagElgInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldDiagElgInd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex);
   	
   }
   
   public void setHoldDiagElgInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldDiagElgInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldDiagElgInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldDiagElgInd with another Field
	 *	@param value
	 */
   public void setHoldDiagElgInd(Field source) {
      workFields.getHoldTransData().setHoldDiagElgInd(source);
   }  
   
     /**
	 * 	Update HoldDiagElgInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldDiagElgInd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldDiagElgInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldDiagElgInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndSvc
	 *	@return fcndSvc
	 */
   public char[] getFcndSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndSvc();
   }

  
	/**
	*  set variable fcndSvc
	*  @param value
	**/
   public void setFcndSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndSvc(value);
   } 

     /**
	 * 	Update FcndSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex);
   	
   }
   
   public void setFcndSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndSvc with another Field
	 *	@param value
	 */
   public void setFcndSvc(Field source) {
      workFields.getHoldTransData2().setFcndSvc(source);
   }  
   
     /**
	 * 	Update FcndSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uLstClmIcdCau
	 *	@return d51uLstClmIcdCau
	 */
   public char[] getD51uLstClmIcdCau() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().getD51uLstClmIcdCau();
   }

  
	/**
	*  set variable d51uLstClmIcdCau
	*  @param value
	**/
   public void setD51uLstClmIcdCau(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(value);
   } 

     /**
	 * 	Update D51uLstClmIcdCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uLstClmIcdCau(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source, sourceIndex);
   	
   }
   
   public void setD51uLstClmIcdCau(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uLstClmIcdCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdCau(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uLstClmIcdCau with another Field
	 *	@param value
	 */
   public void setD51uLstClmIcdCau(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source);
   }  
   
     /**
	 * 	Update D51uLstClmIcdCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uLstClmIcdCau(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uLstClmIcdCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdCau(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndPs
	 *	@return fcndPs
	 */
   public char[] getFcndPs() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndPs();
   }

  
	/**
	*  set variable fcndPs
	*  @param value
	**/
   public void setFcndPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndPs(value);
   } 

     /**
	 * 	Update FcndPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex);
   	
   }
   
   public void setFcndPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndPs with another Field
	 *	@param value
	 */
   public void setFcndPs(Field source) {
      workFields.getHoldTransData2().setFcndPs(source);
   }  
   
     /**
	 * 	Update FcndPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of iSub
	 *	@return iSub
	 */
	public int getISub() throws CFException {        
   		return work.getISub();
	}
	
	/**
	 * 	Update ISub with the passed value
	 *	@param number
	 */
	public void setISub(int number)  throws CFException{
		work.setISub(number);
	}


	public void setISub(long number)  throws CFException{
		work.setISub((int)number);
	}


	/**
	 *	Returns the value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public short getNbrMatchedPrev() throws CFException {
   		return workFields.getNbrMatchedPrev();
	}

    /**
	 *	Returns the String value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public char[]  getNbrMatchedPrevActualString() {
		return workFields.getNbrMatchedPrevActualString();
	}

	/**
	 *	Returns String value of nbrMatchedPrev
	 *	@return nbrMatchedPrev
	 */
	public char[]  getNbrMatchedPrevString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedPrevString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedPrevIsNumeric()  throws CFException{
	    return workFields.nbrMatchedPrevIsNumeric();
	}

	/**
	 * 	Update NbrMatchedPrev with the passed value
	 *	@param number
	 */
	public void setNbrMatchedPrev(short number)  throws CFException{
		workFields.setNbrMatchedPrev(number);
	}
	
	public void setNbrMatchedPrev(int number)  throws CFException{
	    workFields.setNbrMatchedPrev(number);
	}
	public void setNbrMatchedPrev(long number)  throws CFException{
	    workFields.setNbrMatchedPrev(number);
	}
	

	
	/**
	 * 	Update NbrMatchedPrev with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedPrev(char[] value)  throws CFException {
		workFields.setNbrMatchedPrev(value);
	}
	
	/**
	 * 	Update NbrMatchedPrev with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedPrevString(char[] value)  throws CFException{
		workFields.setNbrMatchedPrev(value);
	}	

	/**
	 *	Returns the value of cflgPs
	 *	@return cflgPs
	 */
   public char[] getCflgPs() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgPs();
   }

  
	/**
	*  set variable cflgPs
	*  @param value
	**/
   public void setCflgPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgPs(value);
   } 

     /**
	 * 	Update CflgPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex);
   	
   }
   
   public void setCflgPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgPs with another Field
	 *	@param value
	 */
   public void setCflgPs(Field source) {
      workFields.getHoldTransData2().setCflgPs(source);
   }  
   
     /**
	 * 	Update CflgPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevSvc
	 *	@return prevSvc
	 */
   public char[] getPrevSvc() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevSvc();
   }

  
	/**
	*  set variable prevSvc
	*  @param value
	**/
   public void setPrevSvc(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(value);
   } 

     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex);
   	
   }
   
   public void setPrevSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevSvc with another Field
	 *	@param value
	 */
   public void setPrevSvc(Field source) {
      workFields.getPrevMatchedKey().setPrevSvc(source);
   }  
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uLstClmIcdPos
	 *	@return d51uLstClmIcdPos
	 */
   public char[] getD51uLstClmIcdPos() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().getD51uLstClmIcdPos();
   }

  
	/**
	*  set variable d51uLstClmIcdPos
	*  @param value
	**/
   public void setD51uLstClmIcdPos(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(value);
   } 

     /**
	 * 	Update D51uLstClmIcdPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uLstClmIcdPos(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source, sourceIndex);
   	
   }
   
   public void setD51uLstClmIcdPos(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uLstClmIcdPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdPos(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uLstClmIcdPos with another Field
	 *	@param value
	 */
   public void setD51uLstClmIcdPos(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source);
   }  
   
     /**
	 * 	Update D51uLstClmIcdPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uLstClmIcdPos(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uLstClmIcdPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdPos(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uLstClmIcdInd
	 *	@return d51uLstClmIcdInd
	 */
   public char[] getD51uLstClmIcdInd() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().getD51uLstClmIcdInd();
   }

  
	/**
	*  set variable d51uLstClmIcdInd
	*  @param value
	**/
   public void setD51uLstClmIcdInd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(value);
   } 

     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex);
   	
   }
   
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uLstClmIcdInd with another Field
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source);
   }  
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of ptypCauseCd
	 *	@return ptypCauseCd
	 */
   public char[] getPtypCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypCauseCd();
   }

  
	/**
	*  set variable ptypCauseCd
	*  @param value
	**/
   public void setPtypCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypCauseCd(value);
   } 

     /**
	 * 	Update PtypCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex);
   	
   }
   
   public void setPtypCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypCauseCd with another Field
	 *	@param value
	 */
   public void setPtypCauseCd(Field source) {
      workFields.getHoldTransData2().setPtypCauseCd(source);
   }  
   
     /**
	 * 	Update PtypCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of svcSub
	 *	@return svcSub
	 */
	public int getSvcSub() throws CFException {        
   		return work.getSvcSub();
	}
	
	/**
	 * 	Update SvcSub with the passed value
	 *	@param number
	 */
	public void setSvcSub(int number)  throws CFException{
		work.setSvcSub(number);
	}


	public void setSvcSub(long number)  throws CFException{
		work.setSvcSub((int)number);
	}


	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of holdPosTierCd
	 *	@return holdPosTierCd
	 */
   public char[] getHoldPosTierCd() throws CFException  {              
   		return workFields.getHoldTransData().getHoldPosTierCd();
   }

  
	/**
	*  set variable holdPosTierCd
	*  @param value
	**/
   public void setHoldPosTierCd(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldPosTierCd(value);
   } 

     /**
	 * 	Update HoldPosTierCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldPosTierCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex);
   	
   }
   
   public void setHoldPosTierCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldPosTierCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldPosTierCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldPosTierCd with another Field
	 *	@param value
	 */
   public void setHoldPosTierCd(Field source) {
      workFields.getHoldTransData().setHoldPosTierCd(source);
   }  
   
     /**
	 * 	Update HoldPosTierCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldPosTierCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldPosTierCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldPosTierCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cflgSub
	 *	@return cflgSub
	 */
	public int getCflgSub() throws CFException {        
   		return work.getCflgSub();
	}
	
	/**
	 * 	Update CflgSub with the passed value
	 *	@param number
	 */
	public void setCflgSub(int number)  throws CFException{
		work.setCflgSub(number);
	}


	public void setCflgSub(long number)  throws CFException{
		work.setCflgSub((int)number);
	}


	/**
	 *	Returns the value of hold1SpiTblId
	 *	@return hold1SpiTblId
	 */
   public char[] getHold1SpiTblId() throws CFException  {              
   		return workFields.getHoldTransData().getHold1SpiTblId();
   }

  
	/**
	*  set variable hold1SpiTblId
	*  @param value
	**/
   public void setHold1SpiTblId(char[] value) throws CFException {
      workFields.getHoldTransData().setHold1SpiTblId(value);
   } 

     /**
	 * 	Update Hold1SpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHold1SpiTblId(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHold1SpiTblId(source, sourceIndex);
   	
   }
   
   public void setHold1SpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHold1SpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Hold1SpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHold1SpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHold1SpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Hold1SpiTblId with another Field
	 *	@param value
	 */
   public void setHold1SpiTblId(Field source) {
      workFields.getHoldTransData().setHold1SpiTblId(source);
   }  
   
     /**
	 * 	Update Hold1SpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHold1SpiTblId(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHold1SpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Hold1SpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHold1SpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHold1SpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causSvc
	 *	@return causSvc
	 */
   public char[] getCausSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getCausSvc();
   }

  
	/**
	*  set variable causSvc
	*  @param value
	**/
   public void setCausSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausSvc(value);
   } 

     /**
	 * 	Update CausSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex);
   	
   }
   
   public void setCausSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausSvc with another Field
	 *	@param value
	 */
   public void setCausSvc(Field source) {
      workFields.getHoldTransData2().setCausSvc(source);
   }  
   
     /**
	 * 	Update CausSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isSameTable1()
	 *	@return  Returns true if isSameTable1() is "Y"
	 */
   public boolean isSameTable1() throws CFException {
      return work.isSameTable1();
   }

	/**
	*  set values "Y"
	*/
   	public void setSameTable1True()  throws CFException{  			
    	work.setSameTable1True();
   	}
public int getFesaSpiNbr01(int index) throws CFException {  
        return workFields.getPlanVarInputLines().getPlanVarRec(index).getFesaSpiNbr01();
}
	/**
	 * 	Update FesaSpiNbr01 with the passed value
	 *	@param number
	 */
	public void setFesaSpiNbr01(int index,int number)  throws CFException{
		workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}


	public void setFesaSpiNbr01(int index,long number)  throws CFException{
	    workFields.getPlanVarInputLines().getPlanVarRec(index).setFesaSpiNbr01(number);
	}
	

	/**
	 *	Returns the value of causPs
	 *	@return causPs
	 */
   public char[] getCausPs() throws CFException  {              
   		return workFields.getHoldTransData2().getCausPs();
   }

  
	/**
	*  set variable causPs
	*  @param value
	**/
   public void setCausPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausPs(value);
   } 

     /**
	 * 	Update CausPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex);
   	
   }
   
   public void setCausPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausPs with another Field
	 *	@param value
	 */
   public void setCausPs(Field source) {
      workFields.getHoldTransData2().setCausPs(source);
   }  
   
     /**
	 * 	Update CausPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of icd9Sub
	 *	@return icd9Sub
	 */
	public int getIcd9Sub() throws CFException {        
   		return work.getIcd9Sub();
	}
	
	/**
	 * 	Update Icd9Sub with the passed value
	 *	@param number
	 */
	public void setIcd9Sub(int number)  throws CFException{
		work.setIcd9Sub(number);
	}


	public void setIcd9Sub(long number)  throws CFException{
		work.setIcd9Sub((int)number);
	}


	/**
	 *	Returns the value of posSub
	 *	@return posSub
	 */
	public int getPosSub() throws CFException {        
   		return work.getPosSub();
	}
	
	/**
	 * 	Update PosSub with the passed value
	 *	@param number
	 */
	public void setPosSub(int number)  throws CFException{
		work.setPosSub(number);
	}


	public void setPosSub(long number)  throws CFException{
		work.setPosSub((int)number);
	}


	/**
	 *	Returns the value of psSub
	 *	@return psSub
	 */
	public int getPsSub() throws CFException {        
   		return work.getPsSub();
	}
	
	/**
	 * 	Update PsSub with the passed value
	 *	@param number
	 */
	public void setPsSub(int number)  throws CFException{
		work.setPsSub(number);
	}


	public void setPsSub(long number)  throws CFException{
		work.setPsSub((int)number);
	}


	/**
	 *	Returns the value of w02DsplErrInd
	 *	@return w02DsplErrInd
	 */
   public char[] getW02DsplErrInd() throws CFException  {              
   		return w02DsplMsgArea.getW02DsplErrInd();
   }

  
	/**
	*  set variable w02DsplErrInd
	*  @param value
	**/
   public void setW02DsplErrInd(char[] value) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(value);
   } 

     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex) throws CFException {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex);
   	
   }
   
   public void setW02DsplErrInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update W02DsplErrInd with another Field
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source) {
      w02DsplMsgArea.setW02DsplErrInd(source);
   }  
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update W02DsplErrInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setW02DsplErrInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      w02DsplMsgArea.setW02DsplErrInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdCauseCd
	 *	@return ricdCauseCd
	 */
   public char[] getRicdCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdCauseCd();
   }

  
	/**
	*  set variable ricdCauseCd
	*  @param value
	**/
   public void setRicdCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdCauseCd(value);
   } 

     /**
	 * 	Update RicdCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex);
   	
   }
   
   public void setRicdCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdCauseCd with another Field
	 *	@param value
	 */
   public void setRicdCauseCd(Field source) {
      workFields.getHoldTransData2().setRicdCauseCd(source);
   }  
   
     /**
	 * 	Update RicdCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uInvReason
	 *	@return d51uInvReason
	 */
	public int getD51uInvReason() throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uInvReason();
	}


	/**
	 *	Returns String value of d51uInvReason
	 *	@return d51uInvReason
	 */
	public char[]  getD51uInvReasonString() throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uInvReasonString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uInvReasonIsNumeric()  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().d51uInvReasonIsNumeric();
	}

	/**
	 * 	Update D51uInvReason with the passed value
	 *	@param number
	 */
	public void setD51uInvReason(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(number);
	}
	

	public void setD51uInvReason(long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(number);
	}
	
	
	/**
	 * 	Update D51uInvReason with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uInvReason(char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(value);
	}
	
	/**
	 * 	Update D51uInvReason with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uInvReasonString(char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvReason(value);
	}	

	/**
	 *	Returns the value of prevPs
	 *	@return prevPs
	 */
   public char[] getPrevPs() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevPs();
   }

  
	/**
	*  set variable prevPs
	*  @param value
	**/
   public void setPrevPs(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(value);
   } 

     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex);
   	
   }
   
   public void setPrevPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevPs with another Field
	 *	@param value
	 */
   public void setPrevPs(Field source) {
      workFields.getPrevMatchedKey().setPrevPs(source);
   }  
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsmFuncCd
	 *	@return dsmFuncCd
	 */
	public int getDsmFuncCd() throws CFException {
   		return dsmCallArea.getDsmCommonArea().getDsmFuncCd();
	}


	/**
	 *	Returns String value of dsmFuncCd
	 *	@return dsmFuncCd
	 */
	public char[]  getDsmFuncCdString() throws CFException {
	     return String.valueOf(dsmCallArea.getDsmCommonArea().getDsmFuncCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dsmFuncCdIsNumeric()  throws CFException{
	    return dsmCallArea.getDsmCommonArea().dsmFuncCdIsNumeric();
	}

	/**
	 * 	Update DsmFuncCd with the passed value
	 *	@param number
	 */
	public void setDsmFuncCd(int number)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmFuncCd(number);
	}
	

	public void setDsmFuncCd(long number)  throws CFException{
	    dsmCallArea.getDsmCommonArea().setDsmFuncCd(number);
	}
	
	
	/**
	 * 	Update DsmFuncCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setDsmFuncCd(char[] value)  throws CFException {
		dsmCallArea.getDsmCommonArea().setDsmFuncCd(value);
	}
	
	/**
	 * 	Update DsmFuncCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDsmFuncCdString(char[] value)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmFuncCd(value);
	}	

	/**
	 *	Returns the value of nbrEqual
	 *	@return nbrEqual
	 */
   public char[] getNbrEqual() throws CFException  {              
   		return work.getNbrEqual();
   }

  
	/**
	*  set variable nbrEqual
	*  @param value
	**/
   public void setNbrEqual(char[] value) throws CFException {
      work.setNbrEqual(value);
   } 

	/**
	 *	Returns the value of holdCauseCd
	 *	@return holdCauseCd
	 */
   public char[] getHoldCauseCd() throws CFException  {              
   		return workFields.getHoldTransData().getHoldCauseCd();
   }

  
	/**
	*  set variable holdCauseCd
	*  @param value
	**/
   public void setHoldCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldCauseCd(value);
   } 

     /**
	 * 	Update HoldCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex);
   	
   }
   
   public void setHoldCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldCauseCd with another Field
	 *	@param value
	 */
   public void setHoldCauseCd(Field source) {
      workFields.getHoldTransData().setHoldCauseCd(source);
   }  
   
     /**
	 * 	Update HoldCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaCauseCd
	 *	@return ripaCauseCd
	 */
   public char[] getRipaCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaCauseCd();
   }

  
	/**
	*  set variable ripaCauseCd
	*  @param value
	**/
   public void setRipaCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaCauseCd(value);
   } 

     /**
	 * 	Update RipaCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex);
   	
   }
   
   public void setRipaCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaCauseCd with another Field
	 *	@param value
	 */
   public void setRipaCauseCd(Field source) {
      workFields.getHoldTransData2().setRipaCauseCd(source);
   }  
   
     /**
	 * 	Update RipaCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of holdSpiTblId
	 *	@return holdSpiTblId
	 */
   public char[] getHoldSpiTblId() throws CFException  {              
   		return workFields.getHoldTransData().getHoldSpiTblId();
   }

  
	/**
	*  set variable holdSpiTblId
	*  @param value
	**/
   public void setHoldSpiTblId(char[] value) throws CFException {
      workFields.getHoldTransData().setHoldSpiTblId(value);
   } 

     /**
	 * 	Update HoldSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHoldSpiTblId(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex);
   	
   }
   
   public void setHoldSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HoldSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHoldSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HoldSpiTblId with another Field
	 *	@param value
	 */
   public void setHoldSpiTblId(Field source) {
      workFields.getHoldTransData().setHoldSpiTblId(source);
   }  
   
     /**
	 * 	Update HoldSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHoldSpiTblId(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HoldSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHoldSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData().setHoldSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypSvc
	 *	@return ptypSvc
	 */
   public char[] getPtypSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypSvc();
   }

  
	/**
	*  set variable ptypSvc
	*  @param value
	**/
   public void setPtypSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypSvc(value);
   } 

     /**
	 * 	Update PtypSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex);
   	
   }
   
   public void setPtypSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypSvc with another Field
	 *	@param value
	 */
   public void setPtypSvc(Field source) {
      workFields.getHoldTransData2().setPtypSvc(source);
   }  
   
     /**
	 * 	Update PtypSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isHoldPosFound()
	 *	@return  Returns true if isHoldPosFound() is "Y"
	 */
   public boolean isHoldPosFound() throws CFException {
      return work.isHoldPosFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setHoldPosFoundTrue()  throws CFException{  			
    	work.setHoldPosFoundTrue();
   	}
	/**
	 *	Returns the value of dsmCallArea
	 *	@return dsmCallArea
	 */   
	 public DsmCallArea getDsmCallArea() {
   	return dsmCallArea;
   }


	/**
	 *	Returns the value of frtoPs
	 *	@return frtoPs
	 */
   public char[] getFrtoPs() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoPs();
   }

  
	/**
	*  set variable frtoPs
	*  @param value
	**/
   public void setFrtoPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoPs(value);
   } 

     /**
	 * 	Update FrtoPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex);
   	
   }
   
   public void setFrtoPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoPs with another Field
	 *	@param value
	 */
   public void setFrtoPs(Field source) {
      workFields.getHoldTransData2().setFrtoPs(source);
   }  
   
     /**
	 * 	Update FrtoPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causCauseCd
	 *	@return causCauseCd
	 */
   public char[] getCausCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getCausCauseCd();
   }

  
	/**
	*  set variable causCauseCd
	*  @param value
	**/
   public void setCausCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausCauseCd(value);
   } 

     /**
	 * 	Update CausCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex);
   	
   }
   
   public void setCausCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausCauseCd with another Field
	 *	@param value
	 */
   public void setCausCauseCd(Field source) {
      workFields.getHoldTransData2().setCausCauseCd(source);
   }  
   
     /**
	 * 	Update CausCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "N" for isNotFirstTimeMoreIcd()
	 *	@return  Returns true if isNotFirstTimeMoreIcd() is "N"
	 */
   public boolean isNotFirstTimeMoreIcd() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isNotFirstTimeMoreIcd();
   }

	/**
	*  set values "N"
	*/
   	public void setNotFirstTimeMoreIcdTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setNotFirstTimeMoreIcdTrue();
   	}
	/**
	 *	Returns the value of w02RespCd
	 *	@return w02RespCd
	 */
	public long getW02RespCd() throws CFException {
   		return w02DsplMsgArea.getW02RespCd();
	}


	/**
	 *	Returns String value of w02RespCd
	 *	@return w02RespCd
	 */
	public char[]  getW02RespCdString() throws CFException {
	     return String.valueOf(w02DsplMsgArea.getW02RespCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean w02RespCdIsNumeric()  throws CFException{
	    return w02DsplMsgArea.w02RespCdIsNumeric();
	}

	/**
	 * 	Update W02RespCd with the passed value
	 *	@param number
	 */
	public void setW02RespCd(long number)  throws CFException{
		w02DsplMsgArea.setW02RespCd(number);
	}
	

	
	/**
	 * 	Update W02RespCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setW02RespCd(char[] value)  throws CFException {
		w02DsplMsgArea.setW02RespCd(value);
	}
	
	/**
	 * 	Update W02RespCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setW02RespCdString(char[] value)  throws CFException{
		w02DsplMsgArea.setW02RespCd(value);
	}	

	/**
	 *	Returns the value of frtoSvc
	 *	@return frtoSvc
	 */
   public char[] getFrtoSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoSvc();
   }

  
	/**
	*  set variable frtoSvc
	*  @param value
	**/
   public void setFrtoSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoSvc(value);
   } 

     /**
	 * 	Update FrtoSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex);
   	
   }
   
   public void setFrtoSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoSvc with another Field
	 *	@param value
	 */
   public void setFrtoSvc(Field source) {
      workFields.getHoldTransData2().setFrtoSvc(source);
   }  
   
     /**
	 * 	Update FrtoSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of posTierFoundSw
	 *	@return posTierFoundSw
	 */
   public char[] getPosTierFoundSw() throws CFException  {              
   		return work.getPosTierFoundSw();
   }

  
	/**
	*  set variable posTierFoundSw
	*  @param value
	**/
   public void setPosTierFoundSw(char[] value) throws CFException {
      work.setPosTierFoundSw(value);
   } 


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
        str += dfhcommarea.hashCode();
        str += w02DsplMsgArea.hashCode();
       return str.hashCode();
    }

    public MatchingRtnOutCtx clone() {
        MatchingRtnOutCtx cloneObj = new MatchingRtnOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        cloneObj.w02DsplMsgArea = new W02DsplMsgArea();
        cloneObj.w02DsplMsgArea.set(w02DsplMsgArea.getClonedField());
        return cloneObj;
    }

    }

    public MatchingRtnOutCtx getMatchingRtnOutCtx() {
            return new MatchingRtnOutCtx();
    }
     public class SearchPs2110DInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of psSub
	 *	@return psSub
	 */
	public int getPsSub() throws CFException {        
   		return work.getPsSub();
	}
	
	/**
	 * 	Update PsSub with the passed value
	 *	@param number
	 */
	public void setPsSub(int number)  throws CFException{
		work.setPsSub(number);
	}


	public void setPsSub(long number)  throws CFException{
		work.setPsSub((int)number);
	}


	/**
	 *	Returns the value of d51uFcndDrvPos
	 *	@return d51uFcndDrvPos
	 */
   public char[] getD51uFcndDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).getD51uFcndDrvPos();
   }

  
	/**
	*  set variable d51uFcndDrvPos
	*  @param value
	**/
   public void setD51uFcndDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(value);
   } 

     /**
	 * 	Update D51uFcndDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uFcndDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFcndDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFcndDrvPos with another Field
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source);
   }  
   
     /**
	 * 	Update D51uFcndDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFcndDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFcndDrvSvc
	 *	@return d51uFcndDrvSvc
	 */
   public char[] getD51uFcndDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).getD51uFcndDrvSvc();
   }

  
	/**
	*  set variable d51uFcndDrvSvc
	*  @param value
	**/
   public void setD51uFcndDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(value);
   } 

     /**
	 * 	Update D51uFcndDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uFcndDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFcndDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFcndDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uFcndDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFcndDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevCauseCd
	 *	@return prevCauseCd
	 */
   public char[] getPrevCauseCd() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevCauseCd();
   }

  
	/**
	*  set variable prevCauseCd
	*  @param value
	**/
   public void setPrevCauseCd(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(value);
   } 

     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex);
   	
   }
   
   public void setPrevCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevCauseCd with another Field
	 *	@param value
	 */
   public void setPrevCauseCd(Field source) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source);
   }  
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevSvc
	 *	@return prevSvc
	 */
   public char[] getPrevSvc() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevSvc();
   }

  
	/**
	*  set variable prevSvc
	*  @param value
	**/
   public void setPrevSvc(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(value);
   } 

     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex);
   	
   }
   
   public void setPrevSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevSvc with another Field
	 *	@param value
	 */
   public void setPrevSvc(Field source) {
      workFields.getPrevMatchedKey().setPrevSvc(source);
   }  
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevPs
	 *	@return prevPs
	 */
   public char[] getPrevPs() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevPs();
   }

  
	/**
	*  set variable prevPs
	*  @param value
	**/
   public void setPrevPs(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(value);
   } 

     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex);
   	
   }
   
   public void setPrevPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevPs with another Field
	 *	@param value
	 */
   public void setPrevPs(Field source) {
      workFields.getPrevMatchedKey().setPrevPs(source);
   }  
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFcndDrvCau
	 *	@return d51uFcndDrvCau
	 */
   public char[] getD51uFcndDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).getD51uFcndDrvCau();
   }

  
	/**
	*  set variable d51uFcndDrvCau
	*  @param value
	**/
   public void setD51uFcndDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(value);
   } 

     /**
	 * 	Update D51uFcndDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uFcndDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFcndDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFcndDrvCau with another Field
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source);
   }  
   
     /**
	 * 	Update D51uFcndDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFcndDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of uLinePos51
	 *	@return uLinePos51
	 */
   public char[] getULinePos51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULinePos51();
   }

  
	/**
	*  set variable uLinePos51
	*  @param value
	**/
   public void setULinePos51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(value);
   } 

     /**
	 * 	Update ULinePos51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULinePos51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex);
   	
   }
   
   public void setULinePos51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULinePos51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULinePos51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULinePos51 with another Field
	 *	@param value
	 */
   public void setULinePos51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source);
   }  
   
     /**
	 * 	Update ULinePos51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULinePos51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULinePos51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULinePos51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULinePos51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}


	/**
	 *	Returns the value of d51uFcndFromCondPos
	 *	@return d51uFcndFromCondPos
	 */
   public char[] getD51uFcndFromCondPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).getD51uFcndFromCondPos();
   }

  
	/**
	*  set variable d51uFcndFromCondPos
	*  @param value
	**/
   public void setD51uFcndFromCondPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(value);
   } 

     /**
	 * 	Update D51uFcndFromCondPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFcndFromCondPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source, sourceIndex);
   	
   }
   
   public void setD51uFcndFromCondPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFcndFromCondPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndFromCondPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFcndFromCondPos with another Field
	 *	@param value
	 */
   public void setD51uFcndFromCondPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source);
   }  
   
     /**
	 * 	Update D51uFcndFromCondPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFcndFromCondPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFcndFromCondPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndFromCondPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public SearchPs2110DOutCtx getSearchPs2110DOutCtx() {
            return new SearchPs2110DOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public SearchPs2110DInCtx clone() {
        SearchPs2110DInCtx cloneObj = new SearchPs2110DInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public SearchPs2110DInCtx getSearchPs2110DInCtx() {
            return new SearchPs2110DInCtx();
    }
     public class SearchPs2110DOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of fcndCauseCd
	 *	@return fcndCauseCd
	 */
   public char[] getFcndCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndCauseCd();
   }

  
	/**
	*  set variable fcndCauseCd
	*  @param value
	**/
   public void setFcndCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndCauseCd(value);
   } 

     /**
	 * 	Update FcndCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex);
   	
   }
   
   public void setFcndCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndCauseCd with another Field
	 *	@param value
	 */
   public void setFcndCauseCd(Field source) {
      workFields.getHoldTransData2().setFcndCauseCd(source);
   }  
   
     /**
	 * 	Update FcndCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndSvc
	 *	@return fcndSvc
	 */
   public char[] getFcndSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndSvc();
   }

  
	/**
	*  set variable fcndSvc
	*  @param value
	**/
   public void setFcndSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndSvc(value);
   } 

     /**
	 * 	Update FcndSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex);
   	
   }
   
   public void setFcndSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndSvc with another Field
	 *	@param value
	 */
   public void setFcndSvc(Field source) {
      workFields.getHoldTransData2().setFcndSvc(source);
   }  
   
     /**
	 * 	Update FcndSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fromPsFound
	 *	@return fromPsFound
	 */
   public char[] getFromPsFound() throws CFException  {              
   		return work.getFromPsFound();
   }

  
	/**
	*  set variable fromPsFound
	*  @param value
	**/
   public void setFromPsFound(char[] value) throws CFException {
      work.setFromPsFound(value);
   } 

	/**
	 *	Returns the value of fcndPs
	 *	@return fcndPs
	 */
   public char[] getFcndPs() throws CFException  {              
   		return workFields.getHoldTransData2().getFcndPs();
   }

  
	/**
	*  set variable fcndPs
	*  @param value
	**/
   public void setFcndPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setFcndPs(value);
   } 

     /**
	 * 	Update FcndPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex);
   	
   }
   
   public void setFcndPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndPs with another Field
	 *	@param value
	 */
   public void setFcndPs(Field source) {
      workFields.getHoldTransData2().setFcndPs(source);
   }  
   
     /**
	 * 	Update FcndPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFcndPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFcndDrvPos
	 *	@return d51uFcndDrvPos
	 */
   public char[] getD51uFcndDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).getD51uFcndDrvPos();
   }

  
	/**
	*  set variable d51uFcndDrvPos
	*  @param value
	**/
   public void setD51uFcndDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(value);
   } 

     /**
	 * 	Update D51uFcndDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uFcndDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFcndDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFcndDrvPos with another Field
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source);
   }  
   
     /**
	 * 	Update D51uFcndDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFcndDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFcndDrvSvc
	 *	@return d51uFcndDrvSvc
	 */
   public char[] getD51uFcndDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).getD51uFcndDrvSvc();
   }

  
	/**
	*  set variable d51uFcndDrvSvc
	*  @param value
	**/
   public void setD51uFcndDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(value);
   } 

     /**
	 * 	Update D51uFcndDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uFcndDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFcndDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFcndDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uFcndDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFcndDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isSameTable1()
	 *	@return  Returns true if isSameTable1() is "Y"
	 */
   public boolean isSameTable1() throws CFException {
      return work.isSameTable1();
   }

	/**
	*  set values "Y"
	*/
   	public void setSameTable1True()  throws CFException{  			
    	work.setSameTable1True();
   	}
	/**
	 *	Returns the value of d51uFcndDrvCau
	 *	@return d51uFcndDrvCau
	 */
   public char[] getD51uFcndDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).getD51uFcndDrvCau();
   }

  
	/**
	*  set variable d51uFcndDrvCau
	*  @param value
	**/
   public void setD51uFcndDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(value);
   } 

     /**
	 * 	Update D51uFcndDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uFcndDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFcndDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFcndDrvCau with another Field
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source);
   }  
   
     /**
	 * 	Update D51uFcndDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFcndDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public SearchPs2110DOutCtx clone() {
        SearchPs2110DOutCtx cloneObj = new SearchPs2110DOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public SearchPs2110DOutCtx getSearchPs2110DOutCtx() {
            return new SearchPs2110DOutCtx();
    }
     public class SearchSvc2120DInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();

	/**
	 *	Returns the value of d51uFrtoDrvCau
	 *	@return d51uFrtoDrvCau
	 */
   public char[] getD51uFrtoDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoDrvCau();
   }

  
	/**
	*  set variable d51uFrtoDrvCau
	*  @param value
	**/
   public void setD51uFrtoDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(value);
   } 

     /**
	 * 	Update D51uFrtoDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoDrvCau with another Field
	 *	@param value
	 */
   public void setD51uFrtoDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source);
   }  
   
     /**
	 * 	Update D51uFrtoDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFrtoDrvPos
	 *	@return d51uFrtoDrvPos
	 */
   public char[] getD51uFrtoDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoDrvPos();
   }

  
	/**
	*  set variable d51uFrtoDrvPos
	*  @param value
	**/
   public void setD51uFrtoDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(value);
   } 

     /**
	 * 	Update D51uFrtoDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoDrvPos with another Field
	 *	@param value
	 */
   public void setD51uFrtoDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source);
   }  
   
     /**
	 * 	Update D51uFrtoDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFrtoClmToSvcCd
	 *	@return d51uFrtoClmToSvcCd
	 */
   public char[] getD51uFrtoClmToSvcCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoClmToSvcCd();
   }

  
	/**
	*  set variable d51uFrtoClmToSvcCd
	*  @param value
	**/
   public void setD51uFrtoClmToSvcCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(value);
   } 

     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoClmToSvcCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoClmToSvcCd with another Field
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source);
   }  
   
     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFrtoClmFrmSvcCd
	 *	@return d51uFrtoClmFrmSvcCd
	 */
   public char[] getD51uFrtoClmFrmSvcCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoClmFrmSvcCd();
   }

  
	/**
	*  set variable d51uFrtoClmFrmSvcCd
	*  @param value
	**/
   public void setD51uFrtoClmFrmSvcCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(value);
   } 

     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoClmFrmSvcCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoClmFrmSvcCd with another Field
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source);
   }  
   
     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevCauseCd
	 *	@return prevCauseCd
	 */
   public char[] getPrevCauseCd() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevCauseCd();
   }

  
	/**
	*  set variable prevCauseCd
	*  @param value
	**/
   public void setPrevCauseCd(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(value);
   } 

     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex);
   	
   }
   
   public void setPrevCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevCauseCd with another Field
	 *	@param value
	 */
   public void setPrevCauseCd(Field source) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source);
   }  
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevSvc
	 *	@return prevSvc
	 */
   public char[] getPrevSvc() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevSvc();
   }

  
	/**
	*  set variable prevSvc
	*  @param value
	**/
   public void setPrevSvc(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(value);
   } 

     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex);
   	
   }
   
   public void setPrevSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevSvc with another Field
	 *	@param value
	 */
   public void setPrevSvc(Field source) {
      workFields.getPrevMatchedKey().setPrevSvc(source);
   }  
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isFromSvcFound1()
	 *	@return  Returns true if isFromSvcFound1() is "Y"
	 */
   public boolean isFromSvcFound1() throws CFException {
      return work.isFromSvcFound1();
   }

	/**
	*  set values "Y"
	*/
   	public void setFromSvcFound1True()  throws CFException{  			
    	work.setFromSvcFound1True();
   	}
	/**
	 *	Returns the value of prevPs
	 *	@return prevPs
	 */
   public char[] getPrevPs() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevPs();
   }

  
	/**
	*  set variable prevPs
	*  @param value
	**/
   public void setPrevPs(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(value);
   } 

     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex);
   	
   }
   
   public void setPrevPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevPs with another Field
	 *	@param value
	 */
   public void setPrevPs(Field source) {
      workFields.getPrevMatchedKey().setPrevPs(source);
   }  
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFrtoDrvSvc
	 *	@return d51uFrtoDrvSvc
	 */
   public char[] getD51uFrtoDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoDrvSvc();
   }

  
	/**
	*  set variable d51uFrtoDrvSvc
	*  @param value
	**/
   public void setD51uFrtoDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(value);
   } 

     /**
	 * 	Update D51uFrtoDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uFrtoDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uFrtoDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of svcSub
	 *	@return svcSub
	 */
	public int getSvcSub() throws CFException {        
   		return work.getSvcSub();
	}
	
	/**
	 * 	Update SvcSub with the passed value
	 *	@param number
	 */
	public void setSvcSub(int number)  throws CFException{
		work.setSvcSub(number);
	}


	public void setSvcSub(long number)  throws CFException{
		work.setSvcSub((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public SearchSvc2120DOutCtx getSearchSvc2120DOutCtx() {
            return new SearchSvc2120DOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public SearchSvc2120DInCtx clone() {
        SearchSvc2120DInCtx cloneObj = new SearchSvc2120DInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public SearchSvc2120DInCtx getSearchSvc2120DInCtx() {
            return new SearchSvc2120DInCtx();
    }
     public class SearchSvc2120DOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();

	/**
	 *	Returns the value of d51uFrtoDrvCau
	 *	@return d51uFrtoDrvCau
	 */
   public char[] getD51uFrtoDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoDrvCau();
   }

  
	/**
	*  set variable d51uFrtoDrvCau
	*  @param value
	**/
   public void setD51uFrtoDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(value);
   } 

     /**
	 * 	Update D51uFrtoDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoDrvCau with another Field
	 *	@param value
	 */
   public void setD51uFrtoDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source);
   }  
   
     /**
	 * 	Update D51uFrtoDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of frtoCauseCd
	 *	@return frtoCauseCd
	 */
   public char[] getFrtoCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoCauseCd();
   }

  
	/**
	*  set variable frtoCauseCd
	*  @param value
	**/
   public void setFrtoCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoCauseCd(value);
   } 

     /**
	 * 	Update FrtoCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex);
   	
   }
   
   public void setFrtoCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoCauseCd with another Field
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source) {
      workFields.getHoldTransData2().setFrtoCauseCd(source);
   }  
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFrtoDrvPos
	 *	@return d51uFrtoDrvPos
	 */
   public char[] getD51uFrtoDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoDrvPos();
   }

  
	/**
	*  set variable d51uFrtoDrvPos
	*  @param value
	**/
   public void setD51uFrtoDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(value);
   } 

     /**
	 * 	Update D51uFrtoDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoDrvPos with another Field
	 *	@param value
	 */
   public void setD51uFrtoDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source);
   }  
   
     /**
	 * 	Update D51uFrtoDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFrtoClmToSvcCd
	 *	@return d51uFrtoClmToSvcCd
	 */
   public char[] getD51uFrtoClmToSvcCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoClmToSvcCd();
   }

  
	/**
	*  set variable d51uFrtoClmToSvcCd
	*  @param value
	**/
   public void setD51uFrtoClmToSvcCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(value);
   } 

     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoClmToSvcCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoClmToSvcCd with another Field
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source);
   }  
   
     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFrtoClmFrmSvcCd
	 *	@return d51uFrtoClmFrmSvcCd
	 */
   public char[] getD51uFrtoClmFrmSvcCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoClmFrmSvcCd();
   }

  
	/**
	*  set variable d51uFrtoClmFrmSvcCd
	*  @param value
	**/
   public void setD51uFrtoClmFrmSvcCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(value);
   } 

     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoClmFrmSvcCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoClmFrmSvcCd with another Field
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source);
   }  
   
     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isSameTable1()
	 *	@return  Returns true if isSameTable1() is "Y"
	 */
   public boolean isSameTable1() throws CFException {
      return work.isSameTable1();
   }

	/**
	*  set values "Y"
	*/
   	public void setSameTable1True()  throws CFException{  			
    	work.setSameTable1True();
   	}
	/**
	 *	Returns the value of frtoPs
	 *	@return frtoPs
	 */
   public char[] getFrtoPs() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoPs();
   }

  
	/**
	*  set variable frtoPs
	*  @param value
	**/
   public void setFrtoPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoPs(value);
   } 

     /**
	 * 	Update FrtoPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex);
   	
   }
   
   public void setFrtoPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoPs with another Field
	 *	@param value
	 */
   public void setFrtoPs(Field source) {
      workFields.getHoldTransData2().setFrtoPs(source);
   }  
   
     /**
	 * 	Update FrtoPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Returns the value of d51uFrtoDrvSvc
	 *	@return d51uFrtoDrvSvc
	 */
   public char[] getD51uFrtoDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoDrvSvc();
   }

  
	/**
	*  set variable d51uFrtoDrvSvc
	*  @param value
	**/
   public void setD51uFrtoDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(value);
   } 

     /**
	 * 	Update D51uFrtoDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uFrtoDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uFrtoDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of frtoSvc
	 *	@return frtoSvc
	 */
   public char[] getFrtoSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getFrtoSvc();
   }

  
	/**
	*  set variable frtoSvc
	*  @param value
	**/
   public void setFrtoSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setFrtoSvc(value);
   } 

     /**
	 * 	Update FrtoSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex);
   	
   }
   
   public void setFrtoSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoSvc with another Field
	 *	@param value
	 */
   public void setFrtoSvc(Field source) {
      workFields.getHoldTransData2().setFrtoSvc(source);
   }  
   
     /**
	 * 	Update FrtoSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setFrtoSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public SearchSvc2120DOutCtx clone() {
        SearchSvc2120DOutCtx cloneObj = new SearchSvc2120DOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public SearchSvc2120DOutCtx getSearchSvc2120DOutCtx() {
            return new SearchSvc2120DOutCtx();
    }
     public class TopsCnvsvcFrTo2125DInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of feSvc25afFr
	 *	@return feSvc25afFr
	 */
   public char[] getFeSvc25afFr() throws CFException  {              
   		return workFields.getServToAlphaff().getFeSvc25afFr();
   }

  
	/**
	*  set variable feSvc25afFr
	*  @param value
	**/
   public void setFeSvc25afFr(char[] value) throws CFException {
      workFields.getServToAlphaff().setFeSvc25afFr(value);
   } 

     /**
	 * 	Update FeSvc25afFr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFeSvc25afFr(char[] source, int sourceIndex) throws CFException {
      workFields.getServToAlphaff().setFeSvc25afFr(source, sourceIndex);
   	
   }
   
   public void setFeSvc25afFr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServToAlphaff().setFeSvc25afFr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeSvc25afFr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc25afFr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServToAlphaff().setFeSvc25afFr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeSvc25afFr with another Field
	 *	@param value
	 */
   public void setFeSvc25afFr(Field source) {
      workFields.getServToAlphaff().setFeSvc25afFr(source);
   }  
   
     /**
	 * 	Update FeSvc25afFr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFeSvc25afFr(Field source, int sourceIndex,int sourceLen) {
      workFields.getServToAlphaff().setFeSvc25afFr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FeSvc25afFr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc25afFr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServToAlphaff().setFeSvc25afFr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFrtoClmToSvcCd
	 *	@return d51uFrtoClmToSvcCd
	 */
   public char[] getD51uFrtoClmToSvcCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoClmToSvcCd();
   }

  
	/**
	*  set variable d51uFrtoClmToSvcCd
	*  @param value
	**/
   public void setD51uFrtoClmToSvcCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(value);
   } 

     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoClmToSvcCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoClmToSvcCd with another Field
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source);
   }  
   
     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of svc14al
	 *	@return svc14al
	 */
   public char[] getSvc14al() throws CFException  {              
   		return workFields.getServAlphal().getSvc14al();
   }

  
	/**
	*  set variable svc14al
	*  @param value
	**/
   public void setSvc14al(char[] value) throws CFException {
      workFields.getServAlphal().setSvc14al(value);
   } 

     /**
	 * 	Update Svc14al 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSvc14al(char[] source, int sourceIndex) throws CFException {
      workFields.getServAlphal().setSvc14al(source, sourceIndex);
   	
   }
   
   public void setSvc14al(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServAlphal().setSvc14al(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Svc14al 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSvc14al(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServAlphal().setSvc14al(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Svc14al with another Field
	 *	@param value
	 */
   public void setSvc14al(Field source) {
      workFields.getServAlphal().setSvc14al(source);
   }  
   
     /**
	 * 	Update Svc14al 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSvc14al(Field source, int sourceIndex,int sourceLen) {
      workFields.getServAlphal().setSvc14al(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Svc14al 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSvc14al(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServAlphal().setSvc14al(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of svc5al
	 *	@return svc5al
	 */
   public char[] getSvc5al() throws CFException  {              
   		return workFields.getServAlphal().getSvc5al();
   }

  
	/**
	*  set variable svc5al
	*  @param value
	**/
   public void setSvc5al(char[] value) throws CFException {
      workFields.getServAlphal().setSvc5al(value);
   } 

     /**
	 * 	Update Svc5al 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSvc5al(char[] source, int sourceIndex) throws CFException {
      workFields.getServAlphal().setSvc5al(source, sourceIndex);
   	
   }
   
   public void setSvc5al(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServAlphal().setSvc5al(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Svc5al 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSvc5al(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServAlphal().setSvc5al(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Svc5al with another Field
	 *	@param value
	 */
   public void setSvc5al(Field source) {
      workFields.getServAlphal().setSvc5al(source);
   }  
   
     /**
	 * 	Update Svc5al 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSvc5al(Field source, int sourceIndex,int sourceLen) {
      workFields.getServAlphal().setSvc5al(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Svc5al 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSvc5al(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServAlphal().setSvc5al(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of svc25af
	 *	@return svc25af
	 */
   public char[] getSvc25af() throws CFException  {              
   		return workFields.getServAlphaf().getSvc25af();
   }

  
	/**
	*  set variable svc25af
	*  @param value
	**/
   public void setSvc25af(char[] value) throws CFException {
      workFields.getServAlphaf().setSvc25af(value);
   } 

     /**
	 * 	Update Svc25af 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSvc25af(char[] source, int sourceIndex) throws CFException {
      workFields.getServAlphaf().setSvc25af(source, sourceIndex);
   	
   }
   
   public void setSvc25af(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServAlphaf().setSvc25af(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Svc25af 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSvc25af(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServAlphaf().setSvc25af(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Svc25af with another Field
	 *	@param value
	 */
   public void setSvc25af(Field source) {
      workFields.getServAlphaf().setSvc25af(source);
   }  
   
     /**
	 * 	Update Svc25af 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSvc25af(Field source, int sourceIndex,int sourceLen) {
      workFields.getServAlphaf().setSvc25af(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Svc25af 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSvc25af(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServAlphaf().setSvc25af(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of feSvc5alTo
	 *	@return feSvc5alTo
	 */
   public char[] getFeSvc5alTo() throws CFException  {              
   		return workFields.getServToAlphatl().getFeSvc5alTo();
   }

  
	/**
	*  set variable feSvc5alTo
	*  @param value
	**/
   public void setFeSvc5alTo(char[] value) throws CFException {
      workFields.getServToAlphatl().setFeSvc5alTo(value);
   } 

     /**
	 * 	Update FeSvc5alTo 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFeSvc5alTo(char[] source, int sourceIndex) throws CFException {
      workFields.getServToAlphatl().setFeSvc5alTo(source, sourceIndex);
   	
   }
   
   public void setFeSvc5alTo(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServToAlphatl().setFeSvc5alTo(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeSvc5alTo 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc5alTo(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServToAlphatl().setFeSvc5alTo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeSvc5alTo with another Field
	 *	@param value
	 */
   public void setFeSvc5alTo(Field source) {
      workFields.getServToAlphatl().setFeSvc5alTo(source);
   }  
   
     /**
	 * 	Update FeSvc5alTo 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFeSvc5alTo(Field source, int sourceIndex,int sourceLen) {
      workFields.getServToAlphatl().setFeSvc5alTo(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FeSvc5alTo 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc5alTo(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServToAlphatl().setFeSvc5alTo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of feSvc25afTo
	 *	@return feSvc25afTo
	 */
   public char[] getFeSvc25afTo() throws CFException  {              
   		return workFields.getServToAlphatf().getFeSvc25afTo();
   }

  
	/**
	*  set variable feSvc25afTo
	*  @param value
	**/
   public void setFeSvc25afTo(char[] value) throws CFException {
      workFields.getServToAlphatf().setFeSvc25afTo(value);
   } 

     /**
	 * 	Update FeSvc25afTo 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFeSvc25afTo(char[] source, int sourceIndex) throws CFException {
      workFields.getServToAlphatf().setFeSvc25afTo(source, sourceIndex);
   	
   }
   
   public void setFeSvc25afTo(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServToAlphatf().setFeSvc25afTo(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeSvc25afTo 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc25afTo(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServToAlphatf().setFeSvc25afTo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeSvc25afTo with another Field
	 *	@param value
	 */
   public void setFeSvc25afTo(Field source) {
      workFields.getServToAlphatf().setFeSvc25afTo(source);
   }  
   
     /**
	 * 	Update FeSvc25afTo 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFeSvc25afTo(Field source, int sourceIndex,int sourceLen) {
      workFields.getServToAlphatf().setFeSvc25afTo(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FeSvc25afTo 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc25afTo(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServToAlphatf().setFeSvc25afTo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of svcSub
	 *	@return svcSub
	 */
	public int getSvcSub() throws CFException {        
   		return work.getSvcSub();
	}
	
	/**
	 * 	Update SvcSub with the passed value
	 *	@param number
	 */
	public void setSvcSub(int number)  throws CFException{
		work.setSvcSub(number);
	}


	public void setSvcSub(long number)  throws CFException{
		work.setSvcSub((int)number);
	}


	/**
	 *	Returns the value of feSvc15Fr
	 *	@return feSvc15Fr
	 */
   public char[] getFeSvc15Fr() throws CFException  {              
   		return workFields.getFeServFr().getFeSvc15Fr();
   }

  
	/**
	*  set variable feSvc15Fr
	*  @param value
	**/
   public void setFeSvc15Fr(char[] value) throws CFException {
      workFields.getFeServFr().setFeSvc15Fr(value);
   } 

     /**
	 * 	Update FeSvc15Fr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFeSvc15Fr(char[] source, int sourceIndex) throws CFException {
      workFields.getFeServFr().setFeSvc15Fr(source, sourceIndex);
   	
   }
   
   public void setFeSvc15Fr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getFeServFr().setFeSvc15Fr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeSvc15Fr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc15Fr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getFeServFr().setFeSvc15Fr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeSvc15Fr with another Field
	 *	@param value
	 */
   public void setFeSvc15Fr(Field source) {
      workFields.getFeServFr().setFeSvc15Fr(source);
   }  
   
     /**
	 * 	Update FeSvc15Fr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFeSvc15Fr(Field source, int sourceIndex,int sourceLen) {
      workFields.getFeServFr().setFeSvc15Fr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FeSvc15Fr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc15Fr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getFeServFr().setFeSvc15Fr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFrtoSvcTypCd
	 *	@return d51uFrtoSvcTypCd
	 */
   public char[] getD51uFrtoSvcTypCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoSvcTypCd();
   }

  
	/**
	*  set variable d51uFrtoSvcTypCd
	*  @param value
	**/
   public void setD51uFrtoSvcTypCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoSvcTypCd(value);
   } 

     /**
	 * 	Update D51uFrtoSvcTypCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoSvcTypCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoSvcTypCd(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoSvcTypCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoSvcTypCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoSvcTypCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoSvcTypCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoSvcTypCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoSvcTypCd with another Field
	 *	@param value
	 */
   public void setD51uFrtoSvcTypCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoSvcTypCd(source);
   }  
   
     /**
	 * 	Update D51uFrtoSvcTypCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoSvcTypCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoSvcTypCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoSvcTypCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoSvcTypCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoSvcTypCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of svc1af
	 *	@return svc1af
	 */
   public char[] getSvc1af() throws CFException  {              
   		return workFields.getServAlphaf().getSvc1af();
   }

  
	/**
	*  set variable svc1af
	*  @param value
	**/
   public void setSvc1af(char[] value) throws CFException {
      workFields.getServAlphaf().setSvc1af(value);
   } 

     /**
	 * 	Update Svc1af 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSvc1af(char[] source, int sourceIndex) throws CFException {
      workFields.getServAlphaf().setSvc1af(source, sourceIndex);
   	
   }
   
   public void setSvc1af(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServAlphaf().setSvc1af(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Svc1af 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSvc1af(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServAlphaf().setSvc1af(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Svc1af with another Field
	 *	@param value
	 */
   public void setSvc1af(Field source) {
      workFields.getServAlphaf().setSvc1af(source);
   }  
   
     /**
	 * 	Update Svc1af 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSvc1af(Field source, int sourceIndex,int sourceLen) {
      workFields.getServAlphaf().setSvc1af(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Svc1af 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSvc1af(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServAlphaf().setSvc1af(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of feSvc14alFr
	 *	@return feSvc14alFr
	 */
   public char[] getFeSvc14alFr() throws CFException  {              
   		return workFields.getServToAlphafl().getFeSvc14alFr();
   }

  
	/**
	*  set variable feSvc14alFr
	*  @param value
	**/
   public void setFeSvc14alFr(char[] value) throws CFException {
      workFields.getServToAlphafl().setFeSvc14alFr(value);
   } 

     /**
	 * 	Update FeSvc14alFr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFeSvc14alFr(char[] source, int sourceIndex) throws CFException {
      workFields.getServToAlphafl().setFeSvc14alFr(source, sourceIndex);
   	
   }
   
   public void setFeSvc14alFr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServToAlphafl().setFeSvc14alFr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeSvc14alFr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc14alFr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServToAlphafl().setFeSvc14alFr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeSvc14alFr with another Field
	 *	@param value
	 */
   public void setFeSvc14alFr(Field source) {
      workFields.getServToAlphafl().setFeSvc14alFr(source);
   }  
   
     /**
	 * 	Update FeSvc14alFr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFeSvc14alFr(Field source, int sourceIndex,int sourceLen) {
      workFields.getServToAlphafl().setFeSvc14alFr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FeSvc14alFr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc14alFr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServToAlphafl().setFeSvc14alFr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of medSvc
	 *	@return medSvc
	 */
   public char[] getMedSvc() throws CFException  {              
   		return work.getMedSvc();
   }

  
	/**
	*  set variable medSvc
	*  @param value
	**/
   public void setMedSvc(char[] value) throws CFException {
      work.setMedSvc(value);
   } 

	/**
	 *	Returns the value of d51uFrtoClmFrmSvcCd
	 *	@return d51uFrtoClmFrmSvcCd
	 */
   public char[] getD51uFrtoClmFrmSvcCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoClmFrmSvcCd();
   }

  
	/**
	*  set variable d51uFrtoClmFrmSvcCd
	*  @param value
	**/
   public void setD51uFrtoClmFrmSvcCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(value);
   } 

     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoClmFrmSvcCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoClmFrmSvcCd with another Field
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source);
   }  
   
     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of feSvc14alTo
	 *	@return feSvc14alTo
	 */
   public char[] getFeSvc14alTo() throws CFException  {              
   		return workFields.getServToAlphatl().getFeSvc14alTo();
   }

  
	/**
	*  set variable feSvc14alTo
	*  @param value
	**/
   public void setFeSvc14alTo(char[] value) throws CFException {
      workFields.getServToAlphatl().setFeSvc14alTo(value);
   } 

     /**
	 * 	Update FeSvc14alTo 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFeSvc14alTo(char[] source, int sourceIndex) throws CFException {
      workFields.getServToAlphatl().setFeSvc14alTo(source, sourceIndex);
   	
   }
   
   public void setFeSvc14alTo(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServToAlphatl().setFeSvc14alTo(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeSvc14alTo 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc14alTo(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServToAlphatl().setFeSvc14alTo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeSvc14alTo with another Field
	 *	@param value
	 */
   public void setFeSvc14alTo(Field source) {
      workFields.getServToAlphatl().setFeSvc14alTo(source);
   }  
   
     /**
	 * 	Update FeSvc14alTo 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFeSvc14alTo(Field source, int sourceIndex,int sourceLen) {
      workFields.getServToAlphatl().setFeSvc14alTo(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FeSvc14alTo 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc14alTo(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServToAlphatl().setFeSvc14alTo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of svc15
	 *	@return svc15
	 */
   public char[] getSvc15() throws CFException  {              
   		return workFields.getServTop().getSvc15();
   }

  
	/**
	*  set variable svc15
	*  @param value
	**/
   public void setSvc15(char[] value) throws CFException {
      workFields.getServTop().setSvc15(value);
   } 

     /**
	 * 	Update Svc15 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSvc15(char[] source, int sourceIndex) throws CFException {
      workFields.getServTop().setSvc15(source, sourceIndex);
   	
   }
   
   public void setSvc15(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServTop().setSvc15(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Svc15 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSvc15(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServTop().setSvc15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Svc15 with another Field
	 *	@param value
	 */
   public void setSvc15(Field source) {
      workFields.getServTop().setSvc15(source);
   }  
   
     /**
	 * 	Update Svc15 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSvc15(Field source, int sourceIndex,int sourceLen) {
      workFields.getServTop().setSvc15(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Svc15 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSvc15(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServTop().setSvc15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of feSvc1afTo
	 *	@return feSvc1afTo
	 */
   public char[] getFeSvc1afTo() throws CFException  {              
   		return workFields.getServToAlphatf().getFeSvc1afTo();
   }

  
	/**
	*  set variable feSvc1afTo
	*  @param value
	**/
   public void setFeSvc1afTo(char[] value) throws CFException {
      workFields.getServToAlphatf().setFeSvc1afTo(value);
   } 

     /**
	 * 	Update FeSvc1afTo 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFeSvc1afTo(char[] source, int sourceIndex) throws CFException {
      workFields.getServToAlphatf().setFeSvc1afTo(source, sourceIndex);
   	
   }
   
   public void setFeSvc1afTo(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServToAlphatf().setFeSvc1afTo(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeSvc1afTo 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc1afTo(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServToAlphatf().setFeSvc1afTo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeSvc1afTo with another Field
	 *	@param value
	 */
   public void setFeSvc1afTo(Field source) {
      workFields.getServToAlphatf().setFeSvc1afTo(source);
   }  
   
     /**
	 * 	Update FeSvc1afTo 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFeSvc1afTo(Field source, int sourceIndex,int sourceLen) {
      workFields.getServToAlphatf().setFeSvc1afTo(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FeSvc1afTo 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc1afTo(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServToAlphatf().setFeSvc1afTo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uMedicalClaim51
	 *	@return uMedicalClaim51
	 */
   public char[] getUMedicalClaim51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUMedicalClaim51();
   }

  
	/**
	*  set variable uMedicalClaim51
	*  @param value
	**/
   public void setUMedicalClaim51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(value);
   } 

     /**
	 * 	Update UMedicalClaim51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUMedicalClaim51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex);
   	
   }
   
   public void setUMedicalClaim51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UMedicalClaim51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUMedicalClaim51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UMedicalClaim51 with another Field
	 *	@param value
	 */
   public void setUMedicalClaim51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source);
   }  
   
     /**
	 * 	Update UMedicalClaim51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUMedicalClaim51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UMedicalClaim51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUMedicalClaim51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uLineServiceCode51
	 *	@return uLineServiceCode51
	 */
   public char[] getULineServiceCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineServiceCode51();
   }

  
	/**
	*  set variable uLineServiceCode51
	*  @param value
	**/
   public void setULineServiceCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(value);
   } 

     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex);
   	
   }
   
   public void setULineServiceCode51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULineServiceCode51 with another Field
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source);
   }  
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}


	/**
	 *	Returns the value of feSvc1afFr
	 *	@return feSvc1afFr
	 */
   public char[] getFeSvc1afFr() throws CFException  {              
   		return workFields.getServToAlphaff().getFeSvc1afFr();
   }

  
	/**
	*  set variable feSvc1afFr
	*  @param value
	**/
   public void setFeSvc1afFr(char[] value) throws CFException {
      workFields.getServToAlphaff().setFeSvc1afFr(value);
   } 

     /**
	 * 	Update FeSvc1afFr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFeSvc1afFr(char[] source, int sourceIndex) throws CFException {
      workFields.getServToAlphaff().setFeSvc1afFr(source, sourceIndex);
   	
   }
   
   public void setFeSvc1afFr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServToAlphaff().setFeSvc1afFr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeSvc1afFr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc1afFr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServToAlphaff().setFeSvc1afFr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeSvc1afFr with another Field
	 *	@param value
	 */
   public void setFeSvc1afFr(Field source) {
      workFields.getServToAlphaff().setFeSvc1afFr(source);
   }  
   
     /**
	 * 	Update FeSvc1afFr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFeSvc1afFr(Field source, int sourceIndex,int sourceLen) {
      workFields.getServToAlphaff().setFeSvc1afFr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FeSvc1afFr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc1afFr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServToAlphaff().setFeSvc1afFr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of feSvc5alFr
	 *	@return feSvc5alFr
	 */
   public char[] getFeSvc5alFr() throws CFException  {              
   		return workFields.getServToAlphafl().getFeSvc5alFr();
   }

  
	/**
	*  set variable feSvc5alFr
	*  @param value
	**/
   public void setFeSvc5alFr(char[] value) throws CFException {
      workFields.getServToAlphafl().setFeSvc5alFr(value);
   } 

     /**
	 * 	Update FeSvc5alFr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFeSvc5alFr(char[] source, int sourceIndex) throws CFException {
      workFields.getServToAlphafl().setFeSvc5alFr(source, sourceIndex);
   	
   }
   
   public void setFeSvc5alFr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServToAlphafl().setFeSvc5alFr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeSvc5alFr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc5alFr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServToAlphafl().setFeSvc5alFr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeSvc5alFr with another Field
	 *	@param value
	 */
   public void setFeSvc5alFr(Field source) {
      workFields.getServToAlphafl().setFeSvc5alFr(source);
   }  
   
     /**
	 * 	Update FeSvc5alFr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFeSvc5alFr(Field source, int sourceIndex,int sourceLen) {
      workFields.getServToAlphafl().setFeSvc5alFr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FeSvc5alFr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc5alFr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServToAlphafl().setFeSvc5alFr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public TopsCnvsvcFrTo2125DOutCtx getTopsCnvsvcFrTo2125DOutCtx() {
            return new TopsCnvsvcFrTo2125DOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public TopsCnvsvcFrTo2125DInCtx clone() {
        TopsCnvsvcFrTo2125DInCtx cloneObj = new TopsCnvsvcFrTo2125DInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public TopsCnvsvcFrTo2125DInCtx getTopsCnvsvcFrTo2125DInCtx() {
            return new TopsCnvsvcFrTo2125DInCtx();
    }
     public class TopsCnvsvcFrTo2125DOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of servTop
	 *	@return servTop
	 */   
	 public ServTop getServTop() {
   	return workFields.getServTop();
   }

   /**
	* 	Update ServTop with the passed value
	*	@param value
	*/
   public void setServTop(char[] value) throws CFException {
      workFields.setServTop(value);
   }   

     /**
	 * 	Update ServTop 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setServTop(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	workFields.setServTop(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ServTop 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setServTop(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setServTop(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ServTop with another Field
	 *	@param value
	 */
   public void setServTop(Field source) {
   	workFields.setServTop(source);
   }  
   
     /**
	 * 	Update ServTop 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setServTop(Field source, int sourceIndex,int sourceLen) {
   	workFields.setServTop(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ServTop 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setServTop(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setServTop(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of feSvc6Fr
	 *	@return feSvc6Fr
	 */
   public char[] getFeSvc6Fr() throws CFException  {              
   		return workFields.getFeServFr().getFeSvc6Fr();
   }

  
	/**
	*  set variable feSvc6Fr
	*  @param value
	**/
   public void setFeSvc6Fr(char[] value) throws CFException {
      workFields.getFeServFr().setFeSvc6Fr(value);
   } 

     /**
	 * 	Update FeSvc6Fr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFeSvc6Fr(char[] source, int sourceIndex) throws CFException {
      workFields.getFeServFr().setFeSvc6Fr(source, sourceIndex);
   	
   }
   
   public void setFeSvc6Fr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getFeServFr().setFeSvc6Fr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeSvc6Fr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc6Fr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getFeServFr().setFeSvc6Fr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeSvc6Fr with another Field
	 *	@param value
	 */
   public void setFeSvc6Fr(Field source) {
      workFields.getFeServFr().setFeSvc6Fr(source);
   }  
   
     /**
	 * 	Update FeSvc6Fr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFeSvc6Fr(Field source, int sourceIndex,int sourceLen) {
      workFields.getFeServFr().setFeSvc6Fr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FeSvc6Fr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc6Fr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getFeServFr().setFeSvc6Fr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFrtoClmToSvcCd
	 *	@return d51uFrtoClmToSvcCd
	 */
   public char[] getD51uFrtoClmToSvcCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoClmToSvcCd();
   }

  
	/**
	*  set variable d51uFrtoClmToSvcCd
	*  @param value
	**/
   public void setD51uFrtoClmToSvcCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(value);
   } 

     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoClmToSvcCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoClmToSvcCd with another Field
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source);
   }  
   
     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of feServFr
	 *	@return feServFr
	 */   
	 public FeServFr getFeServFr() {
   	return workFields.getFeServFr();
   }

   /**
	* 	Update FeServFr with the passed value
	*	@param value
	*/
   public void setFeServFr(char[] value) throws CFException {
      workFields.setFeServFr(value);
   }   

     /**
	 * 	Update FeServFr 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setFeServFr(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	workFields.setFeServFr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeServFr 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeServFr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setFeServFr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeServFr with another Field
	 *	@param value
	 */
   public void setFeServFr(Field source) {
   	workFields.setFeServFr(source);
   }  
   
     /**
	 * 	Update FeServFr 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setFeServFr(Field source, int sourceIndex,int sourceLen) {
   	workFields.setFeServFr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeServFr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeServFr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setFeServFr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of feSvc15To
	 *	@return feSvc15To
	 */
   public char[] getFeSvc15To() throws CFException  {              
   		return workFields.getFeServTo().getFeSvc15To();
   }

  
	/**
	*  set variable feSvc15To
	*  @param value
	**/
   public void setFeSvc15To(char[] value) throws CFException {
      workFields.getFeServTo().setFeSvc15To(value);
   } 

     /**
	 * 	Update FeSvc15To 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFeSvc15To(char[] source, int sourceIndex) throws CFException {
      workFields.getFeServTo().setFeSvc15To(source, sourceIndex);
   	
   }
   
   public void setFeSvc15To(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getFeServTo().setFeSvc15To(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeSvc15To 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc15To(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getFeServTo().setFeSvc15To(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeSvc15To with another Field
	 *	@param value
	 */
   public void setFeSvc15To(Field source) {
      workFields.getFeServTo().setFeSvc15To(source);
   }  
   
     /**
	 * 	Update FeSvc15To 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFeSvc15To(Field source, int sourceIndex,int sourceLen) {
      workFields.getFeServTo().setFeSvc15To(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FeSvc15To 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc15To(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getFeServTo().setFeSvc15To(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of feSvc15Fr
	 *	@return feSvc15Fr
	 */
   public char[] getFeSvc15Fr() throws CFException  {              
   		return workFields.getFeServFr().getFeSvc15Fr();
   }

  
	/**
	*  set variable feSvc15Fr
	*  @param value
	**/
   public void setFeSvc15Fr(char[] value) throws CFException {
      workFields.getFeServFr().setFeSvc15Fr(value);
   } 

     /**
	 * 	Update FeSvc15Fr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFeSvc15Fr(char[] source, int sourceIndex) throws CFException {
      workFields.getFeServFr().setFeSvc15Fr(source, sourceIndex);
   	
   }
   
   public void setFeSvc15Fr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getFeServFr().setFeSvc15Fr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeSvc15Fr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc15Fr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getFeServFr().setFeSvc15Fr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeSvc15Fr with another Field
	 *	@param value
	 */
   public void setFeSvc15Fr(Field source) {
      workFields.getFeServFr().setFeSvc15Fr(source);
   }  
   
     /**
	 * 	Update FeSvc15Fr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFeSvc15Fr(Field source, int sourceIndex,int sourceLen) {
      workFields.getFeServFr().setFeSvc15Fr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FeSvc15Fr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeSvc15Fr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getFeServFr().setFeSvc15Fr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of svc6
	 *	@return svc6
	 */
   public char[] getSvc6() throws CFException  {              
   		return workFields.getServTop().getSvc6();
   }

  
	/**
	*  set variable svc6
	*  @param value
	**/
   public void setSvc6(char[] value) throws CFException {
      workFields.getServTop().setSvc6(value);
   } 

     /**
	 * 	Update Svc6 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSvc6(char[] source, int sourceIndex) throws CFException {
      workFields.getServTop().setSvc6(source, sourceIndex);
   	
   }
   
   public void setSvc6(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServTop().setSvc6(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Svc6 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSvc6(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServTop().setSvc6(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Svc6 with another Field
	 *	@param value
	 */
   public void setSvc6(Field source) {
      workFields.getServTop().setSvc6(source);
   }  
   
     /**
	 * 	Update Svc6 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSvc6(Field source, int sourceIndex,int sourceLen) {
      workFields.getServTop().setSvc6(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Svc6 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSvc6(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServTop().setSvc6(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fromSvcFound
	 *	@return fromSvcFound
	 */
   public char[] getFromSvcFound() throws CFException  {              
   		return work.getFromSvcFound();
   }

  
	/**
	*  set variable fromSvcFound
	*  @param value
	**/
   public void setFromSvcFound(char[] value) throws CFException {
      work.setFromSvcFound(value);
   } 

	/**
	 *	Returns the value of medSvc
	 *	@return medSvc
	 */
   public char[] getMedSvc() throws CFException  {              
   		return work.getMedSvc();
   }

  
	/**
	*  set variable medSvc
	*  @param value
	**/
   public void setMedSvc(char[] value) throws CFException {
      work.setMedSvc(value);
   } 

	/**
	 *	Returns the value of d51uFrtoClmFrmSvcCd
	 *	@return d51uFrtoClmFrmSvcCd
	 */
   public char[] getD51uFrtoClmFrmSvcCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoClmFrmSvcCd();
   }

  
	/**
	*  set variable d51uFrtoClmFrmSvcCd
	*  @param value
	**/
   public void setD51uFrtoClmFrmSvcCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(value);
   } 

     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoClmFrmSvcCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoClmFrmSvcCd with another Field
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source);
   }  
   
     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of svc15
	 *	@return svc15
	 */
   public char[] getSvc15() throws CFException  {              
   		return workFields.getServTop().getSvc15();
   }

  
	/**
	*  set variable svc15
	*  @param value
	**/
   public void setSvc15(char[] value) throws CFException {
      workFields.getServTop().setSvc15(value);
   } 

     /**
	 * 	Update Svc15 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSvc15(char[] source, int sourceIndex) throws CFException {
      workFields.getServTop().setSvc15(source, sourceIndex);
   	
   }
   
   public void setSvc15(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getServTop().setSvc15(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Svc15 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSvc15(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServTop().setSvc15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Svc15 with another Field
	 *	@param value
	 */
   public void setSvc15(Field source) {
      workFields.getServTop().setSvc15(source);
   }  
   
     /**
	 * 	Update Svc15 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSvc15(Field source, int sourceIndex,int sourceLen) {
      workFields.getServTop().setSvc15(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Svc15 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSvc15(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getServTop().setSvc15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of feServTo
	 *	@return feServTo
	 */   
	 public FeServTo getFeServTo() {
   	return workFields.getFeServTo();
   }

   /**
	* 	Update FeServTo with the passed value
	*	@param value
	*/
   public void setFeServTo(char[] value) throws CFException {
      workFields.setFeServTo(value);
   }   

     /**
	 * 	Update FeServTo 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setFeServTo(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	workFields.setFeServTo(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeServTo 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFeServTo(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setFeServTo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FeServTo with another Field
	 *	@param value
	 */
   public void setFeServTo(Field source) {
   	workFields.setFeServTo(source);
   }  
   
     /**
	 * 	Update FeServTo 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setFeServTo(Field source, int sourceIndex,int sourceLen) {
   	workFields.setFeServTo(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FeServTo 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFeServTo(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setFeServTo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uLineServiceCode51
	 *	@return uLineServiceCode51
	 */
   public char[] getULineServiceCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineServiceCode51();
   }

  
	/**
	*  set variable uLineServiceCode51
	*  @param value
	**/
   public void setULineServiceCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(value);
   } 

     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex);
   	
   }
   
   public void setULineServiceCode51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULineServiceCode51 with another Field
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source);
   }  
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULineServiceCode51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULineServiceCode51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineServiceCode51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public TopsCnvsvcFrTo2125DOutCtx clone() {
        TopsCnvsvcFrTo2125DOutCtx cloneObj = new TopsCnvsvcFrTo2125DOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public TopsCnvsvcFrTo2125DOutCtx getTopsCnvsvcFrTo2125DOutCtx() {
            return new TopsCnvsvcFrTo2125DOutCtx();
    }
     public class SearchPrv2130DInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of pvSub
	 *	@return pvSub
	 */
	public int getPvSub() throws CFException {        
   		return work.getPvSub();
	}
	
	/**
	 * 	Update PvSub with the passed value
	 *	@param number
	 */
	public void setPvSub(int number)  throws CFException{
		work.setPvSub(number);
	}


	public void setPvSub(long number)  throws CFException{
		work.setPvSub((int)number);
	}


	/**
	 *	Returns the value of d51uPtypDrvSvc
	 *	@return d51uPtypDrvSvc
	 */
   public char[] getD51uPtypDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).getD51uPtypDrvSvc();
   }

  
	/**
	*  set variable d51uPtypDrvSvc
	*  @param value
	**/
   public void setD51uPtypDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(value);
   } 

     /**
	 * 	Update D51uPtypDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uPtypDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uPtypDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uPtypDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uPtypDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uPtypDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uPtypDrvPos
	 *	@return d51uPtypDrvPos
	 */
   public char[] getD51uPtypDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).getD51uPtypDrvPos();
   }

  
	/**
	*  set variable d51uPtypDrvPos
	*  @param value
	**/
   public void setD51uPtypDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(value);
   } 

     /**
	 * 	Update D51uPtypDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uPtypDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uPtypDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uPtypDrvPos with another Field
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source);
   }  
   
     /**
	 * 	Update D51uPtypDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uPtypDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uPtypDrvCau
	 *	@return d51uPtypDrvCau
	 */
   public char[] getD51uPtypDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).getD51uPtypDrvCau();
   }

  
	/**
	*  set variable d51uPtypDrvCau
	*  @param value
	**/
   public void setD51uPtypDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(value);
   } 

     /**
	 * 	Update D51uPtypDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uPtypDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uPtypDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uPtypDrvCau with another Field
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source);
   }  
   
     /**
	 * 	Update D51uPtypDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uPtypDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uProvType51
	 *	@return uProvType51
	 */
   public char[] getUProvType51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUProvType51();
   }

  
	/**
	*  set variable uProvType51
	*  @param value
	**/
   public void setUProvType51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(value);
   } 

     /**
	 * 	Update UProvType51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUProvType51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex);
   	
   }
   
   public void setUProvType51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UProvType51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUProvType51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UProvType51 with another Field
	 *	@param value
	 */
   public void setUProvType51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source);
   }  
   
     /**
	 * 	Update UProvType51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUProvType51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UProvType51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUProvType51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUProvType51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevCauseCd
	 *	@return prevCauseCd
	 */
   public char[] getPrevCauseCd() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevCauseCd();
   }

  
	/**
	*  set variable prevCauseCd
	*  @param value
	**/
   public void setPrevCauseCd(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(value);
   } 

     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex);
   	
   }
   
   public void setPrevCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevCauseCd with another Field
	 *	@param value
	 */
   public void setPrevCauseCd(Field source) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source);
   }  
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevSvc
	 *	@return prevSvc
	 */
   public char[] getPrevSvc() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevSvc();
   }

  
	/**
	*  set variable prevSvc
	*  @param value
	**/
   public void setPrevSvc(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(value);
   } 

     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex);
   	
   }
   
   public void setPrevSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevSvc with another Field
	 *	@param value
	 */
   public void setPrevSvc(Field source) {
      workFields.getPrevMatchedKey().setPrevSvc(source);
   }  
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevPs
	 *	@return prevPs
	 */
   public char[] getPrevPs() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevPs();
   }

  
	/**
	*  set variable prevPs
	*  @param value
	**/
   public void setPrevPs(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(value);
   } 

     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex);
   	
   }
   
   public void setPrevPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevPs with another Field
	 *	@param value
	 */
   public void setPrevPs(Field source) {
      workFields.getPrevMatchedKey().setPrevPs(source);
   }  
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of d51uPtypProvTyp
	 *	@return d51uPtypProvTyp
	 */
   public char[] getD51uPtypProvTyp(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).getD51uPtypProvTyp();
   }

  
	/**
	*  set variable d51uPtypProvTyp
	*  @param value
	**/
   public void setD51uPtypProvTyp(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(value);
   } 

     /**
	 * 	Update D51uPtypProvTyp 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uPtypProvTyp(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source, sourceIndex);
   	
   }
   
   public void setD51uPtypProvTyp(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uPtypProvTyp 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypProvTyp(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uPtypProvTyp with another Field
	 *	@param value
	 */
   public void setD51uPtypProvTyp(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source);
   }  
   
     /**
	 * 	Update D51uPtypProvTyp 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uPtypProvTyp(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uPtypProvTyp 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypProvTyp(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public SearchPrv2130DOutCtx getSearchPrv2130DOutCtx() {
            return new SearchPrv2130DOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public SearchPrv2130DInCtx clone() {
        SearchPrv2130DInCtx cloneObj = new SearchPrv2130DInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public SearchPrv2130DInCtx getSearchPrv2130DInCtx() {
            return new SearchPrv2130DInCtx();
    }
     public class SearchPrv2130DOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypPs
	 *	@return ptypPs
	 */
   public char[] getPtypPs() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypPs();
   }

  
	/**
	*  set variable ptypPs
	*  @param value
	**/
   public void setPtypPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypPs(value);
   } 

     /**
	 * 	Update PtypPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex);
   	
   }
   
   public void setPtypPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypPs with another Field
	 *	@param value
	 */
   public void setPtypPs(Field source) {
      workFields.getHoldTransData2().setPtypPs(source);
   }  
   
     /**
	 * 	Update PtypPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uPtypDrvSvc
	 *	@return d51uPtypDrvSvc
	 */
   public char[] getD51uPtypDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).getD51uPtypDrvSvc();
   }

  
	/**
	*  set variable d51uPtypDrvSvc
	*  @param value
	**/
   public void setD51uPtypDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(value);
   } 

     /**
	 * 	Update D51uPtypDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uPtypDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uPtypDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uPtypDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uPtypDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uPtypDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypSvc
	 *	@return ptypSvc
	 */
   public char[] getPtypSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypSvc();
   }

  
	/**
	*  set variable ptypSvc
	*  @param value
	**/
   public void setPtypSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypSvc(value);
   } 

     /**
	 * 	Update PtypSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex);
   	
   }
   
   public void setPtypSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypSvc with another Field
	 *	@param value
	 */
   public void setPtypSvc(Field source) {
      workFields.getHoldTransData2().setPtypSvc(source);
   }  
   
     /**
	 * 	Update PtypSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uPtypDrvPos
	 *	@return d51uPtypDrvPos
	 */
   public char[] getD51uPtypDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).getD51uPtypDrvPos();
   }

  
	/**
	*  set variable d51uPtypDrvPos
	*  @param value
	**/
   public void setD51uPtypDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(value);
   } 

     /**
	 * 	Update D51uPtypDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uPtypDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uPtypDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uPtypDrvPos with another Field
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source);
   }  
   
     /**
	 * 	Update D51uPtypDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uPtypDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uPtypDrvCau
	 *	@return d51uPtypDrvCau
	 */
   public char[] getD51uPtypDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).getD51uPtypDrvCau();
   }

  
	/**
	*  set variable d51uPtypDrvCau
	*  @param value
	**/
   public void setD51uPtypDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(value);
   } 

     /**
	 * 	Update D51uPtypDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uPtypDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uPtypDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uPtypDrvCau with another Field
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source);
   }  
   
     /**
	 * 	Update D51uPtypDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uPtypDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isSameTable1()
	 *	@return  Returns true if isSameTable1() is "Y"
	 */
   public boolean isSameTable1() throws CFException {
      return work.isSameTable1();
   }

	/**
	*  set values "Y"
	*/
   	public void setSameTable1True()  throws CFException{  			
    	work.setSameTable1True();
   	}
	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of fromPrvFound
	 *	@return fromPrvFound
	 */
   public char[] getFromPrvFound() throws CFException  {              
   		return work.getFromPrvFound();
   }

  
	/**
	*  set variable fromPrvFound
	*  @param value
	**/
   public void setFromPrvFound(char[] value) throws CFException {
      work.setFromPrvFound(value);
   } 

	/**
	 *	Returns the value of ptypCauseCd
	 *	@return ptypCauseCd
	 */
   public char[] getPtypCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getPtypCauseCd();
   }

  
	/**
	*  set variable ptypCauseCd
	*  @param value
	**/
   public void setPtypCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setPtypCauseCd(value);
   } 

     /**
	 * 	Update PtypCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex);
   	
   }
   
   public void setPtypCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypCauseCd with another Field
	 *	@param value
	 */
   public void setPtypCauseCd(Field source) {
      workFields.getHoldTransData2().setPtypCauseCd(source);
   }  
   
     /**
	 * 	Update PtypCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setPtypCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public SearchPrv2130DOutCtx clone() {
        SearchPrv2130DOutCtx cloneObj = new SearchPrv2130DOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public SearchPrv2130DOutCtx getSearchPrv2130DOutCtx() {
            return new SearchPrv2130DOutCtx();
    }
     public class SearchIcd92140DInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of uSourceInd51
	 *	@return uSourceInd51
	 */
   public char[] getUSourceInd51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUSourceInd51();
   }

  
	/**
	*  set variable uSourceInd51
	*  @param value
	**/
   public void setUSourceInd51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSourceInd51(value);
   } 

     /**
	 * 	Update USourceInd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUSourceInd51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSourceInd51(source, sourceIndex);
   	
   }
   
   public void setUSourceInd51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSourceInd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update USourceInd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUSourceInd51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSourceInd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update USourceInd51 with another Field
	 *	@param value
	 */
   public void setUSourceInd51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSourceInd51(source);
   }  
   
     /**
	 * 	Update USourceInd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUSourceInd51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSourceInd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update USourceInd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUSourceInd51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUSourceInd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of point1
	 *	@return point1
	 */
	public int getPoint1() throws CFException {
   		return workFields.getPoint().getPoint1();
	}


	/**
	 *	Returns String value of point1
	 *	@return point1
	 */
	public char[]  getPoint1String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint1String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point1IsNumeric()  throws CFException{
	    return workFields.getPoint().point1IsNumeric();
	}

	/**
	 * 	Update Point1 with the passed value
	 *	@param number
	 */
	public void setPoint1(int number)  throws CFException{
		workFields.getPoint().setPoint1(number);
	}
	

	public void setPoint1(long number)  throws CFException{
	    workFields.getPoint().setPoint1(number);
	}
	
	
	/**
	 * 	Update Point1 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint1(char[] value)  throws CFException {
		workFields.getPoint().setPoint1(value);
	}
	
	/**
	 * 	Update Point1 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint1String(char[] value)  throws CFException{
		workFields.getPoint().setPoint1(value);
	}	

	/**
	 *	Returns the value of prevSvc
	 *	@return prevSvc
	 */
   public char[] getPrevSvc() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevSvc();
   }

  
	/**
	*  set variable prevSvc
	*  @param value
	**/
   public void setPrevSvc(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(value);
   } 

     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex);
   	
   }
   
   public void setPrevSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevSvc with another Field
	 *	@param value
	 */
   public void setPrevSvc(Field source) {
      workFields.getPrevMatchedKey().setPrevSvc(source);
   }  
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isFromIcd9Found1()
	 *	@return  Returns true if isFromIcd9Found1() is "Y"
	 */
   public boolean isFromIcd9Found1() throws CFException {
      return work.isFromIcd9Found1();
   }

	/**
	*  set values "Y"
	*/
   	public void setFromIcd9Found1True()  throws CFException{  			
    	work.setFromIcd9Found1True();
   	}
	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of uIcdVerNbr51
	 *	@return uIcdVerNbr51
	 */
   public char[] getUIcdVerNbr51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUIcdVerNbr51();
   }

  
	/**
	*  set variable uIcdVerNbr51
	*  @param value
	**/
   public void setUIcdVerNbr51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(value);
   } 

     /**
	 * 	Update UIcdVerNbr51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUIcdVerNbr51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex);
   	
   }
   
   public void setUIcdVerNbr51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UIcdVerNbr51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUIcdVerNbr51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UIcdVerNbr51 with another Field
	 *	@param value
	 */
   public void setUIcdVerNbr51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source);
   }  
   
     /**
	 * 	Update UIcdVerNbr51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUIcdVerNbr51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UIcdVerNbr51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUIcdVerNbr51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUIcdVerNbr51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of point4
	 *	@return point4
	 */
	public int getPoint4() throws CFException {
   		return workFields.getPoint().getPoint4();
	}


	/**
	 *	Returns String value of point4
	 *	@return point4
	 */
	public char[]  getPoint4String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint4String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point4IsNumeric()  throws CFException{
	    return workFields.getPoint().point4IsNumeric();
	}

	/**
	 * 	Update Point4 with the passed value
	 *	@param number
	 */
	public void setPoint4(int number)  throws CFException{
		workFields.getPoint().setPoint4(number);
	}
	

	public void setPoint4(long number)  throws CFException{
	    workFields.getPoint().setPoint4(number);
	}
	
	
	/**
	 * 	Update Point4 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint4(char[] value)  throws CFException {
		workFields.getPoint().setPoint4(value);
	}
	
	/**
	 * 	Update Point4 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint4String(char[] value)  throws CFException{
		workFields.getPoint().setPoint4(value);
	}	

	/**
	 *	Returns the value of d51uRicdDrvCau
	 *	@return d51uRicdDrvCau
	 */
   public char[] getD51uRicdDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdDrvCau();
   }

  
	/**
	*  set variable d51uRicdDrvCau
	*  @param value
	**/
   public void setD51uRicdDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(value);
   } 

     /**
	 * 	Update D51uRicdDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uRicdDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdDrvCau with another Field
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source);
   }  
   
     /**
	 * 	Update D51uRicdDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRicdClmIcdToCd
	 *	@return d51uRicdClmIcdToCd
	 */
   public char[] getD51uRicdClmIcdToCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdClmIcdToCd();
   }

  
	/**
	*  set variable d51uRicdClmIcdToCd
	*  @param value
	**/
   public void setD51uRicdClmIcdToCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(value);
   } 

     /**
	 * 	Update D51uRicdClmIcdToCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdClmIcdToCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source, sourceIndex);
   	
   }
   
   public void setD51uRicdClmIcdToCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdClmIcdToCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdToCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdClmIcdToCd with another Field
	 *	@param value
	 */
   public void setD51uRicdClmIcdToCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source);
   }  
   
     /**
	 * 	Update D51uRicdClmIcdToCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdClmIcdToCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdClmIcdToCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdToCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevCauseCd
	 *	@return prevCauseCd
	 */
   public char[] getPrevCauseCd() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevCauseCd();
   }

  
	/**
	*  set variable prevCauseCd
	*  @param value
	**/
   public void setPrevCauseCd(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(value);
   } 

     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex);
   	
   }
   
   public void setPrevCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevCauseCd with another Field
	 *	@param value
	 */
   public void setPrevCauseCd(Field source) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source);
   }  
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uMedicalClaim51
	 *	@return uMedicalClaim51
	 */
   public char[] getUMedicalClaim51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUMedicalClaim51();
   }

  
	/**
	*  set variable uMedicalClaim51
	*  @param value
	**/
   public void setUMedicalClaim51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(value);
   } 

     /**
	 * 	Update UMedicalClaim51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUMedicalClaim51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex);
   	
   }
   
   public void setUMedicalClaim51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UMedicalClaim51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUMedicalClaim51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UMedicalClaim51 with another Field
	 *	@param value
	 */
   public void setUMedicalClaim51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source);
   }  
   
     /**
	 * 	Update UMedicalClaim51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUMedicalClaim51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UMedicalClaim51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUMedicalClaim51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUMedicalClaim51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of point2
	 *	@return point2
	 */
	public int getPoint2() throws CFException {
   		return workFields.getPoint().getPoint2();
	}


	/**
	 *	Returns String value of point2
	 *	@return point2
	 */
	public char[]  getPoint2String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint2String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point2IsNumeric()  throws CFException{
	    return workFields.getPoint().point2IsNumeric();
	}

	/**
	 * 	Update Point2 with the passed value
	 *	@param number
	 */
	public void setPoint2(int number)  throws CFException{
		workFields.getPoint().setPoint2(number);
	}
	

	public void setPoint2(long number)  throws CFException{
	    workFields.getPoint().setPoint2(number);
	}
	
	
	/**
	 * 	Update Point2 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint2(char[] value)  throws CFException {
		workFields.getPoint().setPoint2(value);
	}
	
	/**
	 * 	Update Point2 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint2String(char[] value)  throws CFException{
		workFields.getPoint().setPoint2(value);
	}	

	/**
	 *	Returns the value of d51uRicdDrvPos
	 *	@return d51uRicdDrvPos
	 */
   public char[] getD51uRicdDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdDrvPos();
   }

  
	/**
	*  set variable d51uRicdDrvPos
	*  @param value
	**/
   public void setD51uRicdDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(value);
   } 

     /**
	 * 	Update D51uRicdDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uRicdDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdDrvPos with another Field
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source);
   }  
   
     /**
	 * 	Update D51uRicdDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of icd9Sub
	 *	@return icd9Sub
	 */
	public int getIcd9Sub() throws CFException {        
   		return work.getIcd9Sub();
	}
	
	/**
	 * 	Update Icd9Sub with the passed value
	 *	@param number
	 */
	public void setIcd9Sub(int number)  throws CFException{
		work.setIcd9Sub(number);
	}


	public void setIcd9Sub(long number)  throws CFException{
		work.setIcd9Sub((int)number);
	}


	/**
	 *	Returns the value of d51uRicdClmIcdInd
	 *	@return d51uRicdClmIcdInd
	 */
   public char[] getD51uRicdClmIcdInd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdClmIcdInd();
   }

  
	/**
	*  set variable d51uRicdClmIcdInd
	*  @param value
	**/
   public void setD51uRicdClmIcdInd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(value);
   } 

     /**
	 * 	Update D51uRicdClmIcdInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex);
   	
   }
   
   public void setD51uRicdClmIcdInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdClmIcdInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdClmIcdInd with another Field
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source);
   }  
   
     /**
	 * 	Update D51uRicdClmIcdInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdClmIcdInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of s1
	 *	@return s1
	 */
	public int getS1() throws CFException {        
   		return work.getS1();
	}
	
	/**
	 * 	Update S1 with the passed value
	 *	@param number
	 */
	public void setS1(int number)  throws CFException{
		work.setS1(number);
	}


	public void setS1(long number)  throws CFException{
		work.setS1((int)number);
	}


	/**
	 *	Returns the value of point3
	 *	@return point3
	 */
	public int getPoint3() throws CFException {
   		return workFields.getPoint().getPoint3();
	}


	/**
	 *	Returns String value of point3
	 *	@return point3
	 */
	public char[]  getPoint3String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint3String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point3IsNumeric()  throws CFException{
	    return workFields.getPoint().point3IsNumeric();
	}

	/**
	 * 	Update Point3 with the passed value
	 *	@param number
	 */
	public void setPoint3(int number)  throws CFException{
		workFields.getPoint().setPoint3(number);
	}
	

	public void setPoint3(long number)  throws CFException{
	    workFields.getPoint().setPoint3(number);
	}
	
	
	/**
	 * 	Update Point3 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint3(char[] value)  throws CFException {
		workFields.getPoint().setPoint3(value);
	}
	
	/**
	 * 	Update Point3 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint3String(char[] value)  throws CFException{
		workFields.getPoint().setPoint3(value);
	}	

	/**
	 *	Returns the value of uLineDiagPointer51
	 *	@return uLineDiagPointer51
	 */
   public char[] getULineDiagPointer51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineDiagPointer51();
   }

  
	/**
	*  set variable uLineDiagPointer51
	*  @param value
	**/
   public void setULineDiagPointer51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(value);
   } 

     /**
	 * 	Update ULineDiagPointer51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex);
   	
   }
   
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULineDiagPointer51 with another Field
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source);
   }  
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uDiagnosisCode51
	 *	@return uDiagnosisCode51
	 */
   public char[] getUDiagnosisCode51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUDiagnosisCode51(index);
   }

  
	/**
	*  set variable uDiagnosisCode51
	*  @param value
	**/
   public void setUDiagnosisCode51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUDiagnosisCode51((index),value);
   } 

	/**
	 *	Returns the value of prevPs
	 *	@return prevPs
	 */
   public char[] getPrevPs() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevPs();
   }

  
	/**
	*  set variable prevPs
	*  @param value
	**/
   public void setPrevPs(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(value);
   } 

     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex);
   	
   }
   
   public void setPrevPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevPs with another Field
	 *	@param value
	 */
   public void setPrevPs(Field source) {
      workFields.getPrevMatchedKey().setPrevPs(source);
   }  
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fromIcd9Found
	 *	@return fromIcd9Found
	 */
   public char[] getFromIcd9Found() throws CFException  {              
   		return work.getFromIcd9Found();
   }

  
	/**
	*  set variable fromIcd9Found
	*  @param value
	**/
   public void setFromIcd9Found(char[] value) throws CFException {
      work.setFromIcd9Found(value);
   } 

	/**
	 *	Returns the value of d51uRicdDrvSvc
	 *	@return d51uRicdDrvSvc
	 */
   public char[] getD51uRicdDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdDrvSvc();
   }

  
	/**
	*  set variable d51uRicdDrvSvc
	*  @param value
	**/
   public void setD51uRicdDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(value);
   } 

     /**
	 * 	Update D51uRicdDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uRicdDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uRicdDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isSearchComplete1()
	 *	@return  Returns true if isSearchComplete1() is "Y"
	 */
   public boolean isSearchComplete1() throws CFException {
      return work.isSearchComplete1();
   }

	/**
	*  set values "Y"
	*/
   	public void setSearchComplete1True()  throws CFException{  			
    	work.setSearchComplete1True();
   	}
	/**
	 *	Returns the value of d51uRicdClmIcdFromCd
	 *	@return d51uRicdClmIcdFromCd
	 */
   public char[] getD51uRicdClmIcdFromCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdClmIcdFromCd();
   }

  
	/**
	*  set variable d51uRicdClmIcdFromCd
	*  @param value
	**/
   public void setD51uRicdClmIcdFromCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(value);
   } 

     /**
	 * 	Update D51uRicdClmIcdFromCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdClmIcdFromCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source, sourceIndex);
   	
   }
   
   public void setD51uRicdClmIcdFromCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdClmIcdFromCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdFromCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdClmIcdFromCd with another Field
	 *	@param value
	 */
   public void setD51uRicdClmIcdFromCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source);
   }  
   
     /**
	 * 	Update D51uRicdClmIcdFromCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdClmIcdFromCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdClmIcdFromCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdFromCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sub01
	 *	@return sub01
	 */
	public int getSub01() throws CFException {        
   		return work.getSub01();
	}
	
	/**
	 * 	Update Sub01 with the passed value
	 *	@param number
	 */
	public void setSub01(int number)  throws CFException{
		work.setSub01(number);
	}


	public void setSub01(long number)  throws CFException{
		work.setSub01((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public SearchIcd92140DOutCtx getSearchIcd92140DOutCtx() {
            return new SearchIcd92140DOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public SearchIcd92140DInCtx clone() {
        SearchIcd92140DInCtx cloneObj = new SearchIcd92140DInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public SearchIcd92140DInCtx getSearchIcd92140DInCtx() {
            return new SearchIcd92140DInCtx();
    }
     public class SearchIcd92140DOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of s1
	 *	@return s1
	 */
	public int getS1() throws CFException {        
   		return work.getS1();
	}
	
	/**
	 * 	Update S1 with the passed value
	 *	@param number
	 */
	public void setS1(int number)  throws CFException{
		work.setS1(number);
	}


	public void setS1(long number)  throws CFException{
		work.setS1((int)number);
	}


	/**
	 *	Returns the value of point3
	 *	@return point3
	 */
	public int getPoint3() throws CFException {
   		return workFields.getPoint().getPoint3();
	}


	/**
	 *	Returns String value of point3
	 *	@return point3
	 */
	public char[]  getPoint3String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint3String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point3IsNumeric()  throws CFException{
	    return workFields.getPoint().point3IsNumeric();
	}

	/**
	 * 	Update Point3 with the passed value
	 *	@param number
	 */
	public void setPoint3(int number)  throws CFException{
		workFields.getPoint().setPoint3(number);
	}
	

	public void setPoint3(long number)  throws CFException{
	    workFields.getPoint().setPoint3(number);
	}
	
	
	/**
	 * 	Update Point3 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint3(char[] value)  throws CFException {
		workFields.getPoint().setPoint3(value);
	}
	
	/**
	 * 	Update Point3 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint3String(char[] value)  throws CFException{
		workFields.getPoint().setPoint3(value);
	}	

	/**
	 *	Returns the value of point1
	 *	@return point1
	 */
	public int getPoint1() throws CFException {
   		return workFields.getPoint().getPoint1();
	}


	/**
	 *	Returns String value of point1
	 *	@return point1
	 */
	public char[]  getPoint1String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint1String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point1IsNumeric()  throws CFException{
	    return workFields.getPoint().point1IsNumeric();
	}

	/**
	 * 	Update Point1 with the passed value
	 *	@param number
	 */
	public void setPoint1(int number)  throws CFException{
		workFields.getPoint().setPoint1(number);
	}
	

	public void setPoint1(long number)  throws CFException{
	    workFields.getPoint().setPoint1(number);
	}
	
	
	/**
	 * 	Update Point1 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint1(char[] value)  throws CFException {
		workFields.getPoint().setPoint1(value);
	}
	
	/**
	 * 	Update Point1 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint1String(char[] value)  throws CFException{
		workFields.getPoint().setPoint1(value);
	}	

	/**
	 *	Returns the value of uLineDiagPointer51
	 *	@return uLineDiagPointer51
	 */
   public char[] getULineDiagPointer51(int index) throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).getULineDiagPointer51();
   }

  
	/**
	*  set variable uLineDiagPointer51
	*  @param value
	**/
   public void setULineDiagPointer51(int index,char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(value);
   } 

     /**
	 * 	Update ULineDiagPointer51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex);
   	
   }
   
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ULineDiagPointer51 with another Field
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source);
   }  
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ULineDiagPointer51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setULineDiagPointer51(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().getULineData51(index).setULineDiagPointer51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdCauseCd
	 *	@return ricdCauseCd
	 */
   public char[] getRicdCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdCauseCd();
   }

  
	/**
	*  set variable ricdCauseCd
	*  @param value
	**/
   public void setRicdCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdCauseCd(value);
   } 

     /**
	 * 	Update RicdCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex);
   	
   }
   
   public void setRicdCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdCauseCd with another Field
	 *	@param value
	 */
   public void setRicdCauseCd(Field source) {
      workFields.getHoldTransData2().setRicdCauseCd(source);
   }  
   
     /**
	 * 	Update RicdCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdPs
	 *	@return ricdPs
	 */
   public char[] getRicdPs() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdPs();
   }

  
	/**
	*  set variable ricdPs
	*  @param value
	**/
   public void setRicdPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdPs(value);
   } 

     /**
	 * 	Update RicdPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex);
   	
   }
   
   public void setRicdPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdPs with another Field
	 *	@param value
	 */
   public void setRicdPs(Field source) {
      workFields.getHoldTransData2().setRicdPs(source);
   }  
   
     /**
	 * 	Update RicdPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fromIcd9Found
	 *	@return fromIcd9Found
	 */
   public char[] getFromIcd9Found() throws CFException  {              
   		return work.getFromIcd9Found();
   }

  
	/**
	*  set variable fromIcd9Found
	*  @param value
	**/
   public void setFromIcd9Found(char[] value) throws CFException {
      work.setFromIcd9Found(value);
   } 

	/**
	 *	Returns the value of d51uRicdDrvSvc
	 *	@return d51uRicdDrvSvc
	 */
   public char[] getD51uRicdDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdDrvSvc();
   }

  
	/**
	*  set variable d51uRicdDrvSvc
	*  @param value
	**/
   public void setD51uRicdDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(value);
   } 

     /**
	 * 	Update D51uRicdDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uRicdDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uRicdDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of point
	 *	@return point
	 */   
	 public Point getPoint() {
   	return workFields.getPoint();
   }

   /**
	* 	Update Point with the passed value
	*	@param value
	*/
   public void setPoint(char[] value) throws CFException {
      workFields.setPoint(value);
   }   

     /**
	 * 	Update Point 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setPoint(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	workFields.setPoint(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Point 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPoint(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setPoint(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Point with another Field
	 *	@param value
	 */
   public void setPoint(Field source) {
   	workFields.setPoint(source);
   }  
   
     /**
	 * 	Update Point 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setPoint(Field source, int sourceIndex,int sourceLen) {
   	workFields.setPoint(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Point 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPoint(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	workFields.setPoint(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdSvc
	 *	@return ricdSvc
	 */
   public char[] getRicdSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getRicdSvc();
   }

  
	/**
	*  set variable ricdSvc
	*  @param value
	**/
   public void setRicdSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setRicdSvc(value);
   } 

     /**
	 * 	Update RicdSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex);
   	
   }
   
   public void setRicdSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdSvc with another Field
	 *	@param value
	 */
   public void setRicdSvc(Field source) {
      workFields.getHoldTransData2().setRicdSvc(source);
   }  
   
     /**
	 * 	Update RicdSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRicdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of point4
	 *	@return point4
	 */
	public int getPoint4() throws CFException {
   		return workFields.getPoint().getPoint4();
	}


	/**
	 *	Returns String value of point4
	 *	@return point4
	 */
	public char[]  getPoint4String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint4String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point4IsNumeric()  throws CFException{
	    return workFields.getPoint().point4IsNumeric();
	}

	/**
	 * 	Update Point4 with the passed value
	 *	@param number
	 */
	public void setPoint4(int number)  throws CFException{
		workFields.getPoint().setPoint4(number);
	}
	

	public void setPoint4(long number)  throws CFException{
	    workFields.getPoint().setPoint4(number);
	}
	
	
	/**
	 * 	Update Point4 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint4(char[] value)  throws CFException {
		workFields.getPoint().setPoint4(value);
	}
	
	/**
	 * 	Update Point4 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint4String(char[] value)  throws CFException{
		workFields.getPoint().setPoint4(value);
	}	

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRicdDrvCau
	 *	@return d51uRicdDrvCau
	 */
   public char[] getD51uRicdDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdDrvCau();
   }

  
	/**
	*  set variable d51uRicdDrvCau
	*  @param value
	**/
   public void setD51uRicdDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(value);
   } 

     /**
	 * 	Update D51uRicdDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uRicdDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdDrvCau with another Field
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source);
   }  
   
     /**
	 * 	Update D51uRicdDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isSameTable1()
	 *	@return  Returns true if isSameTable1() is "Y"
	 */
   public boolean isSameTable1() throws CFException {
      return work.isSameTable1();
   }

	/**
	*  set values "Y"
	*/
   	public void setSameTable1True()  throws CFException{  			
    	work.setSameTable1True();
   	}
	/**
	 *	Returns the value of point2
	 *	@return point2
	 */
	public int getPoint2() throws CFException {
   		return workFields.getPoint().getPoint2();
	}


	/**
	 *	Returns String value of point2
	 *	@return point2
	 */
	public char[]  getPoint2String() throws CFException {
	     return String.valueOf(workFields.getPoint().getPoint2String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean point2IsNumeric()  throws CFException{
	    return workFields.getPoint().point2IsNumeric();
	}

	/**
	 * 	Update Point2 with the passed value
	 *	@param number
	 */
	public void setPoint2(int number)  throws CFException{
		workFields.getPoint().setPoint2(number);
	}
	

	public void setPoint2(long number)  throws CFException{
	    workFields.getPoint().setPoint2(number);
	}
	
	
	/**
	 * 	Update Point2 with the passed value
	 *	@param value (String or char[])
	 */
	public void setPoint2(char[] value)  throws CFException {
		workFields.getPoint().setPoint2(value);
	}
	
	/**
	 * 	Update Point2 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPoint2String(char[] value)  throws CFException{
		workFields.getPoint().setPoint2(value);
	}	

	/**
	 *	Test condition "Y" for isUseDiagnosis()
	 *	@return  Returns true if isUseDiagnosis() is "Y"
	 */
   public boolean isUseDiagnosis() throws CFException {
      return work.isUseDiagnosis();
   }

	/**
	*  set values "Y"
	*/
   	public void setUseDiagnosisTrue()  throws CFException{  			
    	work.setUseDiagnosisTrue();
   	}
	/**
	 *	Returns the value of d51uRicdDrvPos
	 *	@return d51uRicdDrvPos
	 */
   public char[] getD51uRicdDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdDrvPos();
   }

  
	/**
	*  set variable d51uRicdDrvPos
	*  @param value
	**/
   public void setD51uRicdDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(value);
   } 

     /**
	 * 	Update D51uRicdDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uRicdDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdDrvPos with another Field
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source);
   }  
   
     /**
	 * 	Update D51uRicdDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of useDiagnosisSw
	 *	@return useDiagnosisSw
	 */
   public char[] getUseDiagnosisSw() throws CFException  {              
   		return work.getUseDiagnosisSw();
   }

  
	/**
	*  set variable useDiagnosisSw
	*  @param value
	**/
   public void setUseDiagnosisSw(char[] value) throws CFException {
      work.setUseDiagnosisSw(value);
   } 


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public SearchIcd92140DOutCtx clone() {
        SearchIcd92140DOutCtx cloneObj = new SearchIcd92140DOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public SearchIcd92140DOutCtx getSearchIcd92140DOutCtx() {
            return new SearchIcd92140DOutCtx();
    }
     public class SearchCause2150DInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of d51uCausDrvSvc
	 *	@return d51uCausDrvSvc
	 */
   public char[] getD51uCausDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausDrvSvc();
   }

  
	/**
	*  set variable d51uCausDrvSvc
	*  @param value
	**/
   public void setD51uCausDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(value);
   } 

     /**
	 * 	Update D51uCausDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uCausDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uCausDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd8
	 *	@return d51uCausClmCauseCd8
	 */
   public char[] getD51uCausClmCauseCd8(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd8();
   }

  
	/**
	*  set variable d51uCausClmCauseCd8
	*  @param value
	**/
   public void setD51uCausClmCauseCd8(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd8 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd8(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd8(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd8 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd8(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd8 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd8(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd8 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd8(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd8 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd8(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uCauseCd51
	 *	@return uCauseCd51
	 */
   public char[] getUCauseCd51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUCauseCd51();
   }

  
	/**
	*  set variable uCauseCd51
	*  @param value
	**/
   public void setUCauseCd51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(value);
   } 

     /**
	 * 	Update UCauseCd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUCauseCd51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex);
   	
   }
   
   public void setUCauseCd51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UCauseCd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUCauseCd51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UCauseCd51 with another Field
	 *	@param value
	 */
   public void setUCauseCd51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source);
   }  
   
     /**
	 * 	Update UCauseCd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUCauseCd51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UCauseCd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUCauseCd51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCauseCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd1
	 *	@return d51uCausClmCauseCd1
	 */
   public char[] getD51uCausClmCauseCd1(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd1();
   }

  
	/**
	*  set variable d51uCausClmCauseCd1
	*  @param value
	**/
   public void setD51uCausClmCauseCd1(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd1(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd1(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd1(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd1 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd1(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd1(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd1(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausDrvPos
	 *	@return d51uCausDrvPos
	 */
   public char[] getD51uCausDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausDrvPos();
   }

  
	/**
	*  set variable d51uCausDrvPos
	*  @param value
	**/
   public void setD51uCausDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(value);
   } 

     /**
	 * 	Update D51uCausDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uCausDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausDrvPos with another Field
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source);
   }  
   
     /**
	 * 	Update D51uCausDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevSvc
	 *	@return prevSvc
	 */
   public char[] getPrevSvc() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevSvc();
   }

  
	/**
	*  set variable prevSvc
	*  @param value
	**/
   public void setPrevSvc(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(value);
   } 

     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex);
   	
   }
   
   public void setPrevSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevSvc with another Field
	 *	@param value
	 */
   public void setPrevSvc(Field source) {
      workFields.getPrevMatchedKey().setPrevSvc(source);
   }  
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevPs
	 *	@return prevPs
	 */
   public char[] getPrevPs() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevPs();
   }

  
	/**
	*  set variable prevPs
	*  @param value
	**/
   public void setPrevPs(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(value);
   } 

     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex);
   	
   }
   
   public void setPrevPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevPs with another Field
	 *	@param value
	 */
   public void setPrevPs(Field source) {
      workFields.getPrevMatchedKey().setPrevPs(source);
   }  
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd3
	 *	@return d51uCausClmCauseCd3
	 */
   public char[] getD51uCausClmCauseCd3(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd3();
   }

  
	/**
	*  set variable d51uCausClmCauseCd3
	*  @param value
	**/
   public void setD51uCausClmCauseCd3(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd3 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd3(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd3(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd3 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd3(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd3 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd3(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd3 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd3(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd3 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd3(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of causeSub
	 *	@return causeSub
	 */
	public int getCauseSub() throws CFException {        
   		return work.getCauseSub();
	}
	
	/**
	 * 	Update CauseSub with the passed value
	 *	@param number
	 */
	public void setCauseSub(int number)  throws CFException{
		work.setCauseSub(number);
	}


	public void setCauseSub(long number)  throws CFException{
		work.setCauseSub((int)number);
	}


	/**
	 *	Returns the value of d51uCausClmCauseCd4
	 *	@return d51uCausClmCauseCd4
	 */
   public char[] getD51uCausClmCauseCd4(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd4();
   }

  
	/**
	*  set variable d51uCausClmCauseCd4
	*  @param value
	**/
   public void setD51uCausClmCauseCd4(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd4 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd4(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd4(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd4 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd4(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd4 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd4(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd4 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd4(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd4 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd4(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausDrvCau
	 *	@return d51uCausDrvCau
	 */
   public char[] getD51uCausDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausDrvCau();
   }

  
	/**
	*  set variable d51uCausDrvCau
	*  @param value
	**/
   public void setD51uCausDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(value);
   } 

     /**
	 * 	Update D51uCausDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uCausDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausDrvCau with another Field
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source);
   }  
   
     /**
	 * 	Update D51uCausDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd5
	 *	@return d51uCausClmCauseCd5
	 */
   public char[] getD51uCausClmCauseCd5(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd5();
   }

  
	/**
	*  set variable d51uCausClmCauseCd5
	*  @param value
	**/
   public void setD51uCausClmCauseCd5(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd5 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd5(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd5(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd5 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd5(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd5 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd5(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd5 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd5(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd5 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd5(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd7
	 *	@return d51uCausClmCauseCd7
	 */
   public char[] getD51uCausClmCauseCd7(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd7();
   }

  
	/**
	*  set variable d51uCausClmCauseCd7
	*  @param value
	**/
   public void setD51uCausClmCauseCd7(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd7 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd7(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd7(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd7 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd7(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd7 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd7(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd7 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd7(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd7 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd7(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd6
	 *	@return d51uCausClmCauseCd6
	 */
   public char[] getD51uCausClmCauseCd6(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd6();
   }

  
	/**
	*  set variable d51uCausClmCauseCd6
	*  @param value
	**/
   public void setD51uCausClmCauseCd6(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd6 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd6(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd6(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd6 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd6(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd6 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd6(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd6 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd6(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd6 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd6(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevCauseCd
	 *	@return prevCauseCd
	 */
   public char[] getPrevCauseCd() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevCauseCd();
   }

  
	/**
	*  set variable prevCauseCd
	*  @param value
	**/
   public void setPrevCauseCd(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(value);
   } 

     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex);
   	
   }
   
   public void setPrevCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevCauseCd with another Field
	 *	@param value
	 */
   public void setPrevCauseCd(Field source) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source);
   }  
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd2
	 *	@return d51uCausClmCauseCd2
	 */
   public char[] getD51uCausClmCauseCd2(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd2();
   }

  
	/**
	*  set variable d51uCausClmCauseCd2
	*  @param value
	**/
   public void setD51uCausClmCauseCd2(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd2(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd2(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd2(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd2 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd2(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd2(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd2(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public SearchCause2150DOutCtx getSearchCause2150DOutCtx() {
            return new SearchCause2150DOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public SearchCause2150DInCtx clone() {
        SearchCause2150DInCtx cloneObj = new SearchCause2150DInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public SearchCause2150DInCtx getSearchCause2150DInCtx() {
            return new SearchCause2150DInCtx();
    }
     public class SearchCause2150DOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of d51uCausDrvSvc
	 *	@return d51uCausDrvSvc
	 */
   public char[] getD51uCausDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausDrvSvc();
   }

  
	/**
	*  set variable d51uCausDrvSvc
	*  @param value
	**/
   public void setD51uCausDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(value);
   } 

     /**
	 * 	Update D51uCausDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uCausDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uCausDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausDrvCau
	 *	@return d51uCausDrvCau
	 */
   public char[] getD51uCausDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausDrvCau();
   }

  
	/**
	*  set variable d51uCausDrvCau
	*  @param value
	**/
   public void setD51uCausDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(value);
   } 

     /**
	 * 	Update D51uCausDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uCausDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausDrvCau with another Field
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source);
   }  
   
     /**
	 * 	Update D51uCausDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causSvc
	 *	@return causSvc
	 */
   public char[] getCausSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getCausSvc();
   }

  
	/**
	*  set variable causSvc
	*  @param value
	**/
   public void setCausSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausSvc(value);
   } 

     /**
	 * 	Update CausSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex);
   	
   }
   
   public void setCausSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausSvc with another Field
	 *	@param value
	 */
   public void setCausSvc(Field source) {
      workFields.getHoldTransData2().setCausSvc(source);
   }  
   
     /**
	 * 	Update CausSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isSameTable1()
	 *	@return  Returns true if isSameTable1() is "Y"
	 */
   public boolean isSameTable1() throws CFException {
      return work.isSameTable1();
   }

	/**
	*  set values "Y"
	*/
   	public void setSameTable1True()  throws CFException{  			
    	work.setSameTable1True();
   	}
	/**
	 *	Returns the value of fromCauseFound
	 *	@return fromCauseFound
	 */
   public char[] getFromCauseFound() throws CFException  {              
   		return work.getFromCauseFound();
   }

  
	/**
	*  set variable fromCauseFound
	*  @param value
	**/
   public void setFromCauseFound(char[] value) throws CFException {
      work.setFromCauseFound(value);
   } 

	/**
	 *	Returns the value of d51uCausDrvPos
	 *	@return d51uCausDrvPos
	 */
   public char[] getD51uCausDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausDrvPos();
   }

  
	/**
	*  set variable d51uCausDrvPos
	*  @param value
	**/
   public void setD51uCausDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(value);
   } 

     /**
	 * 	Update D51uCausDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uCausDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausDrvPos with another Field
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source);
   }  
   
     /**
	 * 	Update D51uCausDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causPs
	 *	@return causPs
	 */
   public char[] getCausPs() throws CFException  {              
   		return workFields.getHoldTransData2().getCausPs();
   }

  
	/**
	*  set variable causPs
	*  @param value
	**/
   public void setCausPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausPs(value);
   } 

     /**
	 * 	Update CausPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex);
   	
   }
   
   public void setCausPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausPs with another Field
	 *	@param value
	 */
   public void setCausPs(Field source) {
      workFields.getHoldTransData2().setCausPs(source);
   }  
   
     /**
	 * 	Update CausPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causCauseCd
	 *	@return causCauseCd
	 */
   public char[] getCausCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getCausCauseCd();
   }

  
	/**
	*  set variable causCauseCd
	*  @param value
	**/
   public void setCausCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setCausCauseCd(value);
   } 

     /**
	 * 	Update CausCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex);
   	
   }
   
   public void setCausCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausCauseCd with another Field
	 *	@param value
	 */
   public void setCausCauseCd(Field source) {
      workFields.getHoldTransData2().setCausCauseCd(source);
   }  
   
     /**
	 * 	Update CausCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCausCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public SearchCause2150DOutCtx clone() {
        SearchCause2150DOutCtx cloneObj = new SearchCause2150DOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public SearchCause2150DOutCtx getSearchCause2150DOutCtx() {
            return new SearchCause2150DOutCtx();
    }
     public class MatchIpaToPpoalt2160DInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of d51uRipaClmIpa2Cd
	 *	@return d51uRipaClmIpa2Cd
	 */
	public int getD51uRipaClmIpa2Cd(int index) throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa2Cd();
	}


	/**
	 *	Returns String value of d51uRipaClmIpa2Cd
	 *	@return d51uRipaClmIpa2Cd
	 */
	public char[]  getD51uRipaClmIpa2CdString(int index) throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa2CdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uRipaClmIpa2CdIsNumeric(int index)  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index - 1).d51uRipaClmIpa2CdIsNumeric();
	}

	/**
	 * 	Update D51uRipaClmIpa2Cd with the passed value
	 *	@param number
	 */
	public void setD51uRipaClmIpa2Cd(int index,int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa2Cd(number);
	}
	

	public void setD51uRipaClmIpa2Cd(int index,long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa2Cd(number);
	}
	
	
	/**
	 * 	Update D51uRipaClmIpa2Cd with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa2Cd(int index,char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa2Cd(value);
	}
	
	/**
	 * 	Update D51uRipaClmIpa2Cd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa2CdString(int index,char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa2Cd(value);
	}	

	/**
	 *	Returns the value of d51uRipaGrpTbl3Nbr
	 *	@return d51uRipaGrpTbl3Nbr
	 */
   public char[] getD51uRipaGrpTbl3Nbr(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaGrpTbl3Nbr();
   }

  
	/**
	*  set variable d51uRipaGrpTbl3Nbr
	*  @param value
	**/
   public void setD51uRipaGrpTbl3Nbr(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl3Nbr(value);
   } 

     /**
	 * 	Update D51uRipaGrpTbl3Nbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaGrpTbl3Nbr(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl3Nbr(source, sourceIndex);
   	
   }
   
   public void setD51uRipaGrpTbl3Nbr(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl3Nbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaGrpTbl3Nbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaGrpTbl3Nbr(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl3Nbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaGrpTbl3Nbr with another Field
	 *	@param value
	 */
   public void setD51uRipaGrpTbl3Nbr(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl3Nbr(source);
   }  
   
     /**
	 * 	Update D51uRipaGrpTbl3Nbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaGrpTbl3Nbr(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl3Nbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaGrpTbl3Nbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaGrpTbl3Nbr(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl3Nbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRipaDrvSvc
	 *	@return d51uRipaDrvSvc
	 */
   public char[] getD51uRipaDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaDrvSvc();
   }

  
	/**
	*  set variable d51uRipaDrvSvc
	*  @param value
	**/
   public void setD51uRipaDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(value);
   } 

     /**
	 * 	Update D51uRipaDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uRipaDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uRipaDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getPpaLastCanDate(int index) throws CFException {  
        return dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().getPpaLastCanDate();
}
	/**
	 * 	Update PpaLastCanDate with the passed value
	 *	@param number
	 */
	public void setPpaLastCanDate(int index,int number)  throws CFException{
		dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaLastCanDate(number);
	}


	public void setPpaLastCanDate(int index,long number)  throws CFException{
	    dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaLastCanDate(number);
	}
	

	/**
	 *	Returns the value of iSub
	 *	@return iSub
	 */
	public int getISub() throws CFException {        
   		return work.getISub();
	}
	
	/**
	 * 	Update ISub with the passed value
	 *	@param number
	 */
	public void setISub(int number)  throws CFException{
		work.setISub(number);
	}


	public void setISub(long number)  throws CFException{
		work.setISub((int)number);
	}


	/**
	 *	Returns the value of d51uRipaDrvPos
	 *	@return d51uRipaDrvPos
	 */
   public char[] getD51uRipaDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaDrvPos();
   }

  
	/**
	*  set variable d51uRipaDrvPos
	*  @param value
	**/
   public void setD51uRipaDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(value);
   } 

     /**
	 * 	Update D51uRipaDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uRipaDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaDrvPos with another Field
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source);
   }  
   
     /**
	 * 	Update D51uRipaDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevSvc
	 *	@return prevSvc
	 */
   public char[] getPrevSvc() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevSvc();
   }

  
	/**
	*  set variable prevSvc
	*  @param value
	**/
   public void setPrevSvc(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(value);
   } 

     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex);
   	
   }
   
   public void setPrevSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevSvc with another Field
	 *	@param value
	 */
   public void setPrevSvc(Field source) {
      workFields.getPrevMatchedKey().setPrevSvc(source);
   }  
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRipaClmIpa1Cd
	 *	@return d51uRipaClmIpa1Cd
	 */
	public int getD51uRipaClmIpa1Cd(int index) throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa1Cd();
	}


	/**
	 *	Returns String value of d51uRipaClmIpa1Cd
	 *	@return d51uRipaClmIpa1Cd
	 */
	public char[]  getD51uRipaClmIpa1CdString(int index) throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa1CdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uRipaClmIpa1CdIsNumeric(int index)  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index - 1).d51uRipaClmIpa1CdIsNumeric();
	}

	/**
	 * 	Update D51uRipaClmIpa1Cd with the passed value
	 *	@param number
	 */
	public void setD51uRipaClmIpa1Cd(int index,int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa1Cd(number);
	}
	

	public void setD51uRipaClmIpa1Cd(int index,long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa1Cd(number);
	}
	
	
	/**
	 * 	Update D51uRipaClmIpa1Cd with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa1Cd(int index,char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa1Cd(value);
	}
	
	/**
	 * 	Update D51uRipaClmIpa1Cd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa1CdString(int index,char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa1Cd(value);
	}	

	/**
	 *	Returns the value of prevPs
	 *	@return prevPs
	 */
   public char[] getPrevPs() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevPs();
   }

  
	/**
	*  set variable prevPs
	*  @param value
	**/
   public void setPrevPs(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(value);
   } 

     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex);
   	
   }
   
   public void setPrevPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevPs with another Field
	 *	@param value
	 */
   public void setPrevPs(Field source) {
      workFields.getPrevMatchedKey().setPrevPs(source);
   }  
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRipaGrpTbl2Nbr
	 *	@return d51uRipaGrpTbl2Nbr
	 */
   public char[] getD51uRipaGrpTbl2Nbr(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaGrpTbl2Nbr();
   }

  
	/**
	*  set variable d51uRipaGrpTbl2Nbr
	*  @param value
	**/
   public void setD51uRipaGrpTbl2Nbr(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl2Nbr(value);
   } 

     /**
	 * 	Update D51uRipaGrpTbl2Nbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaGrpTbl2Nbr(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl2Nbr(source, sourceIndex);
   	
   }
   
   public void setD51uRipaGrpTbl2Nbr(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl2Nbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaGrpTbl2Nbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaGrpTbl2Nbr(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl2Nbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaGrpTbl2Nbr with another Field
	 *	@param value
	 */
   public void setD51uRipaGrpTbl2Nbr(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl2Nbr(source);
   }  
   
     /**
	 * 	Update D51uRipaGrpTbl2Nbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaGrpTbl2Nbr(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl2Nbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaGrpTbl2Nbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaGrpTbl2Nbr(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl2Nbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uEarliestDos51
	 *	@return uEarliestDos51
	 */
	public long getUEarliestDos51() throws CFException {
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUEarliestDos51();
	}


	/**
	 *	Returns String value of uEarliestDos51
	 *	@return uEarliestDos51
	 */
	public char[]  getUEarliestDos51String() throws CFException {
	     return String.valueOf(dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUEarliestDos51String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean uEarliestDos51IsNumeric()  throws CFException{
	    return dfhcommarea.getLinkAreaM51u().getM51uLinkage().uEarliestDos51IsNumeric();
	}

	/**
	 * 	Update UEarliestDos51 with the passed value
	 *	@param number
	 */
	public void setUEarliestDos51(long number)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUEarliestDos51(number);
	}
	

	
	/**
	 * 	Update UEarliestDos51 with the passed value
	 *	@param value (String or char[])
	 */
	public void setUEarliestDos51(char[] value)  throws CFException {
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUEarliestDos51(value);
	}
	
	/**
	 * 	Update UEarliestDos51 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setUEarliestDos51String(char[] value)  throws CFException{
		dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUEarliestDos51(value);
	}	

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of ppaFixedPortion
	 *	@return ppaFixedPortion
	 */   
	 public PpaFixedPortion getPpaFixedPortion() {
   	return dfhcommarea.getPpaPpoaltRecord().getPpaFixedPortion();
   }

   /**
	* 	Update PpaFixedPortion with the passed value
	*	@param value
	*/
   public void setPpaFixedPortion(char[] value) throws CFException {
      dfhcommarea.getPpaPpoaltRecord().setPpaFixedPortion(value);
   }   

     /**
	 * 	Update PpaFixedPortion 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setPpaFixedPortion(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dfhcommarea.getPpaPpoaltRecord().setPpaFixedPortion(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PpaFixedPortion 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPpaFixedPortion(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dfhcommarea.getPpaPpoaltRecord().setPpaFixedPortion(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PpaFixedPortion with another Field
	 *	@param value
	 */
   public void setPpaFixedPortion(Field source) {
   	dfhcommarea.getPpaPpoaltRecord().setPpaFixedPortion(source);
   }  
   
     /**
	 * 	Update PpaFixedPortion 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setPpaFixedPortion(Field source, int sourceIndex,int sourceLen) {
   	dfhcommarea.getPpaPpoaltRecord().setPpaFixedPortion(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PpaFixedPortion 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPpaFixedPortion(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dfhcommarea.getPpaPpoaltRecord().setPpaFixedPortion(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getPpaIpa(int index) throws CFException {  
        return dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().getPpaIpa();
}
	/**
	 * 	Update PpaIpa with the passed value
	 *	@param number
	 */
	public void setPpaIpa(int index,int number)  throws CFException{
		dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaIpa(number);
	}


	public void setPpaIpa(int index,long number)  throws CFException{
	    dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaIpa(number);
	}
	

public int getPpaFirstEffDate(int index) throws CFException {  
        return dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().getPpaFirstEffDate();
}
	/**
	 * 	Update PpaFirstEffDate with the passed value
	 *	@param number
	 */
	public void setPpaFirstEffDate(int index,int number)  throws CFException{
		dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaFirstEffDate(number);
	}


	public void setPpaFirstEffDate(int index,long number)  throws CFException{
	    dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaFirstEffDate(number);
	}
	

	/**
	 *	Returns the value of d51uRipaDrvCau
	 *	@return d51uRipaDrvCau
	 */
   public char[] getD51uRipaDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaDrvCau();
   }

  
	/**
	*  set variable d51uRipaDrvCau
	*  @param value
	**/
   public void setD51uRipaDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(value);
   } 

     /**
	 * 	Update D51uRipaDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uRipaDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaDrvCau with another Field
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source);
   }  
   
     /**
	 * 	Update D51uRipaDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ipaSub
	 *	@return ipaSub
	 */
	public int getIpaSub() throws CFException {        
   		return work.getIpaSub();
	}
	
	/**
	 * 	Update IpaSub with the passed value
	 *	@param number
	 */
	public void setIpaSub(int number)  throws CFException{
		work.setIpaSub(number);
	}


	public void setIpaSub(long number)  throws CFException{
		work.setIpaSub((int)number);
	}


	/**
	 *	Returns the value of prevCauseCd
	 *	@return prevCauseCd
	 */
   public char[] getPrevCauseCd() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevCauseCd();
   }

  
	/**
	*  set variable prevCauseCd
	*  @param value
	**/
   public void setPrevCauseCd(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(value);
   } 

     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex);
   	
   }
   
   public void setPrevCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevCauseCd with another Field
	 *	@param value
	 */
   public void setPrevCauseCd(Field source) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source);
   }  
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRipaGrpTbl1Nbr
	 *	@return d51uRipaGrpTbl1Nbr
	 */
   public char[] getD51uRipaGrpTbl1Nbr(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaGrpTbl1Nbr();
   }

  
	/**
	*  set variable d51uRipaGrpTbl1Nbr
	*  @param value
	**/
   public void setD51uRipaGrpTbl1Nbr(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl1Nbr(value);
   } 

     /**
	 * 	Update D51uRipaGrpTbl1Nbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaGrpTbl1Nbr(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl1Nbr(source, sourceIndex);
   	
   }
   
   public void setD51uRipaGrpTbl1Nbr(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl1Nbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaGrpTbl1Nbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaGrpTbl1Nbr(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl1Nbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaGrpTbl1Nbr with another Field
	 *	@param value
	 */
   public void setD51uRipaGrpTbl1Nbr(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl1Nbr(source);
   }  
   
     /**
	 * 	Update D51uRipaGrpTbl1Nbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaGrpTbl1Nbr(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl1Nbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaGrpTbl1Nbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaGrpTbl1Nbr(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl1Nbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public short getPpaPpoIdCount() throws CFException {  
        return dfhcommarea.getPpaPpoaltRecord().getPpaFixedPortion().getPpaPpoIdCount();
}
	/**
	 * 	Update PpaPpoIdCount with the passed value
	 *	@param number
	 */
	public void setPpaPpoIdCount(short number)  throws CFException{
		dfhcommarea.getPpaPpoaltRecord().getPpaFixedPortion().setPpaPpoIdCount(number);
	}

	public void setPpaPpoIdCount(int number)  throws CFException{
	   dfhcommarea.getPpaPpoaltRecord().getPpaFixedPortion().setPpaPpoIdCount(number);
	}
	public void setPpaPpoIdCount(long number)  throws CFException {
	    dfhcommarea.getPpaPpoaltRecord().getPpaFixedPortion().setPpaPpoIdCount(number);
	}
	


	/**
	 *	Returns the value of ppaGrpTabNo
	 *	@return ppaGrpTabNo
	 */
   public char[] getPpaGrpTabNo(int index) throws CFException  {              
   		return dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().getPpaGrpTabNo();
   }

  
	/**
	*  set variable ppaGrpTabNo
	*  @param value
	**/
   public void setPpaGrpTabNo(int index,char[] value) throws CFException {
      dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaGrpTabNo(value);
   } 

     /**
	 * 	Update PpaGrpTabNo 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPpaGrpTabNo(int index,char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaGrpTabNo(source, sourceIndex);
   	
   }
   
   public void setPpaGrpTabNo(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaGrpTabNo(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PpaGrpTabNo 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPpaGrpTabNo(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaGrpTabNo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PpaGrpTabNo with another Field
	 *	@param value
	 */
   public void setPpaGrpTabNo(int index,Field source) {
      dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaGrpTabNo(source);
   }  
   
     /**
	 * 	Update PpaGrpTabNo 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPpaGrpTabNo(int index,Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaGrpTabNo(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PpaGrpTabNo 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPpaGrpTabNo(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getPpaPpoaltRecord().getPpaPpoId(index).getPpaOccurrence().setPpaGrpTabNo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRipaClmIpa3Cd
	 *	@return d51uRipaClmIpa3Cd
	 */
	public int getD51uRipaClmIpa3Cd(int index) throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa3Cd();
	}


	/**
	 *	Returns String value of d51uRipaClmIpa3Cd
	 *	@return d51uRipaClmIpa3Cd
	 */
	public char[]  getD51uRipaClmIpa3CdString(int index) throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa3CdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uRipaClmIpa3CdIsNumeric(int index)  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index - 1).d51uRipaClmIpa3CdIsNumeric();
	}

	/**
	 * 	Update D51uRipaClmIpa3Cd with the passed value
	 *	@param number
	 */
	public void setD51uRipaClmIpa3Cd(int index,int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa3Cd(number);
	}
	

	public void setD51uRipaClmIpa3Cd(int index,long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa3Cd(number);
	}
	
	
	/**
	 * 	Update D51uRipaClmIpa3Cd with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa3Cd(int index,char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa3Cd(value);
	}
	
	/**
	 * 	Update D51uRipaClmIpa3Cd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa3CdString(int index,char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa3Cd(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public MatchIpaToPpoalt2160DOutCtx getMatchIpaToPpoalt2160DOutCtx() {
            return new MatchIpaToPpoalt2160DOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public MatchIpaToPpoalt2160DInCtx clone() {
        MatchIpaToPpoalt2160DInCtx cloneObj = new MatchIpaToPpoalt2160DInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public MatchIpaToPpoalt2160DInCtx getMatchIpaToPpoalt2160DInCtx() {
            return new MatchIpaToPpoalt2160DInCtx();
    }
     public class MatchIpaToPpoalt2160DOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of gtnLoaded
	 *	@return gtnLoaded
	 */
   public char[] getGtnLoaded() throws CFException  {              
   		return work.getGtnLoaded();
   }

  
	/**
	*  set variable gtnLoaded
	*  @param value
	**/
   public void setGtnLoaded(char[] value) throws CFException {
      work.setGtnLoaded(value);
   } 

	/**
	 *	Returns the value of ripaSvc
	 *	@return ripaSvc
	 */
   public char[] getRipaSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaSvc();
   }

  
	/**
	*  set variable ripaSvc
	*  @param value
	**/
   public void setRipaSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaSvc(value);
   } 

     /**
	 * 	Update RipaSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex);
   	
   }
   
   public void setRipaSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaSvc with another Field
	 *	@param value
	 */
   public void setRipaSvc(Field source) {
      workFields.getHoldTransData2().setRipaSvc(source);
   }  
   
     /**
	 * 	Update RipaSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ipaCodeFound
	 *	@return ipaCodeFound
	 */
   public char[] getIpaCodeFound() throws CFException  {              
   		return work.getIpaCodeFound();
   }

  
	/**
	*  set variable ipaCodeFound
	*  @param value
	**/
   public void setIpaCodeFound(char[] value) throws CFException {
      work.setIpaCodeFound(value);
   } 

	/**
	 *	Test condition "Y" for isIpaCodeFound1()
	 *	@return  Returns true if isIpaCodeFound1() is "Y"
	 */
   public boolean isIpaCodeFound1() throws CFException {
      return work.isIpaCodeFound1();
   }

	/**
	*  set values "Y"
	*/
   	public void setIpaCodeFound1True()  throws CFException{  			
    	work.setIpaCodeFound1True();
   	}
	/**
	 *	Returns the value of d51uRipaDrvSvc
	 *	@return d51uRipaDrvSvc
	 */
   public char[] getD51uRipaDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaDrvSvc();
   }

  
	/**
	*  set variable d51uRipaDrvSvc
	*  @param value
	**/
   public void setD51uRipaDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(value);
   } 

     /**
	 * 	Update D51uRipaDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uRipaDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uRipaDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isIpaAndGtnFound1()
	 *	@return  Returns true if isIpaAndGtnFound1() is "Y"
	 */
   public boolean isIpaAndGtnFound1() throws CFException {
      return work.isIpaAndGtnFound1();
   }

	/**
	*  set values "Y"
	*/
   	public void setIpaAndGtnFound1True()  throws CFException{  			
    	work.setIpaAndGtnFound1True();
   	}
	/**
	 *	Returns the value of ipaAndGtnFound
	 *	@return ipaAndGtnFound
	 */
   public char[] getIpaAndGtnFound() throws CFException  {              
   		return work.getIpaAndGtnFound();
   }

  
	/**
	*  set variable ipaAndGtnFound
	*  @param value
	**/
   public void setIpaAndGtnFound(char[] value) throws CFException {
      work.setIpaAndGtnFound(value);
   } 

	/**
	 *	Returns the value of d51uRipaDrvPos
	 *	@return d51uRipaDrvPos
	 */
   public char[] getD51uRipaDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaDrvPos();
   }

  
	/**
	*  set variable d51uRipaDrvPos
	*  @param value
	**/
   public void setD51uRipaDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(value);
   } 

     /**
	 * 	Update D51uRipaDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uRipaDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaDrvPos with another Field
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source);
   }  
   
     /**
	 * 	Update D51uRipaDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of ripaCauseCd
	 *	@return ripaCauseCd
	 */
   public char[] getRipaCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaCauseCd();
   }

  
	/**
	*  set variable ripaCauseCd
	*  @param value
	**/
   public void setRipaCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaCauseCd(value);
   } 

     /**
	 * 	Update RipaCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex);
   	
   }
   
   public void setRipaCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaCauseCd with another Field
	 *	@param value
	 */
   public void setRipaCauseCd(Field source) {
      workFields.getHoldTransData2().setRipaCauseCd(source);
   }  
   
     /**
	 * 	Update RipaCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRipaDrvCau
	 *	@return d51uRipaDrvCau
	 */
   public char[] getD51uRipaDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaDrvCau();
   }

  
	/**
	*  set variable d51uRipaDrvCau
	*  @param value
	**/
   public void setD51uRipaDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(value);
   } 

     /**
	 * 	Update D51uRipaDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uRipaDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaDrvCau with another Field
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source);
   }  
   
     /**
	 * 	Update D51uRipaDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isGtnLoaded1()
	 *	@return  Returns true if isGtnLoaded1() is "Y"
	 */
   public boolean isGtnLoaded1() throws CFException {
      return work.isGtnLoaded1();
   }

	/**
	*  set values "Y"
	*/
   	public void setGtnLoaded1True()  throws CFException{  			
    	work.setGtnLoaded1True();
   	}
	/**
	 *	Returns the value of ipaSub
	 *	@return ipaSub
	 */
	public int getIpaSub() throws CFException {        
   		return work.getIpaSub();
	}
	
	/**
	 * 	Update IpaSub with the passed value
	 *	@param number
	 */
	public void setIpaSub(int number)  throws CFException{
		work.setIpaSub(number);
	}


	public void setIpaSub(long number)  throws CFException{
		work.setIpaSub((int)number);
	}


	/**
	 *	Test condition "Y" for isSameTable1()
	 *	@return  Returns true if isSameTable1() is "Y"
	 */
   public boolean isSameTable1() throws CFException {
      return work.isSameTable1();
   }

	/**
	*  set values "Y"
	*/
   	public void setSameTable1True()  throws CFException{  			
    	work.setSameTable1True();
   	}
	/**
	 *	Returns the value of ripaPs
	 *	@return ripaPs
	 */
   public char[] getRipaPs() throws CFException  {              
   		return workFields.getHoldTransData2().getRipaPs();
   }

  
	/**
	*  set variable ripaPs
	*  @param value
	**/
   public void setRipaPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setRipaPs(value);
   } 

     /**
	 * 	Update RipaPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex);
   	
   }
   
   public void setRipaPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaPs with another Field
	 *	@param value
	 */
   public void setRipaPs(Field source) {
      workFields.getHoldTransData2().setRipaPs(source);
   }  
   
     /**
	 * 	Update RipaPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setRipaPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public MatchIpaToPpoalt2160DOutCtx clone() {
        MatchIpaToPpoalt2160DOutCtx cloneObj = new MatchIpaToPpoalt2160DOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public MatchIpaToPpoalt2160DOutCtx getMatchIpaToPpoalt2160DOutCtx() {
            return new MatchIpaToPpoalt2160DOutCtx();
    }
     public class SearchCflgInCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of d51uCflgCpeDescCd
	 *	@return d51uCflgCpeDescCd
	 */
   public char[] getD51uCflgCpeDescCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).getD51uCflgCpeDescCd();
   }

  
	/**
	*  set variable d51uCflgCpeDescCd
	*  @param value
	**/
   public void setD51uCflgCpeDescCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgCpeDescCd(value);
   } 

     /**
	 * 	Update D51uCflgCpeDescCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCflgCpeDescCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgCpeDescCd(source, sourceIndex);
   	
   }
   
   public void setD51uCflgCpeDescCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgCpeDescCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCflgCpeDescCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgCpeDescCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgCpeDescCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCflgCpeDescCd with another Field
	 *	@param value
	 */
   public void setD51uCflgCpeDescCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgCpeDescCd(source);
   }  
   
     /**
	 * 	Update D51uCflgCpeDescCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCflgCpeDescCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgCpeDescCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCflgCpeDescCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgCpeDescCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgCpeDescCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cflgSub
	 *	@return cflgSub
	 */
	public int getCflgSub() throws CFException {        
   		return work.getCflgSub();
	}
	
	/**
	 * 	Update CflgSub with the passed value
	 *	@param number
	 */
	public void setCflgSub(int number)  throws CFException{
		work.setCflgSub(number);
	}


	public void setCflgSub(long number)  throws CFException{
		work.setCflgSub((int)number);
	}


	/**
	 *	Returns the value of d51uCflgDrvSvc
	 *	@return d51uCflgDrvSvc
	 */
   public char[] getD51uCflgDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).getD51uCflgDrvSvc();
   }

  
	/**
	*  set variable d51uCflgDrvSvc
	*  @param value
	**/
   public void setD51uCflgDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(value);
   } 

     /**
	 * 	Update D51uCflgDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCflgDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uCflgDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCflgDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCflgDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uCflgDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uCflgDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCflgDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCflgDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCflgDrvPos
	 *	@return d51uCflgDrvPos
	 */
   public char[] getD51uCflgDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).getD51uCflgDrvPos();
   }

  
	/**
	*  set variable d51uCflgDrvPos
	*  @param value
	**/
   public void setD51uCflgDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(value);
   } 

     /**
	 * 	Update D51uCflgDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCflgDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uCflgDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCflgDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCflgDrvPos with another Field
	 *	@param value
	 */
   public void setD51uCflgDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source);
   }  
   
     /**
	 * 	Update D51uCflgDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCflgDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCflgDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCflgDrvCau
	 *	@return d51uCflgDrvCau
	 */
   public char[] getD51uCflgDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).getD51uCflgDrvCau();
   }

  
	/**
	*  set variable d51uCflgDrvCau
	*  @param value
	**/
   public void setD51uCflgDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(value);
   } 

     /**
	 * 	Update D51uCflgDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCflgDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uCflgDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCflgDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCflgDrvCau with another Field
	 *	@param value
	 */
   public void setD51uCflgDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source);
   }  
   
     /**
	 * 	Update D51uCflgDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCflgDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCflgDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevCauseCd
	 *	@return prevCauseCd
	 */
   public char[] getPrevCauseCd() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevCauseCd();
   }

  
	/**
	*  set variable prevCauseCd
	*  @param value
	**/
   public void setPrevCauseCd(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(value);
   } 

     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex);
   	
   }
   
   public void setPrevCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevCauseCd with another Field
	 *	@param value
	 */
   public void setPrevCauseCd(Field source) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source);
   }  
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevSvc
	 *	@return prevSvc
	 */
   public char[] getPrevSvc() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevSvc();
   }

  
	/**
	*  set variable prevSvc
	*  @param value
	**/
   public void setPrevSvc(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(value);
   } 

     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex);
   	
   }
   
   public void setPrevSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevSvc with another Field
	 *	@param value
	 */
   public void setPrevSvc(Field source) {
      workFields.getPrevMatchedKey().setPrevSvc(source);
   }  
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of uCpeDescCd51
	 *	@return uCpeDescCd51
	 */
   public char[] getUCpeDescCd51() throws CFException  {              
   		return dfhcommarea.getLinkAreaM51u().getM51uLinkage().getUCpeDescCd51();
   }

  
	/**
	*  set variable uCpeDescCd51
	*  @param value
	**/
   public void setUCpeDescCd51(char[] value) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(value);
   } 

     /**
	 * 	Update UCpeDescCd51 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setUCpeDescCd51(char[] source, int sourceIndex) throws CFException {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source, sourceIndex);
   	
   }
   
   public void setUCpeDescCd51(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update UCpeDescCd51 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setUCpeDescCd51(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update UCpeDescCd51 with another Field
	 *	@param value
	 */
   public void setUCpeDescCd51(Field source) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source);
   }  
   
     /**
	 * 	Update UCpeDescCd51 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setUCpeDescCd51(Field source, int sourceIndex,int sourceLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update UCpeDescCd51 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setUCpeDescCd51(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dfhcommarea.getLinkAreaM51u().getM51uLinkage().setUCpeDescCd51(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of prevPs
	 *	@return prevPs
	 */
   public char[] getPrevPs() throws CFException  {              
   		return workFields.getPrevMatchedKey().getPrevPs();
   }

  
	/**
	*  set variable prevPs
	*  @param value
	**/
   public void setPrevPs(char[] value) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(value);
   } 

     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex) throws CFException {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex);
   	
   }
   
   public void setPrevPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PrevPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PrevPs with another Field
	 *	@param value
	 */
   public void setPrevPs(Field source) {
      workFields.getPrevMatchedKey().setPrevPs(source);
   }  
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PrevPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPrevPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getPrevMatchedKey().setPrevPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	

	/**
	 *	Returns the value of causeSub
	 *	@return causeSub
	 */
	public int getCauseSub() throws CFException {        
   		return work.getCauseSub();
	}
	
	/**
	 * 	Update CauseSub with the passed value
	 *	@param number
	 */
	public void setCauseSub(int number)  throws CFException{
		work.setCauseSub(number);
	}


	public void setCauseSub(long number)  throws CFException{
		work.setCauseSub((int)number);
	}



        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }

        public SearchCflgOutCtx getSearchCflgOutCtx() {
            return new SearchCflgOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public SearchCflgInCtx clone() {
        SearchCflgInCtx cloneObj = new SearchCflgInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public SearchCflgInCtx getSearchCflgInCtx() {
            return new SearchCflgInCtx();
    }
     public class SearchCflgOutCtx implements Cloneable {
     Work work = O529351uCtx.this.getWork();
     WorkFields workFields = O529351uCtx.this.getWorkFields();
     Vyspi51uCallArea vyspi51uCallArea = O529351uCtx.this.getVyspi51uCallArea();
     Dfhcommarea dfhcommarea = O529351uCtx.this.getDfhcommarea();

	/**
	 *	Returns the value of cpeFlgFound
	 *	@return cpeFlgFound
	 */
   public char[] getCpeFlgFound() throws CFException  {              
   		return work.getCpeFlgFound();
   }

  
	/**
	*  set variable cpeFlgFound
	*  @param value
	**/
   public void setCpeFlgFound(char[] value) throws CFException {
      work.setCpeFlgFound(value);
   } 

	/**
	 *	Returns the value of cflgSvc
	 *	@return cflgSvc
	 */
   public char[] getCflgSvc() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgSvc();
   }

  
	/**
	*  set variable cflgSvc
	*  @param value
	**/
   public void setCflgSvc(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgSvc(value);
   } 

     /**
	 * 	Update CflgSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgSvc(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex);
   	
   }
   
   public void setCflgSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgSvc with another Field
	 *	@param value
	 */
   public void setCflgSvc(Field source) {
      workFields.getHoldTransData2().setCflgSvc(source);
   }  
   
     /**
	 * 	Update CflgSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgSvc(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of paragraph
	 *	@return paragraph
	 */
   public char[] getParagraph() throws CFException  {              
   		return workFields.getParagraph();
   }

  
	/**
	*  set variable paragraph
	*  @param value
	**/
   public void setParagraph(char[] value) throws CFException {
      workFields.setParagraph(value);
   } 

     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex) throws CFException {
      workFields.setParagraph(source, sourceIndex);
   	
   }
   
   public void setParagraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.setParagraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Paragraph with another Field
	 *	@param value
	 */
   public void setParagraph(Field source) {
      workFields.setParagraph(source);
   }  
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setParagraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.setParagraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cflgCauseCd
	 *	@return cflgCauseCd
	 */
   public char[] getCflgCauseCd() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgCauseCd();
   }

  
	/**
	*  set variable cflgCauseCd
	*  @param value
	**/
   public void setCflgCauseCd(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgCauseCd(value);
   } 

     /**
	 * 	Update CflgCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgCauseCd(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex);
   	
   }
   
   public void setCflgCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgCauseCd with another Field
	 *	@param value
	 */
   public void setCflgCauseCd(Field source) {
      workFields.getHoldTransData2().setCflgCauseCd(source);
   }  
   
     /**
	 * 	Update CflgCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgCauseCd(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCflgDrvSvc
	 *	@return d51uCflgDrvSvc
	 */
   public char[] getD51uCflgDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).getD51uCflgDrvSvc();
   }

  
	/**
	*  set variable d51uCflgDrvSvc
	*  @param value
	**/
   public void setD51uCflgDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(value);
   } 

     /**
	 * 	Update D51uCflgDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCflgDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uCflgDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCflgDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCflgDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uCflgDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uCflgDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCflgDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCflgDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isSameTable1()
	 *	@return  Returns true if isSameTable1() is "Y"
	 */
   public boolean isSameTable1() throws CFException {
      return work.isSameTable1();
   }

	/**
	*  set values "Y"
	*/
   	public void setSameTable1True()  throws CFException{  			
    	work.setSameTable1True();
   	}
	/**
	 *	Returns the value of cflgPs
	 *	@return cflgPs
	 */
   public char[] getCflgPs() throws CFException  {              
   		return workFields.getHoldTransData2().getCflgPs();
   }

  
	/**
	*  set variable cflgPs
	*  @param value
	**/
   public void setCflgPs(char[] value) throws CFException {
      workFields.getHoldTransData2().setCflgPs(value);
   } 

     /**
	 * 	Update CflgPs 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCflgPs(char[] source, int sourceIndex) throws CFException {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex);
   	
   }
   
   public void setCflgPs(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CflgPs 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCflgPs(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CflgPs with another Field
	 *	@param value
	 */
   public void setCflgPs(Field source) {
      workFields.getHoldTransData2().setCflgPs(source);
   }  
   
     /**
	 * 	Update CflgPs 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCflgPs(Field source, int sourceIndex,int sourceLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CflgPs 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCflgPs(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workFields.getHoldTransData2().setCflgPs(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCflgDrvPos
	 *	@return d51uCflgDrvPos
	 */
   public char[] getD51uCflgDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).getD51uCflgDrvPos();
   }

  
	/**
	*  set variable d51uCflgDrvPos
	*  @param value
	**/
   public void setD51uCflgDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(value);
   } 

     /**
	 * 	Update D51uCflgDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCflgDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uCflgDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCflgDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCflgDrvPos with another Field
	 *	@param value
	 */
   public void setD51uCflgDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source);
   }  
   
     /**
	 * 	Update D51uCflgDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCflgDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCflgDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCflgDrvCau
	 *	@return d51uCflgDrvCau
	 */
   public char[] getD51uCflgDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).getD51uCflgDrvCau();
   }

  
	/**
	*  set variable d51uCflgDrvCau
	*  @param value
	**/
   public void setD51uCflgDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(value);
   } 

     /**
	 * 	Update D51uCflgDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCflgDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uCflgDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCflgDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCflgDrvCau with another Field
	 *	@param value
	 */
   public void setD51uCflgDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source);
   }  
   
     /**
	 * 	Update D51uCflgDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCflgDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCflgDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of searchComplete
	 *	@return searchComplete
	 */
   public char[] getSearchComplete() throws CFException  {              
   		return work.getSearchComplete();
   }

  
	/**
	*  set variable searchComplete
	*  @param value
	**/
   public void setSearchComplete(char[] value) throws CFException {
      work.setSearchComplete(value);
   } 

	/**
	 *	Returns the value of nbrMatched
	 *	@return nbrMatched
	 */
	public short getNbrMatched() throws CFException {
   		return workFields.getNbrMatched();
	}

    /**
	 *	Returns the String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedActualString() {
		return workFields.getNbrMatchedActualString();
	}

	/**
	 *	Returns String value of nbrMatched
	 *	@return nbrMatched
	 */
	public char[]  getNbrMatchedString() throws CFException {
	     return String.valueOf(workFields.getNbrMatchedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nbrMatchedIsNumeric()  throws CFException{
	    return workFields.nbrMatchedIsNumeric();
	}

	/**
	 * 	Update NbrMatched with the passed value
	 *	@param number
	 */
	public void setNbrMatched(short number)  throws CFException{
		workFields.setNbrMatched(number);
	}
	
	public void setNbrMatched(int number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	public void setNbrMatched(long number)  throws CFException{
	    workFields.setNbrMatched(number);
	}
	

	
	/**
	 * 	Update NbrMatched with the passed value
	 *	@param value (String or char[])
	 */
	public void setNbrMatched(char[] value)  throws CFException {
		workFields.setNbrMatched(value);
	}
	
	/**
	 * 	Update NbrMatched with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNbrMatchedString(char[] value)  throws CFException{
		workFields.setNbrMatched(value);
	}	


        public O529351uCtx getO529351uCtx() {
            return O529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workFields.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dfhcommarea.hashCode();
       return str.hashCode();
    }

    public SearchCflgOutCtx clone() {
        SearchCflgOutCtx cloneObj = new SearchCflgOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workFields = new WorkFields();
        cloneObj.workFields.set(workFields.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dfhcommarea = new Dfhcommarea();
        cloneObj.dfhcommarea.set(dfhcommarea.getClonedField());
        return cloneObj;
    }

    }

    public SearchCflgOutCtx getSearchCflgOutCtx() {
            return new SearchCflgOutCtx();
    }
}
