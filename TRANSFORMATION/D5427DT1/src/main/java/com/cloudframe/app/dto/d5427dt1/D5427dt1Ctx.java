package com.cloudframe.app.dto.d5427dt1;

import com.cloudframe.app.dto.GlobalExecutorCtx;
import com.cloudframe.app.dto.ProgramContext;
import com.cloudframe.app.dto.Context;
import com.cloudframe.app.data.Field;
import java.math.BigDecimal;
import java.util.List;
import com.cloudframe.app.exception.CFException;

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
import com.cloudframe.app.cics.CICSSession;
 
import java.sql.ResultSet;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 


@Context
public class D5427dt1Ctx implements ProgramContext, Cloneable {
    GlobalExecutorCtx globalCtx;

    Dt1ClmContainer dt1ClmContainer;
    QueryTextArea queryTextArea;
    QueryFilterServiceDates queryFilterServiceDates;
    Dt1RspContainer dt1RspContainer;
    LilianGroup lilianGroup;
    QueryFilterAuthCrit5 queryFilterAuthCrit5;
    Num3 num3;
    Dt1ReqContainer dt1ReqContainer;
    FormattedDateGroup formattedDateGroup;
    DcladjdClmsfRef dcladjdClmsfRef;
    LastBitXGroup lastBitXGroup;
    QueryFilterGetNext queryFilterGetNext;
    Work work;
    SrpSortRequestParameters srpSortRequestParameters;
    Sqlca sqlca;
    DsmCallArea dsmCallArea;
    QueryBaseMainSql queryBaseMainSql;
    StandardVars standardVars;
    ClaimKey claimKey;
    DfhcommareaGroup dfhcommareaGroup;
    DcladjdClmhstDenormRef dcladjdClmhstDenormRef;
    OPicstr oPicstr;
    QueryFilterOff queryFilterOff;
    Dt1SrtContainer dt1SrtContainer;
    HostVariables hostVariables;
    QueryFilterFln queryFilterFln;
    Db2ErrMsg db2ErrMsg;
    Dt1ClaimKeyTable dt1ClaimKeyTable;
    IPicstr iPicstr;
    QueryFilterDlgtCrit5 queryFilterDlgtCrit5;
    HoldArea holdArea;
    TimeXGroup timeXGroup;
    Chrdate chrdate;
    StsContainer stsContainer;
    Num15 num15;
    NextKey nextKey;
    QueryFilterSvcSql queryFilterSvcSql;
    Sqlda sqlda;
    DateXGroup dateXGroup;
    HvaClmHistArray hvaClmHistArray;

    int dt1SrtDx;
    int dt1ItemDx;

    private int rc;

    public GlobalExecutorCtx getGlobalCtx() {
            return globalCtx;
    }

    public void setGlobalCtx(GlobalExecutorCtx globalCtx) {
        this.globalCtx = globalCtx;
    }

    public int getRc() {
        return this.rc;
    }

    public void setRc(int rc) {
        this.rc = rc;
    }

    CICSSession cicsSession = new CICSSession();

    public CICSSession getCicsSession() {
        return this.cicsSession;
    }

    public void setCicsSession(CICSSession cicsSession) {
        this.cicsSession = cicsSession;
    }

    ResultSet csrInitFil2ResultSet;

    public ResultSet getCsrInitFil2ResultSet() {
        return this.csrInitFil2ResultSet;
    }

    public void setCsrInitFil2ResultSet(ResultSet csrInitFil2ResultSet) {
        this.csrInitFil2ResultSet = csrInitFil2ResultSet;
    }
    ResultSet csrNextFil2ResultSet;

    public ResultSet getCsrNextFil2ResultSet() {
        return this.csrNextFil2ResultSet;
    }

    public void setCsrNextFil2ResultSet(ResultSet csrNextFil2ResultSet) {
        this.csrNextFil2ResultSet = csrNextFil2ResultSet;
    }
    ResultSet csrInitFullResultSet;

    public ResultSet getCsrInitFullResultSet() {
        return this.csrInitFullResultSet;
    }

    public void setCsrInitFullResultSet(ResultSet csrInitFullResultSet) {
        this.csrInitFullResultSet = csrInitFullResultSet;
    }
    ResultSet csrInitFiltResultSet;

    public ResultSet getCsrInitFiltResultSet() {
        return this.csrInitFiltResultSet;
    }

    public void setCsrInitFiltResultSet(ResultSet csrInitFiltResultSet) {
        this.csrInitFiltResultSet = csrInitFiltResultSet;
    }
    ResultSet csrNextFullResultSet;

    public ResultSet getCsrNextFullResultSet() {
        return this.csrNextFullResultSet;
    }

    public void setCsrNextFullResultSet(ResultSet csrNextFullResultSet) {
        this.csrNextFullResultSet = csrNextFullResultSet;
    }
    ResultSet csrNextFiltResultSet;

    public ResultSet getCsrNextFiltResultSet() {
        return this.csrNextFiltResultSet;
    }

    public void setCsrNextFiltResultSet(ResultSet csrNextFiltResultSet) {
        this.csrNextFiltResultSet = csrNextFiltResultSet;
    }
    ResultSet csrInitFil3ResultSet;

    public ResultSet getCsrInitFil3ResultSet() {
        return this.csrInitFil3ResultSet;
    }

    public void setCsrInitFil3ResultSet(ResultSet csrInitFil3ResultSet) {
        this.csrInitFil3ResultSet = csrInitFil3ResultSet;
    }
    ResultSet csrNextFil3ResultSet;

    public ResultSet getCsrNextFil3ResultSet() {
        return this.csrNextFil3ResultSet;
    }

    public void setCsrNextFil3ResultSet(ResultSet csrNextFil3ResultSet) {
        this.csrNextFil3ResultSet = csrNextFil3ResultSet;
    }
    ResultSet csrInitFil4ResultSet;

    public ResultSet getCsrInitFil4ResultSet() {
        return this.csrInitFil4ResultSet;
    }

    public void setCsrInitFil4ResultSet(ResultSet csrInitFil4ResultSet) {
        this.csrInitFil4ResultSet = csrInitFil4ResultSet;
    }
    ResultSet csrNextFil4ResultSet;

    public ResultSet getCsrNextFil4ResultSet() {
        return this.csrNextFil4ResultSet;
    }

    public void setCsrNextFil4ResultSet(ResultSet csrNextFil4ResultSet) {
        this.csrNextFil4ResultSet = csrNextFil4ResultSet;
    }
    ResultSet csrInitFil5ResultSet;

    public ResultSet getCsrInitFil5ResultSet() {
        return this.csrInitFil5ResultSet;
    }

    public void setCsrInitFil5ResultSet(ResultSet csrInitFil5ResultSet) {
        this.csrInitFil5ResultSet = csrInitFil5ResultSet;
    }
    ResultSet csrNextFil5ResultSet;

    public ResultSet getCsrNextFil5ResultSet() {
        return this.csrNextFil5ResultSet;
    }

    public void setCsrNextFil5ResultSet(ResultSet csrNextFil5ResultSet) {
        this.csrNextFil5ResultSet = csrNextFil5ResultSet;
    }
    ResultSet csrInitFil6ResultSet;

    public ResultSet getCsrInitFil6ResultSet() {
        return this.csrInitFil6ResultSet;
    }

    public void setCsrInitFil6ResultSet(ResultSet csrInitFil6ResultSet) {
        this.csrInitFil6ResultSet = csrInitFil6ResultSet;
    }
    ResultSet csrNextFil6ResultSet;

    public ResultSet getCsrNextFil6ResultSet() {
        return this.csrNextFil6ResultSet;
    }

    public void setCsrNextFil6ResultSet(ResultSet csrNextFil6ResultSet) {
        this.csrNextFil6ResultSet = csrNextFil6ResultSet;
    }
    ResultSet dt1DynCursorResultSet;

    public ResultSet getDt1DynCursorResultSet() {
        return this.dt1DynCursorResultSet;
    }

    public void setDt1DynCursorResultSet(ResultSet dt1DynCursorResultSet) {
        this.dt1DynCursorResultSet = dt1DynCursorResultSet;
    }

    boolean programEnded = false;

    public boolean isProgramEnded() {
        return this.programEnded;
    }

    public void setProgramEnded(boolean programEnded) {
        this.programEnded = programEnded;
    }


    public Dt1ClmContainer getDt1ClmContainer() {
        if (dt1ClmContainer == null) {
            dt1ClmContainer = new Dt1ClmContainer();
        }

        return dt1ClmContainer;
    }

    public void setDt1ClmContainer(Dt1ClmContainer dt1ClmContainer) {
        this.dt1ClmContainer = dt1ClmContainer;
    }
    public QueryTextArea getQueryTextArea() {
        if (queryTextArea == null) {
            queryTextArea = new QueryTextArea();
        }

        return queryTextArea;
    }

    public void setQueryTextArea(QueryTextArea queryTextArea) {
        this.queryTextArea = queryTextArea;
    }
    public QueryFilterServiceDates getQueryFilterServiceDates() {
        if (queryFilterServiceDates == null) {
            queryFilterServiceDates = new QueryFilterServiceDates();
        }

        return queryFilterServiceDates;
    }

    public void setQueryFilterServiceDates(QueryFilterServiceDates queryFilterServiceDates) {
        this.queryFilterServiceDates = queryFilterServiceDates;
    }
    public Dt1RspContainer getDt1RspContainer() {
        if (dt1RspContainer == null) {
            dt1RspContainer = new Dt1RspContainer();
        }

        return dt1RspContainer;
    }

    public void setDt1RspContainer(Dt1RspContainer dt1RspContainer) {
        this.dt1RspContainer = dt1RspContainer;
    }
    public LilianGroup getLilianGroup() {
        if (lilianGroup == null) {
            lilianGroup = new LilianGroup();
        }

        return lilianGroup;
    }

    public void setLilianGroup(LilianGroup lilianGroup) {
        this.lilianGroup = lilianGroup;
    }
    public QueryFilterAuthCrit5 getQueryFilterAuthCrit5() {
        if (queryFilterAuthCrit5 == null) {
            queryFilterAuthCrit5 = new QueryFilterAuthCrit5();
        }

        return queryFilterAuthCrit5;
    }

    public void setQueryFilterAuthCrit5(QueryFilterAuthCrit5 queryFilterAuthCrit5) {
        this.queryFilterAuthCrit5 = queryFilterAuthCrit5;
    }
    public Num3 getNum3() {
        if (num3 == null) {
            num3 = new Num3();
        }

        return num3;
    }

    public void setNum3(Num3 num3) {
        this.num3 = num3;
    }
    public Dt1ReqContainer getDt1ReqContainer() {
        if (dt1ReqContainer == null) {
            dt1ReqContainer = new Dt1ReqContainer();
        }

        return dt1ReqContainer;
    }

    public void setDt1ReqContainer(Dt1ReqContainer dt1ReqContainer) {
        this.dt1ReqContainer = dt1ReqContainer;
    }
    public FormattedDateGroup getFormattedDateGroup() {
        if (formattedDateGroup == null) {
            formattedDateGroup = new FormattedDateGroup();
        }

        return formattedDateGroup;
    }

    public void setFormattedDateGroup(FormattedDateGroup formattedDateGroup) {
        this.formattedDateGroup = formattedDateGroup;
    }
    public DcladjdClmsfRef getDcladjdClmsfRef() {
        if (dcladjdClmsfRef == null) {
            dcladjdClmsfRef = new DcladjdClmsfRef();
        }

        return dcladjdClmsfRef;
    }

    public void setDcladjdClmsfRef(DcladjdClmsfRef dcladjdClmsfRef) {
        this.dcladjdClmsfRef = dcladjdClmsfRef;
    }
    public LastBitXGroup getLastBitXGroup() {
        if (lastBitXGroup == null) {
            lastBitXGroup = new LastBitXGroup();
        }

        return lastBitXGroup;
    }

    public void setLastBitXGroup(LastBitXGroup lastBitXGroup) {
        this.lastBitXGroup = lastBitXGroup;
    }
    public QueryFilterGetNext getQueryFilterGetNext() {
        if (queryFilterGetNext == null) {
            queryFilterGetNext = new QueryFilterGetNext();
        }

        return queryFilterGetNext;
    }

    public void setQueryFilterGetNext(QueryFilterGetNext queryFilterGetNext) {
        this.queryFilterGetNext = queryFilterGetNext;
    }
    public Work getWork() {
        if (work == null) {
            work = new Work();
        }

        return work;
    }

    public void setWork(Work work) {
        this.work = work;
    }
    public SrpSortRequestParameters getSrpSortRequestParameters() {
        if (srpSortRequestParameters == null) {
            srpSortRequestParameters = new SrpSortRequestParameters();
        }

        return srpSortRequestParameters;
    }

    public void setSrpSortRequestParameters(SrpSortRequestParameters srpSortRequestParameters) {
        this.srpSortRequestParameters = srpSortRequestParameters;
    }
    public Sqlca getSqlca() {
        if (sqlca == null) {
            sqlca = new Sqlca();
        }

        return sqlca;
    }

    public void setSqlca(Sqlca sqlca) {
        this.sqlca = sqlca;
    }
    public DsmCallArea getDsmCallArea() {
        if (dsmCallArea == null) {
            dsmCallArea = new DsmCallArea();
        }

        return dsmCallArea;
    }

    public void setDsmCallArea(DsmCallArea dsmCallArea) {
        this.dsmCallArea = dsmCallArea;
    }
    public QueryBaseMainSql getQueryBaseMainSql() {
        if (queryBaseMainSql == null) {
            queryBaseMainSql = new QueryBaseMainSql();
        }

        return queryBaseMainSql;
    }

    public void setQueryBaseMainSql(QueryBaseMainSql queryBaseMainSql) {
        this.queryBaseMainSql = queryBaseMainSql;
    }
    public StandardVars getStandardVars() {
        if (standardVars == null) {
            standardVars = new StandardVars();
        }

        return standardVars;
    }

    public void setStandardVars(StandardVars standardVars) {
        this.standardVars = standardVars;
    }
    public ClaimKey getClaimKey() {
        if (claimKey == null) {
            claimKey = new ClaimKey();
        }

        return claimKey;
    }

    public void setClaimKey(ClaimKey claimKey) {
        this.claimKey = claimKey;
    }
    public DfhcommareaGroup getDfhcommareaGroup() {
        if (dfhcommareaGroup == null) {
            dfhcommareaGroup = new DfhcommareaGroup();
        }

        return dfhcommareaGroup;
    }

    public void setDfhcommareaGroup(DfhcommareaGroup dfhcommareaGroup) {
        this.dfhcommareaGroup = dfhcommareaGroup;
    }
    public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
        if (dcladjdClmhstDenormRef == null) {
            dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        }

        return dcladjdClmhstDenormRef;
    }

    public void setDcladjdClmhstDenormRef(DcladjdClmhstDenormRef dcladjdClmhstDenormRef) {
        this.dcladjdClmhstDenormRef = dcladjdClmhstDenormRef;
    }
    public OPicstr getOPicstr() {
        if (oPicstr == null) {
            oPicstr = new OPicstr();
        }

        return oPicstr;
    }

    public void setOPicstr(OPicstr oPicstr) {
        this.oPicstr = oPicstr;
    }
    public QueryFilterOff getQueryFilterOff() {
        if (queryFilterOff == null) {
            queryFilterOff = new QueryFilterOff();
        }

        return queryFilterOff;
    }

    public void setQueryFilterOff(QueryFilterOff queryFilterOff) {
        this.queryFilterOff = queryFilterOff;
    }
    public Dt1SrtContainer getDt1SrtContainer() {
        if (dt1SrtContainer == null) {
            dt1SrtContainer = new Dt1SrtContainer();
        }

        return dt1SrtContainer;
    }

    public void setDt1SrtContainer(Dt1SrtContainer dt1SrtContainer) {
        this.dt1SrtContainer = dt1SrtContainer;
    }
    public HostVariables getHostVariables() {
        if (hostVariables == null) {
            hostVariables = new HostVariables();
        }

        return hostVariables;
    }

    public void setHostVariables(HostVariables hostVariables) {
        this.hostVariables = hostVariables;
    }
    public QueryFilterFln getQueryFilterFln() {
        if (queryFilterFln == null) {
            queryFilterFln = new QueryFilterFln();
        }

        return queryFilterFln;
    }

    public void setQueryFilterFln(QueryFilterFln queryFilterFln) {
        this.queryFilterFln = queryFilterFln;
    }
    public Db2ErrMsg getDb2ErrMsg() {
        if (db2ErrMsg == null) {
            db2ErrMsg = new Db2ErrMsg();
        }

        return db2ErrMsg;
    }

    public void setDb2ErrMsg(Db2ErrMsg db2ErrMsg) {
        this.db2ErrMsg = db2ErrMsg;
    }
    public Dt1ClaimKeyTable getDt1ClaimKeyTable() {
        if (dt1ClaimKeyTable == null) {
            dt1ClaimKeyTable = new Dt1ClaimKeyTable();
        }

        return dt1ClaimKeyTable;
    }

    public void setDt1ClaimKeyTable(Dt1ClaimKeyTable dt1ClaimKeyTable) {
        this.dt1ClaimKeyTable = dt1ClaimKeyTable;
    }
    public IPicstr getIPicstr() {
        if (iPicstr == null) {
            iPicstr = new IPicstr();
        }

        return iPicstr;
    }

    public void setIPicstr(IPicstr iPicstr) {
        this.iPicstr = iPicstr;
    }
    public QueryFilterDlgtCrit5 getQueryFilterDlgtCrit5() {
        if (queryFilterDlgtCrit5 == null) {
            queryFilterDlgtCrit5 = new QueryFilterDlgtCrit5();
        }

        return queryFilterDlgtCrit5;
    }

    public void setQueryFilterDlgtCrit5(QueryFilterDlgtCrit5 queryFilterDlgtCrit5) {
        this.queryFilterDlgtCrit5 = queryFilterDlgtCrit5;
    }
    public HoldArea getHoldArea() {
        if (holdArea == null) {
            holdArea = new HoldArea();
        }

        return holdArea;
    }

    public void setHoldArea(HoldArea holdArea) {
        this.holdArea = holdArea;
    }
    public TimeXGroup getTimeXGroup() {
        if (timeXGroup == null) {
            timeXGroup = new TimeXGroup();
        }

        return timeXGroup;
    }

    public void setTimeXGroup(TimeXGroup timeXGroup) {
        this.timeXGroup = timeXGroup;
    }
    public Chrdate getChrdate() {
        if (chrdate == null) {
            chrdate = new Chrdate();
        }

        return chrdate;
    }

    public void setChrdate(Chrdate chrdate) {
        this.chrdate = chrdate;
    }
    public StsContainer getStsContainer() {
        if (stsContainer == null) {
            stsContainer = new StsContainer();
        }

        return stsContainer;
    }

    public void setStsContainer(StsContainer stsContainer) {
        this.stsContainer = stsContainer;
    }
    public Num15 getNum15() {
        if (num15 == null) {
            num15 = new Num15();
        }

        return num15;
    }

    public void setNum15(Num15 num15) {
        this.num15 = num15;
    }
    public NextKey getNextKey() {
        if (nextKey == null) {
            nextKey = new NextKey();
        }

        return nextKey;
    }

    public void setNextKey(NextKey nextKey) {
        this.nextKey = nextKey;
    }
    public QueryFilterSvcSql getQueryFilterSvcSql() {
        if (queryFilterSvcSql == null) {
            queryFilterSvcSql = new QueryFilterSvcSql();
        }

        return queryFilterSvcSql;
    }

    public void setQueryFilterSvcSql(QueryFilterSvcSql queryFilterSvcSql) {
        this.queryFilterSvcSql = queryFilterSvcSql;
    }
    public Sqlda getSqlda() {
        if (sqlda == null) {
            sqlda = new Sqlda();
        }

        return sqlda;
    }

    public void setSqlda(Sqlda sqlda) {
        this.sqlda = sqlda;
    }
    public DateXGroup getDateXGroup() {
        if (dateXGroup == null) {
            dateXGroup = new DateXGroup();
        }

        return dateXGroup;
    }

    public void setDateXGroup(DateXGroup dateXGroup) {
        this.dateXGroup = dateXGroup;
    }
    public HvaClmHistArray getHvaClmHistArray() {
        if (hvaClmHistArray == null) {
            hvaClmHistArray = new HvaClmHistArray();
        }

        return hvaClmHistArray;
    }

    public void setHvaClmHistArray(HvaClmHistArray hvaClmHistArray) {
        this.hvaClmHistArray = hvaClmHistArray;
    }

    public int getDt1SrtDx() {
        return dt1SrtDx;
    }

    public void setDt1SrtDx(int dt1SrtDx) {
        this.dt1SrtDx = dt1SrtDx;
    }
    public int getDt1ItemDx() {
        return dt1ItemDx;
    }

    public void setDt1ItemDx(int dt1ItemDx) {
        this.dt1ItemDx = dt1ItemDx;
    }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1ClmContainer.hashCode();
        str += queryTextArea.hashCode();
        str += queryFilterServiceDates.hashCode();
        str += dt1RspContainer.hashCode();
        str += lilianGroup.hashCode();
        str += queryFilterAuthCrit5.hashCode();
        str += num3.hashCode();
        str += dt1ReqContainer.hashCode();
        str += formattedDateGroup.hashCode();
        str += dcladjdClmsfRef.hashCode();
        str += lastBitXGroup.hashCode();
        str += queryFilterGetNext.hashCode();
        str += work.hashCode();
        str += srpSortRequestParameters.hashCode();
        str += sqlca.hashCode();
        str += dsmCallArea.hashCode();
        str += queryBaseMainSql.hashCode();
        str += standardVars.hashCode();
        str += claimKey.hashCode();
        str += dfhcommareaGroup.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += oPicstr.hashCode();
        str += queryFilterOff.hashCode();
        str += dt1SrtContainer.hashCode();
        str += hostVariables.hashCode();
        str += queryFilterFln.hashCode();
        str += db2ErrMsg.hashCode();
        str += dt1ClaimKeyTable.hashCode();
        str += iPicstr.hashCode();
        str += queryFilterDlgtCrit5.hashCode();
        str += holdArea.hashCode();
        str += timeXGroup.hashCode();
        str += chrdate.hashCode();
        str += stsContainer.hashCode();
        str += num15.hashCode();
        str += nextKey.hashCode();
        str += queryFilterSvcSql.hashCode();
        str += sqlda.hashCode();
        str += dateXGroup.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public D5427dt1Ctx clone() {
        D5427dt1Ctx cloneObj = new D5427dt1Ctx();
        cloneObj.dt1ClmContainer = new Dt1ClmContainer();
        cloneObj.dt1ClmContainer.set(dt1ClmContainer.getClonedField());
        cloneObj.queryTextArea = new QueryTextArea();
        cloneObj.queryTextArea.set(queryTextArea.getClonedField());
        cloneObj.queryFilterServiceDates = new QueryFilterServiceDates();
        cloneObj.queryFilterServiceDates.set(queryFilterServiceDates.getClonedField());
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.lilianGroup = new LilianGroup();
        cloneObj.lilianGroup.set(lilianGroup.getClonedField());
        cloneObj.queryFilterAuthCrit5 = new QueryFilterAuthCrit5();
        cloneObj.queryFilterAuthCrit5.set(queryFilterAuthCrit5.getClonedField());
        cloneObj.num3 = new Num3();
        cloneObj.num3.set(num3.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.formattedDateGroup = new FormattedDateGroup();
        cloneObj.formattedDateGroup.set(formattedDateGroup.getClonedField());
        cloneObj.dcladjdClmsfRef = new DcladjdClmsfRef();
        cloneObj.dcladjdClmsfRef.set(dcladjdClmsfRef.getClonedField());
        cloneObj.lastBitXGroup = new LastBitXGroup();
        cloneObj.lastBitXGroup.set(lastBitXGroup.getClonedField());
        cloneObj.queryFilterGetNext = new QueryFilterGetNext();
        cloneObj.queryFilterGetNext.set(queryFilterGetNext.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.srpSortRequestParameters = new SrpSortRequestParameters();
        cloneObj.srpSortRequestParameters.set(srpSortRequestParameters.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.queryBaseMainSql = new QueryBaseMainSql();
        cloneObj.queryBaseMainSql.set(queryBaseMainSql.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.claimKey = new ClaimKey();
        cloneObj.claimKey.set(claimKey.getClonedField());
        cloneObj.dfhcommareaGroup = new DfhcommareaGroup();
        cloneObj.dfhcommareaGroup.set(dfhcommareaGroup.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.oPicstr = new OPicstr();
        cloneObj.oPicstr.set(oPicstr.getClonedField());
        cloneObj.queryFilterOff = new QueryFilterOff();
        cloneObj.queryFilterOff.set(queryFilterOff.getClonedField());
        cloneObj.dt1SrtContainer = new Dt1SrtContainer();
        cloneObj.dt1SrtContainer.set(dt1SrtContainer.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        cloneObj.queryFilterFln = new QueryFilterFln();
        cloneObj.queryFilterFln.set(queryFilterFln.getClonedField());
        cloneObj.db2ErrMsg = new Db2ErrMsg();
        cloneObj.db2ErrMsg.set(db2ErrMsg.getClonedField());
        cloneObj.dt1ClaimKeyTable = new Dt1ClaimKeyTable();
        cloneObj.dt1ClaimKeyTable.set(dt1ClaimKeyTable.getClonedField());
        cloneObj.iPicstr = new IPicstr();
        cloneObj.iPicstr.set(iPicstr.getClonedField());
        cloneObj.queryFilterDlgtCrit5 = new QueryFilterDlgtCrit5();
        cloneObj.queryFilterDlgtCrit5.set(queryFilterDlgtCrit5.getClonedField());
        cloneObj.holdArea = new HoldArea();
        cloneObj.holdArea.set(holdArea.getClonedField());
        cloneObj.timeXGroup = new TimeXGroup();
        cloneObj.timeXGroup.set(timeXGroup.getClonedField());
        cloneObj.chrdate = new Chrdate();
        cloneObj.chrdate.set(chrdate.getClonedField());
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.num15 = new Num15();
        cloneObj.num15.set(num15.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.queryFilterSvcSql = new QueryFilterSvcSql();
        cloneObj.queryFilterSvcSql.set(queryFilterSvcSql.getClonedField());
        cloneObj.sqlda = new Sqlda();
        cloneObj.sqlda.set(sqlda.getClonedField());
        cloneObj.dateXGroup = new DateXGroup();
        cloneObj.dateXGroup.set(dateXGroup.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

/**
 * Program method contexts
 *
 */
     public class ProcessInCtx implements Cloneable {
     DfhcommareaGroup dfhcommareaGroup = D5427dt1Ctx.this.getDfhcommareaGroup();


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dfhcommareaGroup.hashCode();
       return str.hashCode();
    }

    public ProcessInCtx clone() {
        ProcessInCtx cloneObj = new ProcessInCtx();
        cloneObj.dfhcommareaGroup = new DfhcommareaGroup();
        cloneObj.dfhcommareaGroup.set(dfhcommareaGroup.getClonedField());
        return cloneObj;
    }

    }

    public ProcessInCtx getProcessInCtx() {
            return new ProcessInCtx();
    }
     public class MainlineInCtx implements Cloneable {
     Dt1ClmContainer dt1ClmContainer = D5427dt1Ctx.this.getDt1ClmContainer();
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StsContainer stsContainer = D5427dt1Ctx.this.getStsContainer();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Dt1SrtContainer dt1SrtContainer = D5427dt1Ctx.this.getDt1SrtContainer();

	/**
	 *	Returns the value of dt1ClmClaimItem
	 *	@return dt1ClmClaimItem
	 */   
	 public Dt1ClmClaimItem getDt1ClmClaimItem(int index) {
   	return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index);
   }

    public List<Dt1ClmClaimItem> getDt1ClmClaimItem() {
        return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem();
    }
   /**
	* 	Update Dt1ClmClaimItem with the passed value
	*	@param value
	*/
   public void setDt1ClmClaimItem(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().setDt1ClmClaimItem((index),value);
   }   


	/**
	 *	Test condition "0000" for isStsRespCodeOk()
	 *	@return  Returns true if isStsRespCodeOk() is "0000"
	 */
   public boolean isStsRespCodeOk() throws CFException {
      return stsContainer.getStsFixedArea().isStsRespCodeOk();
   }

	/**
	*  set values "0000"
	*/
   	public void setStsRespCodeOkTrue()  throws CFException{  			
    	stsContainer.getStsFixedArea().setStsRespCodeOkTrue();
   	}
	/**
	 *	Test condition "7" for isDt1ReqSearchCategory()
	 *	@return  Returns true if isDt1ReqSearchCategory() is "7"
	 */
   public boolean isDt1ReqSearchCategory() throws CFException {
      return dt1ReqContainer.getDt1RequestArea().isDt1ReqSearchCategory();
   }

	/**
	*  set values "7"
	*/
   	public void setDt1ReqSearchCategoryTrue()  throws CFException{  			
    	dt1ReqContainer.getDt1RequestArea().setDt1ReqSearchCategoryTrue();
   	}
	/**
	 *	Test condition "4" for isDt1ReqSearchMemberPlus()
	 *	@return  Returns true if isDt1ReqSearchMemberPlus() is "4"
	 */
   public boolean isDt1ReqSearchMemberPlus() throws CFException {
      return dt1ReqContainer.getDt1RequestArea().isDt1ReqSearchMemberPlus();
   }

	/**
	*  set values "4"
	*/
   	public void setDt1ReqSearchMemberPlusTrue()  throws CFException{  			
    	dt1ReqContainer.getDt1RequestArea().setDt1ReqSearchMemberPlusTrue();
   	}
	/**
	 *	Returns the value of totalRowsRetrieved
	 *	@return totalRowsRetrieved
	 */
	public int getTotalRowsRetrieved() throws CFException {        
   		return work.getTotalRowsRetrieved();
	}
	
	/**
	 * 	Update TotalRowsRetrieved with the passed value
	 *	@param number
	 */
	public void setTotalRowsRetrieved(int number)  throws CFException{
		work.setTotalRowsRetrieved(number);
	}


	public void setTotalRowsRetrieved(long number)  throws CFException{
		work.setTotalRowsRetrieved((int)number);
	}


	/**
	 *	Test condition "1" for isDt1ReqSearchIcnOnly()
	 *	@return  Returns true if isDt1ReqSearchIcnOnly() is "1"
	 */
   public boolean isDt1ReqSearchIcnOnly() throws CFException {
      return dt1ReqContainer.getDt1RequestArea().isDt1ReqSearchIcnOnly();
   }

	/**
	*  set values "1"
	*/
   	public void setDt1ReqSearchIcnOnlyTrue()  throws CFException{  			
    	dt1ReqContainer.getDt1RequestArea().setDt1ReqSearchIcnOnlyTrue();
   	}
	/**
	 *	Test condition "5" for isDt1ReqSearchMbrAuthNbr()
	 *	@return  Returns true if isDt1ReqSearchMbrAuthNbr() is "5"
	 */
   public boolean isDt1ReqSearchMbrAuthNbr() throws CFException {
      return dt1ReqContainer.getDt1RequestArea().isDt1ReqSearchMbrAuthNbr();
   }

	/**
	*  set values "5"
	*/
   	public void setDt1ReqSearchMbrAuthNbrTrue()  throws CFException{  			
    	dt1ReqContainer.getDt1RequestArea().setDt1ReqSearchMbrAuthNbrTrue();
   	}
	/**
	 *	Test condition "6" for isDt1ReqSearchAuthsOnly()
	 *	@return  Returns true if isDt1ReqSearchAuthsOnly() is "6"
	 */
   public boolean isDt1ReqSearchAuthsOnly() throws CFException {
      return dt1ReqContainer.getDt1RequestArea().isDt1ReqSearchAuthsOnly();
   }

	/**
	*  set values "6"
	*/
   	public void setDt1ReqSearchAuthsOnlyTrue()  throws CFException{  			
    	dt1ReqContainer.getDt1RequestArea().setDt1ReqSearchAuthsOnlyTrue();
   	}
	/**
	 *	Returns the value of dt1SrtItemCnt
	 *	@return dt1SrtItemCnt
	 */
	public int getDt1SrtItemCnt() throws CFException {
   		return dt1SrtContainer.getDt1SrtFixedArea().getDt1SrtItemCnt();
	}


	/**
	 *	Returns String value of dt1SrtItemCnt
	 *	@return dt1SrtItemCnt
	 */
	public char[]  getDt1SrtItemCntString() throws CFException {
	     return String.valueOf(dt1SrtContainer.getDt1SrtFixedArea().getDt1SrtItemCntString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1SrtItemCntIsNumeric()  throws CFException{
	    return dt1SrtContainer.getDt1SrtFixedArea().dt1SrtItemCntIsNumeric();
	}

	/**
	 * 	Update Dt1SrtItemCnt with the passed value
	 *	@param number
	 */
	public void setDt1SrtItemCnt(int number)  throws CFException{
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(number);
	}
	

	public void setDt1SrtItemCnt(long number)  throws CFException{
	    dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(number);
	}
	
	
	/**
	 * 	Update Dt1SrtItemCnt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1SrtItemCnt(char[] value)  throws CFException {
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(value);
	}
	
	/**
	 * 	Update Dt1SrtItemCnt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1SrtItemCntString(char[] value)  throws CFException{
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(value);
	}	


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public MainlineOutCtx getMainlineOutCtx() {
            return new MainlineOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1ClmContainer.hashCode();
        str += dt1RspContainer.hashCode();
        str += stsContainer.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += dt1SrtContainer.hashCode();
       return str.hashCode();
    }

    public MainlineInCtx clone() {
        MainlineInCtx cloneObj = new MainlineInCtx();
        cloneObj.dt1ClmContainer = new Dt1ClmContainer();
        cloneObj.dt1ClmContainer.set(dt1ClmContainer.getClonedField());
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dt1SrtContainer = new Dt1SrtContainer();
        cloneObj.dt1SrtContainer.set(dt1SrtContainer.getClonedField());
        return cloneObj;
    }

    }

    public MainlineInCtx getMainlineInCtx() {
            return new MainlineInCtx();
    }
     public class MainlineOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StsContainer stsContainer = D5427dt1Ctx.this.getStsContainer();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Dt1SrtContainer dt1SrtContainer = D5427dt1Ctx.this.getDt1SrtContainer();

	/**
	 *	Returns the value of dt1RspClmContainerItemLen
	 *	@return dt1RspClmContainerItemLen
	 */
	public long getDt1RspClmContainerItemLen() throws CFException {
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspClmContainerItemLen();
	}


	/**
	 *	Returns String value of dt1RspClmContainerItemLen
	 *	@return dt1RspClmContainerItemLen
	 */
	public char[]  getDt1RspClmContainerItemLenString() throws CFException {
	     return String.valueOf(dt1RspContainer.getDt1RspFixedArea().getDt1RspClmContainerItemLenString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1RspClmContainerItemLenIsNumeric()  throws CFException{
	    return dt1RspContainer.getDt1RspFixedArea().dt1RspClmContainerItemLenIsNumeric();
	}

	/**
	 * 	Update Dt1RspClmContainerItemLen with the passed value
	 *	@param number
	 */
	public void setDt1RspClmContainerItemLen(long number)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().setDt1RspClmContainerItemLen(number);
	}
	

	
	/**
	 * 	Update Dt1RspClmContainerItemLen with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1RspClmContainerItemLen(char[] value)  throws CFException {
		dt1RspContainer.getDt1RspFixedArea().setDt1RspClmContainerItemLen(value);
	}
	
	/**
	 * 	Update Dt1RspClmContainerItemLen with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1RspClmContainerItemLenString(char[] value)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().setDt1RspClmContainerItemLen(value);
	}	

	/**
	 *	Test condition 1 for isDt1RspInvalidRequest()
	 *	@return  Returns true if isDt1RspInvalidRequest() is 1
	 */
   public boolean isDt1RspInvalidRequest() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspInvalidRequest();
   }

	/**
	*  set values 1
	*/
   	public void setDt1RspInvalidRequestTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspInvalidRequestTrue();
   	}
	/**
	 *	Returns the value of dt1RspErrSection
	 *	@return dt1RspErrSection
	 */
   public char[] getDt1RspErrSection() throws CFException  {              
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspErrSection();
   }

  
	/**
	*  set variable dt1RspErrSection
	*  @param value
	**/
   public void setDt1RspErrSection(char[] value) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(value);
   } 

     /**
	 * 	Update Dt1RspErrSection 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1RspErrSection(char[] source, int sourceIndex) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex);
   	
   }
   
   public void setDt1RspErrSection(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspErrSection(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1RspErrSection with another Field
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source);
   }  
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source, int sourceIndex,int sourceLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 6 for isDt1RspFailedSeeExpCode()
	 *	@return  Returns true if isDt1RspFailedSeeExpCode() is 6
	 */
   public boolean isDt1RspFailedSeeExpCode() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspFailedSeeExpCode();
   }

	/**
	*  set values 6
	*/
   	public void setDt1RspFailedSeeExpCodeTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspFailedSeeExpCodeTrue();
   	}
	/**
	 *	Test condition 3 for isDt1RspNoClaimsFound()
	 *	@return  Returns true if isDt1RspNoClaimsFound() is 3
	 */
   public boolean isDt1RspNoClaimsFound() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspNoClaimsFound();
   }

	/**
	*  set values 3
	*/
   	public void setDt1RspNoClaimsFoundTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspNoClaimsFoundTrue();
   	}
	/**
	 *	Test condition 997 for isDt1RspSeeParmsForMoreInf()
	 *	@return  Returns true if isDt1RspSeeParmsForMoreInf() is 997
	 */
   public boolean isDt1RspSeeParmsForMoreInf() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspSeeParmsForMoreInf();
   }

	/**
	*  set values 997
	*/
   	public void setDt1RspSeeParmsForMoreInfTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspSeeParmsForMoreInfTrue();
   	}
	/**
	 *	Test condition 998 for isDt1RspSeeViewForMoreInfo()
	 *	@return  Returns true if isDt1RspSeeViewForMoreInfo() is 998
	 */
   public boolean isDt1RspSeeViewForMoreInfo() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspSeeViewForMoreInfo();
   }

	/**
	*  set values 998
	*/
   	public void setDt1RspSeeViewForMoreInfoTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspSeeViewForMoreInfoTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += stsContainer.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += dt1SrtContainer.hashCode();
       return str.hashCode();
    }

    public MainlineOutCtx clone() {
        MainlineOutCtx cloneObj = new MainlineOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dt1SrtContainer = new Dt1SrtContainer();
        cloneObj.dt1SrtContainer.set(dt1SrtContainer.getClonedField());
        return cloneObj;
    }

    }

    public MainlineOutCtx getMainlineOutCtx() {
            return new MainlineOutCtx();
    }
     public class FfiiInitializationSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     StsContainer stsContainer = D5427dt1Ctx.this.getStsContainer();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Returns the value of sysDb2conn
	 *	@return sysDb2conn
	 */
   public char[] getSysDb2conn() throws CFException  {              
   		return standardVars.getSysVariables().getSysDb2conn();
   }

  
	/**
	*  set variable sysDb2conn
	*  @param value
	**/
   public void setSysDb2conn(char[] value) throws CFException {
      standardVars.getSysVariables().setSysDb2conn(value);
   } 

     /**
	 * 	Update SysDb2conn 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSysDb2conn(char[] source, int sourceIndex) throws CFException {
      standardVars.getSysVariables().setSysDb2conn(source, sourceIndex);
   	
   }
   
   public void setSysDb2conn(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getSysVariables().setSysDb2conn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SysDb2conn 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSysDb2conn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getSysVariables().setSysDb2conn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update SysDb2conn with another Field
	 *	@param value
	 */
   public void setSysDb2conn(Field source) {
      standardVars.getSysVariables().setSysDb2conn(source);
   }  
   
     /**
	 * 	Update SysDb2conn 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSysDb2conn(Field source, int sourceIndex,int sourceLen) {
      standardVars.getSysVariables().setSysDb2conn(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update SysDb2conn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSysDb2conn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getSysVariables().setSysDb2conn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cicsresp2
	 *	@return cicsresp2
	 */
	public int getCicsresp2() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp2();
	}
	
	/**
	 * 	Update Cicsresp2 with the passed value
	 *	@param number
	 */
	public void setCicsresp2(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2(number);
	}


	public void setCicsresp2(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2((int)number);
	}


	/**
	 *	Returns the value of maxClaimsDefault
	 *	@return maxClaimsDefault
	 */
	public long getMaxClaimsDefault() throws CFException {
   		return work.getMaxClaimsDefault();
	}


	/**
	 *	Returns String value of maxClaimsDefault
	 *	@return maxClaimsDefault
	 */
	public char[]  getMaxClaimsDefaultString() throws CFException {
	     return String.valueOf(work.getMaxClaimsDefaultString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean maxClaimsDefaultIsNumeric()  throws CFException{
	    return work.maxClaimsDefaultIsNumeric();
	}

	/**
	 * 	Update MaxClaimsDefault with the passed value
	 *	@param number
	 */
	public void setMaxClaimsDefault(long number)  throws CFException{
		work.setMaxClaimsDefault(number);
	}
	

	
	/**
	 * 	Update MaxClaimsDefault with the passed value
	 *	@param value (String or char[])
	 */
	public void setMaxClaimsDefault(char[] value)  throws CFException {
		work.setMaxClaimsDefault(value);
	}
	
	/**
	 * 	Update MaxClaimsDefault with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setMaxClaimsDefaultString(char[] value)  throws CFException{
		work.setMaxClaimsDefault(value);
	}	

	/**
	 *	Returns the value of thisProgram
	 *	@return thisProgram
	 */
   public char[] getThisProgram() throws CFException  {              
   		return work.getThisProgram();
   }

  
	/**
	*  set variable thisProgram
	*  @param value
	**/
   public void setThisProgram(char[] value) throws CFException {
      work.setThisProgram(value);
   } 

	/**
	 *	Returns the value of dt1ReqContainer
	 *	@return dt1ReqContainer
	 */   
	 public Dt1ReqContainer getDt1ReqContainer() {
   	return dt1ReqContainer;
   }


	/**
	 *	Returns the value of cicsresp
	 *	@return cicsresp
	 */
	public int getCicsresp() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp();
	}
	
	/**
	 * 	Update Cicsresp with the passed value
	 *	@param number
	 */
	public void setCicsresp(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp(number);
	}


	public void setCicsresp(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp((int)number);
	}


	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of currentChannelName
	 *	@return currentChannelName
	 */
   public char[] getCurrentChannelName() throws CFException  {              
   		return standardVars.getCurrentVariables().getCurrentChannelName();
   }

  
	/**
	*  set variable currentChannelName
	*  @param value
	**/
   public void setCurrentChannelName(char[] value) throws CFException {
      standardVars.getCurrentVariables().setCurrentChannelName(value);
   } 

     /**
	 * 	Update CurrentChannelName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCurrentChannelName(char[] source, int sourceIndex) throws CFException {
      standardVars.getCurrentVariables().setCurrentChannelName(source, sourceIndex);
   	
   }
   
   public void setCurrentChannelName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getCurrentVariables().setCurrentChannelName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CurrentChannelName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCurrentChannelName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentChannelName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CurrentChannelName with another Field
	 *	@param value
	 */
   public void setCurrentChannelName(Field source) {
      standardVars.getCurrentVariables().setCurrentChannelName(source);
   }  
   
     /**
	 * 	Update CurrentChannelName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCurrentChannelName(Field source, int sourceIndex,int sourceLen) {
      standardVars.getCurrentVariables().setCurrentChannelName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CurrentChannelName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCurrentChannelName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentChannelName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of asnSysid
	 *	@return asnSysid
	 */
   public char[] getAsnSysid() throws CFException  {              
   		return standardVars.getAsnVariables().getAsnSysid();
   }

  
	/**
	*  set variable asnSysid
	*  @param value
	**/
   public void setAsnSysid(char[] value) throws CFException {
      standardVars.getAsnVariables().setAsnSysid(value);
   } 

     /**
	 * 	Update AsnSysid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setAsnSysid(char[] source, int sourceIndex) throws CFException {
      standardVars.getAsnVariables().setAsnSysid(source, sourceIndex);
   	
   }
   
   public void setAsnSysid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getAsnVariables().setAsnSysid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update AsnSysid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setAsnSysid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getAsnVariables().setAsnSysid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update AsnSysid with another Field
	 *	@param value
	 */
   public void setAsnSysid(Field source) {
      standardVars.getAsnVariables().setAsnSysid(source);
   }  
   
     /**
	 * 	Update AsnSysid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setAsnSysid(Field source, int sourceIndex,int sourceLen) {
      standardVars.getAsnVariables().setAsnSysid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update AsnSysid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setAsnSysid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getAsnVariables().setAsnSysid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getSysStartupdate() throws CFException {  
        return standardVars.getSysVariables().getSysStartupdate();
}
	/**
	 * 	Update SysStartupdate with the passed value
	 *	@param number
	 */
	public void setSysStartupdate(int number)  throws CFException{
		standardVars.getSysVariables().setSysStartupdate(number);
	}


	public void setSysStartupdate(long number)  throws CFException{
	    standardVars.getSysVariables().setSysStartupdate(number);
	}
	

	/**
	 *	Returns the value of sysMqconn
	 *	@return sysMqconn
	 */
   public char[] getSysMqconn() throws CFException  {              
   		return standardVars.getSysVariables().getSysMqconn();
   }

  
	/**
	*  set variable sysMqconn
	*  @param value
	**/
   public void setSysMqconn(char[] value) throws CFException {
      standardVars.getSysVariables().setSysMqconn(value);
   } 

     /**
	 * 	Update SysMqconn 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSysMqconn(char[] source, int sourceIndex) throws CFException {
      standardVars.getSysVariables().setSysMqconn(source, sourceIndex);
   	
   }
   
   public void setSysMqconn(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getSysVariables().setSysMqconn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SysMqconn 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSysMqconn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getSysVariables().setSysMqconn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update SysMqconn with another Field
	 *	@param value
	 */
   public void setSysMqconn(Field source) {
      standardVars.getSysVariables().setSysMqconn(source);
   }  
   
     /**
	 * 	Update SysMqconn 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSysMqconn(Field source, int sourceIndex,int sourceLen) {
      standardVars.getSysVariables().setSysMqconn(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update SysMqconn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSysMqconn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getSysVariables().setSysMqconn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sysCvdaInitstatus
	 *	@return sysCvdaInitstatus
	 */
	public int getSysCvdaInitstatus() throws CFException {        
   		return standardVars.getSysVariables().getSysCvdaInitstatus();
	}
	
	/**
	 * 	Update SysCvdaInitstatus with the passed value
	 *	@param number
	 */
	public void setSysCvdaInitstatus(int number)  throws CFException{
		standardVars.getSysVariables().setSysCvdaInitstatus(number);
	}


	public void setSysCvdaInitstatus(long number)  throws CFException{
		standardVars.getSysVariables().setSysCvdaInitstatus((int)number);
	}


	/**
	 *	Returns the value of asnProgram
	 *	@return asnProgram
	 */
   public char[] getAsnProgram() throws CFException  {              
   		return standardVars.getAsnVariables().getAsnProgram();
   }

  
	/**
	*  set variable asnProgram
	*  @param value
	**/
   public void setAsnProgram(char[] value) throws CFException {
      standardVars.getAsnVariables().setAsnProgram(value);
   } 

     /**
	 * 	Update AsnProgram 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setAsnProgram(char[] source, int sourceIndex) throws CFException {
      standardVars.getAsnVariables().setAsnProgram(source, sourceIndex);
   	
   }
   
   public void setAsnProgram(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getAsnVariables().setAsnProgram(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update AsnProgram 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setAsnProgram(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getAsnVariables().setAsnProgram(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update AsnProgram with another Field
	 *	@param value
	 */
   public void setAsnProgram(Field source) {
      standardVars.getAsnVariables().setAsnProgram(source);
   }  
   
     /**
	 * 	Update AsnProgram 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setAsnProgram(Field source, int sourceIndex,int sourceLen) {
      standardVars.getAsnVariables().setAsnProgram(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update AsnProgram 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setAsnProgram(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getAsnVariables().setAsnProgram(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sysCvdaCicsstatus
	 *	@return sysCvdaCicsstatus
	 */
	public int getSysCvdaCicsstatus() throws CFException {        
   		return standardVars.getSysVariables().getSysCvdaCicsstatus();
	}
	
	/**
	 * 	Update SysCvdaCicsstatus with the passed value
	 *	@param number
	 */
	public void setSysCvdaCicsstatus(int number)  throws CFException{
		standardVars.getSysVariables().setSysCvdaCicsstatus(number);
	}


	public void setSysCvdaCicsstatus(long number)  throws CFException{
		standardVars.getSysVariables().setSysCvdaCicsstatus((int)number);
	}


	/**
	 *	Returns the value of dt1ReqContainerName
	 *	@return dt1ReqContainerName
	 */
   public char[] getDt1ReqContainerName() throws CFException  {              
   		return work.getDt1ReqContainerName();
   }

  
	/**
	*  set variable dt1ReqContainerName
	*  @param value
	**/
   public void setDt1ReqContainerName(char[] value) throws CFException {
      work.setDt1ReqContainerName(value);
   } 

	/**
	 *	Test condition " " for isDt1ReqStartAtTop()
	 *	@return  Returns true if isDt1ReqStartAtTop() is " "
	 */
   public boolean isDt1ReqStartAtTop() throws CFException {
      return dt1ReqContainer.getDt1RequestArea().isDt1ReqStartAtTop();
   }

	/**
	*  set values " "
	*/
   	public void setDt1ReqStartAtTopTrue()  throws CFException{  			
    	dt1ReqContainer.getDt1RequestArea().setDt1ReqStartAtTopTrue();
   	}
	/**
	 *	Returns the value of currentContainerLength
	 *	@return currentContainerLength
	 */
	public int getCurrentContainerLength() throws CFException {        
   		return standardVars.getCurrentVariables().getCurrentContainerLength();
	}
	
	/**
	 * 	Update CurrentContainerLength with the passed value
	 *	@param number
	 */
	public void setCurrentContainerLength(int number)  throws CFException{
		standardVars.getCurrentVariables().setCurrentContainerLength(number);
	}


	public void setCurrentContainerLength(long number)  throws CFException{
		standardVars.getCurrentVariables().setCurrentContainerLength((int)number);
	}


	/**
	 *	Returns the value of sysJobname
	 *	@return sysJobname
	 */   
	 public SysJobname getSysJobname() {
   	return standardVars.getSysVariables().getSysJobname();
   }

   /**
	* 	Update SysJobname with the passed value
	*	@param value
	*/
   public void setSysJobname(char[] value) throws CFException {
      standardVars.getSysVariables().setSysJobname(value);
   }   

     /**
	 * 	Update SysJobname 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSysJobname(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	standardVars.getSysVariables().setSysJobname(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SysJobname 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSysJobname(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	standardVars.getSysVariables().setSysJobname(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update SysJobname with another Field
	 *	@param value
	 */
   public void setSysJobname(Field source) {
   	standardVars.getSysVariables().setSysJobname(source);
   }  
   
     /**
	 * 	Update SysJobname 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSysJobname(Field source, int sourceIndex,int sourceLen) {
   	standardVars.getSysVariables().setSysJobname(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SysJobname 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSysJobname(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	standardVars.getSysVariables().setSysJobname(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextKey
	 *	@return nextKey
	 */   
	 public NextKey getNextKey() {
   	return nextKey;
   }


	/**
	 *	Returns the value of dt1ReqClmItemsRequested
	 *	@return dt1ReqClmItemsRequested
	 */
   public char[] getDt1ReqClmItemsRequested() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqClmItemsRequested();
   }

  
	/**
	*  set variable dt1ReqClmItemsRequested
	*  @param value
	**/
   public void setDt1ReqClmItemsRequested(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqClmItemsRequested(value);
   } 

     /**
	 * 	Update Dt1ReqClmItemsRequested 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqClmItemsRequested(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqClmItemsRequested(source, sourceIndex);
   	
   }
   
   public void setDt1ReqClmItemsRequested(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqClmItemsRequested(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqClmItemsRequested 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqClmItemsRequested(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqClmItemsRequested(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqClmItemsRequested with another Field
	 *	@param value
	 */
   public void setDt1ReqClmItemsRequested(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqClmItemsRequested(source);
   }  
   
     /**
	 * 	Update Dt1ReqClmItemsRequested 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqClmItemsRequested(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqClmItemsRequested(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqClmItemsRequested 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqClmItemsRequested(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqClmItemsRequested(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of asnInvokingprog
	 *	@return asnInvokingprog
	 */
   public char[] getAsnInvokingprog() throws CFException  {              
   		return standardVars.getAsnVariables().getAsnInvokingprog();
   }

  
	/**
	*  set variable asnInvokingprog
	*  @param value
	**/
   public void setAsnInvokingprog(char[] value) throws CFException {
      standardVars.getAsnVariables().setAsnInvokingprog(value);
   } 

     /**
	 * 	Update AsnInvokingprog 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setAsnInvokingprog(char[] source, int sourceIndex) throws CFException {
      standardVars.getAsnVariables().setAsnInvokingprog(source, sourceIndex);
   	
   }
   
   public void setAsnInvokingprog(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getAsnVariables().setAsnInvokingprog(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update AsnInvokingprog 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setAsnInvokingprog(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getAsnVariables().setAsnInvokingprog(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update AsnInvokingprog with another Field
	 *	@param value
	 */
   public void setAsnInvokingprog(Field source) {
      standardVars.getAsnVariables().setAsnInvokingprog(source);
   }  
   
     /**
	 * 	Update AsnInvokingprog 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setAsnInvokingprog(Field source, int sourceIndex,int sourceLen) {
      standardVars.getAsnVariables().setAsnInvokingprog(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update AsnInvokingprog 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setAsnInvokingprog(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getAsnVariables().setAsnInvokingprog(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of maxClaimsRequested
	 *	@return maxClaimsRequested
	 */
	public long getMaxClaimsRequested() throws CFException {
   		return work.getMaxClaimsRequested();
	}


	/**
	 *	Returns String value of maxClaimsRequested
	 *	@return maxClaimsRequested
	 */
	public char[]  getMaxClaimsRequestedString() throws CFException {
	     return String.valueOf(work.getMaxClaimsRequestedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean maxClaimsRequestedIsNumeric()  throws CFException{
	    return work.maxClaimsRequestedIsNumeric();
	}

	/**
	 * 	Update MaxClaimsRequested with the passed value
	 *	@param number
	 */
	public void setMaxClaimsRequested(long number)  throws CFException{
		work.setMaxClaimsRequested(number);
	}
	

	
	/**
	 * 	Update MaxClaimsRequested with the passed value
	 *	@param value (String or char[])
	 */
	public void setMaxClaimsRequested(char[] value)  throws CFException {
		work.setMaxClaimsRequested(value);
	}
	
	/**
	 * 	Update MaxClaimsRequested with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setMaxClaimsRequestedString(char[] value)  throws CFException{
		work.setMaxClaimsRequested(value);
	}	

	/**
	 *	Returns the value of asnApplid
	 *	@return asnApplid
	 */
   public char[] getAsnApplid() throws CFException  {              
   		return standardVars.getAsnVariables().getAsnApplid();
   }

  
	/**
	*  set variable asnApplid
	*  @param value
	**/
   public void setAsnApplid(char[] value) throws CFException {
      standardVars.getAsnVariables().setAsnApplid(value);
   } 

     /**
	 * 	Update AsnApplid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setAsnApplid(char[] source, int sourceIndex) throws CFException {
      standardVars.getAsnVariables().setAsnApplid(source, sourceIndex);
   	
   }
   
   public void setAsnApplid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getAsnVariables().setAsnApplid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update AsnApplid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setAsnApplid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getAsnVariables().setAsnApplid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update AsnApplid with another Field
	 *	@param value
	 */
   public void setAsnApplid(Field source) {
      standardVars.getAsnVariables().setAsnApplid(source);
   }  
   
     /**
	 * 	Update AsnApplid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setAsnApplid(Field source, int sourceIndex,int sourceLen) {
      standardVars.getAsnVariables().setAsnApplid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update AsnApplid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setAsnApplid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getAsnVariables().setAsnApplid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FfiiInitializationSectOutCtx getFfiiInitializationSectOutCtx() {
            return new FfiiInitializationSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += standardVars.hashCode();
        str += stsContainer.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FfiiInitializationSectInCtx clone() {
        FfiiInitializationSectInCtx cloneObj = new FfiiInitializationSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FfiiInitializationSectInCtx getFfiiInitializationSectInCtx() {
            return new FfiiInitializationSectInCtx();
    }
     public class FfiiInitializationSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     StsContainer stsContainer = D5427dt1Ctx.this.getStsContainer();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Returns the value of dt1RspContainer
	 *	@return dt1RspContainer
	 */   
	 public Dt1RspContainer getDt1RspContainer() {
   	return dt1RspContainer;
   }


	/**
	 *	Returns the value of cicsresp2
	 *	@return cicsresp2
	 */
	public int getCicsresp2() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp2();
	}
	
	/**
	 * 	Update Cicsresp2 with the passed value
	 *	@param number
	 */
	public void setCicsresp2(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2(number);
	}


	public void setCicsresp2(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2((int)number);
	}


	/**
	 *	Returns the value of maxClaimsDefault
	 *	@return maxClaimsDefault
	 */
	public long getMaxClaimsDefault() throws CFException {
   		return work.getMaxClaimsDefault();
	}


	/**
	 *	Returns String value of maxClaimsDefault
	 *	@return maxClaimsDefault
	 */
	public char[]  getMaxClaimsDefaultString() throws CFException {
	     return String.valueOf(work.getMaxClaimsDefaultString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean maxClaimsDefaultIsNumeric()  throws CFException{
	    return work.maxClaimsDefaultIsNumeric();
	}

	/**
	 * 	Update MaxClaimsDefault with the passed value
	 *	@param number
	 */
	public void setMaxClaimsDefault(long number)  throws CFException{
		work.setMaxClaimsDefault(number);
	}
	

	
	/**
	 * 	Update MaxClaimsDefault with the passed value
	 *	@param value (String or char[])
	 */
	public void setMaxClaimsDefault(char[] value)  throws CFException {
		work.setMaxClaimsDefault(value);
	}
	
	/**
	 * 	Update MaxClaimsDefault with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setMaxClaimsDefaultString(char[] value)  throws CFException{
		work.setMaxClaimsDefault(value);
	}	

	/**
	 *	Test condition "9002" for isStsRespCodeNullcont()
	 *	@return  Returns true if isStsRespCodeNullcont() is "9002"
	 */
   public boolean isStsRespCodeNullcont() throws CFException {
      return stsContainer.getStsFixedArea().isStsRespCodeNullcont();
   }

	/**
	*  set values "9002"
	*/
   	public void setStsRespCodeNullcontTrue()  throws CFException{  			
    	stsContainer.getStsFixedArea().setStsRespCodeNullcontTrue();
   	}
	/**
	 *	Returns the value of cicsresp
	 *	@return cicsresp
	 */
	public int getCicsresp() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp();
	}
	
	/**
	 * 	Update Cicsresp with the passed value
	 *	@param number
	 */
	public void setCicsresp(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp(number);
	}


	public void setCicsresp(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp((int)number);
	}


	/**
	 *	Returns the value of stsRespCode
	 *	@return stsRespCode
	 */
   public char[] getStsRespCode() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsRespCode();
   }

  
	/**
	*  set variable stsRespCode
	*  @param value
	**/
   public void setStsRespCode(char[] value) throws CFException {
      stsContainer.getStsFixedArea().setStsRespCode(value);
   } 

     /**
	 * 	Update StsRespCode 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsRespCode(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex);
   	
   }
   
   public void setStsRespCode(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsRespCode 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsRespCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsRespCode with another Field
	 *	@param value
	 */
   public void setStsRespCode(Field source) {
      stsContainer.getStsFixedArea().setStsRespCode(source);
   }  
   
     /**
	 * 	Update StsRespCode 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsRespCode(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsRespCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsRespCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 998 for isDt1RspSeeViewForMoreInfo()
	 *	@return  Returns true if isDt1RspSeeViewForMoreInfo() is 998
	 */
   public boolean isDt1RspSeeViewForMoreInfo() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspSeeViewForMoreInfo();
   }

	/**
	*  set values 998
	*/
   	public void setDt1RspSeeViewForMoreInfoTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspSeeViewForMoreInfoTrue();
   	}
	/**
	 *	Returns the value of stsRespProgramName
	 *	@return stsRespProgramName
	 */
   public char[] getStsRespProgramName() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsRespProgramName();
   }

  
	/**
	*  set variable stsRespProgramName
	*  @param value
	**/
   public void setStsRespProgramName(char[] value) throws CFException {
      stsContainer.getStsFixedArea().setStsRespProgramName(value);
   } 

     /**
	 * 	Update StsRespProgramName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsRespProgramName(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().setStsRespProgramName(source, sourceIndex);
   	
   }
   
   public void setStsRespProgramName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().setStsRespProgramName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsRespProgramName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsRespProgramName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().setStsRespProgramName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsRespProgramName with another Field
	 *	@param value
	 */
   public void setStsRespProgramName(Field source) {
      stsContainer.getStsFixedArea().setStsRespProgramName(source);
   }  
   
     /**
	 * 	Update StsRespProgramName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsRespProgramName(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().setStsRespProgramName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsRespProgramName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsRespProgramName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().setStsRespProgramName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d5427dt1MaxClaims
	 *	@return d5427dt1MaxClaims
	 */
	public int getD5427dt1MaxClaims() throws CFException {        
   		return work.getD5427dt1MaxClaims();
	}
	
	/**
	 * 	Update D5427dt1MaxClaims with the passed value
	 *	@param number
	 */
	public void setD5427dt1MaxClaims(int number)  throws CFException{
		work.setD5427dt1MaxClaims(number);
	}


	public void setD5427dt1MaxClaims(long number)  throws CFException{
		work.setD5427dt1MaxClaims((int)number);
	}


	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Returns the value of dt1RspErrSection
	 *	@return dt1RspErrSection
	 */
   public char[] getDt1RspErrSection() throws CFException  {              
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspErrSection();
   }

  
	/**
	*  set variable dt1RspErrSection
	*  @param value
	**/
   public void setDt1RspErrSection(char[] value) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(value);
   } 

     /**
	 * 	Update Dt1RspErrSection 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1RspErrSection(char[] source, int sourceIndex) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex);
   	
   }
   
   public void setDt1RspErrSection(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspErrSection(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1RspErrSection with another Field
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source);
   }  
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source, int sourceIndex,int sourceLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sysVariables
	 *	@return sysVariables
	 */   
	 public SysVariables getSysVariables() {
   	return standardVars.getSysVariables();
   }

   /**
	* 	Update SysVariables with the passed value
	*	@param value
	*/
   public void setSysVariables(char[] value) throws CFException {
      standardVars.setSysVariables(value);
   }   

     /**
	 * 	Update SysVariables 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSysVariables(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	standardVars.setSysVariables(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SysVariables 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSysVariables(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	standardVars.setSysVariables(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update SysVariables with another Field
	 *	@param value
	 */
   public void setSysVariables(Field source) {
   	standardVars.setSysVariables(source);
   }  
   
     /**
	 * 	Update SysVariables 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSysVariables(Field source, int sourceIndex,int sourceLen) {
   	standardVars.setSysVariables(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SysVariables 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSysVariables(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	standardVars.setSysVariables(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 99 for isDt1RspFail()
	 *	@return  Returns true if isDt1RspFail() is 99
	 */
   public boolean isDt1RspFail() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspFail();
   }

	/**
	*  set values 99
	*/
   	public void setDt1RspFailTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspFailTrue();
   	}
	/**
	 *	Test condition "C" for isStsRespMessageCics()
	 *	@return  Returns true if isStsRespMessageCics() is "C"
	 */
   public boolean isStsRespMessageCics() throws CFException {
      return stsContainer.getStsFixedArea().getStsResponseVars().isStsRespMessageCics();
   }

	/**
	*  set values "C"
	*/
   	public void setStsRespMessageCicsTrue()  throws CFException{  			
    	stsContainer.getStsFixedArea().getStsResponseVars().setStsRespMessageCicsTrue();
   	}
	/**
	 *	Returns the value of stsCicsresp
	 *	@return stsCicsresp
	 */
	public long getStsCicsresp() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp();
	}


	/**
	 *	Returns String value of stsCicsresp
	 *	@return stsCicsresp
	 */
	public char[]  getStsCicsrespString() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsrespString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsCicsrespIsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsCicsrespIsNumeric();
	}

	/**
	 * 	Update StsCicsresp with the passed value
	 *	@param number
	 */
	public void setStsCicsresp(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(number);
	}
	

	
	/**
	 * 	Update StsCicsresp with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(value);
	}
	
	/**
	 * 	Update StsCicsresp with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsCicsrespString(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(value);
	}	

	/**
	 *	Returns the value of asnVariables
	 *	@return asnVariables
	 */   
	 public AsnVariables getAsnVariables() {
   	return standardVars.getAsnVariables();
   }

   /**
	* 	Update AsnVariables with the passed value
	*	@param value
	*/
   public void setAsnVariables(char[] value) throws CFException {
      standardVars.setAsnVariables(value);
   }   

     /**
	 * 	Update AsnVariables 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setAsnVariables(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	standardVars.setAsnVariables(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update AsnVariables 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setAsnVariables(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	standardVars.setAsnVariables(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update AsnVariables with another Field
	 *	@param value
	 */
   public void setAsnVariables(Field source) {
   	standardVars.setAsnVariables(source);
   }  
   
     /**
	 * 	Update AsnVariables 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setAsnVariables(Field source, int sourceIndex,int sourceLen) {
   	standardVars.setAsnVariables(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update AsnVariables 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setAsnVariables(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	standardVars.setAsnVariables(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of stsCicsresp2
	 *	@return stsCicsresp2
	 */
	public long getStsCicsresp2() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp2();
	}


	/**
	 *	Returns String value of stsCicsresp2
	 *	@return stsCicsresp2
	 */
	public char[]  getStsCicsresp2String() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp2String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsCicsresp2IsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsCicsresp2IsNumeric();
	}

	/**
	 * 	Update StsCicsresp2 with the passed value
	 *	@param number
	 */
	public void setStsCicsresp2(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(number);
	}
	

	
	/**
	 * 	Update StsCicsresp2 with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp2(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(value);
	}
	
	/**
	 * 	Update StsCicsresp2 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp2String(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(value);
	}	

	/**
	 *	Returns the value of maxClaimsRequested
	 *	@return maxClaimsRequested
	 */
	public long getMaxClaimsRequested() throws CFException {
   		return work.getMaxClaimsRequested();
	}


	/**
	 *	Returns String value of maxClaimsRequested
	 *	@return maxClaimsRequested
	 */
	public char[]  getMaxClaimsRequestedString() throws CFException {
	     return String.valueOf(work.getMaxClaimsRequestedString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean maxClaimsRequestedIsNumeric()  throws CFException{
	    return work.maxClaimsRequestedIsNumeric();
	}

	/**
	 * 	Update MaxClaimsRequested with the passed value
	 *	@param number
	 */
	public void setMaxClaimsRequested(long number)  throws CFException{
		work.setMaxClaimsRequested(number);
	}
	

	
	/**
	 * 	Update MaxClaimsRequested with the passed value
	 *	@param value (String or char[])
	 */
	public void setMaxClaimsRequested(char[] value)  throws CFException {
		work.setMaxClaimsRequested(value);
	}
	
	/**
	 * 	Update MaxClaimsRequested with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setMaxClaimsRequestedString(char[] value)  throws CFException{
		work.setMaxClaimsRequested(value);
	}	

	/**
	 *	Test condition 0 for isDt1RspGoodReturn()
	 *	@return  Returns true if isDt1RspGoodReturn() is 0
	 */
   public boolean isDt1RspGoodReturn() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspGoodReturn();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspGoodReturnTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspGoodReturnTrue();
   	}
	/**
	 *	Returns the value of thisProgram
	 *	@return thisProgram
	 */
   public char[] getThisProgram() throws CFException  {              
   		return work.getThisProgram();
   }

  
	/**
	*  set variable thisProgram
	*  @param value
	**/
   public void setThisProgram(char[] value) throws CFException {
      work.setThisProgram(value);
   } 

	/**
	 *	Returns the value of dt1ReqContainerLength
	 *	@return dt1ReqContainerLength
	 */
	public int getDt1ReqContainerLength() throws CFException {        
   		return work.getDt1ReqContainerLength();
	}
	
	/**
	 * 	Update Dt1ReqContainerLength with the passed value
	 *	@param number
	 */
	public void setDt1ReqContainerLength(int number)  throws CFException{
		work.setDt1ReqContainerLength(number);
	}


	public void setDt1ReqContainerLength(long number)  throws CFException{
		work.setDt1ReqContainerLength((int)number);
	}


	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 0 for isDt1RspExplOk()
	 *	@return  Returns true if isDt1RspExplOk() is 0
	 */
   public boolean isDt1RspExplOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspExplOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspExplOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspExplOkTrue();
   	}
	/**
	 *	Returns the value of stsResponseVars
	 *	@return stsResponseVars
	 */   
	 public StsResponseVars getStsResponseVars() {
   	return stsContainer.getStsFixedArea().getStsResponseVars();
   }

   /**
	* 	Update StsResponseVars with the passed value
	*	@param value
	*/
   public void setStsResponseVars(char[] value) throws CFException {
      stsContainer.getStsFixedArea().setStsResponseVars(value);
   }   

     /**
	 * 	Update StsResponseVars 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setStsResponseVars(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsResponseVars 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsResponseVars(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsResponseVars with another Field
	 *	@param value
	 */
   public void setStsResponseVars(Field source) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source);
   }  
   
     /**
	 * 	Update StsResponseVars 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setStsResponseVars(Field source, int sourceIndex,int sourceLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsResponseVars 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsResponseVars(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "0000" for isStsRespCodeOk()
	 *	@return  Returns true if isStsRespCodeOk() is "0000"
	 */
   public boolean isStsRespCodeOk() throws CFException {
      return stsContainer.getStsFixedArea().isStsRespCodeOk();
   }

	/**
	*  set values "0000"
	*/
   	public void setStsRespCodeOkTrue()  throws CFException{  			
    	stsContainer.getStsFixedArea().setStsRespCodeOkTrue();
   	}
	/**
	 *	Returns the value of headerCt
	 *	@return headerCt
	 */
	public short getHeaderCt() throws CFException {        
   		return work.getHeaderCt();
	}
	
	/**
	 * 	Update HeaderCt with the passed value
	 *	@param number
	 */
	public void setHeaderCt(short number)  throws CFException{
		work.setHeaderCt(number);
	}

	public void setHeaderCt(int number)  throws CFException{
		work.setHeaderCt((short)number);
	}

	public void setHeaderCt(long number)  throws CFException{
		work.setHeaderCt((short)number);
	}



	/**
	 *	Returns the value of dt1ReqContainerName
	 *	@return dt1ReqContainerName
	 */
   public char[] getDt1ReqContainerName() throws CFException  {              
   		return work.getDt1ReqContainerName();
   }

  
	/**
	*  set variable dt1ReqContainerName
	*  @param value
	**/
   public void setDt1ReqContainerName(char[] value) throws CFException {
      work.setDt1ReqContainerName(value);
   } 

	/**
	 *	Returns the value of stsEibtaskn
	 *	@return stsEibtaskn
	 */
	public long getStsEibtaskn() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsEibtaskn();
	}


	/**
	 *	Returns String value of stsEibtaskn
	 *	@return stsEibtaskn
	 */
	public char[]  getStsEibtasknString() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsEibtasknString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsEibtasknIsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsEibtasknIsNumeric();
	}

	/**
	 * 	Update StsEibtaskn with the passed value
	 *	@param number
	 */
	public void setStsEibtaskn(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(number);
	}
	

	
	/**
	 * 	Update StsEibtaskn with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsEibtaskn(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(value);
	}
	
	/**
	 * 	Update StsEibtaskn with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsEibtasknString(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(value);
	}	

	/**
	 *	Returns the value of currentContainerLength
	 *	@return currentContainerLength
	 */
	public int getCurrentContainerLength() throws CFException {        
   		return standardVars.getCurrentVariables().getCurrentContainerLength();
	}
	
	/**
	 * 	Update CurrentContainerLength with the passed value
	 *	@param number
	 */
	public void setCurrentContainerLength(int number)  throws CFException{
		standardVars.getCurrentVariables().setCurrentContainerLength(number);
	}


	public void setCurrentContainerLength(long number)  throws CFException{
		standardVars.getCurrentVariables().setCurrentContainerLength((int)number);
	}


	/**
	 *	Returns the value of dt1ClaimKeyCnt
	 *	@return dt1ClaimKeyCnt
	 */
	public int getDt1ClaimKeyCnt() throws CFException {
   		return work.getDt1ClaimKeyCnt();
	}


	/**
	 *	Returns String value of dt1ClaimKeyCnt
	 *	@return dt1ClaimKeyCnt
	 */
	public char[]  getDt1ClaimKeyCntString() throws CFException {
	     return String.valueOf(work.getDt1ClaimKeyCntString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClaimKeyCntIsNumeric()  throws CFException{
	    return work.dt1ClaimKeyCntIsNumeric();
	}

	/**
	 * 	Update Dt1ClaimKeyCnt with the passed value
	 *	@param number
	 */
	public void setDt1ClaimKeyCnt(int number)  throws CFException{
		work.setDt1ClaimKeyCnt(number);
	}
	

	public void setDt1ClaimKeyCnt(long number)  throws CFException{
	    work.setDt1ClaimKeyCnt(number);
	}
	
	
	/**
	 * 	Update Dt1ClaimKeyCnt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClaimKeyCnt(char[] value)  throws CFException {
		work.setDt1ClaimKeyCnt(value);
	}
	
	/**
	 * 	Update Dt1ClaimKeyCnt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClaimKeyCntString(char[] value)  throws CFException{
		work.setDt1ClaimKeyCnt(value);
	}	

	/**
	 *	Returns the value of nextHeaderCt
	 *	@return nextHeaderCt
	 */
	public int getNextHeaderCt() throws CFException {
   		return nextKey.getNextHeaderCt();
	}


	/**
	 *	Returns String value of nextHeaderCt
	 *	@return nextHeaderCt
	 */
	public char[]  getNextHeaderCtString() throws CFException {
	     return String.valueOf(nextKey.getNextHeaderCtString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextHeaderCtIsNumeric()  throws CFException{
	    return nextKey.nextHeaderCtIsNumeric();
	}

	/**
	 * 	Update NextHeaderCt with the passed value
	 *	@param number
	 */
	public void setNextHeaderCt(int number)  throws CFException{
		nextKey.setNextHeaderCt(number);
	}
	

	public void setNextHeaderCt(long number)  throws CFException{
	    nextKey.setNextHeaderCt(number);
	}
	
	
	/**
	 * 	Update NextHeaderCt with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextHeaderCt(char[] value)  throws CFException {
		nextKey.setNextHeaderCt(value);
	}
	
	/**
	 * 	Update NextHeaderCt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextHeaderCtString(char[] value)  throws CFException{
		nextKey.setNextHeaderCt(value);
	}	

	/**
	 *	Returns the value of dt1RspFillerArea
	 *	@return dt1RspFillerArea
	 */
   public char[] getDt1RspFillerArea() throws CFException  {              
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspFillerArea();
   }

  
	/**
	*  set variable dt1RspFillerArea
	*  @param value
	**/
   public void setDt1RspFillerArea(char[] value) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspFillerArea(value);
   } 

     /**
	 * 	Update Dt1RspFillerArea 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1RspFillerArea(char[] source, int sourceIndex) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspFillerArea(source, sourceIndex);
   	
   }
   
   public void setDt1RspFillerArea(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspFillerArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1RspFillerArea 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspFillerArea(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspFillerArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1RspFillerArea with another Field
	 *	@param value
	 */
   public void setDt1RspFillerArea(Field source) {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspFillerArea(source);
   }  
   
     /**
	 * 	Update Dt1RspFillerArea 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1RspFillerArea(Field source, int sourceIndex,int sourceLen) {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspFillerArea(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1RspFillerArea 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspFillerArea(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspFillerArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextKey
	 *	@return nextKey
	 */   
	 public NextKey getNextKey() {
   	return nextKey;
   }


	/**
	 *	Returns the value of currentContainerName
	 *	@return currentContainerName
	 */
   public char[] getCurrentContainerName() throws CFException  {              
   		return standardVars.getCurrentVariables().getCurrentContainerName();
   }

  
	/**
	*  set variable currentContainerName
	*  @param value
	**/
   public void setCurrentContainerName(char[] value) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerName(value);
   } 

     /**
	 * 	Update CurrentContainerName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCurrentContainerName(char[] source, int sourceIndex) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex);
   	
   }
   
   public void setCurrentContainerName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CurrentContainerName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CurrentContainerName with another Field
	 *	@param value
	 */
   public void setCurrentContainerName(Field source) {
      standardVars.getCurrentVariables().setCurrentContainerName(source);
   }  
   
     /**
	 * 	Update CurrentContainerName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCurrentContainerName(Field source, int sourceIndex,int sourceLen) {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CurrentContainerName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of stsFixedArea
	 *	@return stsFixedArea
	 */   
	 public StsFixedArea getStsFixedArea() {
   	return stsContainer.getStsFixedArea();
   }

   /**
	* 	Update StsFixedArea with the passed value
	*	@param value
	*/
   public void setStsFixedArea(char[] value) throws CFException {
      stsContainer.setStsFixedArea(value);
   }   

     /**
	 * 	Update StsFixedArea 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setStsFixedArea(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	stsContainer.setStsFixedArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsFixedArea 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsFixedArea(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	stsContainer.setStsFixedArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsFixedArea with another Field
	 *	@param value
	 */
   public void setStsFixedArea(Field source) {
   	stsContainer.setStsFixedArea(source);
   }  
   
     /**
	 * 	Update StsFixedArea 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setStsFixedArea(Field source, int sourceIndex,int sourceLen) {
   	stsContainer.setStsFixedArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsFixedArea 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsFixedArea(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	stsContainer.setStsFixedArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqClmItemsRequested
	 *	@return dt1ReqClmItemsRequested
	 */
   public char[] getDt1ReqClmItemsRequested() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqClmItemsRequested();
   }

  
	/**
	*  set variable dt1ReqClmItemsRequested
	*  @param value
	**/
   public void setDt1ReqClmItemsRequested(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqClmItemsRequested(value);
   } 

     /**
	 * 	Update Dt1ReqClmItemsRequested 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqClmItemsRequested(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqClmItemsRequested(source, sourceIndex);
   	
   }
   
   public void setDt1ReqClmItemsRequested(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqClmItemsRequested(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqClmItemsRequested 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqClmItemsRequested(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqClmItemsRequested(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqClmItemsRequested with another Field
	 *	@param value
	 */
   public void setDt1ReqClmItemsRequested(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqClmItemsRequested(source);
   }  
   
     /**
	 * 	Update Dt1ReqClmItemsRequested 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqClmItemsRequested(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqClmItemsRequested(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqClmItemsRequested 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqClmItemsRequested(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqClmItemsRequested(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1RspRespCode
	 *	@return dt1RspRespCode
	 */
	public int getDt1RspRespCode() throws CFException {
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspRespCode();
	}


	/**
	 *	Returns String value of dt1RspRespCode
	 *	@return dt1RspRespCode
	 */
	public char[]  getDt1RspRespCodeString() throws CFException {
	     return String.valueOf(dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspRespCodeString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1RspRespCodeIsNumeric()  throws CFException{
	    return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().dt1RspRespCodeIsNumeric();
	}

	/**
	 * 	Update Dt1RspRespCode with the passed value
	 *	@param number
	 */
	public void setDt1RspRespCode(int number)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(number);
	}
	

	public void setDt1RspRespCode(long number)  throws CFException{
	    dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(number);
	}
	
	
	/**
	 * 	Update Dt1RspRespCode with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1RspRespCode(char[] value)  throws CFException {
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(value);
	}
	
	/**
	 * 	Update Dt1RspRespCode with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1RspRespCodeString(char[] value)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(value);
	}	

	/**
	 *	Test condition "9005" for isStsRespCodeGetError()
	 *	@return  Returns true if isStsRespCodeGetError() is "9005"
	 */
   public boolean isStsRespCodeGetError() throws CFException {
      return stsContainer.getStsFixedArea().isStsRespCodeGetError();
   }

	/**
	*  set values "9005"
	*/
   	public void setStsRespCodeGetErrorTrue()  throws CFException{  			
    	stsContainer.getStsFixedArea().setStsRespCodeGetErrorTrue();
   	}
	/**
	 *	Returns the value of stsRespAdditionalInfo1
	 *	@return stsRespAdditionalInfo1
	 */
   public char[] getStsRespAdditionalInfo1() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsRespAdditionalInfo1();
   }

  
	/**
	*  set variable stsRespAdditionalInfo1
	*  @param value
	**/
   public void setStsRespAdditionalInfo1(char[] value) throws CFException {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(value);
   } 

     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex);
   	
   }
   
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsRespAdditionalInfo1 with another Field
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source);
   }  
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += standardVars.hashCode();
        str += stsContainer.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FfiiInitializationSectOutCtx clone() {
        FfiiInitializationSectOutCtx cloneObj = new FfiiInitializationSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FfiiInitializationSectOutCtx getFfiiInitializationSectOutCtx() {
            return new FfiiInitializationSectOutCtx();
    }
     public class InitHostVariablesSectInCtx implements Cloneable {
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dt1ReqRemarkCd
	 *	@return dt1ReqRemarkCd
	 */
   public char[] getDt1ReqRemarkCd() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqRemarkCd();
   }

  
	/**
	*  set variable dt1ReqRemarkCd
	*  @param value
	**/
   public void setDt1ReqRemarkCd(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRemarkCd(value);
   } 

     /**
	 * 	Update Dt1ReqRemarkCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqRemarkCd(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRemarkCd(source, sourceIndex);
   	
   }
   
   public void setDt1ReqRemarkCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRemarkCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqRemarkCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqRemarkCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRemarkCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqRemarkCd with another Field
	 *	@param value
	 */
   public void setDt1ReqRemarkCd(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRemarkCd(source);
   }  
   
     /**
	 * 	Update Dt1ReqRemarkCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqRemarkCd(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRemarkCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqRemarkCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqRemarkCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRemarkCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqCptThru
	 *	@return dt1ReqCptThru
	 */
   public char[] getDt1ReqCptThru() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqCptThru();
   }

  
	/**
	*  set variable dt1ReqCptThru
	*  @param value
	**/
   public void setDt1ReqCptThru(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptThru(value);
   } 

     /**
	 * 	Update Dt1ReqCptThru 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqCptThru(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptThru(source, sourceIndex);
   	
   }
   
   public void setDt1ReqCptThru(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptThru(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqCptThru 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqCptThru(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqCptThru with another Field
	 *	@param value
	 */
   public void setDt1ReqCptThru(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptThru(source);
   }  
   
     /**
	 * 	Update Dt1ReqCptThru 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqCptThru(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptThru(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqCptThru 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqCptThru(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1RequestArea
	 *	@return dt1RequestArea
	 */   
	 public Dt1RequestArea getDt1RequestArea() {
   	return dt1ReqContainer.getDt1RequestArea();
   }

   /**
	* 	Update Dt1RequestArea with the passed value
	*	@param value
	*/
   public void setDt1RequestArea(char[] value) throws CFException {
      dt1ReqContainer.setDt1RequestArea(value);
   }   

     /**
	 * 	Update Dt1RequestArea 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDt1RequestArea(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dt1ReqContainer.setDt1RequestArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1RequestArea 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1RequestArea(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ReqContainer.setDt1RequestArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1RequestArea with another Field
	 *	@param value
	 */
   public void setDt1RequestArea(Field source) {
   	dt1ReqContainer.setDt1RequestArea(source);
   }  
   
     /**
	 * 	Update Dt1RequestArea 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDt1RequestArea(Field source, int sourceIndex,int sourceLen) {
   	dt1ReqContainer.setDt1RequestArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1RequestArea 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1RequestArea(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ReqContainer.setDt1RequestArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqAuthNbr
	 *	@return dt1ReqAuthNbr
	 */
   public char[] getDt1ReqAuthNbr() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqAuthNbr();
   }

  
	/**
	*  set variable dt1ReqAuthNbr
	*  @param value
	**/
   public void setDt1ReqAuthNbr(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAuthNbr(value);
   } 

     /**
	 * 	Update Dt1ReqAuthNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqAuthNbr(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAuthNbr(source, sourceIndex);
   	
   }
   
   public void setDt1ReqAuthNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAuthNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqAuthNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqAuthNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAuthNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqAuthNbr with another Field
	 *	@param value
	 */
   public void setDt1ReqAuthNbr(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAuthNbr(source);
   }  
   
     /**
	 * 	Update Dt1ReqAuthNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqAuthNbr(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAuthNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqAuthNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqAuthNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAuthNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqFirstServiceDate
	 *	@return dt1ReqFirstServiceDate
	 */
	public long getDt1ReqFirstServiceDate() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqFirstServiceDate();
	}


	/**
	 *	Returns String value of dt1ReqFirstServiceDate
	 *	@return dt1ReqFirstServiceDate
	 */
	public char[]  getDt1ReqFirstServiceDateString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqFirstServiceDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqFirstServiceDateIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqFirstServiceDateIsNumeric();
	}

	/**
	 * 	Update Dt1ReqFirstServiceDate with the passed value
	 *	@param number
	 */
	public void setDt1ReqFirstServiceDate(long number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFirstServiceDate(number);
	}
	

	
	/**
	 * 	Update Dt1ReqFirstServiceDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqFirstServiceDate(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFirstServiceDate(value);
	}
	
	/**
	 * 	Update Dt1ReqFirstServiceDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqFirstServiceDateString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFirstServiceDate(value);
	}	

	/**
	 *	Returns the value of dt1ReqRevThru
	 *	@return dt1ReqRevThru
	 */
   public char[] getDt1ReqRevThru() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqRevThru();
   }

  
	/**
	*  set variable dt1ReqRevThru
	*  @param value
	**/
   public void setDt1ReqRevThru(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevThru(value);
   } 

     /**
	 * 	Update Dt1ReqRevThru 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqRevThru(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevThru(source, sourceIndex);
   	
   }
   
   public void setDt1ReqRevThru(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevThru(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqRevThru 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqRevThru(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqRevThru with another Field
	 *	@param value
	 */
   public void setDt1ReqRevThru(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevThru(source);
   }  
   
     /**
	 * 	Update Dt1ReqRevThru 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqRevThru(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevThru(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqRevThru 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqRevThru(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqCauseCd
	 *	@return dt1ReqCauseCd
	 */
   public char[] getDt1ReqCauseCd() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqCauseCd();
   }

  
	/**
	*  set variable dt1ReqCauseCd
	*  @param value
	**/
   public void setDt1ReqCauseCd(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCauseCd(value);
   } 

     /**
	 * 	Update Dt1ReqCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqCauseCd(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCauseCd(source, sourceIndex);
   	
   }
   
   public void setDt1ReqCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqCauseCd with another Field
	 *	@param value
	 */
   public void setDt1ReqCauseCd(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCauseCd(source);
   }  
   
     /**
	 * 	Update Dt1ReqCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqCauseCd(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqFln
	 *	@return dt1ReqFln
	 */
	public long getDt1ReqFln() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqFln();
	}


	/**
	 *	Returns String value of dt1ReqFln
	 *	@return dt1ReqFln
	 */
	public char[]  getDt1ReqFlnString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqFlnString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqFlnIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqFlnIsNumeric();
	}

	/**
	 * 	Update Dt1ReqFln with the passed value
	 *	@param number
	 */
	public void setDt1ReqFln(long number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFln(number);
	}
	

	
	/**
	 * 	Update Dt1ReqFln with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqFln(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFln(value);
	}
	
	/**
	 * 	Update Dt1ReqFln with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqFlnString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFln(value);
	}	

	/**
	 *	Returns the value of dt1ReqFilmOffice
	 *	@return dt1ReqFilmOffice
	 */
	public int getDt1ReqFilmOffice() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqFilmOffice();
	}


	/**
	 *	Returns String value of dt1ReqFilmOffice
	 *	@return dt1ReqFilmOffice
	 */
	public char[]  getDt1ReqFilmOfficeString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqFilmOfficeString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqFilmOfficeIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqFilmOfficeIsNumeric();
	}

	/**
	 * 	Update Dt1ReqFilmOffice with the passed value
	 *	@param number
	 */
	public void setDt1ReqFilmOffice(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFilmOffice(number);
	}
	

	public void setDt1ReqFilmOffice(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqFilmOffice(number);
	}
	
	
	/**
	 * 	Update Dt1ReqFilmOffice with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqFilmOffice(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFilmOffice(value);
	}
	
	/**
	 * 	Update Dt1ReqFilmOffice with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqFilmOfficeString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFilmOffice(value);
	}	

	/**
	 *	Returns the value of dt1ReqRevFrom
	 *	@return dt1ReqRevFrom
	 */
   public char[] getDt1ReqRevFrom() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqRevFrom();
   }

  
	/**
	*  set variable dt1ReqRevFrom
	*  @param value
	**/
   public void setDt1ReqRevFrom(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevFrom(value);
   } 

     /**
	 * 	Update Dt1ReqRevFrom 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqRevFrom(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevFrom(source, sourceIndex);
   	
   }
   
   public void setDt1ReqRevFrom(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevFrom(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqRevFrom 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqRevFrom(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqRevFrom with another Field
	 *	@param value
	 */
   public void setDt1ReqRevFrom(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevFrom(source);
   }  
   
     /**
	 * 	Update Dt1ReqRevFrom 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqRevFrom(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevFrom(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqRevFrom 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqRevFrom(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqProvSpclCd
	 *	@return dt1ReqProvSpclCd
	 */
   public char[] getDt1ReqProvSpclCd() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqProvSpclCd();
   }

  
	/**
	*  set variable dt1ReqProvSpclCd
	*  @param value
	**/
   public void setDt1ReqProvSpclCd(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqProvSpclCd(value);
   } 

     /**
	 * 	Update Dt1ReqProvSpclCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqProvSpclCd(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqProvSpclCd(source, sourceIndex);
   	
   }
   
   public void setDt1ReqProvSpclCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqProvSpclCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqProvSpclCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqProvSpclCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqProvSpclCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqProvSpclCd with another Field
	 *	@param value
	 */
   public void setDt1ReqProvSpclCd(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqProvSpclCd(source);
   }  
   
     /**
	 * 	Update Dt1ReqProvSpclCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqProvSpclCd(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqProvSpclCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqProvSpclCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqProvSpclCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqProvSpclCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqCptFrom
	 *	@return dt1ReqCptFrom
	 */
   public char[] getDt1ReqCptFrom() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqCptFrom();
   }

  
	/**
	*  set variable dt1ReqCptFrom
	*  @param value
	**/
   public void setDt1ReqCptFrom(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptFrom(value);
   } 

     /**
	 * 	Update Dt1ReqCptFrom 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqCptFrom(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptFrom(source, sourceIndex);
   	
   }
   
   public void setDt1ReqCptFrom(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptFrom(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqCptFrom 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqCptFrom(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqCptFrom with another Field
	 *	@param value
	 */
   public void setDt1ReqCptFrom(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptFrom(source);
   }  
   
     /**
	 * 	Update Dt1ReqCptFrom 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqCptFrom(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptFrom(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqCptFrom 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqCptFrom(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqProviderTin
	 *	@return dt1ReqProviderTin
	 */
	public long getDt1ReqProviderTin() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqProviderTin();
	}


	/**
	 *	Returns String value of dt1ReqProviderTin
	 *	@return dt1ReqProviderTin
	 */
	public char[]  getDt1ReqProviderTinString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqProviderTinString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqProviderTinIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqProviderTinIsNumeric();
	}

	/**
	 * 	Update Dt1ReqProviderTin with the passed value
	 *	@param number
	 */
	public void setDt1ReqProviderTin(long number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqProviderTin(number);
	}
	

	
	/**
	 * 	Update Dt1ReqProviderTin with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqProviderTin(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqProviderTin(value);
	}
	
	/**
	 * 	Update Dt1ReqProviderTin with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqProviderTinString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqProviderTin(value);
	}	

	/**
	 *	Returns the value of dt1ReqLastServiceDate
	 *	@return dt1ReqLastServiceDate
	 */
	public long getDt1ReqLastServiceDate() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqLastServiceDate();
	}


	/**
	 *	Returns String value of dt1ReqLastServiceDate
	 *	@return dt1ReqLastServiceDate
	 */
	public char[]  getDt1ReqLastServiceDateString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqLastServiceDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqLastServiceDateIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqLastServiceDateIsNumeric();
	}

	/**
	 * 	Update Dt1ReqLastServiceDate with the passed value
	 *	@param number
	 */
	public void setDt1ReqLastServiceDate(long number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqLastServiceDate(number);
	}
	

	
	/**
	 * 	Update Dt1ReqLastServiceDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqLastServiceDate(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqLastServiceDate(value);
	}
	
	/**
	 * 	Update Dt1ReqLastServiceDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqLastServiceDateString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqLastServiceDate(value);
	}	

	/**
	 *	Returns the value of dt1ReqSpiCategoryCd
	 *	@return dt1ReqSpiCategoryCd
	 */
   public char[] getDt1ReqSpiCategoryCd(int index) throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqSpiCategoryCd(index);
   }

  
	/**
	*  set variable dt1ReqSpiCategoryCd
	*  @param value
	**/
   public void setDt1ReqSpiCategoryCd(int index,char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqSpiCategoryCd((index),value);
   } 

	/**
	 *	Returns the value of dt1ReqIcn
	 *	@return dt1ReqIcn
	 */
   public char[] getDt1ReqIcn() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqIcn();
   }

  
	/**
	*  set variable dt1ReqIcn
	*  @param value
	**/
   public void setDt1ReqIcn(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(value);
   } 

     /**
	 * 	Update Dt1ReqIcn 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqIcn(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex);
   	
   }
   
   public void setDt1ReqIcn(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqIcn 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqIcn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqIcn with another Field
	 *	@param value
	 */
   public void setDt1ReqIcn(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source);
   }  
   
     /**
	 * 	Update Dt1ReqIcn 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqIcn(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqIcn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqIcn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqServiceCategory
	 *	@return dt1ReqServiceCategory
	 */
   public char[] getDt1ReqServiceCategory() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqServiceCategory();
   }

  
	/**
	*  set variable dt1ReqServiceCategory
	*  @param value
	**/
   public void setDt1ReqServiceCategory(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqServiceCategory(value);
   } 

     /**
	 * 	Update Dt1ReqServiceCategory 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqServiceCategory(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqServiceCategory(source, sourceIndex);
   	
   }
   
   public void setDt1ReqServiceCategory(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqServiceCategory(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqServiceCategory 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqServiceCategory(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqServiceCategory(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqServiceCategory with another Field
	 *	@param value
	 */
   public void setDt1ReqServiceCategory(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqServiceCategory(source);
   }  
   
     /**
	 * 	Update Dt1ReqServiceCategory 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqServiceCategory(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqServiceCategory(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqServiceCategory 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqServiceCategory(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqServiceCategory(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqAppliedToOopInd
	 *	@return dt1ReqAppliedToOopInd
	 */
   public char[] getDt1ReqAppliedToOopInd() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqAppliedToOopInd();
   }

  
	/**
	*  set variable dt1ReqAppliedToOopInd
	*  @param value
	**/
   public void setDt1ReqAppliedToOopInd(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAppliedToOopInd(value);
   } 

     /**
	 * 	Update Dt1ReqAppliedToOopInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqAppliedToOopInd(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAppliedToOopInd(source, sourceIndex);
   	
   }
   
   public void setDt1ReqAppliedToOopInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAppliedToOopInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqAppliedToOopInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqAppliedToOopInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAppliedToOopInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqAppliedToOopInd with another Field
	 *	@param value
	 */
   public void setDt1ReqAppliedToOopInd(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAppliedToOopInd(source);
   }  
   
     /**
	 * 	Update Dt1ReqAppliedToOopInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqAppliedToOopInd(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAppliedToOopInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqAppliedToOopInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqAppliedToOopInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAppliedToOopInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public InitHostVariablesSectOutCtx getInitHostVariablesSectOutCtx() {
            return new InitHostVariablesSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public InitHostVariablesSectInCtx clone() {
        InitHostVariablesSectInCtx cloneObj = new InitHostVariablesSectInCtx();
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public InitHostVariablesSectInCtx getInitHostVariablesSectInCtx() {
            return new InitHostVariablesSectInCtx();
    }
     public class InitHostVariablesSectOutCtx implements Cloneable {
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Test condition "R" for isQueryFilterAllRev()
	 *	@return  Returns true if isQueryFilterAllRev() is "R"
	 */
   public boolean isQueryFilterAllRev() throws CFException {
      return work.isQueryFilterAllRev();
   }

	/**
	*  set values "R"
	*/
   	public void setQueryFilterAllRevTrue()  throws CFException{  			
    	work.setQueryFilterAllRevTrue();
   	}
	/**
	 *	Returns the value of hvAuthNbr
	 *	@return hvAuthNbr
	 */
   public char[] getHvAuthNbr() throws CFException  {              
   		return hostVariables.getHvAuthNbrGroup().getHvAuthNbr();
   }

  
	/**
	*  set variable hvAuthNbr
	*  @param value
	**/
   public void setHvAuthNbr(char[] value) throws CFException {
      hostVariables.getHvAuthNbrGroup().setHvAuthNbr(value);
   } 

     /**
	 * 	Update HvAuthNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvAuthNbr(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvAuthNbrGroup().setHvAuthNbr(source, sourceIndex);
   	
   }
   
   public void setHvAuthNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvAuthNbrGroup().setHvAuthNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvAuthNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvAuthNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvAuthNbrGroup().setHvAuthNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvAuthNbr with another Field
	 *	@param value
	 */
   public void setHvAuthNbr(Field source) {
      hostVariables.getHvAuthNbrGroup().setHvAuthNbr(source);
   }  
   
     /**
	 * 	Update HvAuthNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvAuthNbr(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvAuthNbrGroup().setHvAuthNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvAuthNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvAuthNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvAuthNbrGroup().setHvAuthNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqCauseCd
	 *	@return dt1ReqCauseCd
	 */
   public char[] getDt1ReqCauseCd() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqCauseCd();
   }

  
	/**
	*  set variable dt1ReqCauseCd
	*  @param value
	**/
   public void setDt1ReqCauseCd(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCauseCd(value);
   } 

     /**
	 * 	Update Dt1ReqCauseCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqCauseCd(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCauseCd(source, sourceIndex);
   	
   }
   
   public void setDt1ReqCauseCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCauseCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqCauseCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqCauseCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqCauseCd with another Field
	 *	@param value
	 */
   public void setDt1ReqCauseCd(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCauseCd(source);
   }  
   
     /**
	 * 	Update Dt1ReqCauseCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqCauseCd(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCauseCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqCauseCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqCauseCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCauseCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFstDt
	 *	@return hvFstDt
	 */
   public char[] getHvFstDt() throws CFException  {              
   		return hostVariables.getHvFstDtGroup().getHvFstDt();
   }

  
	/**
	*  set variable hvFstDt
	*  @param value
	**/
   public void setHvFstDt(char[] value) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(value);
   } 

     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex);
   	
   }
   
   public void setHvFstDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFstDt with another Field
	 *	@param value
	 */
   public void setHvFstDt(Field source) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source);
   }  
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqProvSpclCd
	 *	@return dt1ReqProvSpclCd
	 */
   public char[] getDt1ReqProvSpclCd() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqProvSpclCd();
   }

  
	/**
	*  set variable dt1ReqProvSpclCd
	*  @param value
	**/
   public void setDt1ReqProvSpclCd(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqProvSpclCd(value);
   } 

     /**
	 * 	Update Dt1ReqProvSpclCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqProvSpclCd(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqProvSpclCd(source, sourceIndex);
   	
   }
   
   public void setDt1ReqProvSpclCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqProvSpclCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqProvSpclCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqProvSpclCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqProvSpclCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqProvSpclCd with another Field
	 *	@param value
	 */
   public void setDt1ReqProvSpclCd(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqProvSpclCd(source);
   }  
   
     /**
	 * 	Update Dt1ReqProvSpclCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqProvSpclCd(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqProvSpclCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqProvSpclCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqProvSpclCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqProvSpclCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFlnSrlNbr
	 *	@return hvFlnSrlNbr
	 */
   public char[] getHvFlnSrlNbr() throws CFException  {              
   		return hostVariables.getHvFlnSrlNbrGroup().getHvFlnSrlNbr();
   }

  
	/**
	*  set variable hvFlnSrlNbr
	*  @param value
	**/
   public void setHvFlnSrlNbr(char[] value) throws CFException {
      hostVariables.getHvFlnSrlNbrGroup().setHvFlnSrlNbr(value);
   } 

     /**
	 * 	Update HvFlnSrlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFlnSrlNbr(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFlnSrlNbrGroup().setHvFlnSrlNbr(source, sourceIndex);
   	
   }
   
   public void setHvFlnSrlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFlnSrlNbrGroup().setHvFlnSrlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFlnSrlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFlnSrlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFlnSrlNbrGroup().setHvFlnSrlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFlnSrlNbr with another Field
	 *	@param value
	 */
   public void setHvFlnSrlNbr(Field source) {
      hostVariables.getHvFlnSrlNbrGroup().setHvFlnSrlNbr(source);
   }  
   
     /**
	 * 	Update HvFlnSrlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFlnSrlNbr(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFlnSrlNbrGroup().setHvFlnSrlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFlnSrlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFlnSrlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFlnSrlNbrGroup().setHvFlnSrlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvProvTinsuff1
	 *	@return hvProvTinsuff1
	 */
   public char[] getHvProvTinsuff1() throws CFException  {              
   		return hostVariables.getHvProvTinsuff1();
   }

  
	/**
	*  set variable hvProvTinsuff1
	*  @param value
	**/
   public void setHvProvTinsuff1(char[] value) throws CFException {
      hostVariables.setHvProvTinsuff1(value);
   } 

     /**
	 * 	Update HvProvTinsuff1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTinsuff1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvProvTinsuff1(source, sourceIndex);
   	
   }
   
   public void setHvProvTinsuff1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvProvTinsuff1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTinsuff1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTinsuff1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvProvTinsuff1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTinsuff1 with another Field
	 *	@param value
	 */
   public void setHvProvTinsuff1(Field source) {
      hostVariables.setHvProvTinsuff1(source);
   }  
   
     /**
	 * 	Update HvProvTinsuff1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTinsuff1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvProvTinsuff1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTinsuff1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTinsuff1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvProvTinsuff1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvLstSrvcDt
	 *	@return hvLstSrvcDt
	 */
   public char[] getHvLstSrvcDt() throws CFException  {              
   		return hostVariables.getHvLstSrvcDtGroup().getHvLstSrvcDt();
   }

  
	/**
	*  set variable hvLstSrvcDt
	*  @param value
	**/
   public void setHvLstSrvcDt(char[] value) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(value);
   } 

     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex);
   	
   }
   
   public void setHvLstSrvcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvLstSrvcDt with another Field
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source);
   }  
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqSpiCategoryCd
	 *	@return dt1ReqSpiCategoryCd
	 */
   public char[] getDt1ReqSpiCategoryCd(int index) throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqSpiCategoryCd(index);
   }

  
	/**
	*  set variable dt1ReqSpiCategoryCd
	*  @param value
	**/
   public void setDt1ReqSpiCategoryCd(int index,char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqSpiCategoryCd((index),value);
   } 

	/**
	 *	Returns the value of hvFilmOfcNbr
	 *	@return hvFilmOfcNbr
	 */
   public char[] getHvFilmOfcNbr() throws CFException  {              
   		return hostVariables.getHvFilmOfcNbrGroup().getHvFilmOfcNbr();
   }

  
	/**
	*  set variable hvFilmOfcNbr
	*  @param value
	**/
   public void setHvFilmOfcNbr(char[] value) throws CFException {
      hostVariables.getHvFilmOfcNbrGroup().setHvFilmOfcNbr(value);
   } 

     /**
	 * 	Update HvFilmOfcNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFilmOfcNbr(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFilmOfcNbrGroup().setHvFilmOfcNbr(source, sourceIndex);
   	
   }
   
   public void setHvFilmOfcNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFilmOfcNbrGroup().setHvFilmOfcNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFilmOfcNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFilmOfcNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFilmOfcNbrGroup().setHvFilmOfcNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFilmOfcNbr with another Field
	 *	@param value
	 */
   public void setHvFilmOfcNbr(Field source) {
      hostVariables.getHvFilmOfcNbrGroup().setHvFilmOfcNbr(source);
   }  
   
     /**
	 * 	Update HvFilmOfcNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFilmOfcNbr(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFilmOfcNbrGroup().setHvFilmOfcNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFilmOfcNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFilmOfcNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFilmOfcNbrGroup().setHvFilmOfcNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvSpiCtgyCd2
	 *	@return hvSpiCtgyCd2
	 */
   public char[] getHvSpiCtgyCd2() throws CFException  {              
   		return hostVariables.getHvSpiCtgyCd2Group().getHvSpiCtgyCd2();
   }

  
	/**
	*  set variable hvSpiCtgyCd2
	*  @param value
	**/
   public void setHvSpiCtgyCd2(char[] value) throws CFException {
      hostVariables.getHvSpiCtgyCd2Group().setHvSpiCtgyCd2(value);
   } 

     /**
	 * 	Update HvSpiCtgyCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvSpiCtgyCd2Group().setHvSpiCtgyCd2(source, sourceIndex);
   	
   }
   
   public void setHvSpiCtgyCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvSpiCtgyCd2Group().setHvSpiCtgyCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd2Group().setHvSpiCtgyCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSpiCtgyCd2 with another Field
	 *	@param value
	 */
   public void setHvSpiCtgyCd2(Field source) {
      hostVariables.getHvSpiCtgyCd2Group().setHvSpiCtgyCd2(source);
   }  
   
     /**
	 * 	Update HvSpiCtgyCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvSpiCtgyCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvSpiCtgyCd2Group().setHvSpiCtgyCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvSpiCtgyCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd2Group().setHvSpiCtgyCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqAppliedToOopInd
	 *	@return dt1ReqAppliedToOopInd
	 */
   public char[] getDt1ReqAppliedToOopInd() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqAppliedToOopInd();
   }

  
	/**
	*  set variable dt1ReqAppliedToOopInd
	*  @param value
	**/
   public void setDt1ReqAppliedToOopInd(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAppliedToOopInd(value);
   } 

     /**
	 * 	Update Dt1ReqAppliedToOopInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqAppliedToOopInd(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAppliedToOopInd(source, sourceIndex);
   	
   }
   
   public void setDt1ReqAppliedToOopInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAppliedToOopInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqAppliedToOopInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqAppliedToOopInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAppliedToOopInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqAppliedToOopInd with another Field
	 *	@param value
	 */
   public void setDt1ReqAppliedToOopInd(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAppliedToOopInd(source);
   }  
   
     /**
	 * 	Update Dt1ReqAppliedToOopInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqAppliedToOopInd(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAppliedToOopInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqAppliedToOopInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqAppliedToOopInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAppliedToOopInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvRemarkCd2
	 *	@return hvRemarkCd2
	 */
   public char[] getHvRemarkCd2() throws CFException  {              
   		return hostVariables.getHvRemarkCd2();
   }

  
	/**
	*  set variable hvRemarkCd2
	*  @param value
	**/
   public void setHvRemarkCd2(char[] value) throws CFException {
      hostVariables.setHvRemarkCd2(value);
   } 

     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd2(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd2 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source) {
      hostVariables.setHvRemarkCd2(source);
   }  
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqAuthNbr
	 *	@return dt1ReqAuthNbr
	 */
   public char[] getDt1ReqAuthNbr() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqAuthNbr();
   }

  
	/**
	*  set variable dt1ReqAuthNbr
	*  @param value
	**/
   public void setDt1ReqAuthNbr(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAuthNbr(value);
   } 

     /**
	 * 	Update Dt1ReqAuthNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqAuthNbr(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAuthNbr(source, sourceIndex);
   	
   }
   
   public void setDt1ReqAuthNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAuthNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqAuthNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqAuthNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAuthNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqAuthNbr with another Field
	 *	@param value
	 */
   public void setDt1ReqAuthNbr(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAuthNbr(source);
   }  
   
     /**
	 * 	Update Dt1ReqAuthNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqAuthNbr(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAuthNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqAuthNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqAuthNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqAuthNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqFirstServiceDate
	 *	@return dt1ReqFirstServiceDate
	 */
	public long getDt1ReqFirstServiceDate() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqFirstServiceDate();
	}


	/**
	 *	Returns String value of dt1ReqFirstServiceDate
	 *	@return dt1ReqFirstServiceDate
	 */
	public char[]  getDt1ReqFirstServiceDateString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqFirstServiceDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqFirstServiceDateIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqFirstServiceDateIsNumeric();
	}

	/**
	 * 	Update Dt1ReqFirstServiceDate with the passed value
	 *	@param number
	 */
	public void setDt1ReqFirstServiceDate(long number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFirstServiceDate(number);
	}
	

	
	/**
	 * 	Update Dt1ReqFirstServiceDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqFirstServiceDate(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFirstServiceDate(value);
	}
	
	/**
	 * 	Update Dt1ReqFirstServiceDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqFirstServiceDateString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFirstServiceDate(value);
	}	

	/**
	 *	Returns the value of dt1ReqRevThru
	 *	@return dt1ReqRevThru
	 */
   public char[] getDt1ReqRevThru() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqRevThru();
   }

  
	/**
	*  set variable dt1ReqRevThru
	*  @param value
	**/
   public void setDt1ReqRevThru(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevThru(value);
   } 

     /**
	 * 	Update Dt1ReqRevThru 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqRevThru(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevThru(source, sourceIndex);
   	
   }
   
   public void setDt1ReqRevThru(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevThru(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqRevThru 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqRevThru(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqRevThru with another Field
	 *	@param value
	 */
   public void setDt1ReqRevThru(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevThru(source);
   }  
   
     /**
	 * 	Update Dt1ReqRevThru 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqRevThru(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevThru(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqRevThru 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqRevThru(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqFln
	 *	@return dt1ReqFln
	 */
	public long getDt1ReqFln() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqFln();
	}


	/**
	 *	Returns String value of dt1ReqFln
	 *	@return dt1ReqFln
	 */
	public char[]  getDt1ReqFlnString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqFlnString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqFlnIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqFlnIsNumeric();
	}

	/**
	 * 	Update Dt1ReqFln with the passed value
	 *	@param number
	 */
	public void setDt1ReqFln(long number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFln(number);
	}
	

	
	/**
	 * 	Update Dt1ReqFln with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqFln(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFln(value);
	}
	
	/**
	 * 	Update Dt1ReqFln with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqFlnString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFln(value);
	}	

	/**
	 *	Returns the value of hvSpiCtgyCd5
	 *	@return hvSpiCtgyCd5
	 */
   public char[] getHvSpiCtgyCd5() throws CFException  {              
   		return hostVariables.getHvSpiCtgyCd5Group().getHvSpiCtgyCd5();
   }

  
	/**
	*  set variable hvSpiCtgyCd5
	*  @param value
	**/
   public void setHvSpiCtgyCd5(char[] value) throws CFException {
      hostVariables.getHvSpiCtgyCd5Group().setHvSpiCtgyCd5(value);
   } 

     /**
	 * 	Update HvSpiCtgyCd5 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd5(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvSpiCtgyCd5Group().setHvSpiCtgyCd5(source, sourceIndex);
   	
   }
   
   public void setHvSpiCtgyCd5(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvSpiCtgyCd5Group().setHvSpiCtgyCd5(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd5 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd5(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd5Group().setHvSpiCtgyCd5(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSpiCtgyCd5 with another Field
	 *	@param value
	 */
   public void setHvSpiCtgyCd5(Field source) {
      hostVariables.getHvSpiCtgyCd5Group().setHvSpiCtgyCd5(source);
   }  
   
     /**
	 * 	Update HvSpiCtgyCd5 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvSpiCtgyCd5(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvSpiCtgyCd5Group().setHvSpiCtgyCd5(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvSpiCtgyCd5 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd5(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd5Group().setHvSpiCtgyCd5(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvCptFrom
	 *	@return hvCptFrom
	 */
   public char[] getHvCptFrom() throws CFException  {              
   		return hostVariables.getHvCptFrom();
   }

  
	/**
	*  set variable hvCptFrom
	*  @param value
	**/
   public void setHvCptFrom(char[] value) throws CFException {
      hostVariables.setHvCptFrom(value);
   } 

     /**
	 * 	Update HvCptFrom 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCptFrom(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCptFrom(source, sourceIndex);
   	
   }
   
   public void setHvCptFrom(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCptFrom 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCptFrom(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCptFrom with another Field
	 *	@param value
	 */
   public void setHvCptFrom(Field source) {
      hostVariables.setHvCptFrom(source);
   }  
   
     /**
	 * 	Update HvCptFrom 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCptFrom(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCptFrom 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCptFrom(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqFilmOffice
	 *	@return dt1ReqFilmOffice
	 */
	public int getDt1ReqFilmOffice() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqFilmOffice();
	}


	/**
	 *	Returns String value of dt1ReqFilmOffice
	 *	@return dt1ReqFilmOffice
	 */
	public char[]  getDt1ReqFilmOfficeString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqFilmOfficeString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqFilmOfficeIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqFilmOfficeIsNumeric();
	}

	/**
	 * 	Update Dt1ReqFilmOffice with the passed value
	 *	@param number
	 */
	public void setDt1ReqFilmOffice(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFilmOffice(number);
	}
	

	public void setDt1ReqFilmOffice(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqFilmOffice(number);
	}
	
	
	/**
	 * 	Update Dt1ReqFilmOffice with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqFilmOffice(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFilmOffice(value);
	}
	
	/**
	 * 	Update Dt1ReqFilmOffice with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqFilmOfficeString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqFilmOffice(value);
	}	

	/**
	 *	Test condition "N" for isQueryFilterNo()
	 *	@return  Returns true if isQueryFilterNo() is "N"
	 */
   public boolean isQueryFilterNo() throws CFException {
      return work.isQueryFilterNo();
   }

	/**
	*  set values "N"
	*/
   	public void setQueryFilterNoTrue()  throws CFException{  			
    	work.setQueryFilterNoTrue();
   	}
	/**
	 *	Returns the value of dt1ReqRevFrom
	 *	@return dt1ReqRevFrom
	 */
   public char[] getDt1ReqRevFrom() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqRevFrom();
   }

  
	/**
	*  set variable dt1ReqRevFrom
	*  @param value
	**/
   public void setDt1ReqRevFrom(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevFrom(value);
   } 

     /**
	 * 	Update Dt1ReqRevFrom 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqRevFrom(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevFrom(source, sourceIndex);
   	
   }
   
   public void setDt1ReqRevFrom(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevFrom(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqRevFrom 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqRevFrom(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqRevFrom with another Field
	 *	@param value
	 */
   public void setDt1ReqRevFrom(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevFrom(source);
   }  
   
     /**
	 * 	Update Dt1ReqRevFrom 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqRevFrom(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevFrom(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqRevFrom 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqRevFrom(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRevFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvAppliedToOopInd
	 *	@return hvAppliedToOopInd
	 */
   public char[] getHvAppliedToOopInd() throws CFException  {              
   		return hostVariables.getHvAppliedToOopInd();
   }

  
	/**
	*  set variable hvAppliedToOopInd
	*  @param value
	**/
   public void setHvAppliedToOopInd(char[] value) throws CFException {
      hostVariables.setHvAppliedToOopInd(value);
   } 

     /**
	 * 	Update HvAppliedToOopInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvAppliedToOopInd(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvAppliedToOopInd(source, sourceIndex);
   	
   }
   
   public void setHvAppliedToOopInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvAppliedToOopInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvAppliedToOopInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvAppliedToOopInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvAppliedToOopInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvAppliedToOopInd with another Field
	 *	@param value
	 */
   public void setHvAppliedToOopInd(Field source) {
      hostVariables.setHvAppliedToOopInd(source);
   }  
   
     /**
	 * 	Update HvAppliedToOopInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvAppliedToOopInd(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvAppliedToOopInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvAppliedToOopInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvAppliedToOopInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvAppliedToOopInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "S" for isQueryFilterSrvcDtOnly()
	 *	@return  Returns true if isQueryFilterSrvcDtOnly() is "S"
	 */
   public boolean isQueryFilterSrvcDtOnly() throws CFException {
      return work.isQueryFilterSrvcDtOnly();
   }

	/**
	*  set values "S"
	*/
   	public void setQueryFilterSrvcDtOnlyTrue()  throws CFException{  			
    	work.setQueryFilterSrvcDtOnlyTrue();
   	}
	/**
	 *	Returns the value of dt1ReqCptFrom
	 *	@return dt1ReqCptFrom
	 */
   public char[] getDt1ReqCptFrom() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqCptFrom();
   }

  
	/**
	*  set variable dt1ReqCptFrom
	*  @param value
	**/
   public void setDt1ReqCptFrom(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptFrom(value);
   } 

     /**
	 * 	Update Dt1ReqCptFrom 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqCptFrom(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptFrom(source, sourceIndex);
   	
   }
   
   public void setDt1ReqCptFrom(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptFrom(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqCptFrom 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqCptFrom(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqCptFrom with another Field
	 *	@param value
	 */
   public void setDt1ReqCptFrom(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptFrom(source);
   }  
   
     /**
	 * 	Update Dt1ReqCptFrom 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqCptFrom(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptFrom(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqCptFrom 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqCptFrom(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqProviderTin
	 *	@return dt1ReqProviderTin
	 */
	public long getDt1ReqProviderTin() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqProviderTin();
	}


	/**
	 *	Returns String value of dt1ReqProviderTin
	 *	@return dt1ReqProviderTin
	 */
	public char[]  getDt1ReqProviderTinString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqProviderTinString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqProviderTinIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqProviderTinIsNumeric();
	}

	/**
	 * 	Update Dt1ReqProviderTin with the passed value
	 *	@param number
	 */
	public void setDt1ReqProviderTin(long number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqProviderTin(number);
	}
	

	
	/**
	 * 	Update Dt1ReqProviderTin with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqProviderTin(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqProviderTin(value);
	}
	
	/**
	 * 	Update Dt1ReqProviderTin with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqProviderTinString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqProviderTin(value);
	}	

	/**
	 *	Returns the value of dt1ReqLastServiceDate
	 *	@return dt1ReqLastServiceDate
	 */
	public long getDt1ReqLastServiceDate() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqLastServiceDate();
	}


	/**
	 *	Returns String value of dt1ReqLastServiceDate
	 *	@return dt1ReqLastServiceDate
	 */
	public char[]  getDt1ReqLastServiceDateString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqLastServiceDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqLastServiceDateIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqLastServiceDateIsNumeric();
	}

	/**
	 * 	Update Dt1ReqLastServiceDate with the passed value
	 *	@param number
	 */
	public void setDt1ReqLastServiceDate(long number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqLastServiceDate(number);
	}
	

	
	/**
	 * 	Update Dt1ReqLastServiceDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqLastServiceDate(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqLastServiceDate(value);
	}
	
	/**
	 * 	Update Dt1ReqLastServiceDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqLastServiceDateString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqLastServiceDate(value);
	}	

	/**
	 *	Returns the value of dt1ReqIcn
	 *	@return dt1ReqIcn
	 */
   public char[] getDt1ReqIcn() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqIcn();
   }

  
	/**
	*  set variable dt1ReqIcn
	*  @param value
	**/
   public void setDt1ReqIcn(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(value);
   } 

     /**
	 * 	Update Dt1ReqIcn 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqIcn(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex);
   	
   }
   
   public void setDt1ReqIcn(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqIcn 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqIcn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqIcn with another Field
	 *	@param value
	 */
   public void setDt1ReqIcn(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source);
   }  
   
     /**
	 * 	Update Dt1ReqIcn 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqIcn(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqIcn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqIcn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvSpiCtgyCd4
	 *	@return hvSpiCtgyCd4
	 */
   public char[] getHvSpiCtgyCd4() throws CFException  {              
   		return hostVariables.getHvSpiCtgyCd4Group().getHvSpiCtgyCd4();
   }

  
	/**
	*  set variable hvSpiCtgyCd4
	*  @param value
	**/
   public void setHvSpiCtgyCd4(char[] value) throws CFException {
      hostVariables.getHvSpiCtgyCd4Group().setHvSpiCtgyCd4(value);
   } 

     /**
	 * 	Update HvSpiCtgyCd4 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd4(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvSpiCtgyCd4Group().setHvSpiCtgyCd4(source, sourceIndex);
   	
   }
   
   public void setHvSpiCtgyCd4(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvSpiCtgyCd4Group().setHvSpiCtgyCd4(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd4 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd4(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd4Group().setHvSpiCtgyCd4(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSpiCtgyCd4 with another Field
	 *	@param value
	 */
   public void setHvSpiCtgyCd4(Field source) {
      hostVariables.getHvSpiCtgyCd4Group().setHvSpiCtgyCd4(source);
   }  
   
     /**
	 * 	Update HvSpiCtgyCd4 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvSpiCtgyCd4(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvSpiCtgyCd4Group().setHvSpiCtgyCd4(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvSpiCtgyCd4 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd4(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd4Group().setHvSpiCtgyCd4(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvRemarkCd1
	 *	@return hvRemarkCd1
	 */
   public char[] getHvRemarkCd1() throws CFException  {              
   		return hostVariables.getHvRemarkCd1();
   }

  
	/**
	*  set variable hvRemarkCd1
	*  @param value
	**/
   public void setHvRemarkCd1(char[] value) throws CFException {
      hostVariables.setHvRemarkCd1(value);
   } 

     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd1(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd1 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source) {
      hostVariables.setHvRemarkCd1(source);
   }  
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "P" for isQueryFilterSrvcDtProv()
	 *	@return  Returns true if isQueryFilterSrvcDtProv() is "P"
	 */
   public boolean isQueryFilterSrvcDtProv() throws CFException {
      return work.isQueryFilterSrvcDtProv();
   }

	/**
	*  set values "P"
	*/
   	public void setQueryFilterSrvcDtProvTrue()  throws CFException{  			
    	work.setQueryFilterSrvcDtProvTrue();
   	}
	/**
	 *	Test condition "C" for isQueryFilterAllCpt()
	 *	@return  Returns true if isQueryFilterAllCpt() is "C"
	 */
   public boolean isQueryFilterAllCpt() throws CFException {
      return work.isQueryFilterAllCpt();
   }

	/**
	*  set values "C"
	*/
   	public void setQueryFilterAllCptTrue()  throws CFException{  			
    	work.setQueryFilterAllCptTrue();
   	}
	/**
	 *	Returns the value of hvProvSpclCd2
	 *	@return hvProvSpclCd2
	 */
   public char[] getHvProvSpclCd2() throws CFException  {              
   		return hostVariables.getHvProvSpclCd2();
   }

  
	/**
	*  set variable hvProvSpclCd2
	*  @param value
	**/
   public void setHvProvSpclCd2(char[] value) throws CFException {
      hostVariables.setHvProvSpclCd2(value);
   } 

     /**
	 * 	Update HvProvSpclCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvSpclCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvProvSpclCd2(source, sourceIndex);
   	
   }
   
   public void setHvProvSpclCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvProvSpclCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvSpclCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvSpclCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvProvSpclCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvSpclCd2 with another Field
	 *	@param value
	 */
   public void setHvProvSpclCd2(Field source) {
      hostVariables.setHvProvSpclCd2(source);
   }  
   
     /**
	 * 	Update HvProvSpclCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvSpclCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvProvSpclCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvSpclCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvSpclCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvProvSpclCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvRevFrom
	 *	@return hvRevFrom
	 */
   public char[] getHvRevFrom() throws CFException  {              
   		return hostVariables.getHvRevFrom();
   }

  
	/**
	*  set variable hvRevFrom
	*  @param value
	**/
   public void setHvRevFrom(char[] value) throws CFException {
      hostVariables.setHvRevFrom(value);
   } 

     /**
	 * 	Update HvRevFrom 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRevFrom(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRevFrom(source, sourceIndex);
   	
   }
   
   public void setHvRevFrom(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRevFrom 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRevFrom(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRevFrom with another Field
	 *	@param value
	 */
   public void setHvRevFrom(Field source) {
      hostVariables.setHvRevFrom(source);
   }  
   
     /**
	 * 	Update HvRevFrom 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRevFrom(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRevFrom 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRevFrom(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvCauseCd1
	 *	@return hvCauseCd1
	 */
   public char[] getHvCauseCd1() throws CFException  {              
   		return hostVariables.getHvCauseCd1();
   }

  
	/**
	*  set variable hvCauseCd1
	*  @param value
	**/
   public void setHvCauseCd1(char[] value) throws CFException {
      hostVariables.setHvCauseCd1(value);
   } 

     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd1(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd1 with another Field
	 *	@param value
	 */
   public void setHvCauseCd1(Field source) {
      hostVariables.setHvCauseCd1(source);
   }  
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvCptThru
	 *	@return hvCptThru
	 */
   public char[] getHvCptThru() throws CFException  {              
   		return hostVariables.getHvCptThru();
   }

  
	/**
	*  set variable hvCptThru
	*  @param value
	**/
   public void setHvCptThru(char[] value) throws CFException {
      hostVariables.setHvCptThru(value);
   } 

     /**
	 * 	Update HvCptThru 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCptThru(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCptThru(source, sourceIndex);
   	
   }
   
   public void setHvCptThru(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCptThru 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCptThru(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCptThru with another Field
	 *	@param value
	 */
   public void setHvCptThru(Field source) {
      hostVariables.setHvCptThru(source);
   }  
   
     /**
	 * 	Update HvCptThru 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCptThru(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCptThru 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCptThru(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "T" for isQueryFilterAllRevOop()
	 *	@return  Returns true if isQueryFilterAllRevOop() is "T"
	 */
   public boolean isQueryFilterAllRevOop() throws CFException {
      return work.isQueryFilterAllRevOop();
   }

	/**
	*  set values "T"
	*/
   	public void setQueryFilterAllRevOopTrue()  throws CFException{  			
    	work.setQueryFilterAllRevOopTrue();
   	}
	/**
	 *	Test condition "O" for isQueryFilterAllCptOop()
	 *	@return  Returns true if isQueryFilterAllCptOop() is "O"
	 */
   public boolean isQueryFilterAllCptOop() throws CFException {
      return work.isQueryFilterAllCptOop();
   }

	/**
	*  set values "O"
	*/
   	public void setQueryFilterAllCptOopTrue()  throws CFException{  			
    	work.setQueryFilterAllCptOopTrue();
   	}
	/**
	 *	Returns the value of hvSpiCtgyCd3
	 *	@return hvSpiCtgyCd3
	 */
   public char[] getHvSpiCtgyCd3() throws CFException  {              
   		return hostVariables.getHvSpiCtgyCd3Group().getHvSpiCtgyCd3();
   }

  
	/**
	*  set variable hvSpiCtgyCd3
	*  @param value
	**/
   public void setHvSpiCtgyCd3(char[] value) throws CFException {
      hostVariables.getHvSpiCtgyCd3Group().setHvSpiCtgyCd3(value);
   } 

     /**
	 * 	Update HvSpiCtgyCd3 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd3(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvSpiCtgyCd3Group().setHvSpiCtgyCd3(source, sourceIndex);
   	
   }
   
   public void setHvSpiCtgyCd3(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvSpiCtgyCd3Group().setHvSpiCtgyCd3(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd3 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd3(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd3Group().setHvSpiCtgyCd3(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSpiCtgyCd3 with another Field
	 *	@param value
	 */
   public void setHvSpiCtgyCd3(Field source) {
      hostVariables.getHvSpiCtgyCd3Group().setHvSpiCtgyCd3(source);
   }  
   
     /**
	 * 	Update HvSpiCtgyCd3 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvSpiCtgyCd3(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvSpiCtgyCd3Group().setHvSpiCtgyCd3(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvSpiCtgyCd3 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd3(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd3Group().setHvSpiCtgyCd3(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvSrvcCatgyCd
	 *	@return hvSrvcCatgyCd
	 */
   public char[] getHvSrvcCatgyCd() throws CFException  {              
   		return hostVariables.getHvSrvcCatgyCdGroup().getHvSrvcCatgyCd();
   }

  
	/**
	*  set variable hvSrvcCatgyCd
	*  @param value
	**/
   public void setHvSrvcCatgyCd(char[] value) throws CFException {
      hostVariables.getHvSrvcCatgyCdGroup().setHvSrvcCatgyCd(value);
   } 

     /**
	 * 	Update HvSrvcCatgyCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvSrvcCatgyCd(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvSrvcCatgyCdGroup().setHvSrvcCatgyCd(source, sourceIndex);
   	
   }
   
   public void setHvSrvcCatgyCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvSrvcCatgyCdGroup().setHvSrvcCatgyCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSrvcCatgyCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSrvcCatgyCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSrvcCatgyCdGroup().setHvSrvcCatgyCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSrvcCatgyCd with another Field
	 *	@param value
	 */
   public void setHvSrvcCatgyCd(Field source) {
      hostVariables.getHvSrvcCatgyCdGroup().setHvSrvcCatgyCd(source);
   }  
   
     /**
	 * 	Update HvSrvcCatgyCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvSrvcCatgyCd(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvSrvcCatgyCdGroup().setHvSrvcCatgyCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvSrvcCatgyCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSrvcCatgyCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSrvcCatgyCdGroup().setHvSrvcCatgyCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvRevThru
	 *	@return hvRevThru
	 */
   public char[] getHvRevThru() throws CFException  {              
   		return hostVariables.getHvRevThru();
   }

  
	/**
	*  set variable hvRevThru
	*  @param value
	**/
   public void setHvRevThru(char[] value) throws CFException {
      hostVariables.setHvRevThru(value);
   } 

     /**
	 * 	Update HvRevThru 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRevThru(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRevThru(source, sourceIndex);
   	
   }
   
   public void setHvRevThru(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRevThru 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRevThru(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRevThru with another Field
	 *	@param value
	 */
   public void setHvRevThru(Field source) {
      hostVariables.setHvRevThru(source);
   }  
   
     /**
	 * 	Update HvRevThru 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRevThru(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRevThru 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRevThru(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvSpiCtgyCd1
	 *	@return hvSpiCtgyCd1
	 */
   public char[] getHvSpiCtgyCd1() throws CFException  {              
   		return hostVariables.getHvSpiCtgyCd1Group().getHvSpiCtgyCd1();
   }

  
	/**
	*  set variable hvSpiCtgyCd1
	*  @param value
	**/
   public void setHvSpiCtgyCd1(char[] value) throws CFException {
      hostVariables.getHvSpiCtgyCd1Group().setHvSpiCtgyCd1(value);
   } 

     /**
	 * 	Update HvSpiCtgyCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvSpiCtgyCd1Group().setHvSpiCtgyCd1(source, sourceIndex);
   	
   }
   
   public void setHvSpiCtgyCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvSpiCtgyCd1Group().setHvSpiCtgyCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd1Group().setHvSpiCtgyCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSpiCtgyCd1 with another Field
	 *	@param value
	 */
   public void setHvSpiCtgyCd1(Field source) {
      hostVariables.getHvSpiCtgyCd1Group().setHvSpiCtgyCd1(source);
   }  
   
     /**
	 * 	Update HvSpiCtgyCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvSpiCtgyCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvSpiCtgyCd1Group().setHvSpiCtgyCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvSpiCtgyCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd1Group().setHvSpiCtgyCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqRemarkCd
	 *	@return dt1ReqRemarkCd
	 */
   public char[] getDt1ReqRemarkCd() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqRemarkCd();
   }

  
	/**
	*  set variable dt1ReqRemarkCd
	*  @param value
	**/
   public void setDt1ReqRemarkCd(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRemarkCd(value);
   } 

     /**
	 * 	Update Dt1ReqRemarkCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqRemarkCd(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRemarkCd(source, sourceIndex);
   	
   }
   
   public void setDt1ReqRemarkCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRemarkCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqRemarkCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqRemarkCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRemarkCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqRemarkCd with another Field
	 *	@param value
	 */
   public void setDt1ReqRemarkCd(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRemarkCd(source);
   }  
   
     /**
	 * 	Update Dt1ReqRemarkCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqRemarkCd(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRemarkCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqRemarkCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqRemarkCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqRemarkCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvProvSpclCd1
	 *	@return hvProvSpclCd1
	 */
   public char[] getHvProvSpclCd1() throws CFException  {              
   		return hostVariables.getHvProvSpclCd1();
   }

  
	/**
	*  set variable hvProvSpclCd1
	*  @param value
	**/
   public void setHvProvSpclCd1(char[] value) throws CFException {
      hostVariables.setHvProvSpclCd1(value);
   } 

     /**
	 * 	Update HvProvSpclCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvSpclCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvProvSpclCd1(source, sourceIndex);
   	
   }
   
   public void setHvProvSpclCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvProvSpclCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvSpclCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvSpclCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvProvSpclCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvSpclCd1 with another Field
	 *	@param value
	 */
   public void setHvProvSpclCd1(Field source) {
      hostVariables.setHvProvSpclCd1(source);
   }  
   
     /**
	 * 	Update HvProvSpclCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvSpclCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvProvSpclCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvSpclCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvSpclCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvProvSpclCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqCptThru
	 *	@return dt1ReqCptThru
	 */
   public char[] getDt1ReqCptThru() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqCptThru();
   }

  
	/**
	*  set variable dt1ReqCptThru
	*  @param value
	**/
   public void setDt1ReqCptThru(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptThru(value);
   } 

     /**
	 * 	Update Dt1ReqCptThru 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqCptThru(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptThru(source, sourceIndex);
   	
   }
   
   public void setDt1ReqCptThru(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptThru(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqCptThru 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqCptThru(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqCptThru with another Field
	 *	@param value
	 */
   public void setDt1ReqCptThru(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptThru(source);
   }  
   
     /**
	 * 	Update Dt1ReqCptThru 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqCptThru(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptThru(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqCptThru 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqCptThru(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqCptThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isQueryFilterYes()
	 *	@return  Returns true if isQueryFilterYes() is "Y"
	 */
   public boolean isQueryFilterYes() throws CFException {
      return work.isQueryFilterYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setQueryFilterYesTrue()  throws CFException{  			
    	work.setQueryFilterYesTrue();
   	}
	/**
	 *	Returns the value of hvExtrNtfyNbr
	 *	@return hvExtrNtfyNbr
	 */
   public char[] getHvExtrNtfyNbr() throws CFException  {              
   		return hostVariables.getHvExtrNtfyNbrGroup().getHvExtrNtfyNbr();
   }

  
	/**
	*  set variable hvExtrNtfyNbr
	*  @param value
	**/
   public void setHvExtrNtfyNbr(char[] value) throws CFException {
      hostVariables.getHvExtrNtfyNbrGroup().setHvExtrNtfyNbr(value);
   } 

     /**
	 * 	Update HvExtrNtfyNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvExtrNtfyNbr(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvExtrNtfyNbrGroup().setHvExtrNtfyNbr(source, sourceIndex);
   	
   }
   
   public void setHvExtrNtfyNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvExtrNtfyNbrGroup().setHvExtrNtfyNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvExtrNtfyNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvExtrNtfyNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvExtrNtfyNbrGroup().setHvExtrNtfyNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvExtrNtfyNbr with another Field
	 *	@param value
	 */
   public void setHvExtrNtfyNbr(Field source) {
      hostVariables.getHvExtrNtfyNbrGroup().setHvExtrNtfyNbr(source);
   }  
   
     /**
	 * 	Update HvExtrNtfyNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvExtrNtfyNbr(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvExtrNtfyNbrGroup().setHvExtrNtfyNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvExtrNtfyNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvExtrNtfyNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvExtrNtfyNbrGroup().setHvExtrNtfyNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFlnJulianDtNbr
	 *	@return hvFlnJulianDtNbr
	 */
   public char[] getHvFlnJulianDtNbr() throws CFException  {              
   		return hostVariables.getHvFlnJulianDtNbrGroup().getHvFlnJulianDtNbr();
   }

  
	/**
	*  set variable hvFlnJulianDtNbr
	*  @param value
	**/
   public void setHvFlnJulianDtNbr(char[] value) throws CFException {
      hostVariables.getHvFlnJulianDtNbrGroup().setHvFlnJulianDtNbr(value);
   } 

     /**
	 * 	Update HvFlnJulianDtNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFlnJulianDtNbr(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFlnJulianDtNbrGroup().setHvFlnJulianDtNbr(source, sourceIndex);
   	
   }
   
   public void setHvFlnJulianDtNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFlnJulianDtNbrGroup().setHvFlnJulianDtNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFlnJulianDtNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFlnJulianDtNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFlnJulianDtNbrGroup().setHvFlnJulianDtNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFlnJulianDtNbr with another Field
	 *	@param value
	 */
   public void setHvFlnJulianDtNbr(Field source) {
      hostVariables.getHvFlnJulianDtNbrGroup().setHvFlnJulianDtNbr(source);
   }  
   
     /**
	 * 	Update HvFlnJulianDtNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFlnJulianDtNbr(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFlnJulianDtNbrGroup().setHvFlnJulianDtNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFlnJulianDtNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFlnJulianDtNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFlnJulianDtNbrGroup().setHvFlnJulianDtNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvInvnCtlNbr
	 *	@return hvInvnCtlNbr
	 */
   public char[] getHvInvnCtlNbr() throws CFException  {              
   		return hostVariables.getHvInvnCtlNbrGroup().getHvInvnCtlNbr();
   }

  
	/**
	*  set variable hvInvnCtlNbr
	*  @param value
	**/
   public void setHvInvnCtlNbr(char[] value) throws CFException {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(value);
   } 

     /**
	 * 	Update HvInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setHvInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setHvInvnCtlNbr(Field source) {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update HvInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvProvTinsuff
	 *	@return hvProvTinsuff
	 */
   public char[] getHvProvTinsuff() throws CFException  {              
   		return hostVariables.getHvProvTinsuff();
   }

  
	/**
	*  set variable hvProvTinsuff
	*  @param value
	**/
   public void setHvProvTinsuff(char[] value) throws CFException {
      hostVariables.setHvProvTinsuff(value);
   } 

     /**
	 * 	Update HvProvTinsuff 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTinsuff(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvProvTinsuff(source, sourceIndex);
   	
   }
   
   public void setHvProvTinsuff(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvProvTinsuff(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTinsuff 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTinsuff(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvProvTinsuff(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTinsuff with another Field
	 *	@param value
	 */
   public void setHvProvTinsuff(Field source) {
      hostVariables.setHvProvTinsuff(source);
   }  
   
     /**
	 * 	Update HvProvTinsuff 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTinsuff(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvProvTinsuff(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTinsuff 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTinsuff(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvProvTinsuff(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvCauseCd2
	 *	@return hvCauseCd2
	 */
   public char[] getHvCauseCd2() throws CFException  {              
   		return hostVariables.getHvCauseCd2();
   }

  
	/**
	*  set variable hvCauseCd2
	*  @param value
	**/
   public void setHvCauseCd2(char[] value) throws CFException {
      hostVariables.setHvCauseCd2(value);
   } 

     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd2(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd2 with another Field
	 *	@param value
	 */
   public void setHvCauseCd2(Field source) {
      hostVariables.setHvCauseCd2(source);
   }  
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqServiceCategory
	 *	@return dt1ReqServiceCategory
	 */
   public char[] getDt1ReqServiceCategory() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqServiceCategory();
   }

  
	/**
	*  set variable dt1ReqServiceCategory
	*  @param value
	**/
   public void setDt1ReqServiceCategory(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqServiceCategory(value);
   } 

     /**
	 * 	Update Dt1ReqServiceCategory 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqServiceCategory(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqServiceCategory(source, sourceIndex);
   	
   }
   
   public void setDt1ReqServiceCategory(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqServiceCategory(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqServiceCategory 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqServiceCategory(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqServiceCategory(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqServiceCategory with another Field
	 *	@param value
	 */
   public void setDt1ReqServiceCategory(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqServiceCategory(source);
   }  
   
     /**
	 * 	Update Dt1ReqServiceCategory 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqServiceCategory(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqServiceCategory(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqServiceCategory 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqServiceCategory(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqServiceCategory(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public InitHostVariablesSectOutCtx clone() {
        InitHostVariablesSectOutCtx cloneObj = new InitHostVariablesSectOutCtx();
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public InitHostVariablesSectOutCtx getInitHostVariablesSectOutCtx() {
            return new InitHostVariablesSectOutCtx();
    }
     public class SearchIcnOnlySectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     DcladjdClmsfRef dcladjdClmsfRef = D5427dt1Ctx.this.getDcladjdClmsfRef();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of drefEeId
	 *	@return drefEeId
	 */
   public char[] getDrefEeId() throws CFException  {              
   		return dcladjdClmsfRef.getDrefEeId();
   }

  
	/**
	*  set variable drefEeId
	*  @param value
	**/
   public void setDrefEeId(char[] value) throws CFException {
      dcladjdClmsfRef.setDrefEeId(value);
   } 

     /**
	 * 	Update DrefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDrefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmsfRef.setDrefEeId(source, sourceIndex);
   	
   }
   
   public void setDrefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmsfRef.setDrefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DrefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDrefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmsfRef.setDrefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DrefEeId with another Field
	 *	@param value
	 */
   public void setDrefEeId(Field source) {
      dcladjdClmsfRef.setDrefEeId(source);
   }  
   
     /**
	 * 	Update DrefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDrefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmsfRef.setDrefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DrefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDrefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmsfRef.setDrefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqIcn
	 *	@return dt1ReqIcn
	 */
   public char[] getDt1ReqIcn() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqIcn();
   }

  
	/**
	*  set variable dt1ReqIcn
	*  @param value
	**/
   public void setDt1ReqIcn(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(value);
   } 

     /**
	 * 	Update Dt1ReqIcn 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqIcn(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex);
   	
   }
   
   public void setDt1ReqIcn(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqIcn 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqIcn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqIcn with another Field
	 *	@param value
	 */
   public void setDt1ReqIcn(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source);
   }  
   
     /**
	 * 	Update Dt1ReqIcn 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqIcn(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqIcn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqIcn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of drefPolNbr
	 *	@return drefPolNbr
	 */
   public char[] getDrefPolNbr() throws CFException  {              
   		return dcladjdClmsfRef.getDrefPolNbr();
   }

  
	/**
	*  set variable drefPolNbr
	*  @param value
	**/
   public void setDrefPolNbr(char[] value) throws CFException {
      dcladjdClmsfRef.setDrefPolNbr(value);
   } 

     /**
	 * 	Update DrefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDrefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmsfRef.setDrefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDrefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmsfRef.setDrefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DrefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDrefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmsfRef.setDrefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DrefPolNbr with another Field
	 *	@param value
	 */
   public void setDrefPolNbr(Field source) {
      dcladjdClmsfRef.setDrefPolNbr(source);
   }  
   
     /**
	 * 	Update DrefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDrefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmsfRef.setDrefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DrefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDrefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmsfRef.setDrefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dcladjdClmsfRef
	 *	@return dcladjdClmsfRef
	 */   
	 public DcladjdClmsfRef getDcladjdClmsfRef() {
   	return dcladjdClmsfRef;
   }


	/**
	 *	Returns the value of drefDepnNbr
	 *	@return drefDepnNbr
	 */
   public char[] getDrefDepnNbr() throws CFException  {              
   		return dcladjdClmsfRef.getDrefDepnNbr();
   }

  
	/**
	*  set variable drefDepnNbr
	*  @param value
	**/
   public void setDrefDepnNbr(char[] value) throws CFException {
      dcladjdClmsfRef.setDrefDepnNbr(value);
   } 

     /**
	 * 	Update DrefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDrefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmsfRef.setDrefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDrefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmsfRef.setDrefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DrefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDrefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmsfRef.setDrefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DrefDepnNbr with another Field
	 *	@param value
	 */
   public void setDrefDepnNbr(Field source) {
      dcladjdClmsfRef.setDrefDepnNbr(source);
   }  
   
     /**
	 * 	Update DrefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDrefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmsfRef.setDrefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DrefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDrefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmsfRef.setDrefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public SearchIcnOnlySectOutCtx getSearchIcnOnlySectOutCtx() {
            return new SearchIcnOnlySectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += standardVars.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += dcladjdClmsfRef.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public SearchIcnOnlySectInCtx clone() {
        SearchIcnOnlySectInCtx cloneObj = new SearchIcnOnlySectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dcladjdClmsfRef = new DcladjdClmsfRef();
        cloneObj.dcladjdClmsfRef.set(dcladjdClmsfRef.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public SearchIcnOnlySectInCtx getSearchIcnOnlySectInCtx() {
            return new SearchIcnOnlySectInCtx();
    }
     public class SearchIcnOnlySectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     DcladjdClmsfRef dcladjdClmsfRef = D5427dt1Ctx.this.getDcladjdClmsfRef();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Test condition "4" for isDt1ReqSearchMemberPlus()
	 *	@return  Returns true if isDt1ReqSearchMemberPlus() is "4"
	 */
   public boolean isDt1ReqSearchMemberPlus() throws CFException {
      return dt1ReqContainer.getDt1RequestArea().isDt1ReqSearchMemberPlus();
   }

	/**
	*  set values "4"
	*/
   	public void setDt1ReqSearchMemberPlusTrue()  throws CFException{  			
    	dt1ReqContainer.getDt1RequestArea().setDt1ReqSearchMemberPlusTrue();
   	}
	/**
	 *	Returns the value of drefInvnCtlNbr
	 *	@return drefInvnCtlNbr
	 */
   public char[] getDrefInvnCtlNbr() throws CFException  {              
   		return dcladjdClmsfRef.getDrefInvnCtlNbr();
   }

  
	/**
	*  set variable drefInvnCtlNbr
	*  @param value
	**/
   public void setDrefInvnCtlNbr(char[] value) throws CFException {
      dcladjdClmsfRef.setDrefInvnCtlNbr(value);
   } 

     /**
	 * 	Update DrefInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDrefInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmsfRef.setDrefInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setDrefInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmsfRef.setDrefInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DrefInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDrefInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmsfRef.setDrefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DrefInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setDrefInvnCtlNbr(Field source) {
      dcladjdClmsfRef.setDrefInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update DrefInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDrefInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmsfRef.setDrefInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DrefInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDrefInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmsfRef.setDrefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1RspPolicy
	 *	@return dt1RspPolicy
	 */
   public char[] getDt1RspPolicy() throws CFException  {              
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspPolicy();
   }

  
	/**
	*  set variable dt1RspPolicy
	*  @param value
	**/
   public void setDt1RspPolicy(char[] value) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspPolicy(value);
   } 

     /**
	 * 	Update Dt1RspPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1RspPolicy(char[] source, int sourceIndex) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1RspPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1RspPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1RspPolicy with another Field
	 *	@param value
	 */
   public void setDt1RspPolicy(Field source) {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspPolicy(source);
   }  
   
     /**
	 * 	Update Dt1RspPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1RspPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1RspPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1RspEmpid
	 *	@return dt1RspEmpid
	 */
   public char[] getDt1RspEmpid() throws CFException  {              
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspEmpid();
   }

  
	/**
	*  set variable dt1RspEmpid
	*  @param value
	**/
   public void setDt1RspEmpid(char[] value) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspEmpid(value);
   } 

     /**
	 * 	Update Dt1RspEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1RspEmpid(char[] source, int sourceIndex) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1RspEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1RspEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1RspEmpid with another Field
	 *	@param value
	 */
   public void setDt1RspEmpid(Field source) {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspEmpid(source);
   }  
   
     /**
	 * 	Update Dt1RspEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1RspEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1RspEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of drefEeId
	 *	@return drefEeId
	 */
   public char[] getDrefEeId() throws CFException  {              
   		return dcladjdClmsfRef.getDrefEeId();
   }

  
	/**
	*  set variable drefEeId
	*  @param value
	**/
   public void setDrefEeId(char[] value) throws CFException {
      dcladjdClmsfRef.setDrefEeId(value);
   } 

     /**
	 * 	Update DrefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDrefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmsfRef.setDrefEeId(source, sourceIndex);
   	
   }
   
   public void setDrefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmsfRef.setDrefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DrefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDrefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmsfRef.setDrefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DrefEeId with another Field
	 *	@param value
	 */
   public void setDrefEeId(Field source) {
      dcladjdClmsfRef.setDrefEeId(source);
   }  
   
     /**
	 * 	Update DrefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDrefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmsfRef.setDrefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DrefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDrefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmsfRef.setDrefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmsfRef
	 *	@return dcladjdClmsfRef
	 */   
	 public DcladjdClmsfRef getDcladjdClmsfRef() {
   	return dcladjdClmsfRef;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqIcn
	 *	@return dt1ReqIcn
	 */
   public char[] getDt1ReqIcn() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqIcn();
   }

  
	/**
	*  set variable dt1ReqIcn
	*  @param value
	**/
   public void setDt1ReqIcn(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(value);
   } 

     /**
	 * 	Update Dt1ReqIcn 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqIcn(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex);
   	
   }
   
   public void setDt1ReqIcn(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqIcn 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqIcn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqIcn with another Field
	 *	@param value
	 */
   public void setDt1ReqIcn(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source);
   }  
   
     /**
	 * 	Update Dt1ReqIcn 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqIcn(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqIcn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqIcn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of drefPolNbr
	 *	@return drefPolNbr
	 */
   public char[] getDrefPolNbr() throws CFException  {              
   		return dcladjdClmsfRef.getDrefPolNbr();
   }

  
	/**
	*  set variable drefPolNbr
	*  @param value
	**/
   public void setDrefPolNbr(char[] value) throws CFException {
      dcladjdClmsfRef.setDrefPolNbr(value);
   } 

     /**
	 * 	Update DrefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDrefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmsfRef.setDrefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDrefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmsfRef.setDrefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DrefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDrefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmsfRef.setDrefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DrefPolNbr with another Field
	 *	@param value
	 */
   public void setDrefPolNbr(Field source) {
      dcladjdClmsfRef.setDrefPolNbr(source);
   }  
   
     /**
	 * 	Update DrefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDrefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmsfRef.setDrefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DrefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDrefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmsfRef.setDrefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of drefDepnNbr
	 *	@return drefDepnNbr
	 */
   public char[] getDrefDepnNbr() throws CFException  {              
   		return dcladjdClmsfRef.getDrefDepnNbr();
   }

  
	/**
	*  set variable drefDepnNbr
	*  @param value
	**/
   public void setDrefDepnNbr(char[] value) throws CFException {
      dcladjdClmsfRef.setDrefDepnNbr(value);
   } 

     /**
	 * 	Update DrefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDrefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmsfRef.setDrefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDrefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmsfRef.setDrefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DrefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDrefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmsfRef.setDrefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DrefDepnNbr with another Field
	 *	@param value
	 */
   public void setDrefDepnNbr(Field source) {
      dcladjdClmsfRef.setDrefDepnNbr(source);
   }  
   
     /**
	 * 	Update DrefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDrefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmsfRef.setDrefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DrefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDrefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmsfRef.setDrefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1RspDepNbr
	 *	@return dt1RspDepNbr
	 */
	public int getDt1RspDepNbr() throws CFException {
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspDepNbr();
	}


	/**
	 *	Returns String value of dt1RspDepNbr
	 *	@return dt1RspDepNbr
	 */
	public char[]  getDt1RspDepNbrString() throws CFException {
	     return String.valueOf(dt1RspContainer.getDt1RspFixedArea().getDt1RspDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1RspDepNbrIsNumeric()  throws CFException{
	    return dt1RspContainer.getDt1RspFixedArea().dt1RspDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1RspDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1RspDepNbr(int number)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().setDt1RspDepNbr(number);
	}
	

	public void setDt1RspDepNbr(long number)  throws CFException{
	    dt1RspContainer.getDt1RspFixedArea().setDt1RspDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1RspDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1RspDepNbr(char[] value)  throws CFException {
		dt1RspContainer.getDt1RspFixedArea().setDt1RspDepNbr(value);
	}
	
	/**
	 * 	Update Dt1RspDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1RspDepNbrString(char[] value)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().setDt1RspDepNbr(value);
	}	


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += standardVars.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += dcladjdClmsfRef.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public SearchIcnOnlySectOutCtx clone() {
        SearchIcnOnlySectOutCtx cloneObj = new SearchIcnOnlySectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dcladjdClmsfRef = new DcladjdClmsfRef();
        cloneObj.dcladjdClmsfRef.set(dcladjdClmsfRef.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public SearchIcnOnlySectOutCtx getSearchIcnOnlySectOutCtx() {
            return new SearchIcnOnlySectOutCtx();
    }
     public class ProcCsrInitFil2SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcCsrInitFil2SectOutCtx getProcCsrInitFil2SectOutCtx() {
            return new ProcCsrInitFil2SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrInitFil2SectInCtx clone() {
        ProcCsrInitFil2SectInCtx cloneObj = new ProcCsrInitFil2SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrInitFil2SectInCtx getProcCsrInitFil2SectInCtx() {
            return new ProcCsrInitFil2SectInCtx();
    }
     public class ProcCsrInitFil2SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrInitFil2SectOutCtx clone() {
        ProcCsrInitFil2SectOutCtx cloneObj = new ProcCsrInitFil2SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrInitFil2SectOutCtx getProcCsrInitFil2SectOutCtx() {
            return new ProcCsrInitFil2SectOutCtx();
    }
     public class OpenCsrInitFil2SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of hvFstDt
	 *	@return hvFstDt
	 */
   public char[] getHvFstDt() throws CFException  {              
   		return hostVariables.getHvFstDtGroup().getHvFstDt();
   }

  
	/**
	*  set variable hvFstDt
	*  @param value
	**/
   public void setHvFstDt(char[] value) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(value);
   } 

     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex);
   	
   }
   
   public void setHvFstDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFstDt with another Field
	 *	@param value
	 */
   public void setHvFstDt(Field source) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source);
   }  
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hostVariables
	 *	@return hostVariables
	 */   
	 public HostVariables getHostVariables() {
   	return hostVariables;
   }


	/**
	 *	Returns the value of hvProvTin
	 *	@return hvProvTin
	 */
   public char[] getHvProvTin() throws CFException  {              
   		return hostVariables.getHvProvTinsuffRedefined().getHvProvTin();
   }

  
	/**
	*  set variable hvProvTin
	*  @param value
	**/
   public void setHvProvTin(char[] value) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(value);
   } 

     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex);
   	
   }
   
   public void setHvProvTin(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin with another Field
	 *	@param value
	 */
   public void setHvProvTin(Field source) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source);
   }  
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvLstSrvcDt
	 *	@return hvLstSrvcDt
	 */
   public char[] getHvLstSrvcDt() throws CFException  {              
   		return hostVariables.getHvLstSrvcDtGroup().getHvLstSrvcDt();
   }

  
	/**
	*  set variable hvLstSrvcDt
	*  @param value
	**/
   public void setHvLstSrvcDt(char[] value) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(value);
   } 

     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex);
   	
   }
   
   public void setHvLstSrvcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvLstSrvcDt with another Field
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source);
   }  
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public OpenCsrInitFil2SectOutCtx getOpenCsrInitFil2SectOutCtx() {
            return new OpenCsrInitFil2SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrInitFil2SectInCtx clone() {
        OpenCsrInitFil2SectInCtx cloneObj = new OpenCsrInitFil2SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrInitFil2SectInCtx getOpenCsrInitFil2SectInCtx() {
            return new OpenCsrInitFil2SectInCtx();
    }
     public class OpenCsrInitFil2SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dderefEeId
	 *	@return dderefEeId
	 */
   public char[] getDderefEeId() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefEeIdGroup().getDderefEeId();
   }

  
	/**
	*  set variable dderefEeId
	*  @param value
	**/
   public void setDderefEeId(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(value);
   } 

     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex);
   	
   }
   
   public void setDderefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeId with another Field
	 *	@param value
	 */
   public void setDderefEeId(Field source) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source);
   }  
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPolNbr
	 *	@return dderefPolNbr
	 */
   public char[] getDderefPolNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPolNbrGroup().getDderefPolNbr();
   }

  
	/**
	*  set variable dderefPolNbr
	*  @param value
	**/
   public void setDderefPolNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(value);
   } 

     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDderefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbr with another Field
	 *	@param value
	 */
   public void setDderefPolNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source);
   }  
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefDepnNbr
	 *	@return dderefDepnNbr
	 */
   public char[] getDderefDepnNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefDepnNbrGroup().getDderefDepnNbr();
   }

  
	/**
	*  set variable dderefDepnNbr
	*  @param value
	**/
   public void setDderefDepnNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(value);
   } 

     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDderefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbr with another Field
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source);
   }  
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrInitFil2SectOutCtx clone() {
        OpenCsrInitFil2SectOutCtx cloneObj = new OpenCsrInitFil2SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrInitFil2SectOutCtx getOpenCsrInitFil2SectOutCtx() {
            return new OpenCsrInitFil2SectOutCtx();
    }
     public class FetchCsrInitFil2SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrInitFil2SectOutCtx getFetchCsrInitFil2SectOutCtx() {
            return new FetchCsrInitFil2SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrInitFil2SectInCtx clone() {
        FetchCsrInitFil2SectInCtx cloneObj = new FetchCsrInitFil2SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrInitFil2SectInCtx getFetchCsrInitFil2SectInCtx() {
            return new FetchCsrInitFil2SectInCtx();
    }
     public class FetchCsrInitFil2SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrInitFil2SectOutCtx clone() {
        FetchCsrInitFil2SectOutCtx cloneObj = new FetchCsrInitFil2SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrInitFil2SectOutCtx getFetchCsrInitFil2SectOutCtx() {
            return new FetchCsrInitFil2SectOutCtx();
    }
     public class FetchCsrRowsSectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of fetchRowsetMax
	 *	@return fetchRowsetMax
	 */
	public int getFetchRowsetMax() throws CFException {        
   		return work.getFetchRowsetMax();
	}
	
	/**
	 * 	Update FetchRowsetMax with the passed value
	 *	@param number
	 */
	public void setFetchRowsetMax(int number)  throws CFException{
		work.setFetchRowsetMax(number);
	}


	public void setFetchRowsetMax(long number)  throws CFException{
		work.setFetchRowsetMax((int)number);
	}


	/**
	 *	Returns the value of work
	 *	@return work
	 */   
	 public Work getWork() {
   	return work;
   }


	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 

	public BigDecimal getHvaSupAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaSupAmt((index));
	}

    public char[] getHvaSupAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaSupAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaSupAmt with the passed number
	 *	@param number
	 */
	public void setHvaSupAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaSupAmt((index),number);
   }

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hvaPartnVal
	 *	@return hvaPartnVal
	 */
   public char[] getHvaPartnVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPartnVal(index);
   }

  
	/**
	*  set variable hvaPartnVal
	*  @param value
	**/
   public void setHvaPartnVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPartnVal((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaPartnId
	 *	@return hvaPartnId
	 */
	public short getHvaPartnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPartnId((index));
	}
	
	/**
	 * 	Update HvaPartnId with the passed value
	 *	@param number
	 */
	public void setHvaPartnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),number);
	}

	public void setHvaPartnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}

	public void setHvaPartnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}



	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	public BigDecimal getHvaBaseDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseDedAmt((index));
	}

    public char[] getHvaBaseDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseDedAmt((index),number);
   }

	/**
	 *	Returns the value of hvaMskNullInd
	 *	@return hvaMskNullInd
	 */
	public short getHvaMskNullInd(int index) throws CFException {        
   		return hvaClmHistArray.getHvaMskNullInd((index));
	}
	
	/**
	 * 	Update HvaMskNullInd with the passed value
	 *	@param number
	 */
	public void setHvaMskNullInd(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),number);
	}

	public void setHvaMskNullInd(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}

	public void setHvaMskNullInd(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}



	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of hvaTransCd
	 *	@return hvaTransCd
	 */
   public char[] getHvaTransCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTransCd(index);
   }

  
	/**
	*  set variable hvaTransCd
	*  @param value
	**/
   public void setHvaTransCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTransCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktNbr
	 *	@return hvaProvMktNbr
	 */
   public char[] getHvaProvMktNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktNbr(index);
   }

  
	/**
	*  set variable hvaProvMktNbr
	*  @param value
	**/
   public void setHvaProvMktNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktNbr((index),value);
   } 

	public BigDecimal getHvaBaseAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseAmt((index));
	}

    public char[] getHvaBaseAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseAmt((index),number);
   }

	public BigDecimal getHvaCobCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCobCrResAmt((index));
	}

    public char[] getHvaCobCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCobCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCobCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaCobCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCobCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPpoCd
	 *	@return hvaPpoCd
	 */
   public char[] getHvaPpoCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPpoCd(index);
   }

  
	/**
	*  set variable hvaPpoCd
	*  @param value
	**/
   public void setHvaPpoCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPpoCd((index),value);
   } 

	public BigDecimal getHvaMmDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmDedAmt((index));
	}

    public char[] getHvaMmDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmDedAmt((index),number);
   }

	public BigDecimal getHvaMcCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMcCrResAmt((index));
	}

    public char[] getHvaMcCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMcCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMcCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaMcCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMcCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProvIpaId
	 *	@return hvaProvIpaId
	 */
   public char[] getHvaProvIpaId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvIpaId(index);
   }

  
	/**
	*  set variable hvaProvIpaId
	*  @param value
	**/
   public void setHvaProvIpaId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvIpaId((index),value);
   } 

	/**
	 *	Returns the value of hvaPmtSvcCd
	 *	@return hvaPmtSvcCd
	 */
   public char[] getHvaPmtSvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPmtSvcCd(index);
   }

  
	/**
	*  set variable hvaPmtSvcCd
	*  @param value
	**/
   public void setHvaPmtSvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPmtSvcCd((index),value);
   } 

	public BigDecimal getHvaMmAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmAmt((index));
	}

    public char[] getHvaMmAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvEobNm
	 *	@return hvaProvEobNm
	 */
   public char[] getHvaProvEobNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvEobNm(index);
   }

  
	/**
	*  set variable hvaProvEobNm
	*  @param value
	**/
   public void setHvaProvEobNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvEobNm((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	public BigDecimal getHvaCopayAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCopayAmt((index));
	}

    public char[] getHvaCopayAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCopayAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCopayAmt with the passed number
	 *	@param number
	 */
	public void setHvaCopayAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCopayAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvPrdctCd
	 *	@return hvaProvPrdctCd
	 */
   public char[] getHvaProvPrdctCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvPrdctCd(index);
   }

  
	/**
	*  set variable hvaProvPrdctCd
	*  @param value
	**/
   public void setHvaProvPrdctCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvPrdctCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPrsCreatSrcCd
	 *	@return hvaPrsCreatSrcCd
	 */
   public char[] getHvaPrsCreatSrcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPrsCreatSrcCd(index);
   }

  
	/**
	*  set variable hvaPrsCreatSrcCd
	*  @param value
	**/
   public void setHvaPrsCreatSrcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPrsCreatSrcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of hvaBaseDedDescTxt
	 *	@return hvaBaseDedDescTxt
	 */
   public char[] getHvaBaseDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBaseDedDescTxt(index);
   }

  
	/**
	*  set variable hvaBaseDedDescTxt
	*  @param value
	**/
   public void setHvaBaseDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBaseDedDescTxt((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvaMmDedDescTxt
	 *	@return hvaMmDedDescTxt
	 */
   public char[] getHvaMmDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMmDedDescTxt(index);
   }

  
	/**
	*  set variable hvaMmDedDescTxt
	*  @param value
	**/
   public void setHvaMmDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMmDedDescTxt((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of hvaOvrCd
	 *	@return hvaOvrCd
	 */
   public char[] getHvaOvrCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaOvrCd(index);
   }

  
	/**
	*  set variable hvaOvrCd
	*  @param value
	**/
   public void setHvaOvrCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaOvrCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktTypCd
	 *	@return hvaProvMktTypCd
	 */
   public char[] getHvaProvMktTypCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktTypCd(index);
   }

  
	/**
	*  set variable hvaProvMktTypCd
	*  @param value
	**/
   public void setHvaProvMktTypCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktTypCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of hvaParInd
	 *	@return hvaParInd
	 */
   public char[] getHvaParInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaParInd(index);
   }

  
	/**
	*  set variable hvaParInd
	*  @param value
	**/
   public void setHvaParInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaParInd((index),value);
   } 

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrRowsSectOutCtx getFetchCsrRowsSectOutCtx() {
            return new FetchCsrRowsSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSectInCtx clone() {
        FetchCsrRowsSectInCtx cloneObj = new FetchCsrRowsSectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSectInCtx getFetchCsrRowsSectInCtx() {
            return new FetchCsrRowsSectInCtx();
    }
     public class FetchCsrRowsSectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Test condition 100 for isSqlcodeFetchEnd()
	 *	@return  Returns true if isSqlcodeFetchEnd() is 100
	 */
   public boolean isSqlcodeFetchEnd() throws CFException {
      return work.isSqlcodeFetchEnd();
   }

	/**
	*  set values 100
	*/
   	public void setSqlcodeFetchEndTrue()  throws CFException{  			
    	work.setSqlcodeFetchEndTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 0 for isSqlcodeOk()
	 *	@return  Returns true if isSqlcodeOk() is 0
	 */
   public boolean isSqlcodeOk() throws CFException {
      return work.isSqlcodeOk();
   }

	/**
	*  set values 0
	*/
   	public void setSqlcodeOkTrue()  throws CFException{  			
    	work.setSqlcodeOkTrue();
   	}
	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSectOutCtx clone() {
        FetchCsrRowsSectOutCtx cloneObj = new FetchCsrRowsSectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSectOutCtx getFetchCsrRowsSectOutCtx() {
            return new FetchCsrRowsSectOutCtx();
    }
     public class CloseCsrInitFil2SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public CloseCsrInitFil2SectOutCtx getCloseCsrInitFil2SectOutCtx() {
            return new CloseCsrInitFil2SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrInitFil2SectInCtx clone() {
        CloseCsrInitFil2SectInCtx cloneObj = new CloseCsrInitFil2SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrInitFil2SectInCtx getCloseCsrInitFil2SectInCtx() {
            return new CloseCsrInitFil2SectInCtx();
    }
     public class CloseCsrInitFil2SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrInitFil2SectOutCtx clone() {
        CloseCsrInitFil2SectOutCtx cloneObj = new CloseCsrInitFil2SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrInitFil2SectOutCtx getCloseCsrInitFil2SectOutCtx() {
            return new CloseCsrInitFil2SectOutCtx();
    }
     public class ProcCsrNextFil2SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcCsrNextFil2SectOutCtx getProcCsrNextFil2SectOutCtx() {
            return new ProcCsrNextFil2SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrNextFil2SectInCtx clone() {
        ProcCsrNextFil2SectInCtx cloneObj = new ProcCsrNextFil2SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrNextFil2SectInCtx getProcCsrNextFil2SectInCtx() {
            return new ProcCsrNextFil2SectInCtx();
    }
     public class ProcCsrNextFil2SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrNextFil2SectOutCtx clone() {
        ProcCsrNextFil2SectOutCtx cloneObj = new ProcCsrNextFil2SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrNextFil2SectOutCtx getProcCsrNextFil2SectOutCtx() {
            return new ProcCsrNextFil2SectOutCtx();
    }
     public class OpenCsrNextFil2SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFstDt
	 *	@return hvFstDt
	 */
   public char[] getHvFstDt() throws CFException  {              
   		return hostVariables.getHvFstDtGroup().getHvFstDt();
   }

  
	/**
	*  set variable hvFstDt
	*  @param value
	**/
   public void setHvFstDt(char[] value) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(value);
   } 

     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex);
   	
   }
   
   public void setHvFstDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFstDt with another Field
	 *	@param value
	 */
   public void setHvFstDt(Field source) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source);
   }  
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hostVariables
	 *	@return hostVariables
	 */   
	 public HostVariables getHostVariables() {
   	return hostVariables;
   }


	/**
	 *	Returns the value of hvProvTin
	 *	@return hvProvTin
	 */
   public char[] getHvProvTin() throws CFException  {              
   		return hostVariables.getHvProvTinsuffRedefined().getHvProvTin();
   }

  
	/**
	*  set variable hvProvTin
	*  @param value
	**/
   public void setHvProvTin(char[] value) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(value);
   } 

     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex);
   	
   }
   
   public void setHvProvTin(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin with another Field
	 *	@param value
	 */
   public void setHvProvTin(Field source) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source);
   }  
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvLstSrvcDt
	 *	@return hvLstSrvcDt
	 */
   public char[] getHvLstSrvcDt() throws CFException  {              
   		return hostVariables.getHvLstSrvcDtGroup().getHvLstSrvcDt();
   }

  
	/**
	*  set variable hvLstSrvcDt
	*  @param value
	**/
   public void setHvLstSrvcDt(char[] value) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(value);
   } 

     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex);
   	
   }
   
   public void setHvLstSrvcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvLstSrvcDt with another Field
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source);
   }  
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public OpenCsrNextFil2SectOutCtx getOpenCsrNextFil2SectOutCtx() {
            return new OpenCsrNextFil2SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrNextFil2SectInCtx clone() {
        OpenCsrNextFil2SectInCtx cloneObj = new OpenCsrNextFil2SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrNextFil2SectInCtx getOpenCsrNextFil2SectInCtx() {
            return new OpenCsrNextFil2SectInCtx();
    }
     public class OpenCsrNextFil2SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dderefEeId
	 *	@return dderefEeId
	 */
   public char[] getDderefEeId() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefEeIdGroup().getDderefEeId();
   }

  
	/**
	*  set variable dderefEeId
	*  @param value
	**/
   public void setDderefEeId(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(value);
   } 

     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex);
   	
   }
   
   public void setDderefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeId with another Field
	 *	@param value
	 */
   public void setDderefEeId(Field source) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source);
   }  
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public int getNextIcnSufxVersNbr() throws CFException {
   		return nextKey.getNextIcnSufxVersNbr();
	}


	/**
	 *	Returns String value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public char[]  getNextIcnSufxVersNbrString() throws CFException {
	     return String.valueOf(nextKey.getNextIcnSufxVersNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextIcnSufxVersNbrIsNumeric()  throws CFException{
	    return nextKey.nextIcnSufxVersNbrIsNumeric();
	}

	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setNextIcnSufxVersNbr(int number)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(number);
	}
	

	public void setNextIcnSufxVersNbr(long number)  throws CFException{
	    nextKey.setNextIcnSufxVersNbr(number);
	}
	
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbr(char[] value)  throws CFException {
		nextKey.setNextIcnSufxVersNbr(value);
	}
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbrString(char[] value)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(value);
	}	

	/**
	 *	Returns the value of dderefIcnSufxVersNbr
	 *	@return dderefIcnSufxVersNbr
	 */
	public short getDderefIcnSufxVersNbr() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefIcnSufxVersNbr();
	}
	
	/**
	 * 	Update DderefIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setDderefIcnSufxVersNbr(short number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr(number);
	}

	public void setDderefIcnSufxVersNbr(int number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}

	public void setDderefIcnSufxVersNbr(long number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}



	/**
	 *	Returns the value of dderefProcDt
	 *	@return dderefProcDt
	 */
   public char[] getDderefProcDt() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcDtGroup().getDderefProcDt();
   }

  
	/**
	*  set variable dderefProcDt
	*  @param value
	**/
   public void setDderefProcDt(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(value);
   } 

     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex);
   	
   }
   
   public void setDderefProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcDt with another Field
	 *	@param value
	 */
   public void setDderefProcDt(Field source) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source);
   }  
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextLnId
	 *	@return nextLnId
	 */
	public int getNextLnId() throws CFException {
   		return nextKey.getNextLnId();
	}


	/**
	 *	Returns String value of nextLnId
	 *	@return nextLnId
	 */
	public char[]  getNextLnIdString() throws CFException {
	     return String.valueOf(nextKey.getNextLnIdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextLnIdIsNumeric()  throws CFException{
	    return nextKey.nextLnIdIsNumeric();
	}

	/**
	 * 	Update NextLnId with the passed value
	 *	@param number
	 */
	public void setNextLnId(int number)  throws CFException{
		nextKey.setNextLnId(number);
	}
	

	public void setNextLnId(long number)  throws CFException{
	    nextKey.setNextLnId(number);
	}
	
	
	/**
	 * 	Update NextLnId with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextLnId(char[] value)  throws CFException {
		nextKey.setNextLnId(value);
	}
	
	/**
	 * 	Update NextLnId with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextLnIdString(char[] value)  throws CFException{
		nextKey.setNextLnId(value);
	}	

	/**
	 *	Returns the value of dderefIcnSufxCd
	 *	@return dderefIcnSufxCd
	 */
   public char[] getDderefIcnSufxCd() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().getDderefIcnSufxCd();
   }

  
	/**
	*  set variable dderefIcnSufxCd
	*  @param value
	**/
   public void setDderefIcnSufxCd(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(value);
   } 

     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setDderefIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefIcnSufxCd with another Field
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source);
   }  
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of nextPgmIdLstCharVal
	 *	@return nextPgmIdLstCharVal
	 */
   public char[] getNextPgmIdLstCharVal() throws CFException  {              
   		return nextKey.getNextPgmIdLstCharVal();
   }

  
	/**
	*  set variable nextPgmIdLstCharVal
	*  @param value
	**/
   public void setNextPgmIdLstCharVal(char[] value) throws CFException {
      nextKey.setNextPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source) {
      nextKey.setNextPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefLnId
	 *	@return dderefLnId
	 */
	public short getDderefLnId() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefLnIdGroup().getDderefLnId();
	}
	
	/**
	 * 	Update DderefLnId with the passed value
	 *	@param number
	 */
	public void setDderefLnId(short number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId(number);
	}

	public void setDderefLnId(int number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}

	public void setDderefLnId(long number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}



	/**
	 *	Returns the value of nextProcTm
	 *	@return nextProcTm
	 */
   public char[] getNextProcTm() throws CFException  {              
   		return nextKey.getNextProcTm();
   }

  
	/**
	*  set variable nextProcTm
	*  @param value
	**/
   public void setNextProcTm(char[] value) throws CFException {
      nextKey.setNextProcTm(value);
   } 

     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcTm(source, sourceIndex);
   	
   }
   
   public void setNextProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcTm with another Field
	 *	@param value
	 */
   public void setNextProcTm(Field source) {
      nextKey.setNextProcTm(source);
   }  
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefProcTm
	 *	@return dderefProcTm
	 */
   public char[] getDderefProcTm() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcTmGroup().getDderefProcTm();
   }

  
	/**
	*  set variable dderefProcTm
	*  @param value
	**/
   public void setDderefProcTm(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(value);
   } 

     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex);
   	
   }
   
   public void setDderefProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcTm with another Field
	 *	@param value
	 */
   public void setDderefProcTm(Field source) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source);
   }  
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dderefInvnCtlNbr
	 *	@return dderefInvnCtlNbr
	 */
   public char[] getDderefInvnCtlNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().getDderefInvnCtlNbr();
   }

  
	/**
	*  set variable dderefInvnCtlNbr
	*  @param value
	**/
   public void setDderefInvnCtlNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(value);
   } 

     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextIcnSufxCd
	 *	@return nextIcnSufxCd
	 */
   public char[] getNextIcnSufxCd() throws CFException  {              
   		return nextKey.getNextIcnSufxCd();
   }

  
	/**
	*  set variable nextIcnSufxCd
	*  @param value
	**/
   public void setNextIcnSufxCd(char[] value) throws CFException {
      nextKey.setNextIcnSufxCd(value);
   } 

     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setNextIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextIcnSufxCd with another Field
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source) {
      nextKey.setNextIcnSufxCd(source);
   }  
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPolNbr
	 *	@return dderefPolNbr
	 */
   public char[] getDderefPolNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPolNbrGroup().getDderefPolNbr();
   }

  
	/**
	*  set variable dderefPolNbr
	*  @param value
	**/
   public void setDderefPolNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(value);
   } 

     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDderefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbr with another Field
	 *	@param value
	 */
   public void setDderefPolNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source);
   }  
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextInvnCtlNbr
	 *	@return nextInvnCtlNbr
	 */
   public char[] getNextInvnCtlNbr() throws CFException  {              
   		return nextKey.getNextInvnCtlNbr();
   }

  
	/**
	*  set variable nextInvnCtlNbr
	*  @param value
	**/
   public void setNextInvnCtlNbr(char[] value) throws CFException {
      nextKey.setNextInvnCtlNbr(value);
   } 

     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setNextInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source) {
      nextKey.setNextInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextKey
	 *	@return nextKey
	 */   
	 public NextKey getNextKey() {
   	return nextKey;
   }


	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefDepnNbr
	 *	@return dderefDepnNbr
	 */
   public char[] getDderefDepnNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefDepnNbrGroup().getDderefDepnNbr();
   }

  
	/**
	*  set variable dderefDepnNbr
	*  @param value
	**/
   public void setDderefDepnNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(value);
   } 

     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDderefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbr with another Field
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source);
   }  
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextProcDt
	 *	@return nextProcDt
	 */
   public char[] getNextProcDt() throws CFException  {              
   		return nextKey.getNextProcDt();
   }

  
	/**
	*  set variable nextProcDt
	*  @param value
	**/
   public void setNextProcDt(char[] value) throws CFException {
      nextKey.setNextProcDt(value);
   } 

     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcDt(source, sourceIndex);
   	
   }
   
   public void setNextProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcDt with another Field
	 *	@param value
	 */
   public void setNextProcDt(Field source) {
      nextKey.setNextProcDt(source);
   }  
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPgmIdLstCharVal
	 *	@return dderefPgmIdLstCharVal
	 */
   public char[] getDderefPgmIdLstCharVal() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().getDderefPgmIdLstCharVal();
   }

  
	/**
	*  set variable dderefPgmIdLstCharVal
	*  @param value
	**/
   public void setDderefPgmIdLstCharVal(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrNextFil2SectOutCtx clone() {
        OpenCsrNextFil2SectOutCtx cloneObj = new OpenCsrNextFil2SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrNextFil2SectOutCtx getOpenCsrNextFil2SectOutCtx() {
            return new OpenCsrNextFil2SectOutCtx();
    }
     public class FetchCsrNextFil2SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrNextFil2SectOutCtx getFetchCsrNextFil2SectOutCtx() {
            return new FetchCsrNextFil2SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrNextFil2SectInCtx clone() {
        FetchCsrNextFil2SectInCtx cloneObj = new FetchCsrNextFil2SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrNextFil2SectInCtx getFetchCsrNextFil2SectInCtx() {
            return new FetchCsrNextFil2SectInCtx();
    }
     public class FetchCsrNextFil2SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrNextFil2SectOutCtx clone() {
        FetchCsrNextFil2SectOutCtx cloneObj = new FetchCsrNextFil2SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrNextFil2SectOutCtx getFetchCsrNextFil2SectOutCtx() {
            return new FetchCsrNextFil2SectOutCtx();
    }
     public class FetchCsrRowsSect3421InCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of fetchRowsetMax
	 *	@return fetchRowsetMax
	 */
	public int getFetchRowsetMax() throws CFException {        
   		return work.getFetchRowsetMax();
	}
	
	/**
	 * 	Update FetchRowsetMax with the passed value
	 *	@param number
	 */
	public void setFetchRowsetMax(int number)  throws CFException{
		work.setFetchRowsetMax(number);
	}


	public void setFetchRowsetMax(long number)  throws CFException{
		work.setFetchRowsetMax((int)number);
	}


	/**
	 *	Returns the value of work
	 *	@return work
	 */   
	 public Work getWork() {
   	return work;
   }


	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 

	public BigDecimal getHvaSupAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaSupAmt((index));
	}

    public char[] getHvaSupAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaSupAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaSupAmt with the passed number
	 *	@param number
	 */
	public void setHvaSupAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaSupAmt((index),number);
   }

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hvaPartnVal
	 *	@return hvaPartnVal
	 */
   public char[] getHvaPartnVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPartnVal(index);
   }

  
	/**
	*  set variable hvaPartnVal
	*  @param value
	**/
   public void setHvaPartnVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPartnVal((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaPartnId
	 *	@return hvaPartnId
	 */
	public short getHvaPartnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPartnId((index));
	}
	
	/**
	 * 	Update HvaPartnId with the passed value
	 *	@param number
	 */
	public void setHvaPartnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),number);
	}

	public void setHvaPartnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}

	public void setHvaPartnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}



	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	public BigDecimal getHvaBaseDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseDedAmt((index));
	}

    public char[] getHvaBaseDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseDedAmt((index),number);
   }

	/**
	 *	Returns the value of hvaMskNullInd
	 *	@return hvaMskNullInd
	 */
	public short getHvaMskNullInd(int index) throws CFException {        
   		return hvaClmHistArray.getHvaMskNullInd((index));
	}
	
	/**
	 * 	Update HvaMskNullInd with the passed value
	 *	@param number
	 */
	public void setHvaMskNullInd(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),number);
	}

	public void setHvaMskNullInd(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}

	public void setHvaMskNullInd(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}



	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of hvaTransCd
	 *	@return hvaTransCd
	 */
   public char[] getHvaTransCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTransCd(index);
   }

  
	/**
	*  set variable hvaTransCd
	*  @param value
	**/
   public void setHvaTransCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTransCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktNbr
	 *	@return hvaProvMktNbr
	 */
   public char[] getHvaProvMktNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktNbr(index);
   }

  
	/**
	*  set variable hvaProvMktNbr
	*  @param value
	**/
   public void setHvaProvMktNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktNbr((index),value);
   } 

	public BigDecimal getHvaBaseAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseAmt((index));
	}

    public char[] getHvaBaseAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseAmt((index),number);
   }

	public BigDecimal getHvaCobCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCobCrResAmt((index));
	}

    public char[] getHvaCobCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCobCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCobCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaCobCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCobCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPpoCd
	 *	@return hvaPpoCd
	 */
   public char[] getHvaPpoCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPpoCd(index);
   }

  
	/**
	*  set variable hvaPpoCd
	*  @param value
	**/
   public void setHvaPpoCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPpoCd((index),value);
   } 

	public BigDecimal getHvaMmDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmDedAmt((index));
	}

    public char[] getHvaMmDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmDedAmt((index),number);
   }

	public BigDecimal getHvaMcCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMcCrResAmt((index));
	}

    public char[] getHvaMcCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMcCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMcCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaMcCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMcCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProvIpaId
	 *	@return hvaProvIpaId
	 */
   public char[] getHvaProvIpaId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvIpaId(index);
   }

  
	/**
	*  set variable hvaProvIpaId
	*  @param value
	**/
   public void setHvaProvIpaId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvIpaId((index),value);
   } 

	/**
	 *	Returns the value of hvaPmtSvcCd
	 *	@return hvaPmtSvcCd
	 */
   public char[] getHvaPmtSvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPmtSvcCd(index);
   }

  
	/**
	*  set variable hvaPmtSvcCd
	*  @param value
	**/
   public void setHvaPmtSvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPmtSvcCd((index),value);
   } 

	public BigDecimal getHvaMmAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmAmt((index));
	}

    public char[] getHvaMmAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvEobNm
	 *	@return hvaProvEobNm
	 */
   public char[] getHvaProvEobNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvEobNm(index);
   }

  
	/**
	*  set variable hvaProvEobNm
	*  @param value
	**/
   public void setHvaProvEobNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvEobNm((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	public BigDecimal getHvaCopayAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCopayAmt((index));
	}

    public char[] getHvaCopayAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCopayAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCopayAmt with the passed number
	 *	@param number
	 */
	public void setHvaCopayAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCopayAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvPrdctCd
	 *	@return hvaProvPrdctCd
	 */
   public char[] getHvaProvPrdctCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvPrdctCd(index);
   }

  
	/**
	*  set variable hvaProvPrdctCd
	*  @param value
	**/
   public void setHvaProvPrdctCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvPrdctCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPrsCreatSrcCd
	 *	@return hvaPrsCreatSrcCd
	 */
   public char[] getHvaPrsCreatSrcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPrsCreatSrcCd(index);
   }

  
	/**
	*  set variable hvaPrsCreatSrcCd
	*  @param value
	**/
   public void setHvaPrsCreatSrcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPrsCreatSrcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of hvaBaseDedDescTxt
	 *	@return hvaBaseDedDescTxt
	 */
   public char[] getHvaBaseDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBaseDedDescTxt(index);
   }

  
	/**
	*  set variable hvaBaseDedDescTxt
	*  @param value
	**/
   public void setHvaBaseDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBaseDedDescTxt((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvaMmDedDescTxt
	 *	@return hvaMmDedDescTxt
	 */
   public char[] getHvaMmDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMmDedDescTxt(index);
   }

  
	/**
	*  set variable hvaMmDedDescTxt
	*  @param value
	**/
   public void setHvaMmDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMmDedDescTxt((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of hvaOvrCd
	 *	@return hvaOvrCd
	 */
   public char[] getHvaOvrCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaOvrCd(index);
   }

  
	/**
	*  set variable hvaOvrCd
	*  @param value
	**/
   public void setHvaOvrCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaOvrCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktTypCd
	 *	@return hvaProvMktTypCd
	 */
   public char[] getHvaProvMktTypCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktTypCd(index);
   }

  
	/**
	*  set variable hvaProvMktTypCd
	*  @param value
	**/
   public void setHvaProvMktTypCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktTypCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of hvaParInd
	 *	@return hvaParInd
	 */
   public char[] getHvaParInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaParInd(index);
   }

  
	/**
	*  set variable hvaParInd
	*  @param value
	**/
   public void setHvaParInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaParInd((index),value);
   } 

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrRowsSect3421OutCtx getFetchCsrRowsSect3421OutCtx() {
            return new FetchCsrRowsSect3421OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect3421InCtx clone() {
        FetchCsrRowsSect3421InCtx cloneObj = new FetchCsrRowsSect3421InCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect3421InCtx getFetchCsrRowsSect3421InCtx() {
            return new FetchCsrRowsSect3421InCtx();
    }
     public class FetchCsrRowsSect3421OutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Test condition 100 for isSqlcodeFetchEnd()
	 *	@return  Returns true if isSqlcodeFetchEnd() is 100
	 */
   public boolean isSqlcodeFetchEnd() throws CFException {
      return work.isSqlcodeFetchEnd();
   }

	/**
	*  set values 100
	*/
   	public void setSqlcodeFetchEndTrue()  throws CFException{  			
    	work.setSqlcodeFetchEndTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 0 for isSqlcodeOk()
	 *	@return  Returns true if isSqlcodeOk() is 0
	 */
   public boolean isSqlcodeOk() throws CFException {
      return work.isSqlcodeOk();
   }

	/**
	*  set values 0
	*/
   	public void setSqlcodeOkTrue()  throws CFException{  			
    	work.setSqlcodeOkTrue();
   	}
	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect3421OutCtx clone() {
        FetchCsrRowsSect3421OutCtx cloneObj = new FetchCsrRowsSect3421OutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect3421OutCtx getFetchCsrRowsSect3421OutCtx() {
            return new FetchCsrRowsSect3421OutCtx();
    }
     public class CloseCsrNextFil2SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public CloseCsrNextFil2SectOutCtx getCloseCsrNextFil2SectOutCtx() {
            return new CloseCsrNextFil2SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrNextFil2SectInCtx clone() {
        CloseCsrNextFil2SectInCtx cloneObj = new CloseCsrNextFil2SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrNextFil2SectInCtx getCloseCsrNextFil2SectInCtx() {
            return new CloseCsrNextFil2SectInCtx();
    }
     public class CloseCsrNextFil2SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrNextFil2SectOutCtx clone() {
        CloseCsrNextFil2SectOutCtx cloneObj = new CloseCsrNextFil2SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrNextFil2SectOutCtx getCloseCsrNextFil2SectOutCtx() {
            return new CloseCsrNextFil2SectOutCtx();
    }
     public class ProcCsrDynamSqlSectInCtx implements Cloneable {
     QueryTextArea queryTextArea = D5427dt1Ctx.this.getQueryTextArea();
     QueryFilterServiceDates queryFilterServiceDates = D5427dt1Ctx.this.getQueryFilterServiceDates();
     QueryBaseMainSql queryBaseMainSql = D5427dt1Ctx.this.getQueryBaseMainSql();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     QueryFilterOff queryFilterOff = D5427dt1Ctx.this.getQueryFilterOff();
     Sqlda sqlda = D5427dt1Ctx.this.getSqlda();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();
     QueryFilterFln queryFilterFln = D5427dt1Ctx.this.getQueryFilterFln();

	/**
	 *	Returns the value of dderefEeId
	 *	@return dderefEeId
	 */
   public char[] getDderefEeId() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefEeIdGroup().getDderefEeId();
   }

  
	/**
	*  set variable dderefEeId
	*  @param value
	**/
   public void setDderefEeId(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(value);
   } 

     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex);
   	
   }
   
   public void setDderefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeId with another Field
	 *	@param value
	 */
   public void setDderefEeId(Field source) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source);
   }  
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryTextArea
	 *	@return queryTextArea
	 */   
	 public QueryTextArea getQueryTextArea() {
   	return queryTextArea;
   }


	/**
	 *	Returns the value of queryFilterServiceDates
	 *	@return queryFilterServiceDates
	 */   
	 public QueryFilterServiceDates getQueryFilterServiceDates() {
   	return queryFilterServiceDates;
   }


	/**
	 *	Returns the value of sqlvar1
	 *	@return sqlvar1
	 */   
	 public Sqlvar1 getSqlvar1(int index) {
   	return sqlda.getSqlvar(index).getSqlvar1();
   }

   /**
	* 	Update Sqlvar1 with the passed value
	*	@param value
	*/
   public void setSqlvar1(int index,char[] value) throws CFException {
      sqlda.getSqlvar(index).setSqlvar1(value);
   }   

     /**
	 * 	Update Sqlvar1 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlvar1(int index,char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlda.getSqlvar(index).setSqlvar1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlvar1 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlvar1(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlda.getSqlvar(index).setSqlvar1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlvar1 with another Field
	 *	@param value
	 */
   public void setSqlvar1(int index,Field source) {
   	sqlda.getSqlvar(index).setSqlvar1(source);
   }  
   
     /**
	 * 	Update Sqlvar1 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlvar1(int index,Field source, int sourceIndex,int sourceLen) {
   	sqlda.getSqlvar(index).setSqlvar1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlvar1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlvar1(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlda.getSqlvar(index).setSqlvar1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFstDt
	 *	@return hvFstDt
	 */
   public char[] getHvFstDt() throws CFException  {              
   		return hostVariables.getHvFstDtGroup().getHvFstDt();
   }

  
	/**
	*  set variable hvFstDt
	*  @param value
	**/
   public void setHvFstDt(char[] value) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(value);
   } 

     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex);
   	
   }
   
   public void setHvFstDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFstDt with another Field
	 *	@param value
	 */
   public void setHvFstDt(Field source) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source);
   }  
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvLstSrvcDtGroup
	 *	@return hvLstSrvcDtGroup
	 */   
	 public HvLstSrvcDtGroup getHvLstSrvcDtGroup() {
   	return hostVariables.getHvLstSrvcDtGroup();
   }

   /**
	* 	Update HvLstSrvcDtGroup with the passed value
	*	@param value
	*/
   public void setHvLstSrvcDtGroup(char[] value) throws CFException {
      hostVariables.setHvLstSrvcDtGroup(value);
   }   

     /**
	 * 	Update HvLstSrvcDtGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setHvLstSrvcDtGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	hostVariables.setHvLstSrvcDtGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvLstSrvcDtGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDtGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvLstSrvcDtGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvLstSrvcDtGroup with another Field
	 *	@param value
	 */
   public void setHvLstSrvcDtGroup(Field source) {
   	hostVariables.setHvLstSrvcDtGroup(source);
   }  
   
     /**
	 * 	Update HvLstSrvcDtGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setHvLstSrvcDtGroup(Field source, int sourceIndex,int sourceLen) {
   	hostVariables.setHvLstSrvcDtGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvLstSrvcDtGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDtGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvLstSrvcDtGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFlnJulianDtNbrGroup
	 *	@return hvFlnJulianDtNbrGroup
	 */   
	 public HvFlnJulianDtNbrGroup getHvFlnJulianDtNbrGroup() {
   	return hostVariables.getHvFlnJulianDtNbrGroup();
   }

   /**
	* 	Update HvFlnJulianDtNbrGroup with the passed value
	*	@param value
	*/
   public void setHvFlnJulianDtNbrGroup(char[] value) throws CFException {
      hostVariables.setHvFlnJulianDtNbrGroup(value);
   }   

     /**
	 * 	Update HvFlnJulianDtNbrGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setHvFlnJulianDtNbrGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	hostVariables.setHvFlnJulianDtNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFlnJulianDtNbrGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFlnJulianDtNbrGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvFlnJulianDtNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFlnJulianDtNbrGroup with another Field
	 *	@param value
	 */
   public void setHvFlnJulianDtNbrGroup(Field source) {
   	hostVariables.setHvFlnJulianDtNbrGroup(source);
   }  
   
     /**
	 * 	Update HvFlnJulianDtNbrGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setHvFlnJulianDtNbrGroup(Field source, int sourceIndex,int sourceLen) {
   	hostVariables.setHvFlnJulianDtNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFlnJulianDtNbrGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFlnJulianDtNbrGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvFlnJulianDtNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFlnSrlNbr
	 *	@return hvFlnSrlNbr
	 */
   public char[] getHvFlnSrlNbr() throws CFException  {              
   		return hostVariables.getHvFlnSrlNbrGroup().getHvFlnSrlNbr();
   }

  
	/**
	*  set variable hvFlnSrlNbr
	*  @param value
	**/
   public void setHvFlnSrlNbr(char[] value) throws CFException {
      hostVariables.getHvFlnSrlNbrGroup().setHvFlnSrlNbr(value);
   } 

     /**
	 * 	Update HvFlnSrlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFlnSrlNbr(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFlnSrlNbrGroup().setHvFlnSrlNbr(source, sourceIndex);
   	
   }
   
   public void setHvFlnSrlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFlnSrlNbrGroup().setHvFlnSrlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFlnSrlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFlnSrlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFlnSrlNbrGroup().setHvFlnSrlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFlnSrlNbr with another Field
	 *	@param value
	 */
   public void setHvFlnSrlNbr(Field source) {
      hostVariables.getHvFlnSrlNbrGroup().setHvFlnSrlNbr(source);
   }  
   
     /**
	 * 	Update HvFlnSrlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFlnSrlNbr(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFlnSrlNbrGroup().setHvFlnSrlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFlnSrlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFlnSrlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFlnSrlNbrGroup().setHvFlnSrlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefEeIdGroup
	 *	@return dderefEeIdGroup
	 */   
	 public DderefEeIdGroup getDderefEeIdGroup() {
   	return dcladjdClmhstDenormRef.getDderefEeIdGroup();
   }

   /**
	* 	Update DderefEeIdGroup with the passed value
	*	@param value
	*/
   public void setDderefEeIdGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefEeIdGroup(value);
   }   

     /**
	 * 	Update DderefEeIdGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefEeIdGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefEeIdGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeIdGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeIdGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefEeIdGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeIdGroup with another Field
	 *	@param value
	 */
   public void setDderefEeIdGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefEeIdGroup(source);
   }  
   
     /**
	 * 	Update DderefEeIdGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefEeIdGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefEeIdGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeIdGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeIdGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefEeIdGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvLstSrvcDt
	 *	@return hvLstSrvcDt
	 */
   public char[] getHvLstSrvcDt() throws CFException  {              
   		return hostVariables.getHvLstSrvcDtGroup().getHvLstSrvcDt();
   }

  
	/**
	*  set variable hvLstSrvcDt
	*  @param value
	**/
   public void setHvLstSrvcDt(char[] value) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(value);
   } 

     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex);
   	
   }
   
   public void setHvLstSrvcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvLstSrvcDt with another Field
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source);
   }  
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition " " for isDt1ReqStartAtTop()
	 *	@return  Returns true if isDt1ReqStartAtTop() is " "
	 */
   public boolean isDt1ReqStartAtTop() throws CFException {
      return dt1ReqContainer.getDt1RequestArea().isDt1ReqStartAtTop();
   }

	/**
	*  set values " "
	*/
   	public void setDt1ReqStartAtTopTrue()  throws CFException{  			
    	dt1ReqContainer.getDt1RequestArea().setDt1ReqStartAtTopTrue();
   	}
	/**
	 *	Returns the value of hvInvnCtlNbrGroup
	 *	@return hvInvnCtlNbrGroup
	 */   
	 public HvInvnCtlNbrGroup getHvInvnCtlNbrGroup() {
   	return hostVariables.getHvInvnCtlNbrGroup();
   }

   /**
	* 	Update HvInvnCtlNbrGroup with the passed value
	*	@param value
	*/
   public void setHvInvnCtlNbrGroup(char[] value) throws CFException {
      hostVariables.setHvInvnCtlNbrGroup(value);
   }   

     /**
	 * 	Update HvInvnCtlNbrGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setHvInvnCtlNbrGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	hostVariables.setHvInvnCtlNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvInvnCtlNbrGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvInvnCtlNbrGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvInvnCtlNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvInvnCtlNbrGroup with another Field
	 *	@param value
	 */
   public void setHvInvnCtlNbrGroup(Field source) {
   	hostVariables.setHvInvnCtlNbrGroup(source);
   }  
   
     /**
	 * 	Update HvInvnCtlNbrGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setHvInvnCtlNbrGroup(Field source, int sourceIndex,int sourceLen) {
   	hostVariables.setHvInvnCtlNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvInvnCtlNbrGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvInvnCtlNbrGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvInvnCtlNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFilmOfcNbr
	 *	@return hvFilmOfcNbr
	 */
   public char[] getHvFilmOfcNbr() throws CFException  {              
   		return hostVariables.getHvFilmOfcNbrGroup().getHvFilmOfcNbr();
   }

  
	/**
	*  set variable hvFilmOfcNbr
	*  @param value
	**/
   public void setHvFilmOfcNbr(char[] value) throws CFException {
      hostVariables.getHvFilmOfcNbrGroup().setHvFilmOfcNbr(value);
   } 

     /**
	 * 	Update HvFilmOfcNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFilmOfcNbr(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFilmOfcNbrGroup().setHvFilmOfcNbr(source, sourceIndex);
   	
   }
   
   public void setHvFilmOfcNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFilmOfcNbrGroup().setHvFilmOfcNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFilmOfcNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFilmOfcNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFilmOfcNbrGroup().setHvFilmOfcNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFilmOfcNbr with another Field
	 *	@param value
	 */
   public void setHvFilmOfcNbr(Field source) {
      hostVariables.getHvFilmOfcNbrGroup().setHvFilmOfcNbr(source);
   }  
   
     /**
	 * 	Update HvFilmOfcNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFilmOfcNbr(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFilmOfcNbrGroup().setHvFilmOfcNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFilmOfcNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFilmOfcNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFilmOfcNbrGroup().setHvFilmOfcNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFilmOfcNbrGroup
	 *	@return hvFilmOfcNbrGroup
	 */   
	 public HvFilmOfcNbrGroup getHvFilmOfcNbrGroup() {
   	return hostVariables.getHvFilmOfcNbrGroup();
   }

   /**
	* 	Update HvFilmOfcNbrGroup with the passed value
	*	@param value
	*/
   public void setHvFilmOfcNbrGroup(char[] value) throws CFException {
      hostVariables.setHvFilmOfcNbrGroup(value);
   }   

     /**
	 * 	Update HvFilmOfcNbrGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setHvFilmOfcNbrGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	hostVariables.setHvFilmOfcNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFilmOfcNbrGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFilmOfcNbrGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvFilmOfcNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFilmOfcNbrGroup with another Field
	 *	@param value
	 */
   public void setHvFilmOfcNbrGroup(Field source) {
   	hostVariables.setHvFilmOfcNbrGroup(source);
   }  
   
     /**
	 * 	Update HvFilmOfcNbrGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setHvFilmOfcNbrGroup(Field source, int sourceIndex,int sourceLen) {
   	hostVariables.setHvFilmOfcNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFilmOfcNbrGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFilmOfcNbrGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvFilmOfcNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "6" for isDt1ReqSearchAuthsOnly()
	 *	@return  Returns true if isDt1ReqSearchAuthsOnly() is "6"
	 */
   public boolean isDt1ReqSearchAuthsOnly() throws CFException {
      return dt1ReqContainer.getDt1RequestArea().isDt1ReqSearchAuthsOnly();
   }

	/**
	*  set values "6"
	*/
   	public void setDt1ReqSearchAuthsOnlyTrue()  throws CFException{  			
    	dt1ReqContainer.getDt1RequestArea().setDt1ReqSearchAuthsOnlyTrue();
   	}
	/**
	 *	Returns the value of queryBaseCteEnd
	 *	@return queryBaseCteEnd
	 */
   public char[] getQueryBaseCteEnd() throws CFException  {              
   		return work.getQueryBaseCteEnd();
   }

  
	/**
	*  set variable queryBaseCteEnd
	*  @param value
	**/
   public void setQueryBaseCteEnd(char[] value) throws CFException {
      work.setQueryBaseCteEnd(value);
   } 

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqld
	 *	@return sqld
	 */
	public short getSqld() throws CFException {        
   		return sqlda.getSqld();
	}
	
	/**
	 * 	Update Sqld with the passed value
	 *	@param number
	 */
	public void setSqld(short number)  throws CFException{
		sqlda.setSqld(number);
	}

	public void setSqld(int number)  throws CFException{
		sqlda.setSqld((short)number);
	}

	public void setSqld(long number)  throws CFException{
		sqlda.setSqld((short)number);
	}



	/**
	 *	Returns the value of sqldaid
	 *	@return sqldaid
	 */
   public char[] getSqldaid() throws CFException  {              
   		return sqlda.getSqldaid();
   }

  
	/**
	*  set variable sqldaid
	*  @param value
	**/
   public void setSqldaid(char[] value) throws CFException {
      sqlda.setSqldaid(value);
   } 

     /**
	 * 	Update Sqldaid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqldaid(char[] source, int sourceIndex) throws CFException {
      sqlda.setSqldaid(source, sourceIndex);
   	
   }
   
   public void setSqldaid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlda.setSqldaid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqldaid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqldaid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlda.setSqldaid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqldaid with another Field
	 *	@param value
	 */
   public void setSqldaid(Field source) {
      sqlda.setSqldaid(source);
   }  
   
     /**
	 * 	Update Sqldaid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqldaid(Field source, int sourceIndex,int sourceLen) {
      sqlda.setSqldaid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqldaid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqldaid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlda.setSqldaid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "7" for isDt1ReqSearchCategory()
	 *	@return  Returns true if isDt1ReqSearchCategory() is "7"
	 */
   public boolean isDt1ReqSearchCategory() throws CFException {
      return dt1ReqContainer.getDt1RequestArea().isDt1ReqSearchCategory();
   }

	/**
	*  set values "7"
	*/
   	public void setDt1ReqSearchCategoryTrue()  throws CFException{  			
    	dt1ReqContainer.getDt1RequestArea().setDt1ReqSearchCategoryTrue();
   	}
	/**
	 *	Returns the value of dderefDepnNbrGroup
	 *	@return dderefDepnNbrGroup
	 */   
	 public DderefDepnNbrGroup getDderefDepnNbrGroup() {
   	return dcladjdClmhstDenormRef.getDderefDepnNbrGroup();
   }

   /**
	* 	Update DderefDepnNbrGroup with the passed value
	*	@param value
	*/
   public void setDderefDepnNbrGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefDepnNbrGroup(value);
   }   

     /**
	 * 	Update DderefDepnNbrGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbrGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefDepnNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbrGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbrGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefDepnNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbrGroup with another Field
	 *	@param value
	 */
   public void setDderefDepnNbrGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefDepnNbrGroup(source);
   }  
   
     /**
	 * 	Update DderefDepnNbrGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbrGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefDepnNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbrGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbrGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefDepnNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryBaseMainSql
	 *	@return queryBaseMainSql
	 */   
	 public QueryBaseMainSql getQueryBaseMainSql() {
   	return queryBaseMainSql;
   }


	/**
	 *	Returns the value of hvFlnSrlNbrGroup
	 *	@return hvFlnSrlNbrGroup
	 */   
	 public HvFlnSrlNbrGroup getHvFlnSrlNbrGroup() {
   	return hostVariables.getHvFlnSrlNbrGroup();
   }

   /**
	* 	Update HvFlnSrlNbrGroup with the passed value
	*	@param value
	*/
   public void setHvFlnSrlNbrGroup(char[] value) throws CFException {
      hostVariables.setHvFlnSrlNbrGroup(value);
   }   

     /**
	 * 	Update HvFlnSrlNbrGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setHvFlnSrlNbrGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	hostVariables.setHvFlnSrlNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFlnSrlNbrGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFlnSrlNbrGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvFlnSrlNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFlnSrlNbrGroup with another Field
	 *	@param value
	 */
   public void setHvFlnSrlNbrGroup(Field source) {
   	hostVariables.setHvFlnSrlNbrGroup(source);
   }  
   
     /**
	 * 	Update HvFlnSrlNbrGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setHvFlnSrlNbrGroup(Field source, int sourceIndex,int sourceLen) {
   	hostVariables.setHvFlnSrlNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFlnSrlNbrGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFlnSrlNbrGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvFlnSrlNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqldabc
	 *	@return sqldabc
	 */
	public int getSqldabc() throws CFException {        
   		return sqlda.getSqldabc();
	}
	
	/**
	 * 	Update Sqldabc with the passed value
	 *	@param number
	 */
	public void setSqldabc(int number)  throws CFException{
		sqlda.setSqldabc(number);
	}


	public void setSqldabc(long number)  throws CFException{
		sqlda.setSqldabc((int)number);
	}


	/**
	 *	Returns the value of hvFstDtGroup
	 *	@return hvFstDtGroup
	 */   
	 public HvFstDtGroup getHvFstDtGroup() {
   	return hostVariables.getHvFstDtGroup();
   }

   /**
	* 	Update HvFstDtGroup with the passed value
	*	@param value
	*/
   public void setHvFstDtGroup(char[] value) throws CFException {
      hostVariables.setHvFstDtGroup(value);
   }   

     /**
	 * 	Update HvFstDtGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setHvFstDtGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	hostVariables.setHvFstDtGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFstDtGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDtGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvFstDtGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFstDtGroup with another Field
	 *	@param value
	 */
   public void setHvFstDtGroup(Field source) {
   	hostVariables.setHvFstDtGroup(source);
   }  
   
     /**
	 * 	Update HvFstDtGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setHvFstDtGroup(Field source, int sourceIndex,int sourceLen) {
   	hostVariables.setHvFstDtGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFstDtGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDtGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvFstDtGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of i
	 *	@return i
	 */
	public short getI() throws CFException {        
   		return work.getI();
	}
	
	/**
	 * 	Update I with the passed value
	 *	@param number
	 */
	public void setI(short number)  throws CFException{
		work.setI(number);
	}

	public void setI(int number)  throws CFException{
		work.setI((short)number);
	}

	public void setI(long number)  throws CFException{
		work.setI((short)number);
	}



	/**
	 *	Returns the value of queryFilterOff
	 *	@return queryFilterOff
	 */   
	 public QueryFilterOff getQueryFilterOff() {
   	return queryFilterOff;
   }


	/**
	 *	Returns the value of hvFlnJulianDtNbr
	 *	@return hvFlnJulianDtNbr
	 */
   public char[] getHvFlnJulianDtNbr() throws CFException  {              
   		return hostVariables.getHvFlnJulianDtNbrGroup().getHvFlnJulianDtNbr();
   }

  
	/**
	*  set variable hvFlnJulianDtNbr
	*  @param value
	**/
   public void setHvFlnJulianDtNbr(char[] value) throws CFException {
      hostVariables.getHvFlnJulianDtNbrGroup().setHvFlnJulianDtNbr(value);
   } 

     /**
	 * 	Update HvFlnJulianDtNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFlnJulianDtNbr(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFlnJulianDtNbrGroup().setHvFlnJulianDtNbr(source, sourceIndex);
   	
   }
   
   public void setHvFlnJulianDtNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFlnJulianDtNbrGroup().setHvFlnJulianDtNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFlnJulianDtNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFlnJulianDtNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFlnJulianDtNbrGroup().setHvFlnJulianDtNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFlnJulianDtNbr with another Field
	 *	@param value
	 */
   public void setHvFlnJulianDtNbr(Field source) {
      hostVariables.getHvFlnJulianDtNbrGroup().setHvFlnJulianDtNbr(source);
   }  
   
     /**
	 * 	Update HvFlnJulianDtNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFlnJulianDtNbr(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFlnJulianDtNbrGroup().setHvFlnJulianDtNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFlnJulianDtNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFlnJulianDtNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFlnJulianDtNbrGroup().setHvFlnJulianDtNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvProvTinsuffRedefined
	 *	@return hvProvTinsuffRedefined
	 */   
	 public HvProvTinsuffRedefined getHvProvTinsuffRedefined() {
   	return hostVariables.getHvProvTinsuffRedefined();
   }

   /**
	* 	Update HvProvTinsuffRedefined with the passed value
	*	@param value
	*/
   public void setHvProvTinsuffRedefined(char[] value) throws CFException {
      hostVariables.setHvProvTinsuffRedefined(value);
   }   

     /**
	 * 	Update HvProvTinsuffRedefined 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setHvProvTinsuffRedefined(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	hostVariables.setHvProvTinsuffRedefined(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTinsuffRedefined 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTinsuffRedefined(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvProvTinsuffRedefined(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTinsuffRedefined with another Field
	 *	@param value
	 */
   public void setHvProvTinsuffRedefined(Field source) {
   	hostVariables.setHvProvTinsuffRedefined(source);
   }  
   
     /**
	 * 	Update HvProvTinsuffRedefined 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setHvProvTinsuffRedefined(Field source, int sourceIndex,int sourceLen) {
   	hostVariables.setHvProvTinsuffRedefined(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTinsuffRedefined 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTinsuffRedefined(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvProvTinsuffRedefined(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryFilterFln
	 *	@return queryFilterFln
	 */   
	 public QueryFilterFln getQueryFilterFln() {
   	return queryFilterFln;
   }


	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryBaseCteStart
	 *	@return queryBaseCteStart
	 */
   public char[] getQueryBaseCteStart() throws CFException  {              
   		return work.getQueryBaseCteStart();
   }

  
	/**
	*  set variable queryBaseCteStart
	*  @param value
	**/
   public void setQueryBaseCteStart(char[] value) throws CFException {
      work.setQueryBaseCteStart(value);
   } 

	/**
	 *	Returns the value of hvProvTin
	 *	@return hvProvTin
	 */
   public char[] getHvProvTin() throws CFException  {              
   		return hostVariables.getHvProvTinsuffRedefined().getHvProvTin();
   }

  
	/**
	*  set variable hvProvTin
	*  @param value
	**/
   public void setHvProvTin(char[] value) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(value);
   } 

     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex);
   	
   }
   
   public void setHvProvTin(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin with another Field
	 *	@param value
	 */
   public void setHvProvTin(Field source) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source);
   }  
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryFilterProviderTin
	 *	@return queryFilterProviderTin
	 */
   public char[] getQueryFilterProviderTin() throws CFException  {              
   		return work.getQueryFilterProviderTin();
   }

  
	/**
	*  set variable queryFilterProviderTin
	*  @param value
	**/
   public void setQueryFilterProviderTin(char[] value) throws CFException {
      work.setQueryFilterProviderTin(value);
   } 

	/**
	 *	Returns the value of hvInvnCtlNbr
	 *	@return hvInvnCtlNbr
	 */
   public char[] getHvInvnCtlNbr() throws CFException  {              
   		return hostVariables.getHvInvnCtlNbrGroup().getHvInvnCtlNbr();
   }

  
	/**
	*  set variable hvInvnCtlNbr
	*  @param value
	**/
   public void setHvInvnCtlNbr(char[] value) throws CFException {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(value);
   } 

     /**
	 * 	Update HvInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setHvInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setHvInvnCtlNbr(Field source) {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update HvInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of dderefPolNbr
	 *	@return dderefPolNbr
	 */
   public char[] getDderefPolNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPolNbrGroup().getDderefPolNbr();
   }

  
	/**
	*  set variable dderefPolNbr
	*  @param value
	**/
   public void setDderefPolNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(value);
   } 

     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDderefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbr with another Field
	 *	@param value
	 */
   public void setDderefPolNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source);
   }  
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "5" for isDt1ReqSearchMbrAuthNbr()
	 *	@return  Returns true if isDt1ReqSearchMbrAuthNbr() is "5"
	 */
   public boolean isDt1ReqSearchMbrAuthNbr() throws CFException {
      return dt1ReqContainer.getDt1RequestArea().isDt1ReqSearchMbrAuthNbr();
   }

	/**
	*  set values "5"
	*/
   	public void setDt1ReqSearchMbrAuthNbrTrue()  throws CFException{  			
    	dt1ReqContainer.getDt1RequestArea().setDt1ReqSearchMbrAuthNbrTrue();
   	}
	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefDepnNbr
	 *	@return dderefDepnNbr
	 */
   public char[] getDderefDepnNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefDepnNbrGroup().getDderefDepnNbr();
   }

  
	/**
	*  set variable dderefDepnNbr
	*  @param value
	**/
   public void setDderefDepnNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(value);
   } 

     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDderefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbr with another Field
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source);
   }  
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqln
	 *	@return sqln
	 */
	public short getSqln() throws CFException {        
   		return sqlda.getSqln();
	}
	
	/**
	 * 	Update Sqln with the passed value
	 *	@param number
	 */
	public void setSqln(short number)  throws CFException{
		sqlda.setSqln(number);
	}

	public void setSqln(int number)  throws CFException{
		sqlda.setSqln((short)number);
	}

	public void setSqln(long number)  throws CFException{
		sqlda.setSqln((short)number);
	}



	/**
	 *	Returns the value of dderefPolNbrGroup
	 *	@return dderefPolNbrGroup
	 */   
	 public DderefPolNbrGroup getDderefPolNbrGroup() {
   	return dcladjdClmhstDenormRef.getDderefPolNbrGroup();
   }

   /**
	* 	Update DderefPolNbrGroup with the passed value
	*	@param value
	*/
   public void setDderefPolNbrGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefPolNbrGroup(value);
   }   

     /**
	 * 	Update DderefPolNbrGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbrGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefPolNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbrGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbrGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefPolNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbrGroup with another Field
	 *	@param value
	 */
   public void setDderefPolNbrGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefPolNbrGroup(source);
   }  
   
     /**
	 * 	Update DderefPolNbrGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbrGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefPolNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbrGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbrGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefPolNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryFilterIcn
	 *	@return queryFilterIcn
	 */
   public char[] getQueryFilterIcn() throws CFException  {              
   		return work.getQueryFilterIcn();
   }

  
	/**
	*  set variable queryFilterIcn
	*  @param value
	**/
   public void setQueryFilterIcn(char[] value) throws CFException {
      work.setQueryFilterIcn(value);
   } 


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcCsrDynamSqlSectOutCtx getProcCsrDynamSqlSectOutCtx() {
            return new ProcCsrDynamSqlSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += queryTextArea.hashCode();
        str += queryFilterServiceDates.hashCode();
        str += queryBaseMainSql.hashCode();
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += queryFilterOff.hashCode();
        str += sqlda.hashCode();
        str += hostVariables.hashCode();
        str += queryFilterFln.hashCode();
       return str.hashCode();
    }

    public ProcCsrDynamSqlSectInCtx clone() {
        ProcCsrDynamSqlSectInCtx cloneObj = new ProcCsrDynamSqlSectInCtx();
        cloneObj.queryTextArea = new QueryTextArea();
        cloneObj.queryTextArea.set(queryTextArea.getClonedField());
        cloneObj.queryFilterServiceDates = new QueryFilterServiceDates();
        cloneObj.queryFilterServiceDates.set(queryFilterServiceDates.getClonedField());
        cloneObj.queryBaseMainSql = new QueryBaseMainSql();
        cloneObj.queryBaseMainSql.set(queryBaseMainSql.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.queryFilterOff = new QueryFilterOff();
        cloneObj.queryFilterOff.set(queryFilterOff.getClonedField());
        cloneObj.sqlda = new Sqlda();
        cloneObj.sqlda.set(sqlda.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        cloneObj.queryFilterFln = new QueryFilterFln();
        cloneObj.queryFilterFln.set(queryFilterFln.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrDynamSqlSectInCtx getProcCsrDynamSqlSectInCtx() {
            return new ProcCsrDynamSqlSectInCtx();
    }
     public class ProcCsrDynamSqlSectOutCtx implements Cloneable {
     QueryTextArea queryTextArea = D5427dt1Ctx.this.getQueryTextArea();
     QueryFilterServiceDates queryFilterServiceDates = D5427dt1Ctx.this.getQueryFilterServiceDates();
     QueryBaseMainSql queryBaseMainSql = D5427dt1Ctx.this.getQueryBaseMainSql();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     QueryFilterOff queryFilterOff = D5427dt1Ctx.this.getQueryFilterOff();
     Sqlda sqlda = D5427dt1Ctx.this.getSqlda();
     QueryFilterFln queryFilterFln = D5427dt1Ctx.this.getQueryFilterFln();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dderefEeId
	 *	@return dderefEeId
	 */
   public char[] getDderefEeId() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefEeIdGroup().getDderefEeId();
   }

  
	/**
	*  set variable dderefEeId
	*  @param value
	**/
   public void setDderefEeId(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(value);
   } 

     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex);
   	
   }
   
   public void setDderefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeId with another Field
	 *	@param value
	 */
   public void setDderefEeId(Field source) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source);
   }  
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryTextArea
	 *	@return queryTextArea
	 */   
	 public QueryTextArea getQueryTextArea() {
   	return queryTextArea;
   }


	/**
	 *	Returns the value of queryTextData
	 *	@return queryTextData
	 */
   public char[] getQueryTextData() throws CFException  {              
   		return queryTextArea.getQueryTextData();
   }

  
	/**
	*  set variable queryTextData
	*  @param value
	**/
   public void setQueryTextData(char[] value) throws CFException {
      queryTextArea.setQueryTextData(value);
   } 

     /**
	 * 	Update QueryTextData 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setQueryTextData(char[] source, int sourceIndex) throws CFException {
      queryTextArea.setQueryTextData(source, sourceIndex);
   	
   }
   
   public void setQueryTextData(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      queryTextArea.setQueryTextData(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update QueryTextData 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setQueryTextData(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      queryTextArea.setQueryTextData(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update QueryTextData with another Field
	 *	@param value
	 */
   public void setQueryTextData(Field source) {
      queryTextArea.setQueryTextData(source);
   }  
   
     /**
	 * 	Update QueryTextData 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setQueryTextData(Field source, int sourceIndex,int sourceLen) {
      queryTextArea.setQueryTextData(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update QueryTextData 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setQueryTextData(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      queryTextArea.setQueryTextData(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryFilterServiceDates
	 *	@return queryFilterServiceDates
	 */   
	 public QueryFilterServiceDates getQueryFilterServiceDates() {
   	return queryFilterServiceDates;
   }


	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryTextLeng
	 *	@return queryTextLeng
	 */
	public short getQueryTextLeng() throws CFException {        
   		return queryTextArea.getQueryTextLeng();
	}
	
	/**
	 * 	Update QueryTextLeng with the passed value
	 *	@param number
	 */
	public void setQueryTextLeng(short number)  throws CFException{
		queryTextArea.setQueryTextLeng(number);
	}

	public void setQueryTextLeng(int number)  throws CFException{
		queryTextArea.setQueryTextLeng((short)number);
	}

	public void setQueryTextLeng(long number)  throws CFException{
		queryTextArea.setQueryTextLeng((short)number);
	}



	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqldata
	 *	@return sqldata
	 */
	public int getSqldata(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqldata();
	}
	
	/**
	 * 	Update Sqldata with the passed value
	 *	@param number
	 */
	public void setSqldata(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqldata(number);
	}


	public void setSqldata(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqldata((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryBaseCteEnd
	 *	@return queryBaseCteEnd
	 */
   public char[] getQueryBaseCteEnd() throws CFException  {              
   		return work.getQueryBaseCteEnd();
   }

  
	/**
	*  set variable queryBaseCteEnd
	*  @param value
	**/
   public void setQueryBaseCteEnd(char[] value) throws CFException {
      work.setQueryBaseCteEnd(value);
   } 

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqld
	 *	@return sqld
	 */
	public short getSqld() throws CFException {        
   		return sqlda.getSqld();
	}
	
	/**
	 * 	Update Sqld with the passed value
	 *	@param number
	 */
	public void setSqld(short number)  throws CFException{
		sqlda.setSqld(number);
	}

	public void setSqld(int number)  throws CFException{
		sqlda.setSqld((short)number);
	}

	public void setSqld(long number)  throws CFException{
		sqlda.setSqld((short)number);
	}



	/**
	 *	Returns the value of sqldaid
	 *	@return sqldaid
	 */
   public char[] getSqldaid() throws CFException  {              
   		return sqlda.getSqldaid();
   }

  
	/**
	*  set variable sqldaid
	*  @param value
	**/
   public void setSqldaid(char[] value) throws CFException {
      sqlda.setSqldaid(value);
   } 

     /**
	 * 	Update Sqldaid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqldaid(char[] source, int sourceIndex) throws CFException {
      sqlda.setSqldaid(source, sourceIndex);
   	
   }
   
   public void setSqldaid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlda.setSqldaid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqldaid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqldaid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlda.setSqldaid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqldaid with another Field
	 *	@param value
	 */
   public void setSqldaid(Field source) {
      sqlda.setSqldaid(source);
   }  
   
     /**
	 * 	Update Sqldaid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqldaid(Field source, int sourceIndex,int sourceLen) {
      sqlda.setSqldaid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqldaid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqldaid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlda.setSqldaid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryBaseMainSql
	 *	@return queryBaseMainSql
	 */   
	 public QueryBaseMainSql getQueryBaseMainSql() {
   	return queryBaseMainSql;
   }


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqldabc
	 *	@return sqldabc
	 */
	public int getSqldabc() throws CFException {        
   		return sqlda.getSqldabc();
	}
	
	/**
	 * 	Update Sqldabc with the passed value
	 *	@param number
	 */
	public void setSqldabc(int number)  throws CFException{
		sqlda.setSqldabc(number);
	}


	public void setSqldabc(long number)  throws CFException{
		sqlda.setSqldabc((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of sqlnamel
	 *	@return sqlnamel
	 */
	public short getSqlnamel(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqlname().getSqlnamel();
	}
	
	/**
	 * 	Update Sqlnamel with the passed value
	 *	@param number
	 */
	public void setSqlnamel(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel(number);
	}

	public void setSqlnamel(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel((short)number);
	}

	public void setSqlnamel(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel((short)number);
	}



	/**
	 *	Returns the value of sqllen
	 *	@return sqllen
	 */
	public short getSqllen(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqllen();
	}
	
	/**
	 * 	Update Sqllen with the passed value
	 *	@param number
	 */
	public void setSqllen(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen(number);
	}

	public void setSqllen(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen((short)number);
	}

	public void setSqllen(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen((short)number);
	}



	/**
	 *	Returns the value of i
	 *	@return i
	 */
	public short getI() throws CFException {        
   		return work.getI();
	}
	
	/**
	 * 	Update I with the passed value
	 *	@param number
	 */
	public void setI(short number)  throws CFException{
		work.setI(number);
	}

	public void setI(int number)  throws CFException{
		work.setI((short)number);
	}

	public void setI(long number)  throws CFException{
		work.setI((short)number);
	}



	/**
	 *	Returns the value of queryFilterOff
	 *	@return queryFilterOff
	 */   
	 public QueryFilterOff getQueryFilterOff() {
   	return queryFilterOff;
   }


	/**
	 *	Returns the value of topsIcn10
	 *	@return topsIcn10
	 */
   public char[] getTopsIcn10() throws CFException  {              
   		return work.getTopsIcn10();
   }

  
	/**
	*  set variable topsIcn10
	*  @param value
	**/
   public void setTopsIcn10(char[] value) throws CFException {
      work.setTopsIcn10(value);
   } 

	/**
	 *	Returns the value of sqlind
	 *	@return sqlind
	 */
	public int getSqlind(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqlind();
	}
	
	/**
	 * 	Update Sqlind with the passed value
	 *	@param number
	 */
	public void setSqlind(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqlind(number);
	}


	public void setSqlind(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqlind((int)number);
	}


	/**
	 *	Returns the value of queryFilterFln
	 *	@return queryFilterFln
	 */   
	 public QueryFilterFln getQueryFilterFln() {
   	return queryFilterFln;
   }


	/**
	 *	Returns the value of queryBaseCteStart
	 *	@return queryBaseCteStart
	 */
   public char[] getQueryBaseCteStart() throws CFException  {              
   		return work.getQueryBaseCteStart();
   }

  
	/**
	*  set variable queryBaseCteStart
	*  @param value
	**/
   public void setQueryBaseCteStart(char[] value) throws CFException {
      work.setQueryBaseCteStart(value);
   } 

	/**
	 *	Returns the value of queryFilterProviderTin
	 *	@return queryFilterProviderTin
	 */
   public char[] getQueryFilterProviderTin() throws CFException  {              
   		return work.getQueryFilterProviderTin();
   }

  
	/**
	*  set variable queryFilterProviderTin
	*  @param value
	**/
   public void setQueryFilterProviderTin(char[] value) throws CFException {
      work.setQueryFilterProviderTin(value);
   } 

	/**
	 *	Returns the value of hvInvnCtlNbr
	 *	@return hvInvnCtlNbr
	 */
   public char[] getHvInvnCtlNbr() throws CFException  {              
   		return hostVariables.getHvInvnCtlNbrGroup().getHvInvnCtlNbr();
   }

  
	/**
	*  set variable hvInvnCtlNbr
	*  @param value
	**/
   public void setHvInvnCtlNbr(char[] value) throws CFException {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(value);
   } 

     /**
	 * 	Update HvInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setHvInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setHvInvnCtlNbr(Field source) {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update HvInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvInvnCtlNbrGroup().setHvInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "0000000001" THRU "9999999999" "AA00000000" THRU "ZZ99999999" for isValidIcnNumValue10()
	 *	@return  Returns true if isValidIcnNumValue10() is "0000000001" THRU "9999999999" "AA00000000" THRU "ZZ99999999"
	 */
   public boolean isValidIcnNumValue10() throws CFException {
      return work.isValidIcnNumValue10();
   }

	/**
	*  set values "0000000001" THRU "9999999999" "AA00000000" THRU "ZZ99999999"
	*/
   	public void setValidIcnNumValue10True()  throws CFException{  			
    	work.setValidIcnNumValue10True();
   	}
	/**
	 *	Returns the value of dderefPolNbr
	 *	@return dderefPolNbr
	 */
   public char[] getDderefPolNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPolNbrGroup().getDderefPolNbr();
   }

  
	/**
	*  set variable dderefPolNbr
	*  @param value
	**/
   public void setDderefPolNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(value);
   } 

     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDderefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbr with another Field
	 *	@param value
	 */
   public void setDderefPolNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source);
   }  
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefDepnNbr
	 *	@return dderefDepnNbr
	 */
   public char[] getDderefDepnNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefDepnNbrGroup().getDderefDepnNbr();
   }

  
	/**
	*  set variable dderefDepnNbr
	*  @param value
	**/
   public void setDderefDepnNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(value);
   } 

     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDderefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbr with another Field
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source);
   }  
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqln
	 *	@return sqln
	 */
	public short getSqln() throws CFException {        
   		return sqlda.getSqln();
	}
	
	/**
	 * 	Update Sqln with the passed value
	 *	@param number
	 */
	public void setSqln(short number)  throws CFException{
		sqlda.setSqln(number);
	}

	public void setSqln(int number)  throws CFException{
		sqlda.setSqln((short)number);
	}

	public void setSqln(long number)  throws CFException{
		sqlda.setSqln((short)number);
	}



	/**
	 *	Returns the value of sqltype
	 *	@return sqltype
	 */
	public short getSqltype(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqltype();
	}
	
	/**
	 * 	Update Sqltype with the passed value
	 *	@param number
	 */
	public void setSqltype(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype(number);
	}

	public void setSqltype(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype((short)number);
	}

	public void setSqltype(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype((short)number);
	}



	/**
	 *	Returns the value of queryFilterIcn
	 *	@return queryFilterIcn
	 */
   public char[] getQueryFilterIcn() throws CFException  {              
   		return work.getQueryFilterIcn();
   }

  
	/**
	*  set variable queryFilterIcn
	*  @param value
	**/
   public void setQueryFilterIcn(char[] value) throws CFException {
      work.setQueryFilterIcn(value);
   } 


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += queryTextArea.hashCode();
        str += queryFilterServiceDates.hashCode();
        str += queryBaseMainSql.hashCode();
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += queryFilterOff.hashCode();
        str += sqlda.hashCode();
        str += queryFilterFln.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public ProcCsrDynamSqlSectOutCtx clone() {
        ProcCsrDynamSqlSectOutCtx cloneObj = new ProcCsrDynamSqlSectOutCtx();
        cloneObj.queryTextArea = new QueryTextArea();
        cloneObj.queryTextArea.set(queryTextArea.getClonedField());
        cloneObj.queryFilterServiceDates = new QueryFilterServiceDates();
        cloneObj.queryFilterServiceDates.set(queryFilterServiceDates.getClonedField());
        cloneObj.queryBaseMainSql = new QueryBaseMainSql();
        cloneObj.queryBaseMainSql.set(queryBaseMainSql.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.queryFilterOff = new QueryFilterOff();
        cloneObj.queryFilterOff.set(queryFilterOff.getClonedField());
        cloneObj.sqlda = new Sqlda();
        cloneObj.sqlda.set(sqlda.getClonedField());
        cloneObj.queryFilterFln = new QueryFilterFln();
        cloneObj.queryFilterFln.set(queryFilterFln.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrDynamSqlSectOutCtx getProcCsrDynamSqlSectOutCtx() {
            return new ProcCsrDynamSqlSectOutCtx();
    }
     public class ProcGetNextSqlSectSplit0InCtx implements Cloneable {
     QueryTextArea queryTextArea = D5427dt1Ctx.this.getQueryTextArea();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     QueryFilterGetNext queryFilterGetNext = D5427dt1Ctx.this.getQueryFilterGetNext();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlda sqlda = D5427dt1Ctx.this.getSqlda();

	/**
	 *	Returns the value of dderefProcTmGroup
	 *	@return dderefProcTmGroup
	 */   
	 public DderefProcTmGroup getDderefProcTmGroup() {
   	return dcladjdClmhstDenormRef.getDderefProcTmGroup();
   }

   /**
	* 	Update DderefProcTmGroup with the passed value
	*	@param value
	*/
   public void setDderefProcTmGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefProcTmGroup(value);
   }   

     /**
	 * 	Update DderefProcTmGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTmGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTmGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTmGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcTmGroup with another Field
	 *	@param value
	 */
   public void setDderefProcTmGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source);
   }  
   
     /**
	 * 	Update DderefProcTmGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTmGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTmGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTmGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefProcTm
	 *	@return dderefProcTm
	 */
   public char[] getDderefProcTm() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcTmGroup().getDderefProcTm();
   }

  
	/**
	*  set variable dderefProcTm
	*  @param value
	**/
   public void setDderefProcTm(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(value);
   } 

     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex);
   	
   }
   
   public void setDderefProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcTm with another Field
	 *	@param value
	 */
   public void setDderefProcTm(Field source) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source);
   }  
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefInvnCtlNbr
	 *	@return dderefInvnCtlNbr
	 */
   public char[] getDderefInvnCtlNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().getDderefInvnCtlNbr();
   }

  
	/**
	*  set variable dderefInvnCtlNbr
	*  @param value
	**/
   public void setDderefInvnCtlNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(value);
   } 

     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefIcnSufxVersNbr
	 *	@return dderefIcnSufxVersNbr
	 */
	public short getDderefIcnSufxVersNbr() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefIcnSufxVersNbr();
	}
	
	/**
	 * 	Update DderefIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setDderefIcnSufxVersNbr(short number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr(number);
	}

	public void setDderefIcnSufxVersNbr(int number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}

	public void setDderefIcnSufxVersNbr(long number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}



	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryTextLeng
	 *	@return queryTextLeng
	 */
	public short getQueryTextLeng() throws CFException {        
   		return queryTextArea.getQueryTextLeng();
	}
	
	/**
	 * 	Update QueryTextLeng with the passed value
	 *	@param number
	 */
	public void setQueryTextLeng(short number)  throws CFException{
		queryTextArea.setQueryTextLeng(number);
	}

	public void setQueryTextLeng(int number)  throws CFException{
		queryTextArea.setQueryTextLeng((short)number);
	}

	public void setQueryTextLeng(long number)  throws CFException{
		queryTextArea.setQueryTextLeng((short)number);
	}



	/**
	 *	Returns the value of dderefProcDt
	 *	@return dderefProcDt
	 */
   public char[] getDderefProcDt() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcDtGroup().getDderefProcDt();
   }

  
	/**
	*  set variable dderefProcDt
	*  @param value
	**/
   public void setDderefProcDt(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(value);
   } 

     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex);
   	
   }
   
   public void setDderefProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcDt with another Field
	 *	@param value
	 */
   public void setDderefProcDt(Field source) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source);
   }  
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of i
	 *	@return i
	 */
	public short getI() throws CFException {        
   		return work.getI();
	}
	
	/**
	 * 	Update I with the passed value
	 *	@param number
	 */
	public void setI(short number)  throws CFException{
		work.setI(number);
	}

	public void setI(int number)  throws CFException{
		work.setI((short)number);
	}

	public void setI(long number)  throws CFException{
		work.setI((short)number);
	}



	/**
	 *	Returns the value of dderefInvnCtlNbrGroup
	 *	@return dderefInvnCtlNbrGroup
	 */   
	 public DderefInvnCtlNbrGroup getDderefInvnCtlNbrGroup() {
   	return dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup();
   }

   /**
	* 	Update DderefInvnCtlNbrGroup with the passed value
	*	@param value
	*/
   public void setDderefInvnCtlNbrGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(value);
   }   

     /**
	 * 	Update DderefInvnCtlNbrGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbrGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbrGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbrGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefInvnCtlNbrGroup with another Field
	 *	@param value
	 */
   public void setDderefInvnCtlNbrGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(source);
   }  
   
     /**
	 * 	Update DderefInvnCtlNbrGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbrGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbrGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbrGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefProcDtGroup
	 *	@return dderefProcDtGroup
	 */   
	 public DderefProcDtGroup getDderefProcDtGroup() {
   	return dcladjdClmhstDenormRef.getDderefProcDtGroup();
   }

   /**
	* 	Update DderefProcDtGroup with the passed value
	*	@param value
	*/
   public void setDderefProcDtGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefProcDtGroup(value);
   }   

     /**
	 * 	Update DderefProcDtGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDtGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDtGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDtGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcDtGroup with another Field
	 *	@param value
	 */
   public void setDderefProcDtGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source);
   }  
   
     /**
	 * 	Update DderefProcDtGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDtGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDtGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDtGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefIcnSufxCd
	 *	@return dderefIcnSufxCd
	 */
   public char[] getDderefIcnSufxCd() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().getDderefIcnSufxCd();
   }

  
	/**
	*  set variable dderefIcnSufxCd
	*  @param value
	**/
   public void setDderefIcnSufxCd(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(value);
   } 

     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setDderefIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefIcnSufxCd with another Field
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source);
   }  
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPgmIdLstCharValGroup
	 *	@return dderefPgmIdLstCharValGroup
	 */   
	 public DderefPgmIdLstCharValGroup getDderefPgmIdLstCharValGroup() {
   	return dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup();
   }

   /**
	* 	Update DderefPgmIdLstCharValGroup with the passed value
	*	@param value
	*/
   public void setDderefPgmIdLstCharValGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(value);
   }   

     /**
	 * 	Update DderefPgmIdLstCharValGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharValGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPgmIdLstCharValGroup with another Field
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source);
   }  
   
     /**
	 * 	Update DderefPgmIdLstCharValGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharValGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryFilterGetNext
	 *	@return queryFilterGetNext
	 */   
	 public QueryFilterGetNext getQueryFilterGetNext() {
   	return queryFilterGetNext;
   }


	/**
	 *	Returns the value of sqln
	 *	@return sqln
	 */
	public short getSqln() throws CFException {        
   		return sqlda.getSqln();
	}
	
	/**
	 * 	Update Sqln with the passed value
	 *	@param number
	 */
	public void setSqln(short number)  throws CFException{
		sqlda.setSqln(number);
	}

	public void setSqln(int number)  throws CFException{
		sqlda.setSqln((short)number);
	}

	public void setSqln(long number)  throws CFException{
		sqlda.setSqln((short)number);
	}



	/**
	 *	Returns the value of sqld
	 *	@return sqld
	 */
	public short getSqld() throws CFException {        
   		return sqlda.getSqld();
	}
	
	/**
	 * 	Update Sqld with the passed value
	 *	@param number
	 */
	public void setSqld(short number)  throws CFException{
		sqlda.setSqld(number);
	}

	public void setSqld(int number)  throws CFException{
		sqlda.setSqld((short)number);
	}

	public void setSqld(long number)  throws CFException{
		sqlda.setSqld((short)number);
	}



	/**
	 *	Returns the value of dderefIcnSufxCdGroup
	 *	@return dderefIcnSufxCdGroup
	 */   
	 public DderefIcnSufxCdGroup getDderefIcnSufxCdGroup() {
   	return dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup();
   }

   /**
	* 	Update DderefIcnSufxCdGroup with the passed value
	*	@param value
	*/
   public void setDderefIcnSufxCdGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefIcnSufxCdGroup(value);
   }   

     /**
	 * 	Update DderefIcnSufxCdGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefIcnSufxCdGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefIcnSufxCdGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefIcnSufxCdGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCdGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefIcnSufxCdGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefIcnSufxCdGroup with another Field
	 *	@param value
	 */
   public void setDderefIcnSufxCdGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefIcnSufxCdGroup(source);
   }  
   
     /**
	 * 	Update DderefIcnSufxCdGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefIcnSufxCdGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefIcnSufxCdGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefIcnSufxCdGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCdGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefIcnSufxCdGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPgmIdLstCharVal
	 *	@return dderefPgmIdLstCharVal
	 */
   public char[] getDderefPgmIdLstCharVal() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().getDderefPgmIdLstCharVal();
   }

  
	/**
	*  set variable dderefPgmIdLstCharVal
	*  @param value
	**/
   public void setDderefPgmIdLstCharVal(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefLnId
	 *	@return dderefLnId
	 */
	public short getDderefLnId() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefLnIdGroup().getDderefLnId();
	}
	
	/**
	 * 	Update DderefLnId with the passed value
	 *	@param number
	 */
	public void setDderefLnId(short number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId(number);
	}

	public void setDderefLnId(int number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}

	public void setDderefLnId(long number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}




        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcGetNextSqlSectSplit0OutCtx getProcGetNextSqlSectSplit0OutCtx() {
            return new ProcGetNextSqlSectSplit0OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += queryTextArea.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += queryFilterGetNext.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += sqlda.hashCode();
       return str.hashCode();
    }

    public ProcGetNextSqlSectSplit0InCtx clone() {
        ProcGetNextSqlSectSplit0InCtx cloneObj = new ProcGetNextSqlSectSplit0InCtx();
        cloneObj.queryTextArea = new QueryTextArea();
        cloneObj.queryTextArea.set(queryTextArea.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.queryFilterGetNext = new QueryFilterGetNext();
        cloneObj.queryFilterGetNext.set(queryFilterGetNext.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlda = new Sqlda();
        cloneObj.sqlda.set(sqlda.getClonedField());
        return cloneObj;
    }

    }

    public ProcGetNextSqlSectSplit0InCtx getProcGetNextSqlSectSplit0InCtx() {
            return new ProcGetNextSqlSectSplit0InCtx();
    }
     public class ProcGetNextSqlSectSplit0OutCtx implements Cloneable {
     QueryTextArea queryTextArea = D5427dt1Ctx.this.getQueryTextArea();
     QueryFilterGetNext queryFilterGetNext = D5427dt1Ctx.this.getQueryFilterGetNext();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlda sqlda = D5427dt1Ctx.this.getSqlda();

	/**
	 *	Returns the value of queryTextData
	 *	@return queryTextData
	 */
   public char[] getQueryTextData() throws CFException  {              
   		return queryTextArea.getQueryTextData();
   }

  
	/**
	*  set variable queryTextData
	*  @param value
	**/
   public void setQueryTextData(char[] value) throws CFException {
      queryTextArea.setQueryTextData(value);
   } 

     /**
	 * 	Update QueryTextData 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setQueryTextData(char[] source, int sourceIndex) throws CFException {
      queryTextArea.setQueryTextData(source, sourceIndex);
   	
   }
   
   public void setQueryTextData(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      queryTextArea.setQueryTextData(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update QueryTextData 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setQueryTextData(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      queryTextArea.setQueryTextData(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update QueryTextData with another Field
	 *	@param value
	 */
   public void setQueryTextData(Field source) {
      queryTextArea.setQueryTextData(source);
   }  
   
     /**
	 * 	Update QueryTextData 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setQueryTextData(Field source, int sourceIndex,int sourceLen) {
      queryTextArea.setQueryTextData(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update QueryTextData 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setQueryTextData(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      queryTextArea.setQueryTextData(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public int getNextIcnSufxVersNbr() throws CFException {
   		return nextKey.getNextIcnSufxVersNbr();
	}


	/**
	 *	Returns String value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public char[]  getNextIcnSufxVersNbrString() throws CFException {
	     return String.valueOf(nextKey.getNextIcnSufxVersNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextIcnSufxVersNbrIsNumeric()  throws CFException{
	    return nextKey.nextIcnSufxVersNbrIsNumeric();
	}

	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setNextIcnSufxVersNbr(int number)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(number);
	}
	

	public void setNextIcnSufxVersNbr(long number)  throws CFException{
	    nextKey.setNextIcnSufxVersNbr(number);
	}
	
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbr(char[] value)  throws CFException {
		nextKey.setNextIcnSufxVersNbr(value);
	}
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbrString(char[] value)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(value);
	}	

	/**
	 *	Returns the value of dderefIcnSufxVersNbr
	 *	@return dderefIcnSufxVersNbr
	 */
	public short getDderefIcnSufxVersNbr() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefIcnSufxVersNbr();
	}
	
	/**
	 * 	Update DderefIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setDderefIcnSufxVersNbr(short number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr(number);
	}

	public void setDderefIcnSufxVersNbr(int number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}

	public void setDderefIcnSufxVersNbr(long number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}



	/**
	 *	Returns the value of queryTextLeng
	 *	@return queryTextLeng
	 */
	public short getQueryTextLeng() throws CFException {        
   		return queryTextArea.getQueryTextLeng();
	}
	
	/**
	 * 	Update QueryTextLeng with the passed value
	 *	@param number
	 */
	public void setQueryTextLeng(short number)  throws CFException{
		queryTextArea.setQueryTextLeng(number);
	}

	public void setQueryTextLeng(int number)  throws CFException{
		queryTextArea.setQueryTextLeng((short)number);
	}

	public void setQueryTextLeng(long number)  throws CFException{
		queryTextArea.setQueryTextLeng((short)number);
	}



	/**
	 *	Returns the value of dderefProcDt
	 *	@return dderefProcDt
	 */
   public char[] getDderefProcDt() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcDtGroup().getDderefProcDt();
   }

  
	/**
	*  set variable dderefProcDt
	*  @param value
	**/
   public void setDderefProcDt(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(value);
   } 

     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex);
   	
   }
   
   public void setDderefProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcDt with another Field
	 *	@param value
	 */
   public void setDderefProcDt(Field source) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source);
   }  
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextLnId
	 *	@return nextLnId
	 */
	public int getNextLnId() throws CFException {
   		return nextKey.getNextLnId();
	}


	/**
	 *	Returns String value of nextLnId
	 *	@return nextLnId
	 */
	public char[]  getNextLnIdString() throws CFException {
	     return String.valueOf(nextKey.getNextLnIdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextLnIdIsNumeric()  throws CFException{
	    return nextKey.nextLnIdIsNumeric();
	}

	/**
	 * 	Update NextLnId with the passed value
	 *	@param number
	 */
	public void setNextLnId(int number)  throws CFException{
		nextKey.setNextLnId(number);
	}
	

	public void setNextLnId(long number)  throws CFException{
	    nextKey.setNextLnId(number);
	}
	
	
	/**
	 * 	Update NextLnId with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextLnId(char[] value)  throws CFException {
		nextKey.setNextLnId(value);
	}
	
	/**
	 * 	Update NextLnId with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextLnIdString(char[] value)  throws CFException{
		nextKey.setNextLnId(value);
	}	

	/**
	 *	Returns the value of dderefIcnSufxCd
	 *	@return dderefIcnSufxCd
	 */
   public char[] getDderefIcnSufxCd() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().getDderefIcnSufxCd();
   }

  
	/**
	*  set variable dderefIcnSufxCd
	*  @param value
	**/
   public void setDderefIcnSufxCd(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(value);
   } 

     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setDderefIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefIcnSufxCd with another Field
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source);
   }  
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqldata
	 *	@return sqldata
	 */
	public int getSqldata(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqldata();
	}
	
	/**
	 * 	Update Sqldata with the passed value
	 *	@param number
	 */
	public void setSqldata(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqldata(number);
	}


	public void setSqldata(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqldata((int)number);
	}


	/**
	 *	Returns the value of queryFilterGetNext
	 *	@return queryFilterGetNext
	 */   
	 public QueryFilterGetNext getQueryFilterGetNext() {
   	return queryFilterGetNext;
   }


	/**
	 *	Returns the value of nextPgmIdLstCharVal
	 *	@return nextPgmIdLstCharVal
	 */
   public char[] getNextPgmIdLstCharVal() throws CFException  {              
   		return nextKey.getNextPgmIdLstCharVal();
   }

  
	/**
	*  set variable nextPgmIdLstCharVal
	*  @param value
	**/
   public void setNextPgmIdLstCharVal(char[] value) throws CFException {
      nextKey.setNextPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source) {
      nextKey.setNextPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqld
	 *	@return sqld
	 */
	public short getSqld() throws CFException {        
   		return sqlda.getSqld();
	}
	
	/**
	 * 	Update Sqld with the passed value
	 *	@param number
	 */
	public void setSqld(short number)  throws CFException{
		sqlda.setSqld(number);
	}

	public void setSqld(int number)  throws CFException{
		sqlda.setSqld((short)number);
	}

	public void setSqld(long number)  throws CFException{
		sqlda.setSqld((short)number);
	}



	/**
	 *	Returns the value of dderefLnId
	 *	@return dderefLnId
	 */
	public short getDderefLnId() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefLnIdGroup().getDderefLnId();
	}
	
	/**
	 * 	Update DderefLnId with the passed value
	 *	@param number
	 */
	public void setDderefLnId(short number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId(number);
	}

	public void setDderefLnId(int number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}

	public void setDderefLnId(long number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}



	/**
	 *	Returns the value of nextProcTm
	 *	@return nextProcTm
	 */
   public char[] getNextProcTm() throws CFException  {              
   		return nextKey.getNextProcTm();
   }

  
	/**
	*  set variable nextProcTm
	*  @param value
	**/
   public void setNextProcTm(char[] value) throws CFException {
      nextKey.setNextProcTm(value);
   } 

     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcTm(source, sourceIndex);
   	
   }
   
   public void setNextProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcTm with another Field
	 *	@param value
	 */
   public void setNextProcTm(Field source) {
      nextKey.setNextProcTm(source);
   }  
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefProcTm
	 *	@return dderefProcTm
	 */
   public char[] getDderefProcTm() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcTmGroup().getDderefProcTm();
   }

  
	/**
	*  set variable dderefProcTm
	*  @param value
	**/
   public void setDderefProcTm(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(value);
   } 

     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex);
   	
   }
   
   public void setDderefProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcTm with another Field
	 *	@param value
	 */
   public void setDderefProcTm(Field source) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source);
   }  
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefInvnCtlNbr
	 *	@return dderefInvnCtlNbr
	 */
   public char[] getDderefInvnCtlNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().getDderefInvnCtlNbr();
   }

  
	/**
	*  set variable dderefInvnCtlNbr
	*  @param value
	**/
   public void setDderefInvnCtlNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(value);
   } 

     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlnamel
	 *	@return sqlnamel
	 */
	public short getSqlnamel(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqlname().getSqlnamel();
	}
	
	/**
	 * 	Update Sqlnamel with the passed value
	 *	@param number
	 */
	public void setSqlnamel(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel(number);
	}

	public void setSqlnamel(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel((short)number);
	}

	public void setSqlnamel(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel((short)number);
	}



	/**
	 *	Returns the value of sqllen
	 *	@return sqllen
	 */
	public short getSqllen(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqllen();
	}
	
	/**
	 * 	Update Sqllen with the passed value
	 *	@param number
	 */
	public void setSqllen(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen(number);
	}

	public void setSqllen(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen((short)number);
	}

	public void setSqllen(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen((short)number);
	}



	/**
	 *	Returns the value of i
	 *	@return i
	 */
	public short getI() throws CFException {        
   		return work.getI();
	}
	
	/**
	 * 	Update I with the passed value
	 *	@param number
	 */
	public void setI(short number)  throws CFException{
		work.setI(number);
	}

	public void setI(int number)  throws CFException{
		work.setI((short)number);
	}

	public void setI(long number)  throws CFException{
		work.setI((short)number);
	}



	/**
	 *	Returns the value of sqlind
	 *	@return sqlind
	 */
	public int getSqlind(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqlind();
	}
	
	/**
	 * 	Update Sqlind with the passed value
	 *	@param number
	 */
	public void setSqlind(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqlind(number);
	}


	public void setSqlind(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqlind((int)number);
	}


	/**
	 *	Returns the value of nextIcnSufxCd
	 *	@return nextIcnSufxCd
	 */
   public char[] getNextIcnSufxCd() throws CFException  {              
   		return nextKey.getNextIcnSufxCd();
   }

  
	/**
	*  set variable nextIcnSufxCd
	*  @param value
	**/
   public void setNextIcnSufxCd(char[] value) throws CFException {
      nextKey.setNextIcnSufxCd(value);
   } 

     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setNextIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextIcnSufxCd with another Field
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source) {
      nextKey.setNextIcnSufxCd(source);
   }  
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextInvnCtlNbr
	 *	@return nextInvnCtlNbr
	 */
   public char[] getNextInvnCtlNbr() throws CFException  {              
   		return nextKey.getNextInvnCtlNbr();
   }

  
	/**
	*  set variable nextInvnCtlNbr
	*  @param value
	**/
   public void setNextInvnCtlNbr(char[] value) throws CFException {
      nextKey.setNextInvnCtlNbr(value);
   } 

     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setNextInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source) {
      nextKey.setNextInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextKey
	 *	@return nextKey
	 */   
	 public NextKey getNextKey() {
   	return nextKey;
   }


	/**
	 *	Returns the value of sqln
	 *	@return sqln
	 */
	public short getSqln() throws CFException {        
   		return sqlda.getSqln();
	}
	
	/**
	 * 	Update Sqln with the passed value
	 *	@param number
	 */
	public void setSqln(short number)  throws CFException{
		sqlda.setSqln(number);
	}

	public void setSqln(int number)  throws CFException{
		sqlda.setSqln((short)number);
	}

	public void setSqln(long number)  throws CFException{
		sqlda.setSqln((short)number);
	}



	/**
	 *	Returns the value of sqltype
	 *	@return sqltype
	 */
	public short getSqltype(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqltype();
	}
	
	/**
	 * 	Update Sqltype with the passed value
	 *	@param number
	 */
	public void setSqltype(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype(number);
	}

	public void setSqltype(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype((short)number);
	}

	public void setSqltype(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype((short)number);
	}



	/**
	 *	Returns the value of nextProcDt
	 *	@return nextProcDt
	 */
   public char[] getNextProcDt() throws CFException  {              
   		return nextKey.getNextProcDt();
   }

  
	/**
	*  set variable nextProcDt
	*  @param value
	**/
   public void setNextProcDt(char[] value) throws CFException {
      nextKey.setNextProcDt(value);
   } 

     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcDt(source, sourceIndex);
   	
   }
   
   public void setNextProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcDt with another Field
	 *	@param value
	 */
   public void setNextProcDt(Field source) {
      nextKey.setNextProcDt(source);
   }  
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPgmIdLstCharVal
	 *	@return dderefPgmIdLstCharVal
	 */
   public char[] getDderefPgmIdLstCharVal() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().getDderefPgmIdLstCharVal();
   }

  
	/**
	*  set variable dderefPgmIdLstCharVal
	*  @param value
	**/
   public void setDderefPgmIdLstCharVal(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += queryTextArea.hashCode();
        str += queryFilterGetNext.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += sqlda.hashCode();
       return str.hashCode();
    }

    public ProcGetNextSqlSectSplit0OutCtx clone() {
        ProcGetNextSqlSectSplit0OutCtx cloneObj = new ProcGetNextSqlSectSplit0OutCtx();
        cloneObj.queryTextArea = new QueryTextArea();
        cloneObj.queryTextArea.set(queryTextArea.getClonedField());
        cloneObj.queryFilterGetNext = new QueryFilterGetNext();
        cloneObj.queryFilterGetNext.set(queryFilterGetNext.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlda = new Sqlda();
        cloneObj.sqlda.set(sqlda.getClonedField());
        return cloneObj;
    }

    }

    public ProcGetNextSqlSectSplit0OutCtx getProcGetNextSqlSectSplit0OutCtx() {
            return new ProcGetNextSqlSectSplit0OutCtx();
    }
     public class ProcGetNextSqlSectSplit1InCtx implements Cloneable {
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Sqlda sqlda = D5427dt1Ctx.this.getSqlda();

	/**
	 *	Returns the value of dderefProcTmGroup
	 *	@return dderefProcTmGroup
	 */   
	 public DderefProcTmGroup getDderefProcTmGroup() {
   	return dcladjdClmhstDenormRef.getDderefProcTmGroup();
   }

   /**
	* 	Update DderefProcTmGroup with the passed value
	*	@param value
	*/
   public void setDderefProcTmGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefProcTmGroup(value);
   }   

     /**
	 * 	Update DderefProcTmGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTmGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTmGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTmGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcTmGroup with another Field
	 *	@param value
	 */
   public void setDderefProcTmGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source);
   }  
   
     /**
	 * 	Update DderefProcTmGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTmGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTmGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTmGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefProcTm
	 *	@return dderefProcTm
	 */
   public char[] getDderefProcTm() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcTmGroup().getDderefProcTm();
   }

  
	/**
	*  set variable dderefProcTm
	*  @param value
	**/
   public void setDderefProcTm(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(value);
   } 

     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex);
   	
   }
   
   public void setDderefProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcTm with another Field
	 *	@param value
	 */
   public void setDderefProcTm(Field source) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source);
   }  
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefInvnCtlNbr
	 *	@return dderefInvnCtlNbr
	 */
   public char[] getDderefInvnCtlNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().getDderefInvnCtlNbr();
   }

  
	/**
	*  set variable dderefInvnCtlNbr
	*  @param value
	**/
   public void setDderefInvnCtlNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(value);
   } 

     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefIcnSufxVersNbr
	 *	@return dderefIcnSufxVersNbr
	 */
	public short getDderefIcnSufxVersNbr() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefIcnSufxVersNbr();
	}
	
	/**
	 * 	Update DderefIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setDderefIcnSufxVersNbr(short number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr(number);
	}

	public void setDderefIcnSufxVersNbr(int number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}

	public void setDderefIcnSufxVersNbr(long number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}



	/**
	 *	Returns the value of dderefProcDt
	 *	@return dderefProcDt
	 */
   public char[] getDderefProcDt() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcDtGroup().getDderefProcDt();
   }

  
	/**
	*  set variable dderefProcDt
	*  @param value
	**/
   public void setDderefProcDt(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(value);
   } 

     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex);
   	
   }
   
   public void setDderefProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcDt with another Field
	 *	@param value
	 */
   public void setDderefProcDt(Field source) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source);
   }  
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefInvnCtlNbrGroup
	 *	@return dderefInvnCtlNbrGroup
	 */   
	 public DderefInvnCtlNbrGroup getDderefInvnCtlNbrGroup() {
   	return dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup();
   }

   /**
	* 	Update DderefInvnCtlNbrGroup with the passed value
	*	@param value
	*/
   public void setDderefInvnCtlNbrGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(value);
   }   

     /**
	 * 	Update DderefInvnCtlNbrGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbrGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbrGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbrGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefInvnCtlNbrGroup with another Field
	 *	@param value
	 */
   public void setDderefInvnCtlNbrGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(source);
   }  
   
     /**
	 * 	Update DderefInvnCtlNbrGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbrGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbrGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbrGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefProcDtGroup
	 *	@return dderefProcDtGroup
	 */   
	 public DderefProcDtGroup getDderefProcDtGroup() {
   	return dcladjdClmhstDenormRef.getDderefProcDtGroup();
   }

   /**
	* 	Update DderefProcDtGroup with the passed value
	*	@param value
	*/
   public void setDderefProcDtGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefProcDtGroup(value);
   }   

     /**
	 * 	Update DderefProcDtGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDtGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDtGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDtGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcDtGroup with another Field
	 *	@param value
	 */
   public void setDderefProcDtGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source);
   }  
   
     /**
	 * 	Update DderefProcDtGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDtGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDtGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDtGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPgmIdLstCharValGroup
	 *	@return dderefPgmIdLstCharValGroup
	 */   
	 public DderefPgmIdLstCharValGroup getDderefPgmIdLstCharValGroup() {
   	return dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup();
   }

   /**
	* 	Update DderefPgmIdLstCharValGroup with the passed value
	*	@param value
	*/
   public void setDderefPgmIdLstCharValGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(value);
   }   

     /**
	 * 	Update DderefPgmIdLstCharValGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharValGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPgmIdLstCharValGroup with another Field
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source);
   }  
   
     /**
	 * 	Update DderefPgmIdLstCharValGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharValGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefIcnSufxCd
	 *	@return dderefIcnSufxCd
	 */
   public char[] getDderefIcnSufxCd() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().getDderefIcnSufxCd();
   }

  
	/**
	*  set variable dderefIcnSufxCd
	*  @param value
	**/
   public void setDderefIcnSufxCd(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(value);
   } 

     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setDderefIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefIcnSufxCd with another Field
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source);
   }  
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqln
	 *	@return sqln
	 */
	public short getSqln() throws CFException {        
   		return sqlda.getSqln();
	}
	
	/**
	 * 	Update Sqln with the passed value
	 *	@param number
	 */
	public void setSqln(short number)  throws CFException{
		sqlda.setSqln(number);
	}

	public void setSqln(int number)  throws CFException{
		sqlda.setSqln((short)number);
	}

	public void setSqln(long number)  throws CFException{
		sqlda.setSqln((short)number);
	}



	/**
	 *	Returns the value of sqld
	 *	@return sqld
	 */
	public short getSqld() throws CFException {        
   		return sqlda.getSqld();
	}
	
	/**
	 * 	Update Sqld with the passed value
	 *	@param number
	 */
	public void setSqld(short number)  throws CFException{
		sqlda.setSqld(number);
	}

	public void setSqld(int number)  throws CFException{
		sqlda.setSqld((short)number);
	}

	public void setSqld(long number)  throws CFException{
		sqlda.setSqld((short)number);
	}



	/**
	 *	Returns the value of dderefIcnSufxCdGroup
	 *	@return dderefIcnSufxCdGroup
	 */   
	 public DderefIcnSufxCdGroup getDderefIcnSufxCdGroup() {
   	return dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup();
   }

   /**
	* 	Update DderefIcnSufxCdGroup with the passed value
	*	@param value
	*/
   public void setDderefIcnSufxCdGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefIcnSufxCdGroup(value);
   }   

     /**
	 * 	Update DderefIcnSufxCdGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefIcnSufxCdGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefIcnSufxCdGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefIcnSufxCdGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCdGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefIcnSufxCdGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefIcnSufxCdGroup with another Field
	 *	@param value
	 */
   public void setDderefIcnSufxCdGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefIcnSufxCdGroup(source);
   }  
   
     /**
	 * 	Update DderefIcnSufxCdGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefIcnSufxCdGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefIcnSufxCdGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefIcnSufxCdGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCdGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefIcnSufxCdGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefLnIdGroup
	 *	@return dderefLnIdGroup
	 */   
	 public DderefLnIdGroup getDderefLnIdGroup() {
   	return dcladjdClmhstDenormRef.getDderefLnIdGroup();
   }

   /**
	* 	Update DderefLnIdGroup with the passed value
	*	@param value
	*/
   public void setDderefLnIdGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefLnIdGroup(value);
   }   

     /**
	 * 	Update DderefLnIdGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefLnIdGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefLnIdGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefLnIdGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefLnIdGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefLnIdGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefLnIdGroup with another Field
	 *	@param value
	 */
   public void setDderefLnIdGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefLnIdGroup(source);
   }  
   
     /**
	 * 	Update DderefLnIdGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefLnIdGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefLnIdGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefLnIdGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefLnIdGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefLnIdGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPgmIdLstCharVal
	 *	@return dderefPgmIdLstCharVal
	 */
   public char[] getDderefPgmIdLstCharVal() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().getDderefPgmIdLstCharVal();
   }

  
	/**
	*  set variable dderefPgmIdLstCharVal
	*  @param value
	**/
   public void setDderefPgmIdLstCharVal(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefLnId
	 *	@return dderefLnId
	 */
	public short getDderefLnId() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefLnIdGroup().getDderefLnId();
	}
	
	/**
	 * 	Update DderefLnId with the passed value
	 *	@param number
	 */
	public void setDderefLnId(short number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId(number);
	}

	public void setDderefLnId(int number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}

	public void setDderefLnId(long number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}




        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcGetNextSqlSectSplit1OutCtx getProcGetNextSqlSectSplit1OutCtx() {
            return new ProcGetNextSqlSectSplit1OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dcladjdClmhstDenormRef.hashCode();
        str += sqlda.hashCode();
       return str.hashCode();
    }

    public ProcGetNextSqlSectSplit1InCtx clone() {
        ProcGetNextSqlSectSplit1InCtx cloneObj = new ProcGetNextSqlSectSplit1InCtx();
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.sqlda = new Sqlda();
        cloneObj.sqlda.set(sqlda.getClonedField());
        return cloneObj;
    }

    }

    public ProcGetNextSqlSectSplit1InCtx getProcGetNextSqlSectSplit1InCtx() {
            return new ProcGetNextSqlSectSplit1InCtx();
    }
     public class ProcGetNextSqlSectSplit1OutCtx implements Cloneable {
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Sqlda sqlda = D5427dt1Ctx.this.getSqlda();

	/**
	 *	Returns the value of sqldata
	 *	@return sqldata
	 */
	public int getSqldata(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqldata();
	}
	
	/**
	 * 	Update Sqldata with the passed value
	 *	@param number
	 */
	public void setSqldata(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqldata(number);
	}


	public void setSqldata(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqldata((int)number);
	}


	/**
	 *	Returns the value of sqln
	 *	@return sqln
	 */
	public short getSqln() throws CFException {        
   		return sqlda.getSqln();
	}
	
	/**
	 * 	Update Sqln with the passed value
	 *	@param number
	 */
	public void setSqln(short number)  throws CFException{
		sqlda.setSqln(number);
	}

	public void setSqln(int number)  throws CFException{
		sqlda.setSqln((short)number);
	}

	public void setSqln(long number)  throws CFException{
		sqlda.setSqln((short)number);
	}



	/**
	 *	Returns the value of sqlnamel
	 *	@return sqlnamel
	 */
	public short getSqlnamel(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqlname().getSqlnamel();
	}
	
	/**
	 * 	Update Sqlnamel with the passed value
	 *	@param number
	 */
	public void setSqlnamel(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel(number);
	}

	public void setSqlnamel(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel((short)number);
	}

	public void setSqlnamel(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel((short)number);
	}



	/**
	 *	Returns the value of sqltype
	 *	@return sqltype
	 */
	public short getSqltype(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqltype();
	}
	
	/**
	 * 	Update Sqltype with the passed value
	 *	@param number
	 */
	public void setSqltype(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype(number);
	}

	public void setSqltype(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype((short)number);
	}

	public void setSqltype(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype((short)number);
	}



	/**
	 *	Returns the value of sqllen
	 *	@return sqllen
	 */
	public short getSqllen(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqllen();
	}
	
	/**
	 * 	Update Sqllen with the passed value
	 *	@param number
	 */
	public void setSqllen(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen(number);
	}

	public void setSqllen(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen((short)number);
	}

	public void setSqllen(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen((short)number);
	}



	/**
	 *	Returns the value of sqld
	 *	@return sqld
	 */
	public short getSqld() throws CFException {        
   		return sqlda.getSqld();
	}
	
	/**
	 * 	Update Sqld with the passed value
	 *	@param number
	 */
	public void setSqld(short number)  throws CFException{
		sqlda.setSqld(number);
	}

	public void setSqld(int number)  throws CFException{
		sqlda.setSqld((short)number);
	}

	public void setSqld(long number)  throws CFException{
		sqlda.setSqld((short)number);
	}



	/**
	 *	Returns the value of sqlind
	 *	@return sqlind
	 */
	public int getSqlind(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqlind();
	}
	
	/**
	 * 	Update Sqlind with the passed value
	 *	@param number
	 */
	public void setSqlind(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqlind(number);
	}


	public void setSqlind(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqlind((int)number);
	}



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dcladjdClmhstDenormRef.hashCode();
        str += sqlda.hashCode();
       return str.hashCode();
    }

    public ProcGetNextSqlSectSplit1OutCtx clone() {
        ProcGetNextSqlSectSplit1OutCtx cloneObj = new ProcGetNextSqlSectSplit1OutCtx();
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.sqlda = new Sqlda();
        cloneObj.sqlda.set(sqlda.getClonedField());
        return cloneObj;
    }

    }

    public ProcGetNextSqlSectSplit1OutCtx getProcGetNextSqlSectSplit1OutCtx() {
            return new ProcGetNextSqlSectSplit1OutCtx();
    }
     public class ProcGetNextSqlSectSplit2InCtx implements Cloneable {
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Sqlda sqlda = D5427dt1Ctx.this.getSqlda();

	/**
	 *	Returns the value of dderefProcTmGroup
	 *	@return dderefProcTmGroup
	 */   
	 public DderefProcTmGroup getDderefProcTmGroup() {
   	return dcladjdClmhstDenormRef.getDderefProcTmGroup();
   }

   /**
	* 	Update DderefProcTmGroup with the passed value
	*	@param value
	*/
   public void setDderefProcTmGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefProcTmGroup(value);
   }   

     /**
	 * 	Update DderefProcTmGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTmGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTmGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTmGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcTmGroup with another Field
	 *	@param value
	 */
   public void setDderefProcTmGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source);
   }  
   
     /**
	 * 	Update DderefProcTmGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTmGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTmGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTmGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefProcDtGroup
	 *	@return dderefProcDtGroup
	 */   
	 public DderefProcDtGroup getDderefProcDtGroup() {
   	return dcladjdClmhstDenormRef.getDderefProcDtGroup();
   }

   /**
	* 	Update DderefProcDtGroup with the passed value
	*	@param value
	*/
   public void setDderefProcDtGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefProcDtGroup(value);
   }   

     /**
	 * 	Update DderefProcDtGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDtGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDtGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDtGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcDtGroup with another Field
	 *	@param value
	 */
   public void setDderefProcDtGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source);
   }  
   
     /**
	 * 	Update DderefProcDtGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDtGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDtGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDtGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPgmIdLstCharValGroup
	 *	@return dderefPgmIdLstCharValGroup
	 */   
	 public DderefPgmIdLstCharValGroup getDderefPgmIdLstCharValGroup() {
   	return dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup();
   }

   /**
	* 	Update DderefPgmIdLstCharValGroup with the passed value
	*	@param value
	*/
   public void setDderefPgmIdLstCharValGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(value);
   }   

     /**
	 * 	Update DderefPgmIdLstCharValGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharValGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPgmIdLstCharValGroup with another Field
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source);
   }  
   
     /**
	 * 	Update DderefPgmIdLstCharValGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharValGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefProcTm
	 *	@return dderefProcTm
	 */
   public char[] getDderefProcTm() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcTmGroup().getDderefProcTm();
   }

  
	/**
	*  set variable dderefProcTm
	*  @param value
	**/
   public void setDderefProcTm(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(value);
   } 

     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex);
   	
   }
   
   public void setDderefProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcTm with another Field
	 *	@param value
	 */
   public void setDderefProcTm(Field source) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source);
   }  
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefInvnCtlNbr
	 *	@return dderefInvnCtlNbr
	 */
   public char[] getDderefInvnCtlNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().getDderefInvnCtlNbr();
   }

  
	/**
	*  set variable dderefInvnCtlNbr
	*  @param value
	**/
   public void setDderefInvnCtlNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(value);
   } 

     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefIcnSufxVersNbr
	 *	@return dderefIcnSufxVersNbr
	 */
	public short getDderefIcnSufxVersNbr() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefIcnSufxVersNbr();
	}
	
	/**
	 * 	Update DderefIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setDderefIcnSufxVersNbr(short number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr(number);
	}

	public void setDderefIcnSufxVersNbr(int number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}

	public void setDderefIcnSufxVersNbr(long number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}



	/**
	 *	Returns the value of sqln
	 *	@return sqln
	 */
	public short getSqln() throws CFException {        
   		return sqlda.getSqln();
	}
	
	/**
	 * 	Update Sqln with the passed value
	 *	@param number
	 */
	public void setSqln(short number)  throws CFException{
		sqlda.setSqln(number);
	}

	public void setSqln(int number)  throws CFException{
		sqlda.setSqln((short)number);
	}

	public void setSqln(long number)  throws CFException{
		sqlda.setSqln((short)number);
	}



	/**
	 *	Returns the value of dderefProcDt
	 *	@return dderefProcDt
	 */
   public char[] getDderefProcDt() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcDtGroup().getDderefProcDt();
   }

  
	/**
	*  set variable dderefProcDt
	*  @param value
	**/
   public void setDderefProcDt(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(value);
   } 

     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex);
   	
   }
   
   public void setDderefProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcDt with another Field
	 *	@param value
	 */
   public void setDderefProcDt(Field source) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source);
   }  
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqld
	 *	@return sqld
	 */
	public short getSqld() throws CFException {        
   		return sqlda.getSqld();
	}
	
	/**
	 * 	Update Sqld with the passed value
	 *	@param number
	 */
	public void setSqld(short number)  throws CFException{
		sqlda.setSqld(number);
	}

	public void setSqld(int number)  throws CFException{
		sqlda.setSqld((short)number);
	}

	public void setSqld(long number)  throws CFException{
		sqlda.setSqld((short)number);
	}



	/**
	 *	Returns the value of dderefInvnCtlNbrGroup
	 *	@return dderefInvnCtlNbrGroup
	 */   
	 public DderefInvnCtlNbrGroup getDderefInvnCtlNbrGroup() {
   	return dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup();
   }

   /**
	* 	Update DderefInvnCtlNbrGroup with the passed value
	*	@param value
	*/
   public void setDderefInvnCtlNbrGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(value);
   }   

     /**
	 * 	Update DderefInvnCtlNbrGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbrGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbrGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbrGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefInvnCtlNbrGroup with another Field
	 *	@param value
	 */
   public void setDderefInvnCtlNbrGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(source);
   }  
   
     /**
	 * 	Update DderefInvnCtlNbrGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbrGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbrGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbrGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefInvnCtlNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPgmIdLstCharVal
	 *	@return dderefPgmIdLstCharVal
	 */
   public char[] getDderefPgmIdLstCharVal() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().getDderefPgmIdLstCharVal();
   }

  
	/**
	*  set variable dderefPgmIdLstCharVal
	*  @param value
	**/
   public void setDderefPgmIdLstCharVal(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcGetNextSqlSectSplit2OutCtx getProcGetNextSqlSectSplit2OutCtx() {
            return new ProcGetNextSqlSectSplit2OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dcladjdClmhstDenormRef.hashCode();
        str += sqlda.hashCode();
       return str.hashCode();
    }

    public ProcGetNextSqlSectSplit2InCtx clone() {
        ProcGetNextSqlSectSplit2InCtx cloneObj = new ProcGetNextSqlSectSplit2InCtx();
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.sqlda = new Sqlda();
        cloneObj.sqlda.set(sqlda.getClonedField());
        return cloneObj;
    }

    }

    public ProcGetNextSqlSectSplit2InCtx getProcGetNextSqlSectSplit2InCtx() {
            return new ProcGetNextSqlSectSplit2InCtx();
    }
     public class ProcGetNextSqlSectSplit2OutCtx implements Cloneable {
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Sqlda sqlda = D5427dt1Ctx.this.getSqlda();

	/**
	 *	Returns the value of sqldata
	 *	@return sqldata
	 */
	public int getSqldata(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqldata();
	}
	
	/**
	 * 	Update Sqldata with the passed value
	 *	@param number
	 */
	public void setSqldata(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqldata(number);
	}


	public void setSqldata(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqldata((int)number);
	}


	/**
	 *	Returns the value of sqln
	 *	@return sqln
	 */
	public short getSqln() throws CFException {        
   		return sqlda.getSqln();
	}
	
	/**
	 * 	Update Sqln with the passed value
	 *	@param number
	 */
	public void setSqln(short number)  throws CFException{
		sqlda.setSqln(number);
	}

	public void setSqln(int number)  throws CFException{
		sqlda.setSqln((short)number);
	}

	public void setSqln(long number)  throws CFException{
		sqlda.setSqln((short)number);
	}



	/**
	 *	Returns the value of sqlnamel
	 *	@return sqlnamel
	 */
	public short getSqlnamel(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqlname().getSqlnamel();
	}
	
	/**
	 * 	Update Sqlnamel with the passed value
	 *	@param number
	 */
	public void setSqlnamel(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel(number);
	}

	public void setSqlnamel(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel((short)number);
	}

	public void setSqlnamel(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel((short)number);
	}



	/**
	 *	Returns the value of sqltype
	 *	@return sqltype
	 */
	public short getSqltype(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqltype();
	}
	
	/**
	 * 	Update Sqltype with the passed value
	 *	@param number
	 */
	public void setSqltype(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype(number);
	}

	public void setSqltype(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype((short)number);
	}

	public void setSqltype(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype((short)number);
	}



	/**
	 *	Returns the value of sqllen
	 *	@return sqllen
	 */
	public short getSqllen(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqllen();
	}
	
	/**
	 * 	Update Sqllen with the passed value
	 *	@param number
	 */
	public void setSqllen(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen(number);
	}

	public void setSqllen(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen((short)number);
	}

	public void setSqllen(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen((short)number);
	}



	/**
	 *	Returns the value of sqld
	 *	@return sqld
	 */
	public short getSqld() throws CFException {        
   		return sqlda.getSqld();
	}
	
	/**
	 * 	Update Sqld with the passed value
	 *	@param number
	 */
	public void setSqld(short number)  throws CFException{
		sqlda.setSqld(number);
	}

	public void setSqld(int number)  throws CFException{
		sqlda.setSqld((short)number);
	}

	public void setSqld(long number)  throws CFException{
		sqlda.setSqld((short)number);
	}



	/**
	 *	Returns the value of sqlind
	 *	@return sqlind
	 */
	public int getSqlind(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqlind();
	}
	
	/**
	 * 	Update Sqlind with the passed value
	 *	@param number
	 */
	public void setSqlind(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqlind(number);
	}


	public void setSqlind(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqlind((int)number);
	}



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dcladjdClmhstDenormRef.hashCode();
        str += sqlda.hashCode();
       return str.hashCode();
    }

    public ProcGetNextSqlSectSplit2OutCtx clone() {
        ProcGetNextSqlSectSplit2OutCtx cloneObj = new ProcGetNextSqlSectSplit2OutCtx();
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.sqlda = new Sqlda();
        cloneObj.sqlda.set(sqlda.getClonedField());
        return cloneObj;
    }

    }

    public ProcGetNextSqlSectSplit2OutCtx getProcGetNextSqlSectSplit2OutCtx() {
            return new ProcGetNextSqlSectSplit2OutCtx();
    }
     public class ProcGetNextSqlSectSplit3InCtx implements Cloneable {
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Sqlda sqlda = D5427dt1Ctx.this.getSqlda();

	/**
	 *	Returns the value of dderefProcTmGroup
	 *	@return dderefProcTmGroup
	 */   
	 public DderefProcTmGroup getDderefProcTmGroup() {
   	return dcladjdClmhstDenormRef.getDderefProcTmGroup();
   }

   /**
	* 	Update DderefProcTmGroup with the passed value
	*	@param value
	*/
   public void setDderefProcTmGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefProcTmGroup(value);
   }   

     /**
	 * 	Update DderefProcTmGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTmGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTmGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTmGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcTmGroup with another Field
	 *	@param value
	 */
   public void setDderefProcTmGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source);
   }  
   
     /**
	 * 	Update DderefProcTmGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTmGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTmGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTmGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefProcTmGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefProcDtGroup
	 *	@return dderefProcDtGroup
	 */   
	 public DderefProcDtGroup getDderefProcDtGroup() {
   	return dcladjdClmhstDenormRef.getDderefProcDtGroup();
   }

   /**
	* 	Update DderefProcDtGroup with the passed value
	*	@param value
	*/
   public void setDderefProcDtGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefProcDtGroup(value);
   }   

     /**
	 * 	Update DderefProcDtGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDtGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDtGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDtGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcDtGroup with another Field
	 *	@param value
	 */
   public void setDderefProcDtGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source);
   }  
   
     /**
	 * 	Update DderefProcDtGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDtGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDtGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDtGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefProcDtGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefProcTm
	 *	@return dderefProcTm
	 */
   public char[] getDderefProcTm() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcTmGroup().getDderefProcTm();
   }

  
	/**
	*  set variable dderefProcTm
	*  @param value
	**/
   public void setDderefProcTm(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(value);
   } 

     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex);
   	
   }
   
   public void setDderefProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcTm with another Field
	 *	@param value
	 */
   public void setDderefProcTm(Field source) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source);
   }  
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPgmIdLstCharValGroup
	 *	@return dderefPgmIdLstCharValGroup
	 */   
	 public DderefPgmIdLstCharValGroup getDderefPgmIdLstCharValGroup() {
   	return dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup();
   }

   /**
	* 	Update DderefPgmIdLstCharValGroup with the passed value
	*	@param value
	*/
   public void setDderefPgmIdLstCharValGroup(char[] value) throws CFException {
      dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(value);
   }   

     /**
	 * 	Update DderefPgmIdLstCharValGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharValGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPgmIdLstCharValGroup with another Field
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(Field source) {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source);
   }  
   
     /**
	 * 	Update DderefPgmIdLstCharValGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(Field source, int sourceIndex,int sourceLen) {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharValGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharValGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dcladjdClmhstDenormRef.setDderefPgmIdLstCharValGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqln
	 *	@return sqln
	 */
	public short getSqln() throws CFException {        
   		return sqlda.getSqln();
	}
	
	/**
	 * 	Update Sqln with the passed value
	 *	@param number
	 */
	public void setSqln(short number)  throws CFException{
		sqlda.setSqln(number);
	}

	public void setSqln(int number)  throws CFException{
		sqlda.setSqln((short)number);
	}

	public void setSqln(long number)  throws CFException{
		sqlda.setSqln((short)number);
	}



	/**
	 *	Returns the value of dderefProcDt
	 *	@return dderefProcDt
	 */
   public char[] getDderefProcDt() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcDtGroup().getDderefProcDt();
   }

  
	/**
	*  set variable dderefProcDt
	*  @param value
	**/
   public void setDderefProcDt(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(value);
   } 

     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex);
   	
   }
   
   public void setDderefProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcDt with another Field
	 *	@param value
	 */
   public void setDderefProcDt(Field source) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source);
   }  
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqld
	 *	@return sqld
	 */
	public short getSqld() throws CFException {        
   		return sqlda.getSqld();
	}
	
	/**
	 * 	Update Sqld with the passed value
	 *	@param number
	 */
	public void setSqld(short number)  throws CFException{
		sqlda.setSqld(number);
	}

	public void setSqld(int number)  throws CFException{
		sqlda.setSqld((short)number);
	}

	public void setSqld(long number)  throws CFException{
		sqlda.setSqld((short)number);
	}



	/**
	 *	Returns the value of dderefPgmIdLstCharVal
	 *	@return dderefPgmIdLstCharVal
	 */
   public char[] getDderefPgmIdLstCharVal() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().getDderefPgmIdLstCharVal();
   }

  
	/**
	*  set variable dderefPgmIdLstCharVal
	*  @param value
	**/
   public void setDderefPgmIdLstCharVal(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcGetNextSqlSectSplit3OutCtx getProcGetNextSqlSectSplit3OutCtx() {
            return new ProcGetNextSqlSectSplit3OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dcladjdClmhstDenormRef.hashCode();
        str += sqlda.hashCode();
       return str.hashCode();
    }

    public ProcGetNextSqlSectSplit3InCtx clone() {
        ProcGetNextSqlSectSplit3InCtx cloneObj = new ProcGetNextSqlSectSplit3InCtx();
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.sqlda = new Sqlda();
        cloneObj.sqlda.set(sqlda.getClonedField());
        return cloneObj;
    }

    }

    public ProcGetNextSqlSectSplit3InCtx getProcGetNextSqlSectSplit3InCtx() {
            return new ProcGetNextSqlSectSplit3InCtx();
    }
     public class ProcGetNextSqlSectSplit3OutCtx implements Cloneable {
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Sqlda sqlda = D5427dt1Ctx.this.getSqlda();

	/**
	 *	Returns the value of sqldata
	 *	@return sqldata
	 */
	public int getSqldata(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqldata();
	}
	
	/**
	 * 	Update Sqldata with the passed value
	 *	@param number
	 */
	public void setSqldata(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqldata(number);
	}


	public void setSqldata(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqldata((int)number);
	}


	/**
	 *	Returns the value of sqln
	 *	@return sqln
	 */
	public short getSqln() throws CFException {        
   		return sqlda.getSqln();
	}
	
	/**
	 * 	Update Sqln with the passed value
	 *	@param number
	 */
	public void setSqln(short number)  throws CFException{
		sqlda.setSqln(number);
	}

	public void setSqln(int number)  throws CFException{
		sqlda.setSqln((short)number);
	}

	public void setSqln(long number)  throws CFException{
		sqlda.setSqln((short)number);
	}



	/**
	 *	Returns the value of sqlnamel
	 *	@return sqlnamel
	 */
	public short getSqlnamel(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqlname().getSqlnamel();
	}
	
	/**
	 * 	Update Sqlnamel with the passed value
	 *	@param number
	 */
	public void setSqlnamel(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel(number);
	}

	public void setSqlnamel(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel((short)number);
	}

	public void setSqlnamel(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel((short)number);
	}



	/**
	 *	Returns the value of sqltype
	 *	@return sqltype
	 */
	public short getSqltype(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqltype();
	}
	
	/**
	 * 	Update Sqltype with the passed value
	 *	@param number
	 */
	public void setSqltype(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype(number);
	}

	public void setSqltype(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype((short)number);
	}

	public void setSqltype(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype((short)number);
	}



	/**
	 *	Returns the value of sqllen
	 *	@return sqllen
	 */
	public short getSqllen(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqllen();
	}
	
	/**
	 * 	Update Sqllen with the passed value
	 *	@param number
	 */
	public void setSqllen(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen(number);
	}

	public void setSqllen(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen((short)number);
	}

	public void setSqllen(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen((short)number);
	}



	/**
	 *	Returns the value of sqld
	 *	@return sqld
	 */
	public short getSqld() throws CFException {        
   		return sqlda.getSqld();
	}
	
	/**
	 * 	Update Sqld with the passed value
	 *	@param number
	 */
	public void setSqld(short number)  throws CFException{
		sqlda.setSqld(number);
	}

	public void setSqld(int number)  throws CFException{
		sqlda.setSqld((short)number);
	}

	public void setSqld(long number)  throws CFException{
		sqlda.setSqld((short)number);
	}



	/**
	 *	Returns the value of sqlind
	 *	@return sqlind
	 */
	public int getSqlind(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqlind();
	}
	
	/**
	 * 	Update Sqlind with the passed value
	 *	@param number
	 */
	public void setSqlind(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqlind(number);
	}


	public void setSqlind(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqlind((int)number);
	}



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dcladjdClmhstDenormRef.hashCode();
        str += sqlda.hashCode();
       return str.hashCode();
    }

    public ProcGetNextSqlSectSplit3OutCtx clone() {
        ProcGetNextSqlSectSplit3OutCtx cloneObj = new ProcGetNextSqlSectSplit3OutCtx();
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.sqlda = new Sqlda();
        cloneObj.sqlda.set(sqlda.getClonedField());
        return cloneObj;
    }

    }

    public ProcGetNextSqlSectSplit3OutCtx getProcGetNextSqlSectSplit3OutCtx() {
            return new ProcGetNextSqlSectSplit3OutCtx();
    }
     public class ProcAuth56SqlSectInCtx implements Cloneable {
     QueryTextArea queryTextArea = D5427dt1Ctx.this.getQueryTextArea();
     QueryFilterDlgtCrit5 queryFilterDlgtCrit5 = D5427dt1Ctx.this.getQueryFilterDlgtCrit5();
     QueryFilterAuthCrit5 queryFilterAuthCrit5 = D5427dt1Ctx.this.getQueryFilterAuthCrit5();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlda sqlda = D5427dt1Ctx.this.getSqlda();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of hvAuthNbr
	 *	@return hvAuthNbr
	 */
   public char[] getHvAuthNbr() throws CFException  {              
   		return hostVariables.getHvAuthNbrGroup().getHvAuthNbr();
   }

  
	/**
	*  set variable hvAuthNbr
	*  @param value
	**/
   public void setHvAuthNbr(char[] value) throws CFException {
      hostVariables.getHvAuthNbrGroup().setHvAuthNbr(value);
   } 

     /**
	 * 	Update HvAuthNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvAuthNbr(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvAuthNbrGroup().setHvAuthNbr(source, sourceIndex);
   	
   }
   
   public void setHvAuthNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvAuthNbrGroup().setHvAuthNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvAuthNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvAuthNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvAuthNbrGroup().setHvAuthNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvAuthNbr with another Field
	 *	@param value
	 */
   public void setHvAuthNbr(Field source) {
      hostVariables.getHvAuthNbrGroup().setHvAuthNbr(source);
   }  
   
     /**
	 * 	Update HvAuthNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvAuthNbr(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvAuthNbrGroup().setHvAuthNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvAuthNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvAuthNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvAuthNbrGroup().setHvAuthNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvExtrNtfyNbrGroup
	 *	@return hvExtrNtfyNbrGroup
	 */   
	 public HvExtrNtfyNbrGroup getHvExtrNtfyNbrGroup() {
   	return hostVariables.getHvExtrNtfyNbrGroup();
   }

   /**
	* 	Update HvExtrNtfyNbrGroup with the passed value
	*	@param value
	*/
   public void setHvExtrNtfyNbrGroup(char[] value) throws CFException {
      hostVariables.setHvExtrNtfyNbrGroup(value);
   }   

     /**
	 * 	Update HvExtrNtfyNbrGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setHvExtrNtfyNbrGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	hostVariables.setHvExtrNtfyNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvExtrNtfyNbrGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvExtrNtfyNbrGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvExtrNtfyNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvExtrNtfyNbrGroup with another Field
	 *	@param value
	 */
   public void setHvExtrNtfyNbrGroup(Field source) {
   	hostVariables.setHvExtrNtfyNbrGroup(source);
   }  
   
     /**
	 * 	Update HvExtrNtfyNbrGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setHvExtrNtfyNbrGroup(Field source, int sourceIndex,int sourceLen) {
   	hostVariables.setHvExtrNtfyNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvExtrNtfyNbrGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvExtrNtfyNbrGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvExtrNtfyNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryFilterAuthEnd
	 *	@return queryFilterAuthEnd
	 */
   public char[] getQueryFilterAuthEnd() throws CFException  {              
   		return work.getQueryFilterAuthEnd();
   }

  
	/**
	*  set variable queryFilterAuthEnd
	*  @param value
	**/
   public void setQueryFilterAuthEnd(char[] value) throws CFException {
      work.setQueryFilterAuthEnd(value);
   } 

	/**
	 *	Returns the value of queryFilterAuthCrit5
	 *	@return queryFilterAuthCrit5
	 */   
	 public QueryFilterAuthCrit5 getQueryFilterAuthCrit5() {
   	return queryFilterAuthCrit5;
   }


	/**
	 *	Returns the value of queryFilterAuthCrit6
	 *	@return queryFilterAuthCrit6
	 */
   public char[] getQueryFilterAuthCrit6() throws CFException  {              
   		return work.getQueryFilterAuthCrit6();
   }

  
	/**
	*  set variable queryFilterAuthCrit6
	*  @param value
	**/
   public void setQueryFilterAuthCrit6(char[] value) throws CFException {
      work.setQueryFilterAuthCrit6(value);
   } 

	/**
	 *	Returns the value of hvExtrNtfyNbr
	 *	@return hvExtrNtfyNbr
	 */
   public char[] getHvExtrNtfyNbr() throws CFException  {              
   		return hostVariables.getHvExtrNtfyNbrGroup().getHvExtrNtfyNbr();
   }

  
	/**
	*  set variable hvExtrNtfyNbr
	*  @param value
	**/
   public void setHvExtrNtfyNbr(char[] value) throws CFException {
      hostVariables.getHvExtrNtfyNbrGroup().setHvExtrNtfyNbr(value);
   } 

     /**
	 * 	Update HvExtrNtfyNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvExtrNtfyNbr(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvExtrNtfyNbrGroup().setHvExtrNtfyNbr(source, sourceIndex);
   	
   }
   
   public void setHvExtrNtfyNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvExtrNtfyNbrGroup().setHvExtrNtfyNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvExtrNtfyNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvExtrNtfyNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvExtrNtfyNbrGroup().setHvExtrNtfyNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvExtrNtfyNbr with another Field
	 *	@param value
	 */
   public void setHvExtrNtfyNbr(Field source) {
      hostVariables.getHvExtrNtfyNbrGroup().setHvExtrNtfyNbr(source);
   }  
   
     /**
	 * 	Update HvExtrNtfyNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvExtrNtfyNbr(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvExtrNtfyNbrGroup().setHvExtrNtfyNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvExtrNtfyNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvExtrNtfyNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvExtrNtfyNbrGroup().setHvExtrNtfyNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryTextLeng
	 *	@return queryTextLeng
	 */
	public short getQueryTextLeng() throws CFException {        
   		return queryTextArea.getQueryTextLeng();
	}
	
	/**
	 * 	Update QueryTextLeng with the passed value
	 *	@param number
	 */
	public void setQueryTextLeng(short number)  throws CFException{
		queryTextArea.setQueryTextLeng(number);
	}

	public void setQueryTextLeng(int number)  throws CFException{
		queryTextArea.setQueryTextLeng((short)number);
	}

	public void setQueryTextLeng(long number)  throws CFException{
		queryTextArea.setQueryTextLeng((short)number);
	}



	/**
	 *	Returns the value of hvAuthNbrGroup
	 *	@return hvAuthNbrGroup
	 */   
	 public HvAuthNbrGroup getHvAuthNbrGroup() {
   	return hostVariables.getHvAuthNbrGroup();
   }

   /**
	* 	Update HvAuthNbrGroup with the passed value
	*	@param value
	*/
   public void setHvAuthNbrGroup(char[] value) throws CFException {
      hostVariables.setHvAuthNbrGroup(value);
   }   

     /**
	 * 	Update HvAuthNbrGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setHvAuthNbrGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	hostVariables.setHvAuthNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvAuthNbrGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvAuthNbrGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvAuthNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvAuthNbrGroup with another Field
	 *	@param value
	 */
   public void setHvAuthNbrGroup(Field source) {
   	hostVariables.setHvAuthNbrGroup(source);
   }  
   
     /**
	 * 	Update HvAuthNbrGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setHvAuthNbrGroup(Field source, int sourceIndex,int sourceLen) {
   	hostVariables.setHvAuthNbrGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvAuthNbrGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvAuthNbrGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvAuthNbrGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of i
	 *	@return i
	 */
	public short getI() throws CFException {        
   		return work.getI();
	}
	
	/**
	 * 	Update I with the passed value
	 *	@param number
	 */
	public void setI(short number)  throws CFException{
		work.setI(number);
	}

	public void setI(int number)  throws CFException{
		work.setI((short)number);
	}

	public void setI(long number)  throws CFException{
		work.setI((short)number);
	}



	/**
	 *	Returns the value of queryFilterDlgtCrit5
	 *	@return queryFilterDlgtCrit5
	 */   
	 public QueryFilterDlgtCrit5 getQueryFilterDlgtCrit5() {
   	return queryFilterDlgtCrit5;
   }


	/**
	 *	Returns the value of queryFilterDlgtStart
	 *	@return queryFilterDlgtStart
	 */
   public char[] getQueryFilterDlgtStart() throws CFException  {              
   		return work.getQueryFilterDlgtStart();
   }

  
	/**
	*  set variable queryFilterDlgtStart
	*  @param value
	**/
   public void setQueryFilterDlgtStart(char[] value) throws CFException {
      work.setQueryFilterDlgtStart(value);
   } 

	/**
	 *	Returns the value of queryFilterDlgtCrit6
	 *	@return queryFilterDlgtCrit6
	 */
   public char[] getQueryFilterDlgtCrit6() throws CFException  {              
   		return work.getQueryFilterDlgtCrit6();
   }

  
	/**
	*  set variable queryFilterDlgtCrit6
	*  @param value
	**/
   public void setQueryFilterDlgtCrit6(char[] value) throws CFException {
      work.setQueryFilterDlgtCrit6(value);
   } 

	/**
	 *	Returns the value of queryFilterAuthBaseEnd
	 *	@return queryFilterAuthBaseEnd
	 */
   public char[] getQueryFilterAuthBaseEnd() throws CFException  {              
   		return work.getQueryFilterAuthBaseEnd();
   }

  
	/**
	*  set variable queryFilterAuthBaseEnd
	*  @param value
	**/
   public void setQueryFilterAuthBaseEnd(char[] value) throws CFException {
      work.setQueryFilterAuthBaseEnd(value);
   } 

	/**
	 *	Returns the value of queryFilterAuthStart
	 *	@return queryFilterAuthStart
	 */
   public char[] getQueryFilterAuthStart() throws CFException  {              
   		return work.getQueryFilterAuthStart();
   }

  
	/**
	*  set variable queryFilterAuthStart
	*  @param value
	**/
   public void setQueryFilterAuthStart(char[] value) throws CFException {
      work.setQueryFilterAuthStart(value);
   } 

	/**
	 *	Test condition "5" for isDt1ReqSearchMbrAuthNbr()
	 *	@return  Returns true if isDt1ReqSearchMbrAuthNbr() is "5"
	 */
   public boolean isDt1ReqSearchMbrAuthNbr() throws CFException {
      return dt1ReqContainer.getDt1RequestArea().isDt1ReqSearchMbrAuthNbr();
   }

	/**
	*  set values "5"
	*/
   	public void setDt1ReqSearchMbrAuthNbrTrue()  throws CFException{  			
    	dt1ReqContainer.getDt1RequestArea().setDt1ReqSearchMbrAuthNbrTrue();
   	}
	/**
	 *	Test condition "6" for isDt1ReqSearchAuthsOnly()
	 *	@return  Returns true if isDt1ReqSearchAuthsOnly() is "6"
	 */
   public boolean isDt1ReqSearchAuthsOnly() throws CFException {
      return dt1ReqContainer.getDt1RequestArea().isDt1ReqSearchAuthsOnly();
   }

	/**
	*  set values "6"
	*/
   	public void setDt1ReqSearchAuthsOnlyTrue()  throws CFException{  			
    	dt1ReqContainer.getDt1RequestArea().setDt1ReqSearchAuthsOnlyTrue();
   	}
	/**
	 *	Returns the value of sqln
	 *	@return sqln
	 */
	public short getSqln() throws CFException {        
   		return sqlda.getSqln();
	}
	
	/**
	 * 	Update Sqln with the passed value
	 *	@param number
	 */
	public void setSqln(short number)  throws CFException{
		sqlda.setSqln(number);
	}

	public void setSqln(int number)  throws CFException{
		sqlda.setSqln((short)number);
	}

	public void setSqln(long number)  throws CFException{
		sqlda.setSqln((short)number);
	}



	/**
	 *	Returns the value of sqld
	 *	@return sqld
	 */
	public short getSqld() throws CFException {        
   		return sqlda.getSqld();
	}
	
	/**
	 * 	Update Sqld with the passed value
	 *	@param number
	 */
	public void setSqld(short number)  throws CFException{
		sqlda.setSqld(number);
	}

	public void setSqld(int number)  throws CFException{
		sqlda.setSqld((short)number);
	}

	public void setSqld(long number)  throws CFException{
		sqlda.setSqld((short)number);
	}




        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcAuth56SqlSectOutCtx getProcAuth56SqlSectOutCtx() {
            return new ProcAuth56SqlSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += queryTextArea.hashCode();
        str += queryFilterDlgtCrit5.hashCode();
        str += queryFilterAuthCrit5.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlda.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public ProcAuth56SqlSectInCtx clone() {
        ProcAuth56SqlSectInCtx cloneObj = new ProcAuth56SqlSectInCtx();
        cloneObj.queryTextArea = new QueryTextArea();
        cloneObj.queryTextArea.set(queryTextArea.getClonedField());
        cloneObj.queryFilterDlgtCrit5 = new QueryFilterDlgtCrit5();
        cloneObj.queryFilterDlgtCrit5.set(queryFilterDlgtCrit5.getClonedField());
        cloneObj.queryFilterAuthCrit5 = new QueryFilterAuthCrit5();
        cloneObj.queryFilterAuthCrit5.set(queryFilterAuthCrit5.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlda = new Sqlda();
        cloneObj.sqlda.set(sqlda.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public ProcAuth56SqlSectInCtx getProcAuth56SqlSectInCtx() {
            return new ProcAuth56SqlSectInCtx();
    }
     public class ProcAuth56SqlSectOutCtx implements Cloneable {
     QueryTextArea queryTextArea = D5427dt1Ctx.this.getQueryTextArea();
     QueryFilterDlgtCrit5 queryFilterDlgtCrit5 = D5427dt1Ctx.this.getQueryFilterDlgtCrit5();
     QueryFilterAuthCrit5 queryFilterAuthCrit5 = D5427dt1Ctx.this.getQueryFilterAuthCrit5();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlda sqlda = D5427dt1Ctx.this.getSqlda();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of queryTextData
	 *	@return queryTextData
	 */
   public char[] getQueryTextData() throws CFException  {              
   		return queryTextArea.getQueryTextData();
   }

  
	/**
	*  set variable queryTextData
	*  @param value
	**/
   public void setQueryTextData(char[] value) throws CFException {
      queryTextArea.setQueryTextData(value);
   } 

     /**
	 * 	Update QueryTextData 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setQueryTextData(char[] source, int sourceIndex) throws CFException {
      queryTextArea.setQueryTextData(source, sourceIndex);
   	
   }
   
   public void setQueryTextData(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      queryTextArea.setQueryTextData(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update QueryTextData 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setQueryTextData(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      queryTextArea.setQueryTextData(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update QueryTextData with another Field
	 *	@param value
	 */
   public void setQueryTextData(Field source) {
      queryTextArea.setQueryTextData(source);
   }  
   
     /**
	 * 	Update QueryTextData 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setQueryTextData(Field source, int sourceIndex,int sourceLen) {
      queryTextArea.setQueryTextData(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update QueryTextData 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setQueryTextData(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      queryTextArea.setQueryTextData(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryFilterAuthEnd
	 *	@return queryFilterAuthEnd
	 */
   public char[] getQueryFilterAuthEnd() throws CFException  {              
   		return work.getQueryFilterAuthEnd();
   }

  
	/**
	*  set variable queryFilterAuthEnd
	*  @param value
	**/
   public void setQueryFilterAuthEnd(char[] value) throws CFException {
      work.setQueryFilterAuthEnd(value);
   } 

	/**
	 *	Returns the value of queryFilterAuthCrit5
	 *	@return queryFilterAuthCrit5
	 */   
	 public QueryFilterAuthCrit5 getQueryFilterAuthCrit5() {
   	return queryFilterAuthCrit5;
   }


	/**
	 *	Returns the value of queryFilterAuthCrit6
	 *	@return queryFilterAuthCrit6
	 */
   public char[] getQueryFilterAuthCrit6() throws CFException  {              
   		return work.getQueryFilterAuthCrit6();
   }

  
	/**
	*  set variable queryFilterAuthCrit6
	*  @param value
	**/
   public void setQueryFilterAuthCrit6(char[] value) throws CFException {
      work.setQueryFilterAuthCrit6(value);
   } 

	/**
	 *	Returns the value of queryTextLeng
	 *	@return queryTextLeng
	 */
	public short getQueryTextLeng() throws CFException {        
   		return queryTextArea.getQueryTextLeng();
	}
	
	/**
	 * 	Update QueryTextLeng with the passed value
	 *	@param number
	 */
	public void setQueryTextLeng(short number)  throws CFException{
		queryTextArea.setQueryTextLeng(number);
	}

	public void setQueryTextLeng(int number)  throws CFException{
		queryTextArea.setQueryTextLeng((short)number);
	}

	public void setQueryTextLeng(long number)  throws CFException{
		queryTextArea.setQueryTextLeng((short)number);
	}



	/**
	 *	Returns the value of sqlnamel
	 *	@return sqlnamel
	 */
	public short getSqlnamel(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqlname().getSqlnamel();
	}
	
	/**
	 * 	Update Sqlnamel with the passed value
	 *	@param number
	 */
	public void setSqlnamel(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel(number);
	}

	public void setSqlnamel(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel((short)number);
	}

	public void setSqlnamel(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel((short)number);
	}



	/**
	 *	Returns the value of sqllen
	 *	@return sqllen
	 */
	public short getSqllen(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqllen();
	}
	
	/**
	 * 	Update Sqllen with the passed value
	 *	@param number
	 */
	public void setSqllen(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen(number);
	}

	public void setSqllen(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen((short)number);
	}

	public void setSqllen(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen((short)number);
	}



	/**
	 *	Returns the value of i
	 *	@return i
	 */
	public short getI() throws CFException {        
   		return work.getI();
	}
	
	/**
	 * 	Update I with the passed value
	 *	@param number
	 */
	public void setI(short number)  throws CFException{
		work.setI(number);
	}

	public void setI(int number)  throws CFException{
		work.setI((short)number);
	}

	public void setI(long number)  throws CFException{
		work.setI((short)number);
	}



	/**
	 *	Returns the value of sqlind
	 *	@return sqlind
	 */
	public int getSqlind(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqlind();
	}
	
	/**
	 * 	Update Sqlind with the passed value
	 *	@param number
	 */
	public void setSqlind(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqlind(number);
	}


	public void setSqlind(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqlind((int)number);
	}


	/**
	 *	Returns the value of queryFilterDlgtCrit5
	 *	@return queryFilterDlgtCrit5
	 */   
	 public QueryFilterDlgtCrit5 getQueryFilterDlgtCrit5() {
   	return queryFilterDlgtCrit5;
   }


	/**
	 *	Returns the value of sqldata
	 *	@return sqldata
	 */
	public int getSqldata(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqldata();
	}
	
	/**
	 * 	Update Sqldata with the passed value
	 *	@param number
	 */
	public void setSqldata(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqldata(number);
	}


	public void setSqldata(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqldata((int)number);
	}


	/**
	 *	Returns the value of queryFilterDlgtStart
	 *	@return queryFilterDlgtStart
	 */
   public char[] getQueryFilterDlgtStart() throws CFException  {              
   		return work.getQueryFilterDlgtStart();
   }

  
	/**
	*  set variable queryFilterDlgtStart
	*  @param value
	**/
   public void setQueryFilterDlgtStart(char[] value) throws CFException {
      work.setQueryFilterDlgtStart(value);
   } 

	/**
	 *	Returns the value of queryFilterDlgtCrit6
	 *	@return queryFilterDlgtCrit6
	 */
   public char[] getQueryFilterDlgtCrit6() throws CFException  {              
   		return work.getQueryFilterDlgtCrit6();
   }

  
	/**
	*  set variable queryFilterDlgtCrit6
	*  @param value
	**/
   public void setQueryFilterDlgtCrit6(char[] value) throws CFException {
      work.setQueryFilterDlgtCrit6(value);
   } 

	/**
	 *	Returns the value of queryFilterAuthBaseEnd
	 *	@return queryFilterAuthBaseEnd
	 */
   public char[] getQueryFilterAuthBaseEnd() throws CFException  {              
   		return work.getQueryFilterAuthBaseEnd();
   }

  
	/**
	*  set variable queryFilterAuthBaseEnd
	*  @param value
	**/
   public void setQueryFilterAuthBaseEnd(char[] value) throws CFException {
      work.setQueryFilterAuthBaseEnd(value);
   } 

	/**
	 *	Returns the value of queryFilterAuthStart
	 *	@return queryFilterAuthStart
	 */
   public char[] getQueryFilterAuthStart() throws CFException  {              
   		return work.getQueryFilterAuthStart();
   }

  
	/**
	*  set variable queryFilterAuthStart
	*  @param value
	**/
   public void setQueryFilterAuthStart(char[] value) throws CFException {
      work.setQueryFilterAuthStart(value);
   } 

	/**
	 *	Returns the value of sqln
	 *	@return sqln
	 */
	public short getSqln() throws CFException {        
   		return sqlda.getSqln();
	}
	
	/**
	 * 	Update Sqln with the passed value
	 *	@param number
	 */
	public void setSqln(short number)  throws CFException{
		sqlda.setSqln(number);
	}

	public void setSqln(int number)  throws CFException{
		sqlda.setSqln((short)number);
	}

	public void setSqln(long number)  throws CFException{
		sqlda.setSqln((short)number);
	}



	/**
	 *	Returns the value of sqltype
	 *	@return sqltype
	 */
	public short getSqltype(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqltype();
	}
	
	/**
	 * 	Update Sqltype with the passed value
	 *	@param number
	 */
	public void setSqltype(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype(number);
	}

	public void setSqltype(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype((short)number);
	}

	public void setSqltype(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype((short)number);
	}



	/**
	 *	Returns the value of sqld
	 *	@return sqld
	 */
	public short getSqld() throws CFException {        
   		return sqlda.getSqld();
	}
	
	/**
	 * 	Update Sqld with the passed value
	 *	@param number
	 */
	public void setSqld(short number)  throws CFException{
		sqlda.setSqld(number);
	}

	public void setSqld(int number)  throws CFException{
		sqlda.setSqld((short)number);
	}

	public void setSqld(long number)  throws CFException{
		sqlda.setSqld((short)number);
	}




        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += queryTextArea.hashCode();
        str += queryFilterDlgtCrit5.hashCode();
        str += queryFilterAuthCrit5.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlda.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public ProcAuth56SqlSectOutCtx clone() {
        ProcAuth56SqlSectOutCtx cloneObj = new ProcAuth56SqlSectOutCtx();
        cloneObj.queryTextArea = new QueryTextArea();
        cloneObj.queryTextArea.set(queryTextArea.getClonedField());
        cloneObj.queryFilterDlgtCrit5 = new QueryFilterDlgtCrit5();
        cloneObj.queryFilterDlgtCrit5.set(queryFilterDlgtCrit5.getClonedField());
        cloneObj.queryFilterAuthCrit5 = new QueryFilterAuthCrit5();
        cloneObj.queryFilterAuthCrit5.set(queryFilterAuthCrit5.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlda = new Sqlda();
        cloneObj.sqlda.set(sqlda.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public ProcAuth56SqlSectOutCtx getProcAuth56SqlSectOutCtx() {
            return new ProcAuth56SqlSectOutCtx();
    }
     public class ProcOption7SqlSectInCtx implements Cloneable {
     QueryTextArea queryTextArea = D5427dt1Ctx.this.getQueryTextArea();
     Work work = D5427dt1Ctx.this.getWork();
     QueryFilterSvcSql queryFilterSvcSql = D5427dt1Ctx.this.getQueryFilterSvcSql();
     Sqlda sqlda = D5427dt1Ctx.this.getSqlda();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of queryFilterSpiEnd
	 *	@return queryFilterSpiEnd
	 */
   public char[] getQueryFilterSpiEnd() throws CFException  {              
   		return work.getQueryFilterSpiEnd();
   }

  
	/**
	*  set variable queryFilterSpiEnd
	*  @param value
	**/
   public void setQueryFilterSpiEnd(char[] value) throws CFException {
      work.setQueryFilterSpiEnd(value);
   } 

	/**
	 *	Returns the value of queryFilterSpiPred4
	 *	@return queryFilterSpiPred4
	 */
   public char[] getQueryFilterSpiPred4() throws CFException  {              
   		return work.getQueryFilterSpiPred4();
   }

  
	/**
	*  set variable queryFilterSpiPred4
	*  @param value
	**/
   public void setQueryFilterSpiPred4(char[] value) throws CFException {
      work.setQueryFilterSpiPred4(value);
   } 

	/**
	 *	Returns the value of hvSpiCtgyCd5
	 *	@return hvSpiCtgyCd5
	 */
   public char[] getHvSpiCtgyCd5() throws CFException  {              
   		return hostVariables.getHvSpiCtgyCd5Group().getHvSpiCtgyCd5();
   }

  
	/**
	*  set variable hvSpiCtgyCd5
	*  @param value
	**/
   public void setHvSpiCtgyCd5(char[] value) throws CFException {
      hostVariables.getHvSpiCtgyCd5Group().setHvSpiCtgyCd5(value);
   } 

     /**
	 * 	Update HvSpiCtgyCd5 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd5(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvSpiCtgyCd5Group().setHvSpiCtgyCd5(source, sourceIndex);
   	
   }
   
   public void setHvSpiCtgyCd5(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvSpiCtgyCd5Group().setHvSpiCtgyCd5(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd5 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd5(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd5Group().setHvSpiCtgyCd5(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSpiCtgyCd5 with another Field
	 *	@param value
	 */
   public void setHvSpiCtgyCd5(Field source) {
      hostVariables.getHvSpiCtgyCd5Group().setHvSpiCtgyCd5(source);
   }  
   
     /**
	 * 	Update HvSpiCtgyCd5 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvSpiCtgyCd5(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvSpiCtgyCd5Group().setHvSpiCtgyCd5(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvSpiCtgyCd5 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd5(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd5Group().setHvSpiCtgyCd5(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryTextLeng
	 *	@return queryTextLeng
	 */
	public short getQueryTextLeng() throws CFException {        
   		return queryTextArea.getQueryTextLeng();
	}
	
	/**
	 * 	Update QueryTextLeng with the passed value
	 *	@param number
	 */
	public void setQueryTextLeng(short number)  throws CFException{
		queryTextArea.setQueryTextLeng(number);
	}

	public void setQueryTextLeng(int number)  throws CFException{
		queryTextArea.setQueryTextLeng((short)number);
	}

	public void setQueryTextLeng(long number)  throws CFException{
		queryTextArea.setQueryTextLeng((short)number);
	}



	/**
	 *	Returns the value of i
	 *	@return i
	 */
	public short getI() throws CFException {        
   		return work.getI();
	}
	
	/**
	 * 	Update I with the passed value
	 *	@param number
	 */
	public void setI(short number)  throws CFException{
		work.setI(number);
	}

	public void setI(int number)  throws CFException{
		work.setI((short)number);
	}

	public void setI(long number)  throws CFException{
		work.setI((short)number);
	}



	/**
	 *	Returns the value of hvSpiCtgyCd3
	 *	@return hvSpiCtgyCd3
	 */
   public char[] getHvSpiCtgyCd3() throws CFException  {              
   		return hostVariables.getHvSpiCtgyCd3Group().getHvSpiCtgyCd3();
   }

  
	/**
	*  set variable hvSpiCtgyCd3
	*  @param value
	**/
   public void setHvSpiCtgyCd3(char[] value) throws CFException {
      hostVariables.getHvSpiCtgyCd3Group().setHvSpiCtgyCd3(value);
   } 

     /**
	 * 	Update HvSpiCtgyCd3 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd3(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvSpiCtgyCd3Group().setHvSpiCtgyCd3(source, sourceIndex);
   	
   }
   
   public void setHvSpiCtgyCd3(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvSpiCtgyCd3Group().setHvSpiCtgyCd3(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd3 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd3(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd3Group().setHvSpiCtgyCd3(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSpiCtgyCd3 with another Field
	 *	@param value
	 */
   public void setHvSpiCtgyCd3(Field source) {
      hostVariables.getHvSpiCtgyCd3Group().setHvSpiCtgyCd3(source);
   }  
   
     /**
	 * 	Update HvSpiCtgyCd3 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvSpiCtgyCd3(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvSpiCtgyCd3Group().setHvSpiCtgyCd3(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvSpiCtgyCd3 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd3(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd3Group().setHvSpiCtgyCd3(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvSpiCtgyCd4Group
	 *	@return hvSpiCtgyCd4Group
	 */   
	 public HvSpiCtgyCd4Group getHvSpiCtgyCd4Group() {
   	return hostVariables.getHvSpiCtgyCd4Group();
   }

   /**
	* 	Update HvSpiCtgyCd4Group with the passed value
	*	@param value
	*/
   public void setHvSpiCtgyCd4Group(char[] value) throws CFException {
      hostVariables.setHvSpiCtgyCd4Group(value);
   }   

     /**
	 * 	Update HvSpiCtgyCd4Group 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd4Group(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	hostVariables.setHvSpiCtgyCd4Group(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd4Group 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd4Group(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvSpiCtgyCd4Group(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSpiCtgyCd4Group with another Field
	 *	@param value
	 */
   public void setHvSpiCtgyCd4Group(Field source) {
   	hostVariables.setHvSpiCtgyCd4Group(source);
   }  
   
     /**
	 * 	Update HvSpiCtgyCd4Group 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd4Group(Field source, int sourceIndex,int sourceLen) {
   	hostVariables.setHvSpiCtgyCd4Group(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd4Group 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd4Group(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvSpiCtgyCd4Group(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryFilterSpiPred5
	 *	@return queryFilterSpiPred5
	 */
   public char[] getQueryFilterSpiPred5() throws CFException  {              
   		return work.getQueryFilterSpiPred5();
   }

  
	/**
	*  set variable queryFilterSpiPred5
	*  @param value
	**/
   public void setQueryFilterSpiPred5(char[] value) throws CFException {
      work.setQueryFilterSpiPred5(value);
   } 

	/**
	 *	Returns the value of hvSpiCtgyCd5Group
	 *	@return hvSpiCtgyCd5Group
	 */   
	 public HvSpiCtgyCd5Group getHvSpiCtgyCd5Group() {
   	return hostVariables.getHvSpiCtgyCd5Group();
   }

   /**
	* 	Update HvSpiCtgyCd5Group with the passed value
	*	@param value
	*/
   public void setHvSpiCtgyCd5Group(char[] value) throws CFException {
      hostVariables.setHvSpiCtgyCd5Group(value);
   }   

     /**
	 * 	Update HvSpiCtgyCd5Group 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd5Group(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	hostVariables.setHvSpiCtgyCd5Group(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd5Group 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd5Group(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvSpiCtgyCd5Group(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSpiCtgyCd5Group with another Field
	 *	@param value
	 */
   public void setHvSpiCtgyCd5Group(Field source) {
   	hostVariables.setHvSpiCtgyCd5Group(source);
   }  
   
     /**
	 * 	Update HvSpiCtgyCd5Group 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd5Group(Field source, int sourceIndex,int sourceLen) {
   	hostVariables.setHvSpiCtgyCd5Group(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd5Group 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd5Group(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvSpiCtgyCd5Group(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvSrvcCatgyCd
	 *	@return hvSrvcCatgyCd
	 */
   public char[] getHvSrvcCatgyCd() throws CFException  {              
   		return hostVariables.getHvSrvcCatgyCdGroup().getHvSrvcCatgyCd();
   }

  
	/**
	*  set variable hvSrvcCatgyCd
	*  @param value
	**/
   public void setHvSrvcCatgyCd(char[] value) throws CFException {
      hostVariables.getHvSrvcCatgyCdGroup().setHvSrvcCatgyCd(value);
   } 

     /**
	 * 	Update HvSrvcCatgyCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvSrvcCatgyCd(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvSrvcCatgyCdGroup().setHvSrvcCatgyCd(source, sourceIndex);
   	
   }
   
   public void setHvSrvcCatgyCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvSrvcCatgyCdGroup().setHvSrvcCatgyCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSrvcCatgyCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSrvcCatgyCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSrvcCatgyCdGroup().setHvSrvcCatgyCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSrvcCatgyCd with another Field
	 *	@param value
	 */
   public void setHvSrvcCatgyCd(Field source) {
      hostVariables.getHvSrvcCatgyCdGroup().setHvSrvcCatgyCd(source);
   }  
   
     /**
	 * 	Update HvSrvcCatgyCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvSrvcCatgyCd(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvSrvcCatgyCdGroup().setHvSrvcCatgyCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvSrvcCatgyCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSrvcCatgyCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSrvcCatgyCdGroup().setHvSrvcCatgyCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryFilterSpiStart
	 *	@return queryFilterSpiStart
	 */
   public char[] getQueryFilterSpiStart() throws CFException  {              
   		return work.getQueryFilterSpiStart();
   }

  
	/**
	*  set variable queryFilterSpiStart
	*  @param value
	**/
   public void setQueryFilterSpiStart(char[] value) throws CFException {
      work.setQueryFilterSpiStart(value);
   } 

	/**
	 *	Returns the value of hvSpiCtgyCd2Group
	 *	@return hvSpiCtgyCd2Group
	 */   
	 public HvSpiCtgyCd2Group getHvSpiCtgyCd2Group() {
   	return hostVariables.getHvSpiCtgyCd2Group();
   }

   /**
	* 	Update HvSpiCtgyCd2Group with the passed value
	*	@param value
	*/
   public void setHvSpiCtgyCd2Group(char[] value) throws CFException {
      hostVariables.setHvSpiCtgyCd2Group(value);
   }   

     /**
	 * 	Update HvSpiCtgyCd2Group 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd2Group(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	hostVariables.setHvSpiCtgyCd2Group(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd2Group 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd2Group(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvSpiCtgyCd2Group(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSpiCtgyCd2Group with another Field
	 *	@param value
	 */
   public void setHvSpiCtgyCd2Group(Field source) {
   	hostVariables.setHvSpiCtgyCd2Group(source);
   }  
   
     /**
	 * 	Update HvSpiCtgyCd2Group 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd2Group(Field source, int sourceIndex,int sourceLen) {
   	hostVariables.setHvSpiCtgyCd2Group(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd2Group 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd2Group(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvSpiCtgyCd2Group(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryFilterSpiPred3
	 *	@return queryFilterSpiPred3
	 */
   public char[] getQueryFilterSpiPred3() throws CFException  {              
   		return work.getQueryFilterSpiPred3();
   }

  
	/**
	*  set variable queryFilterSpiPred3
	*  @param value
	**/
   public void setQueryFilterSpiPred3(char[] value) throws CFException {
      work.setQueryFilterSpiPred3(value);
   } 

	/**
	 *	Returns the value of hvSpiCtgyCd3Group
	 *	@return hvSpiCtgyCd3Group
	 */   
	 public HvSpiCtgyCd3Group getHvSpiCtgyCd3Group() {
   	return hostVariables.getHvSpiCtgyCd3Group();
   }

   /**
	* 	Update HvSpiCtgyCd3Group with the passed value
	*	@param value
	*/
   public void setHvSpiCtgyCd3Group(char[] value) throws CFException {
      hostVariables.setHvSpiCtgyCd3Group(value);
   }   

     /**
	 * 	Update HvSpiCtgyCd3Group 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd3Group(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	hostVariables.setHvSpiCtgyCd3Group(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd3Group 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd3Group(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvSpiCtgyCd3Group(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSpiCtgyCd3Group with another Field
	 *	@param value
	 */
   public void setHvSpiCtgyCd3Group(Field source) {
   	hostVariables.setHvSpiCtgyCd3Group(source);
   }  
   
     /**
	 * 	Update HvSpiCtgyCd3Group 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd3Group(Field source, int sourceIndex,int sourceLen) {
   	hostVariables.setHvSpiCtgyCd3Group(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd3Group 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd3Group(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvSpiCtgyCd3Group(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqln
	 *	@return sqln
	 */
	public short getSqln() throws CFException {        
   		return sqlda.getSqln();
	}
	
	/**
	 * 	Update Sqln with the passed value
	 *	@param number
	 */
	public void setSqln(short number)  throws CFException{
		sqlda.setSqln(number);
	}

	public void setSqln(int number)  throws CFException{
		sqlda.setSqln((short)number);
	}

	public void setSqln(long number)  throws CFException{
		sqlda.setSqln((short)number);
	}



	/**
	 *	Returns the value of hvSrvcCatgyCdGroup
	 *	@return hvSrvcCatgyCdGroup
	 */   
	 public HvSrvcCatgyCdGroup getHvSrvcCatgyCdGroup() {
   	return hostVariables.getHvSrvcCatgyCdGroup();
   }

   /**
	* 	Update HvSrvcCatgyCdGroup with the passed value
	*	@param value
	*/
   public void setHvSrvcCatgyCdGroup(char[] value) throws CFException {
      hostVariables.setHvSrvcCatgyCdGroup(value);
   }   

     /**
	 * 	Update HvSrvcCatgyCdGroup 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setHvSrvcCatgyCdGroup(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	hostVariables.setHvSrvcCatgyCdGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSrvcCatgyCdGroup 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSrvcCatgyCdGroup(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvSrvcCatgyCdGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSrvcCatgyCdGroup with another Field
	 *	@param value
	 */
   public void setHvSrvcCatgyCdGroup(Field source) {
   	hostVariables.setHvSrvcCatgyCdGroup(source);
   }  
   
     /**
	 * 	Update HvSrvcCatgyCdGroup 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setHvSrvcCatgyCdGroup(Field source, int sourceIndex,int sourceLen) {
   	hostVariables.setHvSrvcCatgyCdGroup(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSrvcCatgyCdGroup 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSrvcCatgyCdGroup(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvSrvcCatgyCdGroup(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryFilterSvcSql
	 *	@return queryFilterSvcSql
	 */   
	 public QueryFilterSvcSql getQueryFilterSvcSql() {
   	return queryFilterSvcSql;
   }


	/**
	 *	Returns the value of hvSpiCtgyCd1
	 *	@return hvSpiCtgyCd1
	 */
   public char[] getHvSpiCtgyCd1() throws CFException  {              
   		return hostVariables.getHvSpiCtgyCd1Group().getHvSpiCtgyCd1();
   }

  
	/**
	*  set variable hvSpiCtgyCd1
	*  @param value
	**/
   public void setHvSpiCtgyCd1(char[] value) throws CFException {
      hostVariables.getHvSpiCtgyCd1Group().setHvSpiCtgyCd1(value);
   } 

     /**
	 * 	Update HvSpiCtgyCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvSpiCtgyCd1Group().setHvSpiCtgyCd1(source, sourceIndex);
   	
   }
   
   public void setHvSpiCtgyCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvSpiCtgyCd1Group().setHvSpiCtgyCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd1Group().setHvSpiCtgyCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSpiCtgyCd1 with another Field
	 *	@param value
	 */
   public void setHvSpiCtgyCd1(Field source) {
      hostVariables.getHvSpiCtgyCd1Group().setHvSpiCtgyCd1(source);
   }  
   
     /**
	 * 	Update HvSpiCtgyCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvSpiCtgyCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvSpiCtgyCd1Group().setHvSpiCtgyCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvSpiCtgyCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd1Group().setHvSpiCtgyCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryFilterSpiPred1
	 *	@return queryFilterSpiPred1
	 */
   public char[] getQueryFilterSpiPred1() throws CFException  {              
   		return work.getQueryFilterSpiPred1();
   }

  
	/**
	*  set variable queryFilterSpiPred1
	*  @param value
	**/
   public void setQueryFilterSpiPred1(char[] value) throws CFException {
      work.setQueryFilterSpiPred1(value);
   } 

	/**
	 *	Returns the value of sqld
	 *	@return sqld
	 */
	public short getSqld() throws CFException {        
   		return sqlda.getSqld();
	}
	
	/**
	 * 	Update Sqld with the passed value
	 *	@param number
	 */
	public void setSqld(short number)  throws CFException{
		sqlda.setSqld(number);
	}

	public void setSqld(int number)  throws CFException{
		sqlda.setSqld((short)number);
	}

	public void setSqld(long number)  throws CFException{
		sqlda.setSqld((short)number);
	}



	/**
	 *	Returns the value of hvSpiCtgyCd2
	 *	@return hvSpiCtgyCd2
	 */
   public char[] getHvSpiCtgyCd2() throws CFException  {              
   		return hostVariables.getHvSpiCtgyCd2Group().getHvSpiCtgyCd2();
   }

  
	/**
	*  set variable hvSpiCtgyCd2
	*  @param value
	**/
   public void setHvSpiCtgyCd2(char[] value) throws CFException {
      hostVariables.getHvSpiCtgyCd2Group().setHvSpiCtgyCd2(value);
   } 

     /**
	 * 	Update HvSpiCtgyCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvSpiCtgyCd2Group().setHvSpiCtgyCd2(source, sourceIndex);
   	
   }
   
   public void setHvSpiCtgyCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvSpiCtgyCd2Group().setHvSpiCtgyCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd2Group().setHvSpiCtgyCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSpiCtgyCd2 with another Field
	 *	@param value
	 */
   public void setHvSpiCtgyCd2(Field source) {
      hostVariables.getHvSpiCtgyCd2Group().setHvSpiCtgyCd2(source);
   }  
   
     /**
	 * 	Update HvSpiCtgyCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvSpiCtgyCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvSpiCtgyCd2Group().setHvSpiCtgyCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvSpiCtgyCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd2Group().setHvSpiCtgyCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvSpiCtgyCd1Group
	 *	@return hvSpiCtgyCd1Group
	 */   
	 public HvSpiCtgyCd1Group getHvSpiCtgyCd1Group() {
   	return hostVariables.getHvSpiCtgyCd1Group();
   }

   /**
	* 	Update HvSpiCtgyCd1Group with the passed value
	*	@param value
	*/
   public void setHvSpiCtgyCd1Group(char[] value) throws CFException {
      hostVariables.setHvSpiCtgyCd1Group(value);
   }   

     /**
	 * 	Update HvSpiCtgyCd1Group 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd1Group(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	hostVariables.setHvSpiCtgyCd1Group(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd1Group 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd1Group(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvSpiCtgyCd1Group(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSpiCtgyCd1Group with another Field
	 *	@param value
	 */
   public void setHvSpiCtgyCd1Group(Field source) {
   	hostVariables.setHvSpiCtgyCd1Group(source);
   }  
   
     /**
	 * 	Update HvSpiCtgyCd1Group 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd1Group(Field source, int sourceIndex,int sourceLen) {
   	hostVariables.setHvSpiCtgyCd1Group(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd1Group 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd1Group(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	hostVariables.setHvSpiCtgyCd1Group(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryFilterSpiPred2
	 *	@return queryFilterSpiPred2
	 */
   public char[] getQueryFilterSpiPred2() throws CFException  {              
   		return work.getQueryFilterSpiPred2();
   }

  
	/**
	*  set variable queryFilterSpiPred2
	*  @param value
	**/
   public void setQueryFilterSpiPred2(char[] value) throws CFException {
      work.setQueryFilterSpiPred2(value);
   } 

	/**
	 *	Returns the value of hvSpiCtgyCd4
	 *	@return hvSpiCtgyCd4
	 */
   public char[] getHvSpiCtgyCd4() throws CFException  {              
   		return hostVariables.getHvSpiCtgyCd4Group().getHvSpiCtgyCd4();
   }

  
	/**
	*  set variable hvSpiCtgyCd4
	*  @param value
	**/
   public void setHvSpiCtgyCd4(char[] value) throws CFException {
      hostVariables.getHvSpiCtgyCd4Group().setHvSpiCtgyCd4(value);
   } 

     /**
	 * 	Update HvSpiCtgyCd4 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvSpiCtgyCd4(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvSpiCtgyCd4Group().setHvSpiCtgyCd4(source, sourceIndex);
   	
   }
   
   public void setHvSpiCtgyCd4(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvSpiCtgyCd4Group().setHvSpiCtgyCd4(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvSpiCtgyCd4 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd4(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd4Group().setHvSpiCtgyCd4(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvSpiCtgyCd4 with another Field
	 *	@param value
	 */
   public void setHvSpiCtgyCd4(Field source) {
      hostVariables.getHvSpiCtgyCd4Group().setHvSpiCtgyCd4(source);
   }  
   
     /**
	 * 	Update HvSpiCtgyCd4 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvSpiCtgyCd4(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvSpiCtgyCd4Group().setHvSpiCtgyCd4(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvSpiCtgyCd4 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvSpiCtgyCd4(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvSpiCtgyCd4Group().setHvSpiCtgyCd4(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcOption7SqlSectOutCtx getProcOption7SqlSectOutCtx() {
            return new ProcOption7SqlSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += queryTextArea.hashCode();
        str += work.hashCode();
        str += queryFilterSvcSql.hashCode();
        str += sqlda.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public ProcOption7SqlSectInCtx clone() {
        ProcOption7SqlSectInCtx cloneObj = new ProcOption7SqlSectInCtx();
        cloneObj.queryTextArea = new QueryTextArea();
        cloneObj.queryTextArea.set(queryTextArea.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.queryFilterSvcSql = new QueryFilterSvcSql();
        cloneObj.queryFilterSvcSql.set(queryFilterSvcSql.getClonedField());
        cloneObj.sqlda = new Sqlda();
        cloneObj.sqlda.set(sqlda.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public ProcOption7SqlSectInCtx getProcOption7SqlSectInCtx() {
            return new ProcOption7SqlSectInCtx();
    }
     public class ProcOption7SqlSectOutCtx implements Cloneable {
     QueryTextArea queryTextArea = D5427dt1Ctx.this.getQueryTextArea();
     Work work = D5427dt1Ctx.this.getWork();
     QueryFilterSvcSql queryFilterSvcSql = D5427dt1Ctx.this.getQueryFilterSvcSql();
     Sqlda sqlda = D5427dt1Ctx.this.getSqlda();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of queryFilterSpiEnd
	 *	@return queryFilterSpiEnd
	 */
   public char[] getQueryFilterSpiEnd() throws CFException  {              
   		return work.getQueryFilterSpiEnd();
   }

  
	/**
	*  set variable queryFilterSpiEnd
	*  @param value
	**/
   public void setQueryFilterSpiEnd(char[] value) throws CFException {
      work.setQueryFilterSpiEnd(value);
   } 

	/**
	 *	Returns the value of queryFilterSpiPred4
	 *	@return queryFilterSpiPred4
	 */
   public char[] getQueryFilterSpiPred4() throws CFException  {              
   		return work.getQueryFilterSpiPred4();
   }

  
	/**
	*  set variable queryFilterSpiPred4
	*  @param value
	**/
   public void setQueryFilterSpiPred4(char[] value) throws CFException {
      work.setQueryFilterSpiPred4(value);
   } 

	/**
	 *	Returns the value of queryTextData
	 *	@return queryTextData
	 */
   public char[] getQueryTextData() throws CFException  {              
   		return queryTextArea.getQueryTextData();
   }

  
	/**
	*  set variable queryTextData
	*  @param value
	**/
   public void setQueryTextData(char[] value) throws CFException {
      queryTextArea.setQueryTextData(value);
   } 

     /**
	 * 	Update QueryTextData 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setQueryTextData(char[] source, int sourceIndex) throws CFException {
      queryTextArea.setQueryTextData(source, sourceIndex);
   	
   }
   
   public void setQueryTextData(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      queryTextArea.setQueryTextData(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update QueryTextData 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setQueryTextData(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      queryTextArea.setQueryTextData(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update QueryTextData with another Field
	 *	@param value
	 */
   public void setQueryTextData(Field source) {
      queryTextArea.setQueryTextData(source);
   }  
   
     /**
	 * 	Update QueryTextData 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setQueryTextData(Field source, int sourceIndex,int sourceLen) {
      queryTextArea.setQueryTextData(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update QueryTextData 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setQueryTextData(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      queryTextArea.setQueryTextData(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of queryTextLeng
	 *	@return queryTextLeng
	 */
	public short getQueryTextLeng() throws CFException {        
   		return queryTextArea.getQueryTextLeng();
	}
	
	/**
	 * 	Update QueryTextLeng with the passed value
	 *	@param number
	 */
	public void setQueryTextLeng(short number)  throws CFException{
		queryTextArea.setQueryTextLeng(number);
	}

	public void setQueryTextLeng(int number)  throws CFException{
		queryTextArea.setQueryTextLeng((short)number);
	}

	public void setQueryTextLeng(long number)  throws CFException{
		queryTextArea.setQueryTextLeng((short)number);
	}



	/**
	 *	Returns the value of sqlnamel
	 *	@return sqlnamel
	 */
	public short getSqlnamel(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqlname().getSqlnamel();
	}
	
	/**
	 * 	Update Sqlnamel with the passed value
	 *	@param number
	 */
	public void setSqlnamel(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel(number);
	}

	public void setSqlnamel(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel((short)number);
	}

	public void setSqlnamel(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().getSqlname().setSqlnamel((short)number);
	}



	/**
	 *	Returns the value of sqllen
	 *	@return sqllen
	 */
	public short getSqllen(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqllen();
	}
	
	/**
	 * 	Update Sqllen with the passed value
	 *	@param number
	 */
	public void setSqllen(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen(number);
	}

	public void setSqllen(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen((short)number);
	}

	public void setSqllen(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqllen((short)number);
	}



	/**
	 *	Returns the value of i
	 *	@return i
	 */
	public short getI() throws CFException {        
   		return work.getI();
	}
	
	/**
	 * 	Update I with the passed value
	 *	@param number
	 */
	public void setI(short number)  throws CFException{
		work.setI(number);
	}

	public void setI(int number)  throws CFException{
		work.setI((short)number);
	}

	public void setI(long number)  throws CFException{
		work.setI((short)number);
	}



	/**
	 *	Returns the value of sqlind
	 *	@return sqlind
	 */
	public int getSqlind(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqlind();
	}
	
	/**
	 * 	Update Sqlind with the passed value
	 *	@param number
	 */
	public void setSqlind(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqlind(number);
	}


	public void setSqlind(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqlind((int)number);
	}


	/**
	 *	Returns the value of queryFilterSpiPred5
	 *	@return queryFilterSpiPred5
	 */
   public char[] getQueryFilterSpiPred5() throws CFException  {              
   		return work.getQueryFilterSpiPred5();
   }

  
	/**
	*  set variable queryFilterSpiPred5
	*  @param value
	**/
   public void setQueryFilterSpiPred5(char[] value) throws CFException {
      work.setQueryFilterSpiPred5(value);
   } 

	/**
	 *	Returns the value of queryFilterSpiStart
	 *	@return queryFilterSpiStart
	 */
   public char[] getQueryFilterSpiStart() throws CFException  {              
   		return work.getQueryFilterSpiStart();
   }

  
	/**
	*  set variable queryFilterSpiStart
	*  @param value
	**/
   public void setQueryFilterSpiStart(char[] value) throws CFException {
      work.setQueryFilterSpiStart(value);
   } 

	/**
	 *	Returns the value of sqldata
	 *	@return sqldata
	 */
	public int getSqldata(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqldata();
	}
	
	/**
	 * 	Update Sqldata with the passed value
	 *	@param number
	 */
	public void setSqldata(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqldata(number);
	}


	public void setSqldata(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqldata((int)number);
	}


	/**
	 *	Returns the value of queryFilterSpiPred3
	 *	@return queryFilterSpiPred3
	 */
   public char[] getQueryFilterSpiPred3() throws CFException  {              
   		return work.getQueryFilterSpiPred3();
   }

  
	/**
	*  set variable queryFilterSpiPred3
	*  @param value
	**/
   public void setQueryFilterSpiPred3(char[] value) throws CFException {
      work.setQueryFilterSpiPred3(value);
   } 

	/**
	 *	Returns the value of sqln
	 *	@return sqln
	 */
	public short getSqln() throws CFException {        
   		return sqlda.getSqln();
	}
	
	/**
	 * 	Update Sqln with the passed value
	 *	@param number
	 */
	public void setSqln(short number)  throws CFException{
		sqlda.setSqln(number);
	}

	public void setSqln(int number)  throws CFException{
		sqlda.setSqln((short)number);
	}

	public void setSqln(long number)  throws CFException{
		sqlda.setSqln((short)number);
	}



	/**
	 *	Returns the value of sqltype
	 *	@return sqltype
	 */
	public short getSqltype(int index) throws CFException {        
   		return sqlda.getSqlvar(index).getSqlvar1().getSqltype();
	}
	
	/**
	 * 	Update Sqltype with the passed value
	 *	@param number
	 */
	public void setSqltype(int index,short number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype(number);
	}

	public void setSqltype(int index,int number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype((short)number);
	}

	public void setSqltype(int index,long number)  throws CFException{
		sqlda.getSqlvar(index).getSqlvar1().setSqltype((short)number);
	}



	/**
	 *	Returns the value of queryFilterSvcSql
	 *	@return queryFilterSvcSql
	 */   
	 public QueryFilterSvcSql getQueryFilterSvcSql() {
   	return queryFilterSvcSql;
   }


	/**
	 *	Returns the value of queryFilterSpiPred1
	 *	@return queryFilterSpiPred1
	 */
   public char[] getQueryFilterSpiPred1() throws CFException  {              
   		return work.getQueryFilterSpiPred1();
   }

  
	/**
	*  set variable queryFilterSpiPred1
	*  @param value
	**/
   public void setQueryFilterSpiPred1(char[] value) throws CFException {
      work.setQueryFilterSpiPred1(value);
   } 

	/**
	 *	Returns the value of sqld
	 *	@return sqld
	 */
	public short getSqld() throws CFException {        
   		return sqlda.getSqld();
	}
	
	/**
	 * 	Update Sqld with the passed value
	 *	@param number
	 */
	public void setSqld(short number)  throws CFException{
		sqlda.setSqld(number);
	}

	public void setSqld(int number)  throws CFException{
		sqlda.setSqld((short)number);
	}

	public void setSqld(long number)  throws CFException{
		sqlda.setSqld((short)number);
	}



	/**
	 *	Returns the value of queryFilterSpiPred2
	 *	@return queryFilterSpiPred2
	 */
   public char[] getQueryFilterSpiPred2() throws CFException  {              
   		return work.getQueryFilterSpiPred2();
   }

  
	/**
	*  set variable queryFilterSpiPred2
	*  @param value
	**/
   public void setQueryFilterSpiPred2(char[] value) throws CFException {
      work.setQueryFilterSpiPred2(value);
   } 


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += queryTextArea.hashCode();
        str += work.hashCode();
        str += queryFilterSvcSql.hashCode();
        str += sqlda.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public ProcOption7SqlSectOutCtx clone() {
        ProcOption7SqlSectOutCtx cloneObj = new ProcOption7SqlSectOutCtx();
        cloneObj.queryTextArea = new QueryTextArea();
        cloneObj.queryTextArea.set(queryTextArea.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.queryFilterSvcSql = new QueryFilterSvcSql();
        cloneObj.queryFilterSvcSql.set(queryFilterSvcSql.getClonedField());
        cloneObj.sqlda = new Sqlda();
        cloneObj.sqlda.set(sqlda.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public ProcOption7SqlSectOutCtx getProcOption7SqlSectOutCtx() {
            return new ProcOption7SqlSectOutCtx();
    }
     public class SearchMemberPlusSectInCtx implements Cloneable {
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "S" for isQueryFilterSrvcDtOnly()
	 *	@return  Returns true if isQueryFilterSrvcDtOnly() is "S"
	 */
   public boolean isQueryFilterSrvcDtOnly() throws CFException {
      return work.isQueryFilterSrvcDtOnly();
   }

	/**
	*  set values "S"
	*/
   	public void setQueryFilterSrvcDtOnlyTrue()  throws CFException{  			
    	work.setQueryFilterSrvcDtOnlyTrue();
   	}
	/**
	 *	Test condition "R" for isQueryFilterAllRev()
	 *	@return  Returns true if isQueryFilterAllRev() is "R"
	 */
   public boolean isQueryFilterAllRev() throws CFException {
      return work.isQueryFilterAllRev();
   }

	/**
	*  set values "R"
	*/
   	public void setQueryFilterAllRevTrue()  throws CFException{  			
    	work.setQueryFilterAllRevTrue();
   	}
	/**
	 *	Test condition "C" for isQueryFilterAllCpt()
	 *	@return  Returns true if isQueryFilterAllCpt() is "C"
	 */
   public boolean isQueryFilterAllCpt() throws CFException {
      return work.isQueryFilterAllCpt();
   }

	/**
	*  set values "C"
	*/
   	public void setQueryFilterAllCptTrue()  throws CFException{  			
    	work.setQueryFilterAllCptTrue();
   	}
	/**
	 *	Test condition " " for isDt1ReqStartAtTop()
	 *	@return  Returns true if isDt1ReqStartAtTop() is " "
	 */
   public boolean isDt1ReqStartAtTop() throws CFException {
      return dt1ReqContainer.getDt1RequestArea().isDt1ReqStartAtTop();
   }

	/**
	*  set values " "
	*/
   	public void setDt1ReqStartAtTopTrue()  throws CFException{  			
    	dt1ReqContainer.getDt1RequestArea().setDt1ReqStartAtTopTrue();
   	}
	/**
	 *	Test condition "N" for isQueryFilterNo()
	 *	@return  Returns true if isQueryFilterNo() is "N"
	 */
   public boolean isQueryFilterNo() throws CFException {
      return work.isQueryFilterNo();
   }

	/**
	*  set values "N"
	*/
   	public void setQueryFilterNoTrue()  throws CFException{  			
    	work.setQueryFilterNoTrue();
   	}
	/**
	 *	Test condition "T" for isQueryFilterAllRevOop()
	 *	@return  Returns true if isQueryFilterAllRevOop() is "T"
	 */
   public boolean isQueryFilterAllRevOop() throws CFException {
      return work.isQueryFilterAllRevOop();
   }

	/**
	*  set values "T"
	*/
   	public void setQueryFilterAllRevOopTrue()  throws CFException{  			
    	work.setQueryFilterAllRevOopTrue();
   	}
	/**
	 *	Test condition "O" for isQueryFilterAllCptOop()
	 *	@return  Returns true if isQueryFilterAllCptOop() is "O"
	 */
   public boolean isQueryFilterAllCptOop() throws CFException {
      return work.isQueryFilterAllCptOop();
   }

	/**
	*  set values "O"
	*/
   	public void setQueryFilterAllCptOopTrue()  throws CFException{  			
    	work.setQueryFilterAllCptOopTrue();
   	}
	/**
	 *	Test condition "P" for isQueryFilterSrvcDtProv()
	 *	@return  Returns true if isQueryFilterSrvcDtProv() is "P"
	 */
   public boolean isQueryFilterSrvcDtProv() throws CFException {
      return work.isQueryFilterSrvcDtProv();
   }

	/**
	*  set values "P"
	*/
   	public void setQueryFilterSrvcDtProvTrue()  throws CFException{  			
    	work.setQueryFilterSrvcDtProvTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public SearchMemberPlusSectInCtx clone() {
        SearchMemberPlusSectInCtx cloneObj = new SearchMemberPlusSectInCtx();
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public SearchMemberPlusSectInCtx getSearchMemberPlusSectInCtx() {
            return new SearchMemberPlusSectInCtx();
    }
     public class ProcCsrInitFullSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcCsrInitFullSectOutCtx getProcCsrInitFullSectOutCtx() {
            return new ProcCsrInitFullSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrInitFullSectInCtx clone() {
        ProcCsrInitFullSectInCtx cloneObj = new ProcCsrInitFullSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrInitFullSectInCtx getProcCsrInitFullSectInCtx() {
            return new ProcCsrInitFullSectInCtx();
    }
     public class ProcCsrInitFullSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrInitFullSectOutCtx clone() {
        ProcCsrInitFullSectOutCtx cloneObj = new ProcCsrInitFullSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrInitFullSectOutCtx getProcCsrInitFullSectOutCtx() {
            return new ProcCsrInitFullSectOutCtx();
    }
     public class OpenCsrInitFullSectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public OpenCsrInitFullSectOutCtx getOpenCsrInitFullSectOutCtx() {
            return new OpenCsrInitFullSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public OpenCsrInitFullSectInCtx clone() {
        OpenCsrInitFullSectInCtx cloneObj = new OpenCsrInitFullSectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrInitFullSectInCtx getOpenCsrInitFullSectInCtx() {
            return new OpenCsrInitFullSectInCtx();
    }
     public class OpenCsrInitFullSectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of dderefEeId
	 *	@return dderefEeId
	 */
   public char[] getDderefEeId() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefEeIdGroup().getDderefEeId();
   }

  
	/**
	*  set variable dderefEeId
	*  @param value
	**/
   public void setDderefEeId(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(value);
   } 

     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex);
   	
   }
   
   public void setDderefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeId with another Field
	 *	@param value
	 */
   public void setDderefEeId(Field source) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source);
   }  
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPolNbr
	 *	@return dderefPolNbr
	 */
   public char[] getDderefPolNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPolNbrGroup().getDderefPolNbr();
   }

  
	/**
	*  set variable dderefPolNbr
	*  @param value
	**/
   public void setDderefPolNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(value);
   } 

     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDderefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbr with another Field
	 *	@param value
	 */
   public void setDderefPolNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source);
   }  
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefDepnNbr
	 *	@return dderefDepnNbr
	 */
   public char[] getDderefDepnNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefDepnNbrGroup().getDderefDepnNbr();
   }

  
	/**
	*  set variable dderefDepnNbr
	*  @param value
	**/
   public void setDderefDepnNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(value);
   } 

     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDderefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbr with another Field
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source);
   }  
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public OpenCsrInitFullSectOutCtx clone() {
        OpenCsrInitFullSectOutCtx cloneObj = new OpenCsrInitFullSectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrInitFullSectOutCtx getOpenCsrInitFullSectOutCtx() {
            return new OpenCsrInitFullSectOutCtx();
    }
     public class FetchCsrInitFullSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrInitFullSectOutCtx getFetchCsrInitFullSectOutCtx() {
            return new FetchCsrInitFullSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrInitFullSectInCtx clone() {
        FetchCsrInitFullSectInCtx cloneObj = new FetchCsrInitFullSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrInitFullSectInCtx getFetchCsrInitFullSectInCtx() {
            return new FetchCsrInitFullSectInCtx();
    }
     public class FetchCsrInitFullSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrInitFullSectOutCtx clone() {
        FetchCsrInitFullSectOutCtx cloneObj = new FetchCsrInitFullSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrInitFullSectOutCtx getFetchCsrInitFullSectOutCtx() {
            return new FetchCsrInitFullSectOutCtx();
    }
     public class FetchCsrRowsSect4121InCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of fetchRowsetMax
	 *	@return fetchRowsetMax
	 */
	public int getFetchRowsetMax() throws CFException {        
   		return work.getFetchRowsetMax();
	}
	
	/**
	 * 	Update FetchRowsetMax with the passed value
	 *	@param number
	 */
	public void setFetchRowsetMax(int number)  throws CFException{
		work.setFetchRowsetMax(number);
	}


	public void setFetchRowsetMax(long number)  throws CFException{
		work.setFetchRowsetMax((int)number);
	}


	/**
	 *	Returns the value of work
	 *	@return work
	 */   
	 public Work getWork() {
   	return work;
   }


	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 

	public BigDecimal getHvaSupAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaSupAmt((index));
	}

    public char[] getHvaSupAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaSupAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaSupAmt with the passed number
	 *	@param number
	 */
	public void setHvaSupAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaSupAmt((index),number);
   }

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hvaPartnVal
	 *	@return hvaPartnVal
	 */
   public char[] getHvaPartnVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPartnVal(index);
   }

  
	/**
	*  set variable hvaPartnVal
	*  @param value
	**/
   public void setHvaPartnVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPartnVal((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaPartnId
	 *	@return hvaPartnId
	 */
	public short getHvaPartnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPartnId((index));
	}
	
	/**
	 * 	Update HvaPartnId with the passed value
	 *	@param number
	 */
	public void setHvaPartnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),number);
	}

	public void setHvaPartnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}

	public void setHvaPartnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}



	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	public BigDecimal getHvaBaseDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseDedAmt((index));
	}

    public char[] getHvaBaseDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseDedAmt((index),number);
   }

	/**
	 *	Returns the value of hvaMskNullInd
	 *	@return hvaMskNullInd
	 */
	public short getHvaMskNullInd(int index) throws CFException {        
   		return hvaClmHistArray.getHvaMskNullInd((index));
	}
	
	/**
	 * 	Update HvaMskNullInd with the passed value
	 *	@param number
	 */
	public void setHvaMskNullInd(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),number);
	}

	public void setHvaMskNullInd(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}

	public void setHvaMskNullInd(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}



	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of hvaTransCd
	 *	@return hvaTransCd
	 */
   public char[] getHvaTransCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTransCd(index);
   }

  
	/**
	*  set variable hvaTransCd
	*  @param value
	**/
   public void setHvaTransCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTransCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktNbr
	 *	@return hvaProvMktNbr
	 */
   public char[] getHvaProvMktNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktNbr(index);
   }

  
	/**
	*  set variable hvaProvMktNbr
	*  @param value
	**/
   public void setHvaProvMktNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktNbr((index),value);
   } 

	public BigDecimal getHvaBaseAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseAmt((index));
	}

    public char[] getHvaBaseAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseAmt((index),number);
   }

	public BigDecimal getHvaCobCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCobCrResAmt((index));
	}

    public char[] getHvaCobCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCobCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCobCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaCobCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCobCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPpoCd
	 *	@return hvaPpoCd
	 */
   public char[] getHvaPpoCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPpoCd(index);
   }

  
	/**
	*  set variable hvaPpoCd
	*  @param value
	**/
   public void setHvaPpoCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPpoCd((index),value);
   } 

	public BigDecimal getHvaMmDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmDedAmt((index));
	}

    public char[] getHvaMmDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmDedAmt((index),number);
   }

	public BigDecimal getHvaMcCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMcCrResAmt((index));
	}

    public char[] getHvaMcCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMcCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMcCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaMcCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMcCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProvIpaId
	 *	@return hvaProvIpaId
	 */
   public char[] getHvaProvIpaId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvIpaId(index);
   }

  
	/**
	*  set variable hvaProvIpaId
	*  @param value
	**/
   public void setHvaProvIpaId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvIpaId((index),value);
   } 

	/**
	 *	Returns the value of hvaPmtSvcCd
	 *	@return hvaPmtSvcCd
	 */
   public char[] getHvaPmtSvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPmtSvcCd(index);
   }

  
	/**
	*  set variable hvaPmtSvcCd
	*  @param value
	**/
   public void setHvaPmtSvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPmtSvcCd((index),value);
   } 

	public BigDecimal getHvaMmAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmAmt((index));
	}

    public char[] getHvaMmAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvEobNm
	 *	@return hvaProvEobNm
	 */
   public char[] getHvaProvEobNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvEobNm(index);
   }

  
	/**
	*  set variable hvaProvEobNm
	*  @param value
	**/
   public void setHvaProvEobNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvEobNm((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	public BigDecimal getHvaCopayAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCopayAmt((index));
	}

    public char[] getHvaCopayAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCopayAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCopayAmt with the passed number
	 *	@param number
	 */
	public void setHvaCopayAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCopayAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvPrdctCd
	 *	@return hvaProvPrdctCd
	 */
   public char[] getHvaProvPrdctCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvPrdctCd(index);
   }

  
	/**
	*  set variable hvaProvPrdctCd
	*  @param value
	**/
   public void setHvaProvPrdctCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvPrdctCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPrsCreatSrcCd
	 *	@return hvaPrsCreatSrcCd
	 */
   public char[] getHvaPrsCreatSrcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPrsCreatSrcCd(index);
   }

  
	/**
	*  set variable hvaPrsCreatSrcCd
	*  @param value
	**/
   public void setHvaPrsCreatSrcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPrsCreatSrcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of hvaBaseDedDescTxt
	 *	@return hvaBaseDedDescTxt
	 */
   public char[] getHvaBaseDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBaseDedDescTxt(index);
   }

  
	/**
	*  set variable hvaBaseDedDescTxt
	*  @param value
	**/
   public void setHvaBaseDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBaseDedDescTxt((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvaMmDedDescTxt
	 *	@return hvaMmDedDescTxt
	 */
   public char[] getHvaMmDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMmDedDescTxt(index);
   }

  
	/**
	*  set variable hvaMmDedDescTxt
	*  @param value
	**/
   public void setHvaMmDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMmDedDescTxt((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of hvaOvrCd
	 *	@return hvaOvrCd
	 */
   public char[] getHvaOvrCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaOvrCd(index);
   }

  
	/**
	*  set variable hvaOvrCd
	*  @param value
	**/
   public void setHvaOvrCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaOvrCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktTypCd
	 *	@return hvaProvMktTypCd
	 */
   public char[] getHvaProvMktTypCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktTypCd(index);
   }

  
	/**
	*  set variable hvaProvMktTypCd
	*  @param value
	**/
   public void setHvaProvMktTypCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktTypCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of hvaParInd
	 *	@return hvaParInd
	 */
   public char[] getHvaParInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaParInd(index);
   }

  
	/**
	*  set variable hvaParInd
	*  @param value
	**/
   public void setHvaParInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaParInd((index),value);
   } 

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrRowsSect4121OutCtx getFetchCsrRowsSect4121OutCtx() {
            return new FetchCsrRowsSect4121OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect4121InCtx clone() {
        FetchCsrRowsSect4121InCtx cloneObj = new FetchCsrRowsSect4121InCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect4121InCtx getFetchCsrRowsSect4121InCtx() {
            return new FetchCsrRowsSect4121InCtx();
    }
     public class FetchCsrRowsSect4121OutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Test condition 100 for isSqlcodeFetchEnd()
	 *	@return  Returns true if isSqlcodeFetchEnd() is 100
	 */
   public boolean isSqlcodeFetchEnd() throws CFException {
      return work.isSqlcodeFetchEnd();
   }

	/**
	*  set values 100
	*/
   	public void setSqlcodeFetchEndTrue()  throws CFException{  			
    	work.setSqlcodeFetchEndTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 0 for isSqlcodeOk()
	 *	@return  Returns true if isSqlcodeOk() is 0
	 */
   public boolean isSqlcodeOk() throws CFException {
      return work.isSqlcodeOk();
   }

	/**
	*  set values 0
	*/
   	public void setSqlcodeOkTrue()  throws CFException{  			
    	work.setSqlcodeOkTrue();
   	}
	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect4121OutCtx clone() {
        FetchCsrRowsSect4121OutCtx cloneObj = new FetchCsrRowsSect4121OutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect4121OutCtx getFetchCsrRowsSect4121OutCtx() {
            return new FetchCsrRowsSect4121OutCtx();
    }
     public class CloseCsrInitFullSectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public CloseCsrInitFullSectOutCtx getCloseCsrInitFullSectOutCtx() {
            return new CloseCsrInitFullSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrInitFullSectInCtx clone() {
        CloseCsrInitFullSectInCtx cloneObj = new CloseCsrInitFullSectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrInitFullSectInCtx getCloseCsrInitFullSectInCtx() {
            return new CloseCsrInitFullSectInCtx();
    }
     public class CloseCsrInitFullSectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrInitFullSectOutCtx clone() {
        CloseCsrInitFullSectOutCtx cloneObj = new CloseCsrInitFullSectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrInitFullSectOutCtx getCloseCsrInitFullSectOutCtx() {
            return new CloseCsrInitFullSectOutCtx();
    }
     public class ProcCsrInitFiltSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcCsrInitFiltSectOutCtx getProcCsrInitFiltSectOutCtx() {
            return new ProcCsrInitFiltSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrInitFiltSectInCtx clone() {
        ProcCsrInitFiltSectInCtx cloneObj = new ProcCsrInitFiltSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrInitFiltSectInCtx getProcCsrInitFiltSectInCtx() {
            return new ProcCsrInitFiltSectInCtx();
    }
     public class ProcCsrInitFiltSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrInitFiltSectOutCtx clone() {
        ProcCsrInitFiltSectOutCtx cloneObj = new ProcCsrInitFiltSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrInitFiltSectOutCtx getProcCsrInitFiltSectOutCtx() {
            return new ProcCsrInitFiltSectOutCtx();
    }
     public class OpenCsrInitFiltSectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvLstSrvcDt
	 *	@return hvLstSrvcDt
	 */
   public char[] getHvLstSrvcDt() throws CFException  {              
   		return hostVariables.getHvLstSrvcDtGroup().getHvLstSrvcDt();
   }

  
	/**
	*  set variable hvLstSrvcDt
	*  @param value
	**/
   public void setHvLstSrvcDt(char[] value) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(value);
   } 

     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex);
   	
   }
   
   public void setHvLstSrvcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvLstSrvcDt with another Field
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source);
   }  
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFstDt
	 *	@return hvFstDt
	 */
   public char[] getHvFstDt() throws CFException  {              
   		return hostVariables.getHvFstDtGroup().getHvFstDt();
   }

  
	/**
	*  set variable hvFstDt
	*  @param value
	**/
   public void setHvFstDt(char[] value) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(value);
   } 

     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex);
   	
   }
   
   public void setHvFstDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFstDt with another Field
	 *	@param value
	 */
   public void setHvFstDt(Field source) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source);
   }  
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hostVariables
	 *	@return hostVariables
	 */   
	 public HostVariables getHostVariables() {
   	return hostVariables;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public OpenCsrInitFiltSectOutCtx getOpenCsrInitFiltSectOutCtx() {
            return new OpenCsrInitFiltSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrInitFiltSectInCtx clone() {
        OpenCsrInitFiltSectInCtx cloneObj = new OpenCsrInitFiltSectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrInitFiltSectInCtx getOpenCsrInitFiltSectInCtx() {
            return new OpenCsrInitFiltSectInCtx();
    }
     public class OpenCsrInitFiltSectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dderefEeId
	 *	@return dderefEeId
	 */
   public char[] getDderefEeId() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefEeIdGroup().getDderefEeId();
   }

  
	/**
	*  set variable dderefEeId
	*  @param value
	**/
   public void setDderefEeId(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(value);
   } 

     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex);
   	
   }
   
   public void setDderefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeId with another Field
	 *	@param value
	 */
   public void setDderefEeId(Field source) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source);
   }  
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPolNbr
	 *	@return dderefPolNbr
	 */
   public char[] getDderefPolNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPolNbrGroup().getDderefPolNbr();
   }

  
	/**
	*  set variable dderefPolNbr
	*  @param value
	**/
   public void setDderefPolNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(value);
   } 

     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDderefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbr with another Field
	 *	@param value
	 */
   public void setDderefPolNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source);
   }  
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefDepnNbr
	 *	@return dderefDepnNbr
	 */
   public char[] getDderefDepnNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefDepnNbrGroup().getDderefDepnNbr();
   }

  
	/**
	*  set variable dderefDepnNbr
	*  @param value
	**/
   public void setDderefDepnNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(value);
   } 

     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDderefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbr with another Field
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source);
   }  
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrInitFiltSectOutCtx clone() {
        OpenCsrInitFiltSectOutCtx cloneObj = new OpenCsrInitFiltSectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrInitFiltSectOutCtx getOpenCsrInitFiltSectOutCtx() {
            return new OpenCsrInitFiltSectOutCtx();
    }
     public class FetchCsrInitFiltSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrInitFiltSectOutCtx getFetchCsrInitFiltSectOutCtx() {
            return new FetchCsrInitFiltSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrInitFiltSectInCtx clone() {
        FetchCsrInitFiltSectInCtx cloneObj = new FetchCsrInitFiltSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrInitFiltSectInCtx getFetchCsrInitFiltSectInCtx() {
            return new FetchCsrInitFiltSectInCtx();
    }
     public class FetchCsrInitFiltSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrInitFiltSectOutCtx clone() {
        FetchCsrInitFiltSectOutCtx cloneObj = new FetchCsrInitFiltSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrInitFiltSectOutCtx getFetchCsrInitFiltSectOutCtx() {
            return new FetchCsrInitFiltSectOutCtx();
    }
     public class FetchCsrRowsSect4221InCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of fetchRowsetMax
	 *	@return fetchRowsetMax
	 */
	public int getFetchRowsetMax() throws CFException {        
   		return work.getFetchRowsetMax();
	}
	
	/**
	 * 	Update FetchRowsetMax with the passed value
	 *	@param number
	 */
	public void setFetchRowsetMax(int number)  throws CFException{
		work.setFetchRowsetMax(number);
	}


	public void setFetchRowsetMax(long number)  throws CFException{
		work.setFetchRowsetMax((int)number);
	}


	/**
	 *	Returns the value of work
	 *	@return work
	 */   
	 public Work getWork() {
   	return work;
   }


	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 

	public BigDecimal getHvaSupAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaSupAmt((index));
	}

    public char[] getHvaSupAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaSupAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaSupAmt with the passed number
	 *	@param number
	 */
	public void setHvaSupAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaSupAmt((index),number);
   }

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hvaPartnVal
	 *	@return hvaPartnVal
	 */
   public char[] getHvaPartnVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPartnVal(index);
   }

  
	/**
	*  set variable hvaPartnVal
	*  @param value
	**/
   public void setHvaPartnVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPartnVal((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaPartnId
	 *	@return hvaPartnId
	 */
	public short getHvaPartnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPartnId((index));
	}
	
	/**
	 * 	Update HvaPartnId with the passed value
	 *	@param number
	 */
	public void setHvaPartnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),number);
	}

	public void setHvaPartnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}

	public void setHvaPartnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}



	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	public BigDecimal getHvaBaseDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseDedAmt((index));
	}

    public char[] getHvaBaseDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseDedAmt((index),number);
   }

	/**
	 *	Returns the value of hvaMskNullInd
	 *	@return hvaMskNullInd
	 */
	public short getHvaMskNullInd(int index) throws CFException {        
   		return hvaClmHistArray.getHvaMskNullInd((index));
	}
	
	/**
	 * 	Update HvaMskNullInd with the passed value
	 *	@param number
	 */
	public void setHvaMskNullInd(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),number);
	}

	public void setHvaMskNullInd(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}

	public void setHvaMskNullInd(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}



	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of hvaTransCd
	 *	@return hvaTransCd
	 */
   public char[] getHvaTransCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTransCd(index);
   }

  
	/**
	*  set variable hvaTransCd
	*  @param value
	**/
   public void setHvaTransCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTransCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktNbr
	 *	@return hvaProvMktNbr
	 */
   public char[] getHvaProvMktNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktNbr(index);
   }

  
	/**
	*  set variable hvaProvMktNbr
	*  @param value
	**/
   public void setHvaProvMktNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktNbr((index),value);
   } 

	public BigDecimal getHvaBaseAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseAmt((index));
	}

    public char[] getHvaBaseAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseAmt((index),number);
   }

	public BigDecimal getHvaCobCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCobCrResAmt((index));
	}

    public char[] getHvaCobCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCobCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCobCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaCobCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCobCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPpoCd
	 *	@return hvaPpoCd
	 */
   public char[] getHvaPpoCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPpoCd(index);
   }

  
	/**
	*  set variable hvaPpoCd
	*  @param value
	**/
   public void setHvaPpoCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPpoCd((index),value);
   } 

	public BigDecimal getHvaMmDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmDedAmt((index));
	}

    public char[] getHvaMmDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmDedAmt((index),number);
   }

	public BigDecimal getHvaMcCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMcCrResAmt((index));
	}

    public char[] getHvaMcCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMcCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMcCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaMcCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMcCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProvIpaId
	 *	@return hvaProvIpaId
	 */
   public char[] getHvaProvIpaId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvIpaId(index);
   }

  
	/**
	*  set variable hvaProvIpaId
	*  @param value
	**/
   public void setHvaProvIpaId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvIpaId((index),value);
   } 

	/**
	 *	Returns the value of hvaPmtSvcCd
	 *	@return hvaPmtSvcCd
	 */
   public char[] getHvaPmtSvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPmtSvcCd(index);
   }

  
	/**
	*  set variable hvaPmtSvcCd
	*  @param value
	**/
   public void setHvaPmtSvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPmtSvcCd((index),value);
   } 

	public BigDecimal getHvaMmAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmAmt((index));
	}

    public char[] getHvaMmAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvEobNm
	 *	@return hvaProvEobNm
	 */
   public char[] getHvaProvEobNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvEobNm(index);
   }

  
	/**
	*  set variable hvaProvEobNm
	*  @param value
	**/
   public void setHvaProvEobNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvEobNm((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	public BigDecimal getHvaCopayAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCopayAmt((index));
	}

    public char[] getHvaCopayAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCopayAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCopayAmt with the passed number
	 *	@param number
	 */
	public void setHvaCopayAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCopayAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvPrdctCd
	 *	@return hvaProvPrdctCd
	 */
   public char[] getHvaProvPrdctCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvPrdctCd(index);
   }

  
	/**
	*  set variable hvaProvPrdctCd
	*  @param value
	**/
   public void setHvaProvPrdctCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvPrdctCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPrsCreatSrcCd
	 *	@return hvaPrsCreatSrcCd
	 */
   public char[] getHvaPrsCreatSrcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPrsCreatSrcCd(index);
   }

  
	/**
	*  set variable hvaPrsCreatSrcCd
	*  @param value
	**/
   public void setHvaPrsCreatSrcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPrsCreatSrcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of hvaBaseDedDescTxt
	 *	@return hvaBaseDedDescTxt
	 */
   public char[] getHvaBaseDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBaseDedDescTxt(index);
   }

  
	/**
	*  set variable hvaBaseDedDescTxt
	*  @param value
	**/
   public void setHvaBaseDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBaseDedDescTxt((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvaMmDedDescTxt
	 *	@return hvaMmDedDescTxt
	 */
   public char[] getHvaMmDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMmDedDescTxt(index);
   }

  
	/**
	*  set variable hvaMmDedDescTxt
	*  @param value
	**/
   public void setHvaMmDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMmDedDescTxt((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of hvaOvrCd
	 *	@return hvaOvrCd
	 */
   public char[] getHvaOvrCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaOvrCd(index);
   }

  
	/**
	*  set variable hvaOvrCd
	*  @param value
	**/
   public void setHvaOvrCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaOvrCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktTypCd
	 *	@return hvaProvMktTypCd
	 */
   public char[] getHvaProvMktTypCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktTypCd(index);
   }

  
	/**
	*  set variable hvaProvMktTypCd
	*  @param value
	**/
   public void setHvaProvMktTypCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktTypCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of hvaParInd
	 *	@return hvaParInd
	 */
   public char[] getHvaParInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaParInd(index);
   }

  
	/**
	*  set variable hvaParInd
	*  @param value
	**/
   public void setHvaParInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaParInd((index),value);
   } 

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrRowsSect4221OutCtx getFetchCsrRowsSect4221OutCtx() {
            return new FetchCsrRowsSect4221OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect4221InCtx clone() {
        FetchCsrRowsSect4221InCtx cloneObj = new FetchCsrRowsSect4221InCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect4221InCtx getFetchCsrRowsSect4221InCtx() {
            return new FetchCsrRowsSect4221InCtx();
    }
     public class FetchCsrRowsSect4221OutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Test condition 100 for isSqlcodeFetchEnd()
	 *	@return  Returns true if isSqlcodeFetchEnd() is 100
	 */
   public boolean isSqlcodeFetchEnd() throws CFException {
      return work.isSqlcodeFetchEnd();
   }

	/**
	*  set values 100
	*/
   	public void setSqlcodeFetchEndTrue()  throws CFException{  			
    	work.setSqlcodeFetchEndTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 0 for isSqlcodeOk()
	 *	@return  Returns true if isSqlcodeOk() is 0
	 */
   public boolean isSqlcodeOk() throws CFException {
      return work.isSqlcodeOk();
   }

	/**
	*  set values 0
	*/
   	public void setSqlcodeOkTrue()  throws CFException{  			
    	work.setSqlcodeOkTrue();
   	}
	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect4221OutCtx clone() {
        FetchCsrRowsSect4221OutCtx cloneObj = new FetchCsrRowsSect4221OutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect4221OutCtx getFetchCsrRowsSect4221OutCtx() {
            return new FetchCsrRowsSect4221OutCtx();
    }
     public class CloseCsrInitFiltSectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public CloseCsrInitFiltSectOutCtx getCloseCsrInitFiltSectOutCtx() {
            return new CloseCsrInitFiltSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrInitFiltSectInCtx clone() {
        CloseCsrInitFiltSectInCtx cloneObj = new CloseCsrInitFiltSectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrInitFiltSectInCtx getCloseCsrInitFiltSectInCtx() {
            return new CloseCsrInitFiltSectInCtx();
    }
     public class CloseCsrInitFiltSectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrInitFiltSectOutCtx clone() {
        CloseCsrInitFiltSectOutCtx cloneObj = new CloseCsrInitFiltSectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrInitFiltSectOutCtx getCloseCsrInitFiltSectOutCtx() {
            return new CloseCsrInitFiltSectOutCtx();
    }
     public class ProcCsrNextFullSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcCsrNextFullSectOutCtx getProcCsrNextFullSectOutCtx() {
            return new ProcCsrNextFullSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrNextFullSectInCtx clone() {
        ProcCsrNextFullSectInCtx cloneObj = new ProcCsrNextFullSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrNextFullSectInCtx getProcCsrNextFullSectInCtx() {
            return new ProcCsrNextFullSectInCtx();
    }
     public class ProcCsrNextFullSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrNextFullSectOutCtx clone() {
        ProcCsrNextFullSectOutCtx cloneObj = new ProcCsrNextFullSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrNextFullSectOutCtx getProcCsrNextFullSectOutCtx() {
            return new ProcCsrNextFullSectOutCtx();
    }
     public class OpenCsrNextFullSectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public OpenCsrNextFullSectOutCtx getOpenCsrNextFullSectOutCtx() {
            return new OpenCsrNextFullSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public OpenCsrNextFullSectInCtx clone() {
        OpenCsrNextFullSectInCtx cloneObj = new OpenCsrNextFullSectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrNextFullSectInCtx getOpenCsrNextFullSectInCtx() {
            return new OpenCsrNextFullSectInCtx();
    }
     public class OpenCsrNextFullSectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of dderefEeId
	 *	@return dderefEeId
	 */
   public char[] getDderefEeId() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefEeIdGroup().getDderefEeId();
   }

  
	/**
	*  set variable dderefEeId
	*  @param value
	**/
   public void setDderefEeId(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(value);
   } 

     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex);
   	
   }
   
   public void setDderefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeId with another Field
	 *	@param value
	 */
   public void setDderefEeId(Field source) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source);
   }  
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public int getNextIcnSufxVersNbr() throws CFException {
   		return nextKey.getNextIcnSufxVersNbr();
	}


	/**
	 *	Returns String value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public char[]  getNextIcnSufxVersNbrString() throws CFException {
	     return String.valueOf(nextKey.getNextIcnSufxVersNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextIcnSufxVersNbrIsNumeric()  throws CFException{
	    return nextKey.nextIcnSufxVersNbrIsNumeric();
	}

	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setNextIcnSufxVersNbr(int number)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(number);
	}
	

	public void setNextIcnSufxVersNbr(long number)  throws CFException{
	    nextKey.setNextIcnSufxVersNbr(number);
	}
	
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbr(char[] value)  throws CFException {
		nextKey.setNextIcnSufxVersNbr(value);
	}
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbrString(char[] value)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(value);
	}	

	/**
	 *	Returns the value of dderefIcnSufxVersNbr
	 *	@return dderefIcnSufxVersNbr
	 */
	public short getDderefIcnSufxVersNbr() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefIcnSufxVersNbr();
	}
	
	/**
	 * 	Update DderefIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setDderefIcnSufxVersNbr(short number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr(number);
	}

	public void setDderefIcnSufxVersNbr(int number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}

	public void setDderefIcnSufxVersNbr(long number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}



	/**
	 *	Returns the value of dderefProcDt
	 *	@return dderefProcDt
	 */
   public char[] getDderefProcDt() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcDtGroup().getDderefProcDt();
   }

  
	/**
	*  set variable dderefProcDt
	*  @param value
	**/
   public void setDderefProcDt(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(value);
   } 

     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex);
   	
   }
   
   public void setDderefProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcDt with another Field
	 *	@param value
	 */
   public void setDderefProcDt(Field source) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source);
   }  
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextLnId
	 *	@return nextLnId
	 */
	public int getNextLnId() throws CFException {
   		return nextKey.getNextLnId();
	}


	/**
	 *	Returns String value of nextLnId
	 *	@return nextLnId
	 */
	public char[]  getNextLnIdString() throws CFException {
	     return String.valueOf(nextKey.getNextLnIdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextLnIdIsNumeric()  throws CFException{
	    return nextKey.nextLnIdIsNumeric();
	}

	/**
	 * 	Update NextLnId with the passed value
	 *	@param number
	 */
	public void setNextLnId(int number)  throws CFException{
		nextKey.setNextLnId(number);
	}
	

	public void setNextLnId(long number)  throws CFException{
	    nextKey.setNextLnId(number);
	}
	
	
	/**
	 * 	Update NextLnId with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextLnId(char[] value)  throws CFException {
		nextKey.setNextLnId(value);
	}
	
	/**
	 * 	Update NextLnId with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextLnIdString(char[] value)  throws CFException{
		nextKey.setNextLnId(value);
	}	

	/**
	 *	Returns the value of dderefIcnSufxCd
	 *	@return dderefIcnSufxCd
	 */
   public char[] getDderefIcnSufxCd() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().getDderefIcnSufxCd();
   }

  
	/**
	*  set variable dderefIcnSufxCd
	*  @param value
	**/
   public void setDderefIcnSufxCd(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(value);
   } 

     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setDderefIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefIcnSufxCd with another Field
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source);
   }  
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of nextPgmIdLstCharVal
	 *	@return nextPgmIdLstCharVal
	 */
   public char[] getNextPgmIdLstCharVal() throws CFException  {              
   		return nextKey.getNextPgmIdLstCharVal();
   }

  
	/**
	*  set variable nextPgmIdLstCharVal
	*  @param value
	**/
   public void setNextPgmIdLstCharVal(char[] value) throws CFException {
      nextKey.setNextPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source) {
      nextKey.setNextPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefLnId
	 *	@return dderefLnId
	 */
	public short getDderefLnId() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefLnIdGroup().getDderefLnId();
	}
	
	/**
	 * 	Update DderefLnId with the passed value
	 *	@param number
	 */
	public void setDderefLnId(short number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId(number);
	}

	public void setDderefLnId(int number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}

	public void setDderefLnId(long number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}



	/**
	 *	Returns the value of nextProcTm
	 *	@return nextProcTm
	 */
   public char[] getNextProcTm() throws CFException  {              
   		return nextKey.getNextProcTm();
   }

  
	/**
	*  set variable nextProcTm
	*  @param value
	**/
   public void setNextProcTm(char[] value) throws CFException {
      nextKey.setNextProcTm(value);
   } 

     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcTm(source, sourceIndex);
   	
   }
   
   public void setNextProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcTm with another Field
	 *	@param value
	 */
   public void setNextProcTm(Field source) {
      nextKey.setNextProcTm(source);
   }  
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefProcTm
	 *	@return dderefProcTm
	 */
   public char[] getDderefProcTm() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcTmGroup().getDderefProcTm();
   }

  
	/**
	*  set variable dderefProcTm
	*  @param value
	**/
   public void setDderefProcTm(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(value);
   } 

     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex);
   	
   }
   
   public void setDderefProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcTm with another Field
	 *	@param value
	 */
   public void setDderefProcTm(Field source) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source);
   }  
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dderefInvnCtlNbr
	 *	@return dderefInvnCtlNbr
	 */
   public char[] getDderefInvnCtlNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().getDderefInvnCtlNbr();
   }

  
	/**
	*  set variable dderefInvnCtlNbr
	*  @param value
	**/
   public void setDderefInvnCtlNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(value);
   } 

     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextIcnSufxCd
	 *	@return nextIcnSufxCd
	 */
   public char[] getNextIcnSufxCd() throws CFException  {              
   		return nextKey.getNextIcnSufxCd();
   }

  
	/**
	*  set variable nextIcnSufxCd
	*  @param value
	**/
   public void setNextIcnSufxCd(char[] value) throws CFException {
      nextKey.setNextIcnSufxCd(value);
   } 

     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setNextIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextIcnSufxCd with another Field
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source) {
      nextKey.setNextIcnSufxCd(source);
   }  
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPolNbr
	 *	@return dderefPolNbr
	 */
   public char[] getDderefPolNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPolNbrGroup().getDderefPolNbr();
   }

  
	/**
	*  set variable dderefPolNbr
	*  @param value
	**/
   public void setDderefPolNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(value);
   } 

     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDderefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbr with another Field
	 *	@param value
	 */
   public void setDderefPolNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source);
   }  
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextInvnCtlNbr
	 *	@return nextInvnCtlNbr
	 */
   public char[] getNextInvnCtlNbr() throws CFException  {              
   		return nextKey.getNextInvnCtlNbr();
   }

  
	/**
	*  set variable nextInvnCtlNbr
	*  @param value
	**/
   public void setNextInvnCtlNbr(char[] value) throws CFException {
      nextKey.setNextInvnCtlNbr(value);
   } 

     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setNextInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source) {
      nextKey.setNextInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextKey
	 *	@return nextKey
	 */   
	 public NextKey getNextKey() {
   	return nextKey;
   }


	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefDepnNbr
	 *	@return dderefDepnNbr
	 */
   public char[] getDderefDepnNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefDepnNbrGroup().getDderefDepnNbr();
   }

  
	/**
	*  set variable dderefDepnNbr
	*  @param value
	**/
   public void setDderefDepnNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(value);
   } 

     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDderefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbr with another Field
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source);
   }  
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextProcDt
	 *	@return nextProcDt
	 */
   public char[] getNextProcDt() throws CFException  {              
   		return nextKey.getNextProcDt();
   }

  
	/**
	*  set variable nextProcDt
	*  @param value
	**/
   public void setNextProcDt(char[] value) throws CFException {
      nextKey.setNextProcDt(value);
   } 

     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcDt(source, sourceIndex);
   	
   }
   
   public void setNextProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcDt with another Field
	 *	@param value
	 */
   public void setNextProcDt(Field source) {
      nextKey.setNextProcDt(source);
   }  
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPgmIdLstCharVal
	 *	@return dderefPgmIdLstCharVal
	 */
   public char[] getDderefPgmIdLstCharVal() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().getDderefPgmIdLstCharVal();
   }

  
	/**
	*  set variable dderefPgmIdLstCharVal
	*  @param value
	**/
   public void setDderefPgmIdLstCharVal(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public OpenCsrNextFullSectOutCtx clone() {
        OpenCsrNextFullSectOutCtx cloneObj = new OpenCsrNextFullSectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrNextFullSectOutCtx getOpenCsrNextFullSectOutCtx() {
            return new OpenCsrNextFullSectOutCtx();
    }
     public class FetchCsrNextFullSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrNextFullSectOutCtx getFetchCsrNextFullSectOutCtx() {
            return new FetchCsrNextFullSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrNextFullSectInCtx clone() {
        FetchCsrNextFullSectInCtx cloneObj = new FetchCsrNextFullSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrNextFullSectInCtx getFetchCsrNextFullSectInCtx() {
            return new FetchCsrNextFullSectInCtx();
    }
     public class FetchCsrNextFullSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrNextFullSectOutCtx clone() {
        FetchCsrNextFullSectOutCtx cloneObj = new FetchCsrNextFullSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrNextFullSectOutCtx getFetchCsrNextFullSectOutCtx() {
            return new FetchCsrNextFullSectOutCtx();
    }
     public class FetchCsrRowsSect4321InCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of fetchRowsetMax
	 *	@return fetchRowsetMax
	 */
	public int getFetchRowsetMax() throws CFException {        
   		return work.getFetchRowsetMax();
	}
	
	/**
	 * 	Update FetchRowsetMax with the passed value
	 *	@param number
	 */
	public void setFetchRowsetMax(int number)  throws CFException{
		work.setFetchRowsetMax(number);
	}


	public void setFetchRowsetMax(long number)  throws CFException{
		work.setFetchRowsetMax((int)number);
	}


	/**
	 *	Returns the value of work
	 *	@return work
	 */   
	 public Work getWork() {
   	return work;
   }


	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 

	public BigDecimal getHvaSupAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaSupAmt((index));
	}

    public char[] getHvaSupAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaSupAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaSupAmt with the passed number
	 *	@param number
	 */
	public void setHvaSupAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaSupAmt((index),number);
   }

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hvaPartnVal
	 *	@return hvaPartnVal
	 */
   public char[] getHvaPartnVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPartnVal(index);
   }

  
	/**
	*  set variable hvaPartnVal
	*  @param value
	**/
   public void setHvaPartnVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPartnVal((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaPartnId
	 *	@return hvaPartnId
	 */
	public short getHvaPartnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPartnId((index));
	}
	
	/**
	 * 	Update HvaPartnId with the passed value
	 *	@param number
	 */
	public void setHvaPartnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),number);
	}

	public void setHvaPartnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}

	public void setHvaPartnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}



	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	public BigDecimal getHvaBaseDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseDedAmt((index));
	}

    public char[] getHvaBaseDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseDedAmt((index),number);
   }

	/**
	 *	Returns the value of hvaMskNullInd
	 *	@return hvaMskNullInd
	 */
	public short getHvaMskNullInd(int index) throws CFException {        
   		return hvaClmHistArray.getHvaMskNullInd((index));
	}
	
	/**
	 * 	Update HvaMskNullInd with the passed value
	 *	@param number
	 */
	public void setHvaMskNullInd(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),number);
	}

	public void setHvaMskNullInd(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}

	public void setHvaMskNullInd(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}



	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of hvaTransCd
	 *	@return hvaTransCd
	 */
   public char[] getHvaTransCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTransCd(index);
   }

  
	/**
	*  set variable hvaTransCd
	*  @param value
	**/
   public void setHvaTransCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTransCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktNbr
	 *	@return hvaProvMktNbr
	 */
   public char[] getHvaProvMktNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktNbr(index);
   }

  
	/**
	*  set variable hvaProvMktNbr
	*  @param value
	**/
   public void setHvaProvMktNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktNbr((index),value);
   } 

	public BigDecimal getHvaBaseAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseAmt((index));
	}

    public char[] getHvaBaseAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseAmt((index),number);
   }

	public BigDecimal getHvaCobCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCobCrResAmt((index));
	}

    public char[] getHvaCobCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCobCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCobCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaCobCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCobCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPpoCd
	 *	@return hvaPpoCd
	 */
   public char[] getHvaPpoCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPpoCd(index);
   }

  
	/**
	*  set variable hvaPpoCd
	*  @param value
	**/
   public void setHvaPpoCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPpoCd((index),value);
   } 

	public BigDecimal getHvaMmDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmDedAmt((index));
	}

    public char[] getHvaMmDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmDedAmt((index),number);
   }

	public BigDecimal getHvaMcCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMcCrResAmt((index));
	}

    public char[] getHvaMcCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMcCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMcCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaMcCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMcCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProvIpaId
	 *	@return hvaProvIpaId
	 */
   public char[] getHvaProvIpaId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvIpaId(index);
   }

  
	/**
	*  set variable hvaProvIpaId
	*  @param value
	**/
   public void setHvaProvIpaId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvIpaId((index),value);
   } 

	/**
	 *	Returns the value of hvaPmtSvcCd
	 *	@return hvaPmtSvcCd
	 */
   public char[] getHvaPmtSvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPmtSvcCd(index);
   }

  
	/**
	*  set variable hvaPmtSvcCd
	*  @param value
	**/
   public void setHvaPmtSvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPmtSvcCd((index),value);
   } 

	public BigDecimal getHvaMmAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmAmt((index));
	}

    public char[] getHvaMmAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvEobNm
	 *	@return hvaProvEobNm
	 */
   public char[] getHvaProvEobNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvEobNm(index);
   }

  
	/**
	*  set variable hvaProvEobNm
	*  @param value
	**/
   public void setHvaProvEobNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvEobNm((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	public BigDecimal getHvaCopayAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCopayAmt((index));
	}

    public char[] getHvaCopayAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCopayAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCopayAmt with the passed number
	 *	@param number
	 */
	public void setHvaCopayAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCopayAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvPrdctCd
	 *	@return hvaProvPrdctCd
	 */
   public char[] getHvaProvPrdctCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvPrdctCd(index);
   }

  
	/**
	*  set variable hvaProvPrdctCd
	*  @param value
	**/
   public void setHvaProvPrdctCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvPrdctCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPrsCreatSrcCd
	 *	@return hvaPrsCreatSrcCd
	 */
   public char[] getHvaPrsCreatSrcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPrsCreatSrcCd(index);
   }

  
	/**
	*  set variable hvaPrsCreatSrcCd
	*  @param value
	**/
   public void setHvaPrsCreatSrcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPrsCreatSrcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of hvaBaseDedDescTxt
	 *	@return hvaBaseDedDescTxt
	 */
   public char[] getHvaBaseDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBaseDedDescTxt(index);
   }

  
	/**
	*  set variable hvaBaseDedDescTxt
	*  @param value
	**/
   public void setHvaBaseDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBaseDedDescTxt((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvaMmDedDescTxt
	 *	@return hvaMmDedDescTxt
	 */
   public char[] getHvaMmDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMmDedDescTxt(index);
   }

  
	/**
	*  set variable hvaMmDedDescTxt
	*  @param value
	**/
   public void setHvaMmDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMmDedDescTxt((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of hvaOvrCd
	 *	@return hvaOvrCd
	 */
   public char[] getHvaOvrCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaOvrCd(index);
   }

  
	/**
	*  set variable hvaOvrCd
	*  @param value
	**/
   public void setHvaOvrCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaOvrCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktTypCd
	 *	@return hvaProvMktTypCd
	 */
   public char[] getHvaProvMktTypCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktTypCd(index);
   }

  
	/**
	*  set variable hvaProvMktTypCd
	*  @param value
	**/
   public void setHvaProvMktTypCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktTypCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of hvaParInd
	 *	@return hvaParInd
	 */
   public char[] getHvaParInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaParInd(index);
   }

  
	/**
	*  set variable hvaParInd
	*  @param value
	**/
   public void setHvaParInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaParInd((index),value);
   } 

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrRowsSect4321OutCtx getFetchCsrRowsSect4321OutCtx() {
            return new FetchCsrRowsSect4321OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect4321InCtx clone() {
        FetchCsrRowsSect4321InCtx cloneObj = new FetchCsrRowsSect4321InCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect4321InCtx getFetchCsrRowsSect4321InCtx() {
            return new FetchCsrRowsSect4321InCtx();
    }
     public class FetchCsrRowsSect4321OutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Test condition 100 for isSqlcodeFetchEnd()
	 *	@return  Returns true if isSqlcodeFetchEnd() is 100
	 */
   public boolean isSqlcodeFetchEnd() throws CFException {
      return work.isSqlcodeFetchEnd();
   }

	/**
	*  set values 100
	*/
   	public void setSqlcodeFetchEndTrue()  throws CFException{  			
    	work.setSqlcodeFetchEndTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 0 for isSqlcodeOk()
	 *	@return  Returns true if isSqlcodeOk() is 0
	 */
   public boolean isSqlcodeOk() throws CFException {
      return work.isSqlcodeOk();
   }

	/**
	*  set values 0
	*/
   	public void setSqlcodeOkTrue()  throws CFException{  			
    	work.setSqlcodeOkTrue();
   	}
	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect4321OutCtx clone() {
        FetchCsrRowsSect4321OutCtx cloneObj = new FetchCsrRowsSect4321OutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect4321OutCtx getFetchCsrRowsSect4321OutCtx() {
            return new FetchCsrRowsSect4321OutCtx();
    }
     public class CloseCsrNextFullSectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public CloseCsrNextFullSectOutCtx getCloseCsrNextFullSectOutCtx() {
            return new CloseCsrNextFullSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrNextFullSectInCtx clone() {
        CloseCsrNextFullSectInCtx cloneObj = new CloseCsrNextFullSectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrNextFullSectInCtx getCloseCsrNextFullSectInCtx() {
            return new CloseCsrNextFullSectInCtx();
    }
     public class CloseCsrNextFullSectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrNextFullSectOutCtx clone() {
        CloseCsrNextFullSectOutCtx cloneObj = new CloseCsrNextFullSectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrNextFullSectOutCtx getCloseCsrNextFullSectOutCtx() {
            return new CloseCsrNextFullSectOutCtx();
    }
     public class ProcCsrNextFiltSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcCsrNextFiltSectOutCtx getProcCsrNextFiltSectOutCtx() {
            return new ProcCsrNextFiltSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrNextFiltSectInCtx clone() {
        ProcCsrNextFiltSectInCtx cloneObj = new ProcCsrNextFiltSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrNextFiltSectInCtx getProcCsrNextFiltSectInCtx() {
            return new ProcCsrNextFiltSectInCtx();
    }
     public class ProcCsrNextFiltSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrNextFiltSectOutCtx clone() {
        ProcCsrNextFiltSectOutCtx cloneObj = new ProcCsrNextFiltSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrNextFiltSectOutCtx getProcCsrNextFiltSectOutCtx() {
            return new ProcCsrNextFiltSectOutCtx();
    }
     public class OpenCsrNextFiltSectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFstDt
	 *	@return hvFstDt
	 */
   public char[] getHvFstDt() throws CFException  {              
   		return hostVariables.getHvFstDtGroup().getHvFstDt();
   }

  
	/**
	*  set variable hvFstDt
	*  @param value
	**/
   public void setHvFstDt(char[] value) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(value);
   } 

     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex);
   	
   }
   
   public void setHvFstDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFstDt with another Field
	 *	@param value
	 */
   public void setHvFstDt(Field source) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source);
   }  
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hostVariables
	 *	@return hostVariables
	 */   
	 public HostVariables getHostVariables() {
   	return hostVariables;
   }


	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvLstSrvcDt
	 *	@return hvLstSrvcDt
	 */
   public char[] getHvLstSrvcDt() throws CFException  {              
   		return hostVariables.getHvLstSrvcDtGroup().getHvLstSrvcDt();
   }

  
	/**
	*  set variable hvLstSrvcDt
	*  @param value
	**/
   public void setHvLstSrvcDt(char[] value) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(value);
   } 

     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex);
   	
   }
   
   public void setHvLstSrvcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvLstSrvcDt with another Field
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source);
   }  
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public OpenCsrNextFiltSectOutCtx getOpenCsrNextFiltSectOutCtx() {
            return new OpenCsrNextFiltSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrNextFiltSectInCtx clone() {
        OpenCsrNextFiltSectInCtx cloneObj = new OpenCsrNextFiltSectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrNextFiltSectInCtx getOpenCsrNextFiltSectInCtx() {
            return new OpenCsrNextFiltSectInCtx();
    }
     public class OpenCsrNextFiltSectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dderefEeId
	 *	@return dderefEeId
	 */
   public char[] getDderefEeId() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefEeIdGroup().getDderefEeId();
   }

  
	/**
	*  set variable dderefEeId
	*  @param value
	**/
   public void setDderefEeId(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(value);
   } 

     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex);
   	
   }
   
   public void setDderefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeId with another Field
	 *	@param value
	 */
   public void setDderefEeId(Field source) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source);
   }  
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public int getNextIcnSufxVersNbr() throws CFException {
   		return nextKey.getNextIcnSufxVersNbr();
	}


	/**
	 *	Returns String value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public char[]  getNextIcnSufxVersNbrString() throws CFException {
	     return String.valueOf(nextKey.getNextIcnSufxVersNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextIcnSufxVersNbrIsNumeric()  throws CFException{
	    return nextKey.nextIcnSufxVersNbrIsNumeric();
	}

	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setNextIcnSufxVersNbr(int number)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(number);
	}
	

	public void setNextIcnSufxVersNbr(long number)  throws CFException{
	    nextKey.setNextIcnSufxVersNbr(number);
	}
	
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbr(char[] value)  throws CFException {
		nextKey.setNextIcnSufxVersNbr(value);
	}
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbrString(char[] value)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(value);
	}	

	/**
	 *	Returns the value of dderefIcnSufxVersNbr
	 *	@return dderefIcnSufxVersNbr
	 */
	public short getDderefIcnSufxVersNbr() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefIcnSufxVersNbr();
	}
	
	/**
	 * 	Update DderefIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setDderefIcnSufxVersNbr(short number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr(number);
	}

	public void setDderefIcnSufxVersNbr(int number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}

	public void setDderefIcnSufxVersNbr(long number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}



	/**
	 *	Returns the value of dderefProcDt
	 *	@return dderefProcDt
	 */
   public char[] getDderefProcDt() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcDtGroup().getDderefProcDt();
   }

  
	/**
	*  set variable dderefProcDt
	*  @param value
	**/
   public void setDderefProcDt(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(value);
   } 

     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex);
   	
   }
   
   public void setDderefProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcDt with another Field
	 *	@param value
	 */
   public void setDderefProcDt(Field source) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source);
   }  
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextLnId
	 *	@return nextLnId
	 */
	public int getNextLnId() throws CFException {
   		return nextKey.getNextLnId();
	}


	/**
	 *	Returns String value of nextLnId
	 *	@return nextLnId
	 */
	public char[]  getNextLnIdString() throws CFException {
	     return String.valueOf(nextKey.getNextLnIdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextLnIdIsNumeric()  throws CFException{
	    return nextKey.nextLnIdIsNumeric();
	}

	/**
	 * 	Update NextLnId with the passed value
	 *	@param number
	 */
	public void setNextLnId(int number)  throws CFException{
		nextKey.setNextLnId(number);
	}
	

	public void setNextLnId(long number)  throws CFException{
	    nextKey.setNextLnId(number);
	}
	
	
	/**
	 * 	Update NextLnId with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextLnId(char[] value)  throws CFException {
		nextKey.setNextLnId(value);
	}
	
	/**
	 * 	Update NextLnId with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextLnIdString(char[] value)  throws CFException{
		nextKey.setNextLnId(value);
	}	

	/**
	 *	Returns the value of dderefIcnSufxCd
	 *	@return dderefIcnSufxCd
	 */
   public char[] getDderefIcnSufxCd() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().getDderefIcnSufxCd();
   }

  
	/**
	*  set variable dderefIcnSufxCd
	*  @param value
	**/
   public void setDderefIcnSufxCd(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(value);
   } 

     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setDderefIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefIcnSufxCd with another Field
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source);
   }  
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of nextPgmIdLstCharVal
	 *	@return nextPgmIdLstCharVal
	 */
   public char[] getNextPgmIdLstCharVal() throws CFException  {              
   		return nextKey.getNextPgmIdLstCharVal();
   }

  
	/**
	*  set variable nextPgmIdLstCharVal
	*  @param value
	**/
   public void setNextPgmIdLstCharVal(char[] value) throws CFException {
      nextKey.setNextPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source) {
      nextKey.setNextPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefLnId
	 *	@return dderefLnId
	 */
	public short getDderefLnId() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefLnIdGroup().getDderefLnId();
	}
	
	/**
	 * 	Update DderefLnId with the passed value
	 *	@param number
	 */
	public void setDderefLnId(short number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId(number);
	}

	public void setDderefLnId(int number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}

	public void setDderefLnId(long number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}



	/**
	 *	Returns the value of nextProcTm
	 *	@return nextProcTm
	 */
   public char[] getNextProcTm() throws CFException  {              
   		return nextKey.getNextProcTm();
   }

  
	/**
	*  set variable nextProcTm
	*  @param value
	**/
   public void setNextProcTm(char[] value) throws CFException {
      nextKey.setNextProcTm(value);
   } 

     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcTm(source, sourceIndex);
   	
   }
   
   public void setNextProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcTm with another Field
	 *	@param value
	 */
   public void setNextProcTm(Field source) {
      nextKey.setNextProcTm(source);
   }  
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefProcTm
	 *	@return dderefProcTm
	 */
   public char[] getDderefProcTm() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcTmGroup().getDderefProcTm();
   }

  
	/**
	*  set variable dderefProcTm
	*  @param value
	**/
   public void setDderefProcTm(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(value);
   } 

     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex);
   	
   }
   
   public void setDderefProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcTm with another Field
	 *	@param value
	 */
   public void setDderefProcTm(Field source) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source);
   }  
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dderefInvnCtlNbr
	 *	@return dderefInvnCtlNbr
	 */
   public char[] getDderefInvnCtlNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().getDderefInvnCtlNbr();
   }

  
	/**
	*  set variable dderefInvnCtlNbr
	*  @param value
	**/
   public void setDderefInvnCtlNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(value);
   } 

     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextIcnSufxCd
	 *	@return nextIcnSufxCd
	 */
   public char[] getNextIcnSufxCd() throws CFException  {              
   		return nextKey.getNextIcnSufxCd();
   }

  
	/**
	*  set variable nextIcnSufxCd
	*  @param value
	**/
   public void setNextIcnSufxCd(char[] value) throws CFException {
      nextKey.setNextIcnSufxCd(value);
   } 

     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setNextIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextIcnSufxCd with another Field
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source) {
      nextKey.setNextIcnSufxCd(source);
   }  
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPolNbr
	 *	@return dderefPolNbr
	 */
   public char[] getDderefPolNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPolNbrGroup().getDderefPolNbr();
   }

  
	/**
	*  set variable dderefPolNbr
	*  @param value
	**/
   public void setDderefPolNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(value);
   } 

     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDderefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbr with another Field
	 *	@param value
	 */
   public void setDderefPolNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source);
   }  
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextInvnCtlNbr
	 *	@return nextInvnCtlNbr
	 */
   public char[] getNextInvnCtlNbr() throws CFException  {              
   		return nextKey.getNextInvnCtlNbr();
   }

  
	/**
	*  set variable nextInvnCtlNbr
	*  @param value
	**/
   public void setNextInvnCtlNbr(char[] value) throws CFException {
      nextKey.setNextInvnCtlNbr(value);
   } 

     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setNextInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source) {
      nextKey.setNextInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextKey
	 *	@return nextKey
	 */   
	 public NextKey getNextKey() {
   	return nextKey;
   }


	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefDepnNbr
	 *	@return dderefDepnNbr
	 */
   public char[] getDderefDepnNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefDepnNbrGroup().getDderefDepnNbr();
   }

  
	/**
	*  set variable dderefDepnNbr
	*  @param value
	**/
   public void setDderefDepnNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(value);
   } 

     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDderefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbr with another Field
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source);
   }  
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextProcDt
	 *	@return nextProcDt
	 */
   public char[] getNextProcDt() throws CFException  {              
   		return nextKey.getNextProcDt();
   }

  
	/**
	*  set variable nextProcDt
	*  @param value
	**/
   public void setNextProcDt(char[] value) throws CFException {
      nextKey.setNextProcDt(value);
   } 

     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcDt(source, sourceIndex);
   	
   }
   
   public void setNextProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcDt with another Field
	 *	@param value
	 */
   public void setNextProcDt(Field source) {
      nextKey.setNextProcDt(source);
   }  
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPgmIdLstCharVal
	 *	@return dderefPgmIdLstCharVal
	 */
   public char[] getDderefPgmIdLstCharVal() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().getDderefPgmIdLstCharVal();
   }

  
	/**
	*  set variable dderefPgmIdLstCharVal
	*  @param value
	**/
   public void setDderefPgmIdLstCharVal(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrNextFiltSectOutCtx clone() {
        OpenCsrNextFiltSectOutCtx cloneObj = new OpenCsrNextFiltSectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrNextFiltSectOutCtx getOpenCsrNextFiltSectOutCtx() {
            return new OpenCsrNextFiltSectOutCtx();
    }
     public class FetchCsrNextFiltSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrNextFiltSectOutCtx getFetchCsrNextFiltSectOutCtx() {
            return new FetchCsrNextFiltSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrNextFiltSectInCtx clone() {
        FetchCsrNextFiltSectInCtx cloneObj = new FetchCsrNextFiltSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrNextFiltSectInCtx getFetchCsrNextFiltSectInCtx() {
            return new FetchCsrNextFiltSectInCtx();
    }
     public class FetchCsrNextFiltSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrNextFiltSectOutCtx clone() {
        FetchCsrNextFiltSectOutCtx cloneObj = new FetchCsrNextFiltSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrNextFiltSectOutCtx getFetchCsrNextFiltSectOutCtx() {
            return new FetchCsrNextFiltSectOutCtx();
    }
     public class FetchCsrRowsSect4421InCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of fetchRowsetMax
	 *	@return fetchRowsetMax
	 */
	public int getFetchRowsetMax() throws CFException {        
   		return work.getFetchRowsetMax();
	}
	
	/**
	 * 	Update FetchRowsetMax with the passed value
	 *	@param number
	 */
	public void setFetchRowsetMax(int number)  throws CFException{
		work.setFetchRowsetMax(number);
	}


	public void setFetchRowsetMax(long number)  throws CFException{
		work.setFetchRowsetMax((int)number);
	}


	/**
	 *	Returns the value of work
	 *	@return work
	 */   
	 public Work getWork() {
   	return work;
   }


	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 

	public BigDecimal getHvaSupAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaSupAmt((index));
	}

    public char[] getHvaSupAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaSupAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaSupAmt with the passed number
	 *	@param number
	 */
	public void setHvaSupAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaSupAmt((index),number);
   }

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hvaPartnVal
	 *	@return hvaPartnVal
	 */
   public char[] getHvaPartnVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPartnVal(index);
   }

  
	/**
	*  set variable hvaPartnVal
	*  @param value
	**/
   public void setHvaPartnVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPartnVal((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaPartnId
	 *	@return hvaPartnId
	 */
	public short getHvaPartnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPartnId((index));
	}
	
	/**
	 * 	Update HvaPartnId with the passed value
	 *	@param number
	 */
	public void setHvaPartnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),number);
	}

	public void setHvaPartnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}

	public void setHvaPartnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}



	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	public BigDecimal getHvaBaseDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseDedAmt((index));
	}

    public char[] getHvaBaseDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseDedAmt((index),number);
   }

	/**
	 *	Returns the value of hvaMskNullInd
	 *	@return hvaMskNullInd
	 */
	public short getHvaMskNullInd(int index) throws CFException {        
   		return hvaClmHistArray.getHvaMskNullInd((index));
	}
	
	/**
	 * 	Update HvaMskNullInd with the passed value
	 *	@param number
	 */
	public void setHvaMskNullInd(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),number);
	}

	public void setHvaMskNullInd(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}

	public void setHvaMskNullInd(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}



	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of hvaTransCd
	 *	@return hvaTransCd
	 */
   public char[] getHvaTransCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTransCd(index);
   }

  
	/**
	*  set variable hvaTransCd
	*  @param value
	**/
   public void setHvaTransCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTransCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktNbr
	 *	@return hvaProvMktNbr
	 */
   public char[] getHvaProvMktNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktNbr(index);
   }

  
	/**
	*  set variable hvaProvMktNbr
	*  @param value
	**/
   public void setHvaProvMktNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktNbr((index),value);
   } 

	public BigDecimal getHvaBaseAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseAmt((index));
	}

    public char[] getHvaBaseAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseAmt((index),number);
   }

	public BigDecimal getHvaCobCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCobCrResAmt((index));
	}

    public char[] getHvaCobCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCobCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCobCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaCobCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCobCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPpoCd
	 *	@return hvaPpoCd
	 */
   public char[] getHvaPpoCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPpoCd(index);
   }

  
	/**
	*  set variable hvaPpoCd
	*  @param value
	**/
   public void setHvaPpoCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPpoCd((index),value);
   } 

	public BigDecimal getHvaMmDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmDedAmt((index));
	}

    public char[] getHvaMmDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmDedAmt((index),number);
   }

	public BigDecimal getHvaMcCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMcCrResAmt((index));
	}

    public char[] getHvaMcCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMcCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMcCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaMcCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMcCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProvIpaId
	 *	@return hvaProvIpaId
	 */
   public char[] getHvaProvIpaId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvIpaId(index);
   }

  
	/**
	*  set variable hvaProvIpaId
	*  @param value
	**/
   public void setHvaProvIpaId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvIpaId((index),value);
   } 

	/**
	 *	Returns the value of hvaPmtSvcCd
	 *	@return hvaPmtSvcCd
	 */
   public char[] getHvaPmtSvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPmtSvcCd(index);
   }

  
	/**
	*  set variable hvaPmtSvcCd
	*  @param value
	**/
   public void setHvaPmtSvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPmtSvcCd((index),value);
   } 

	public BigDecimal getHvaMmAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmAmt((index));
	}

    public char[] getHvaMmAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvEobNm
	 *	@return hvaProvEobNm
	 */
   public char[] getHvaProvEobNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvEobNm(index);
   }

  
	/**
	*  set variable hvaProvEobNm
	*  @param value
	**/
   public void setHvaProvEobNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvEobNm((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	public BigDecimal getHvaCopayAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCopayAmt((index));
	}

    public char[] getHvaCopayAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCopayAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCopayAmt with the passed number
	 *	@param number
	 */
	public void setHvaCopayAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCopayAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvPrdctCd
	 *	@return hvaProvPrdctCd
	 */
   public char[] getHvaProvPrdctCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvPrdctCd(index);
   }

  
	/**
	*  set variable hvaProvPrdctCd
	*  @param value
	**/
   public void setHvaProvPrdctCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvPrdctCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPrsCreatSrcCd
	 *	@return hvaPrsCreatSrcCd
	 */
   public char[] getHvaPrsCreatSrcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPrsCreatSrcCd(index);
   }

  
	/**
	*  set variable hvaPrsCreatSrcCd
	*  @param value
	**/
   public void setHvaPrsCreatSrcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPrsCreatSrcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of hvaBaseDedDescTxt
	 *	@return hvaBaseDedDescTxt
	 */
   public char[] getHvaBaseDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBaseDedDescTxt(index);
   }

  
	/**
	*  set variable hvaBaseDedDescTxt
	*  @param value
	**/
   public void setHvaBaseDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBaseDedDescTxt((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvaMmDedDescTxt
	 *	@return hvaMmDedDescTxt
	 */
   public char[] getHvaMmDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMmDedDescTxt(index);
   }

  
	/**
	*  set variable hvaMmDedDescTxt
	*  @param value
	**/
   public void setHvaMmDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMmDedDescTxt((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of hvaOvrCd
	 *	@return hvaOvrCd
	 */
   public char[] getHvaOvrCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaOvrCd(index);
   }

  
	/**
	*  set variable hvaOvrCd
	*  @param value
	**/
   public void setHvaOvrCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaOvrCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktTypCd
	 *	@return hvaProvMktTypCd
	 */
   public char[] getHvaProvMktTypCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktTypCd(index);
   }

  
	/**
	*  set variable hvaProvMktTypCd
	*  @param value
	**/
   public void setHvaProvMktTypCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktTypCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of hvaParInd
	 *	@return hvaParInd
	 */
   public char[] getHvaParInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaParInd(index);
   }

  
	/**
	*  set variable hvaParInd
	*  @param value
	**/
   public void setHvaParInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaParInd((index),value);
   } 

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrRowsSect4421OutCtx getFetchCsrRowsSect4421OutCtx() {
            return new FetchCsrRowsSect4421OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect4421InCtx clone() {
        FetchCsrRowsSect4421InCtx cloneObj = new FetchCsrRowsSect4421InCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect4421InCtx getFetchCsrRowsSect4421InCtx() {
            return new FetchCsrRowsSect4421InCtx();
    }
     public class FetchCsrRowsSect4421OutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Test condition 100 for isSqlcodeFetchEnd()
	 *	@return  Returns true if isSqlcodeFetchEnd() is 100
	 */
   public boolean isSqlcodeFetchEnd() throws CFException {
      return work.isSqlcodeFetchEnd();
   }

	/**
	*  set values 100
	*/
   	public void setSqlcodeFetchEndTrue()  throws CFException{  			
    	work.setSqlcodeFetchEndTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 0 for isSqlcodeOk()
	 *	@return  Returns true if isSqlcodeOk() is 0
	 */
   public boolean isSqlcodeOk() throws CFException {
      return work.isSqlcodeOk();
   }

	/**
	*  set values 0
	*/
   	public void setSqlcodeOkTrue()  throws CFException{  			
    	work.setSqlcodeOkTrue();
   	}
	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect4421OutCtx clone() {
        FetchCsrRowsSect4421OutCtx cloneObj = new FetchCsrRowsSect4421OutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect4421OutCtx getFetchCsrRowsSect4421OutCtx() {
            return new FetchCsrRowsSect4421OutCtx();
    }
     public class CloseCsrNextFiltSectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public CloseCsrNextFiltSectOutCtx getCloseCsrNextFiltSectOutCtx() {
            return new CloseCsrNextFiltSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrNextFiltSectInCtx clone() {
        CloseCsrNextFiltSectInCtx cloneObj = new CloseCsrNextFiltSectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrNextFiltSectInCtx getCloseCsrNextFiltSectInCtx() {
            return new CloseCsrNextFiltSectInCtx();
    }
     public class CloseCsrNextFiltSectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrNextFiltSectOutCtx clone() {
        CloseCsrNextFiltSectOutCtx cloneObj = new CloseCsrNextFiltSectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrNextFiltSectOutCtx getCloseCsrNextFiltSectOutCtx() {
            return new CloseCsrNextFiltSectOutCtx();
    }
     public class ProcFetchedRowsSectInCtx implements Cloneable {
     StsContainer stsContainer = D5427dt1Ctx.this.getStsContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Test condition "0000" for isStsRespCodeOk()
	 *	@return  Returns true if isStsRespCodeOk() is "0000"
	 */
   public boolean isStsRespCodeOk() throws CFException {
      return stsContainer.getStsFixedArea().isStsRespCodeOk();
   }

	/**
	*  set values "0000"
	*/
   	public void setStsRespCodeOkTrue()  throws CFException{  			
    	stsContainer.getStsFixedArea().setStsRespCodeOkTrue();
   	}
	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of totalRowsRetrieved
	 *	@return totalRowsRetrieved
	 */
	public int getTotalRowsRetrieved() throws CFException {        
   		return work.getTotalRowsRetrieved();
	}
	
	/**
	 * 	Update TotalRowsRetrieved with the passed value
	 *	@param number
	 */
	public void setTotalRowsRetrieved(int number)  throws CFException{
		work.setTotalRowsRetrieved(number);
	}


	public void setTotalRowsRetrieved(long number)  throws CFException{
		work.setTotalRowsRetrieved((int)number);
	}


	/**
	 *	Returns the value of d5427dt1MaxRows
	 *	@return d5427dt1MaxRows
	 */
	public int getD5427dt1MaxRows() throws CFException {        
   		return work.getD5427dt1MaxRows();
	}
	
	/**
	 * 	Update D5427dt1MaxRows with the passed value
	 *	@param number
	 */
	public void setD5427dt1MaxRows(int number)  throws CFException{
		work.setD5427dt1MaxRows(number);
	}


	public void setD5427dt1MaxRows(long number)  throws CFException{
		work.setD5427dt1MaxRows((int)number);
	}


	/**
	 *	Returns the value of fetchRowsetMax
	 *	@return fetchRowsetMax
	 */
	public int getFetchRowsetMax() throws CFException {        
   		return work.getFetchRowsetMax();
	}
	
	/**
	 * 	Update FetchRowsetMax with the passed value
	 *	@param number
	 */
	public void setFetchRowsetMax(int number)  throws CFException{
		work.setFetchRowsetMax(number);
	}


	public void setFetchRowsetMax(long number)  throws CFException{
		work.setFetchRowsetMax((int)number);
	}


	/**
	 *	Returns the value of hvaSub
	 *	@return hvaSub
	 */
	public short getHvaSub() throws CFException {        
   		return hvaClmHistArray.getHvaSub();
	}
	
	/**
	 * 	Update HvaSub with the passed value
	 *	@param number
	 */
	public void setHvaSub(short number)  throws CFException{
		hvaClmHistArray.setHvaSub(number);
	}

	public void setHvaSub(int number)  throws CFException{
		hvaClmHistArray.setHvaSub((short)number);
	}

	public void setHvaSub(long number)  throws CFException{
		hvaClmHistArray.setHvaSub((short)number);
	}



	/**
	 *	Returns the value of fetchRowsRetrieved
	 *	@return fetchRowsRetrieved
	 */
	public int getFetchRowsRetrieved() throws CFException {        
   		return work.getFetchRowsRetrieved();
	}
	
	/**
	 * 	Update FetchRowsRetrieved with the passed value
	 *	@param number
	 */
	public void setFetchRowsRetrieved(int number)  throws CFException{
		work.setFetchRowsRetrieved(number);
	}


	public void setFetchRowsRetrieved(long number)  throws CFException{
		work.setFetchRowsRetrieved((int)number);
	}



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcFetchedRowsSectOutCtx getProcFetchedRowsSectOutCtx() {
            return new ProcFetchedRowsSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += stsContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public ProcFetchedRowsSectInCtx clone() {
        ProcFetchedRowsSectInCtx cloneObj = new ProcFetchedRowsSectInCtx();
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public ProcFetchedRowsSectInCtx getProcFetchedRowsSectInCtx() {
            return new ProcFetchedRowsSectInCtx();
    }
     public class ProcFetchedRowsSectOutCtx implements Cloneable {
     StsContainer stsContainer = D5427dt1Ctx.this.getStsContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of totalRowsRetrieved
	 *	@return totalRowsRetrieved
	 */
	public int getTotalRowsRetrieved() throws CFException {        
   		return work.getTotalRowsRetrieved();
	}
	
	/**
	 * 	Update TotalRowsRetrieved with the passed value
	 *	@param number
	 */
	public void setTotalRowsRetrieved(int number)  throws CFException{
		work.setTotalRowsRetrieved(number);
	}


	public void setTotalRowsRetrieved(long number)  throws CFException{
		work.setTotalRowsRetrieved((int)number);
	}


	/**
	 *	Returns the value of d5427dt1MaxRows
	 *	@return d5427dt1MaxRows
	 */
	public int getD5427dt1MaxRows() throws CFException {        
   		return work.getD5427dt1MaxRows();
	}
	
	/**
	 * 	Update D5427dt1MaxRows with the passed value
	 *	@param number
	 */
	public void setD5427dt1MaxRows(int number)  throws CFException{
		work.setD5427dt1MaxRows(number);
	}


	public void setD5427dt1MaxRows(long number)  throws CFException{
		work.setD5427dt1MaxRows((int)number);
	}


	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}
	/**
	 *	Returns the value of hvaSub
	 *	@return hvaSub
	 */
	public short getHvaSub() throws CFException {        
   		return hvaClmHistArray.getHvaSub();
	}
	
	/**
	 * 	Update HvaSub with the passed value
	 *	@param number
	 */
	public void setHvaSub(short number)  throws CFException{
		hvaClmHistArray.setHvaSub(number);
	}

	public void setHvaSub(int number)  throws CFException{
		hvaClmHistArray.setHvaSub((short)number);
	}

	public void setHvaSub(long number)  throws CFException{
		hvaClmHistArray.setHvaSub((short)number);
	}



	/**
	 *	Returns the value of fetchRowsRetrieved
	 *	@return fetchRowsRetrieved
	 */
	public int getFetchRowsRetrieved() throws CFException {        
   		return work.getFetchRowsRetrieved();
	}
	
	/**
	 * 	Update FetchRowsRetrieved with the passed value
	 *	@param number
	 */
	public void setFetchRowsRetrieved(int number)  throws CFException{
		work.setFetchRowsRetrieved(number);
	}


	public void setFetchRowsRetrieved(long number)  throws CFException{
		work.setFetchRowsRetrieved((int)number);
	}


	/**
	 *	Returns the value of nbrSrtItems
	 *	@return nbrSrtItems
	 */
	public int getNbrSrtItems() throws CFException {        
   		return work.getNbrSrtItems();
	}
	
	/**
	 * 	Update NbrSrtItems with the passed value
	 *	@param number
	 */
	public void setNbrSrtItems(int number)  throws CFException{
		work.setNbrSrtItems(number);
	}


	public void setNbrSrtItems(long number)  throws CFException{
		work.setNbrSrtItems((int)number);
	}



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += stsContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public ProcFetchedRowsSectOutCtx clone() {
        ProcFetchedRowsSectOutCtx cloneObj = new ProcFetchedRowsSectOutCtx();
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public ProcFetchedRowsSectOutCtx getProcFetchedRowsSectOutCtx() {
            return new ProcFetchedRowsSectOutCtx();
    }
     public class SaveClaimKeySectInCtx implements Cloneable {
     Dt1ClmContainer dt1ClmContainer = D5427dt1Ctx.this.getDt1ClmContainer();
     Dt1ClaimKeyTable dt1ClaimKeyTable = D5427dt1Ctx.this.getDt1ClaimKeyTable();
     ClaimKey claimKey = D5427dt1Ctx.this.getClaimKey();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Returns the value of dt1ClmDraftNo
	 *	@return dt1ClmDraftNo
	 */
	public long getDt1ClmDraftNo(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmDraftNo();
	}


	/**
	 *	Returns String value of dt1ClmDraftNo
	 *	@return dt1ClmDraftNo
	 */
	public char[]  getDt1ClmDraftNoString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmDraftNoString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmDraftNoIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmDraftNoIsNumeric();
	}

	/**
	 * 	Update Dt1ClmDraftNo with the passed value
	 *	@param number
	 */
	public void setDt1ClmDraftNo(int index,long number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDraftNo(number);
	}
	

	
	/**
	 * 	Update Dt1ClmDraftNo with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmDraftNo(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDraftNo(value);
	}
	
	/**
	 * 	Update Dt1ClmDraftNo with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmDraftNoString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDraftNo(value);
	}	

	/**
	 *	Returns the value of dt1ClmIcn
	 *	@return dt1ClmIcn
	 */
   public char[] getDt1ClmIcn(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmIcn();
   }

  
	/**
	*  set variable dt1ClmIcn
	*  @param value
	**/
   public void setDt1ClmIcn(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(value);
   } 

     /**
	 * 	Update Dt1ClmIcn 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex);
   	
   }
   
   public void setDt1ClmIcn(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmIcn 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmIcn with another Field
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source);
   }  
   
     /**
	 * 	Update Dt1ClmIcn 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmIcn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmHeaderCt
	 *	@return dt1ClmHeaderCt
	 */
	public int getDt1ClmHeaderCt(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmHeaderCt();
	}


	/**
	 *	Returns String value of dt1ClmHeaderCt
	 *	@return dt1ClmHeaderCt
	 */
	public char[]  getDt1ClmHeaderCtString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmHeaderCtString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmHeaderCtIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmHeaderCtIsNumeric();
	}

	/**
	 * 	Update Dt1ClmHeaderCt with the passed value
	 *	@param number
	 */
	public void setDt1ClmHeaderCt(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(number);
	}
	

	public void setDt1ClmHeaderCt(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(number);
	}
	
	
	/**
	 * 	Update Dt1ClmHeaderCt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmHeaderCt(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(value);
	}
	
	/**
	 * 	Update Dt1ClmHeaderCt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmHeaderCtString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(value);
	}	

	/**
	 *	Returns the value of claimKey
	 *	@return claimKey
	 */   
	 public ClaimKey getClaimKey() {
   	return claimKey;
   }


	/**
	 *	Returns the value of dt1ClaimKeyCnt
	 *	@return dt1ClaimKeyCnt
	 */
	public int getDt1ClaimKeyCnt() throws CFException {
   		return work.getDt1ClaimKeyCnt();
	}


	/**
	 *	Returns String value of dt1ClaimKeyCnt
	 *	@return dt1ClaimKeyCnt
	 */
	public char[]  getDt1ClaimKeyCntString() throws CFException {
	     return String.valueOf(work.getDt1ClaimKeyCntString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClaimKeyCntIsNumeric()  throws CFException{
	    return work.dt1ClaimKeyCntIsNumeric();
	}

	/**
	 * 	Update Dt1ClaimKeyCnt with the passed value
	 *	@param number
	 */
	public void setDt1ClaimKeyCnt(int number)  throws CFException{
		work.setDt1ClaimKeyCnt(number);
	}
	

	public void setDt1ClaimKeyCnt(long number)  throws CFException{
	    work.setDt1ClaimKeyCnt(number);
	}
	
	
	/**
	 * 	Update Dt1ClaimKeyCnt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClaimKeyCnt(char[] value)  throws CFException {
		work.setDt1ClaimKeyCnt(value);
	}
	
	/**
	 * 	Update Dt1ClaimKeyCnt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClaimKeyCntString(char[] value)  throws CFException{
		work.setDt1ClaimKeyCnt(value);
	}	

	/**
	 *	Returns the value of dt1ClaimKey
	 *	@return dt1ClaimKey
	 */
   public char[] getDt1ClaimKey(int index) throws CFException  {              
   		return dt1ClaimKeyTable.getDt1ClaimKeyArray().getDt1ClaimKeyEntry(index).getDt1ClaimKey();
   }

  
	/**
	*  set variable dt1ClaimKey
	*  @param value
	**/
   public void setDt1ClaimKey(int index,char[] value) throws CFException {
      dt1ClaimKeyTable.getDt1ClaimKeyArray().getDt1ClaimKeyEntry(index).setDt1ClaimKey(value);
   } 

     /**
	 * 	Update Dt1ClaimKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClaimKey(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClaimKeyTable.getDt1ClaimKeyArray().getDt1ClaimKeyEntry(index).setDt1ClaimKey(source, sourceIndex);
   	
   }
   
   public void setDt1ClaimKey(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClaimKeyTable.getDt1ClaimKeyArray().getDt1ClaimKeyEntry(index).setDt1ClaimKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClaimKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClaimKey(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClaimKeyTable.getDt1ClaimKeyArray().getDt1ClaimKeyEntry(index).setDt1ClaimKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClaimKey with another Field
	 *	@param value
	 */
   public void setDt1ClaimKey(int index,Field source) {
      dt1ClaimKeyTable.getDt1ClaimKeyArray().getDt1ClaimKeyEntry(index).setDt1ClaimKey(source);
   }  
   
     /**
	 * 	Update Dt1ClaimKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClaimKey(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClaimKeyTable.getDt1ClaimKeyArray().getDt1ClaimKeyEntry(index).setDt1ClaimKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClaimKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClaimKey(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClaimKeyTable.getDt1ClaimKeyArray().getDt1ClaimKeyEntry(index).setDt1ClaimKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmSuffixCd
	 *	@return dt1ClmSuffixCd
	 */
	public int getDt1ClmSuffixCd(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmSuffixCd();
	}


	/**
	 *	Returns String value of dt1ClmSuffixCd
	 *	@return dt1ClmSuffixCd
	 */
	public char[]  getDt1ClmSuffixCdString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmSuffixCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmSuffixCdIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmSuffixCdIsNumeric();
	}

	/**
	 * 	Update Dt1ClmSuffixCd with the passed value
	 *	@param number
	 */
	public void setDt1ClmSuffixCd(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(number);
	}
	

	public void setDt1ClmSuffixCd(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(number);
	}
	
	
	/**
	 * 	Update Dt1ClmSuffixCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmSuffixCd(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(value);
	}
	
	/**
	 * 	Update Dt1ClmSuffixCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmSuffixCdString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(value);
	}	

	/**
	 *	Returns the value of dt1ClaimKeyMax
	 *	@return dt1ClaimKeyMax
	 */
	public int getDt1ClaimKeyMax() throws CFException {
   		return work.getDt1ClaimKeyMax();
	}


	/**
	 *	Returns String value of dt1ClaimKeyMax
	 *	@return dt1ClaimKeyMax
	 */
	public char[]  getDt1ClaimKeyMaxString() throws CFException {
	     return String.valueOf(work.getDt1ClaimKeyMaxString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClaimKeyMaxIsNumeric()  throws CFException{
	    return work.dt1ClaimKeyMaxIsNumeric();
	}

	/**
	 * 	Update Dt1ClaimKeyMax with the passed value
	 *	@param number
	 */
	public void setDt1ClaimKeyMax(int number)  throws CFException{
		work.setDt1ClaimKeyMax(number);
	}
	

	public void setDt1ClaimKeyMax(long number)  throws CFException{
	    work.setDt1ClaimKeyMax(number);
	}
	
	
	/**
	 * 	Update Dt1ClaimKeyMax with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClaimKeyMax(char[] value)  throws CFException {
		work.setDt1ClaimKeyMax(value);
	}
	
	/**
	 * 	Update Dt1ClaimKeyMax with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClaimKeyMaxString(char[] value)  throws CFException{
		work.setDt1ClaimKeyMax(value);
	}	

	/**
	 *	Returns the value of dt1ClmProviderId
	 *	@return dt1ClmProviderId
	 */   
	 public Dt1ClmProviderId getDt1ClmProviderId(int index) {
   	return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId();
   }

   /**
	* 	Update Dt1ClmProviderId with the passed value
	*	@param value
	*/
   public void setDt1ClmProviderId(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(value);
   }   

     /**
	 * 	Update Dt1ClmProviderId 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProviderId 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmProviderId with another Field
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,Field source) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source);
   }  
   
     /**
	 * 	Update Dt1ClmProviderId 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,Field source, int sourceIndex,int sourceLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProviderId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


public void setDt1ItemDx(int dt1ItemDx) { 
    D5427dt1Ctx.this.dt1ItemDx = dt1ItemDx;
}

public int getDt1ItemDx() { 
    return D5427dt1Ctx.this.dt1ItemDx;
}
	/**
	 *	Returns the value of dt1ClmFln
	 *	@return dt1ClmFln
	 */
	public long getDt1ClmFln(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFln();
	}


	/**
	 *	Returns String value of dt1ClmFln
	 *	@return dt1ClmFln
	 */
	public char[]  getDt1ClmFlnString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFlnString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmFlnIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmFlnIsNumeric();
	}

	/**
	 * 	Update Dt1ClmFln with the passed value
	 *	@param number
	 */
	public void setDt1ClmFln(int index,long number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(number);
	}
	

	
	/**
	 * 	Update Dt1ClmFln with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmFln(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(value);
	}
	
	/**
	 * 	Update Dt1ClmFln with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmFlnString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(value);
	}	


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public SaveClaimKeySectOutCtx getSaveClaimKeySectOutCtx() {
            return new SaveClaimKeySectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1ClmContainer.hashCode();
        str += dt1ClaimKeyTable.hashCode();
        str += claimKey.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public SaveClaimKeySectInCtx clone() {
        SaveClaimKeySectInCtx cloneObj = new SaveClaimKeySectInCtx();
        cloneObj.dt1ClmContainer = new Dt1ClmContainer();
        cloneObj.dt1ClmContainer.set(dt1ClmContainer.getClonedField());
        cloneObj.dt1ClaimKeyTable = new Dt1ClaimKeyTable();
        cloneObj.dt1ClaimKeyTable.set(dt1ClaimKeyTable.getClonedField());
        cloneObj.claimKey = new ClaimKey();
        cloneObj.claimKey.set(claimKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public SaveClaimKeySectInCtx getSaveClaimKeySectInCtx() {
            return new SaveClaimKeySectInCtx();
    }
     public class SaveClaimKeySectOutCtx implements Cloneable {
     Dt1ClmContainer dt1ClmContainer = D5427dt1Ctx.this.getDt1ClmContainer();
     Dt1ClaimKeyTable dt1ClaimKeyTable = D5427dt1Ctx.this.getDt1ClaimKeyTable();
     ClaimKey claimKey = D5427dt1Ctx.this.getClaimKey();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Returns the value of dt1ClmDraftNo
	 *	@return dt1ClmDraftNo
	 */
	public long getDt1ClmDraftNo(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmDraftNo();
	}


	/**
	 *	Returns String value of dt1ClmDraftNo
	 *	@return dt1ClmDraftNo
	 */
	public char[]  getDt1ClmDraftNoString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmDraftNoString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmDraftNoIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmDraftNoIsNumeric();
	}

	/**
	 * 	Update Dt1ClmDraftNo with the passed value
	 *	@param number
	 */
	public void setDt1ClmDraftNo(int index,long number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDraftNo(number);
	}
	

	
	/**
	 * 	Update Dt1ClmDraftNo with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmDraftNo(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDraftNo(value);
	}
	
	/**
	 * 	Update Dt1ClmDraftNo with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmDraftNoString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDraftNo(value);
	}	

	/**
	 *	Test condition "N" for isClaimNotfound()
	 *	@return  Returns true if isClaimNotfound() is "N"
	 */
   public boolean isClaimNotfound() throws CFException {
      return work.isClaimNotfound();
   }

	/**
	*  set values "N"
	*/
   	public void setClaimNotfoundTrue()  throws CFException{  			
    	work.setClaimNotfoundTrue();
   	}
	/**
	 *	Returns the value of claimKeyIcn
	 *	@return claimKeyIcn
	 */
   public char[] getClaimKeyIcn() throws CFException  {              
   		return claimKey.getClaimKeyIcn();
   }

  
	/**
	*  set variable claimKeyIcn
	*  @param value
	**/
   public void setClaimKeyIcn(char[] value) throws CFException {
      claimKey.setClaimKeyIcn(value);
   } 

     /**
	 * 	Update ClaimKeyIcn 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setClaimKeyIcn(char[] source, int sourceIndex) throws CFException {
      claimKey.setClaimKeyIcn(source, sourceIndex);
   	
   }
   
   public void setClaimKeyIcn(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      claimKey.setClaimKeyIcn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ClaimKeyIcn 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setClaimKeyIcn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      claimKey.setClaimKeyIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ClaimKeyIcn with another Field
	 *	@param value
	 */
   public void setClaimKeyIcn(Field source) {
      claimKey.setClaimKeyIcn(source);
   }  
   
     /**
	 * 	Update ClaimKeyIcn 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setClaimKeyIcn(Field source, int sourceIndex,int sourceLen) {
      claimKey.setClaimKeyIcn(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ClaimKeyIcn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setClaimKeyIcn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      claimKey.setClaimKeyIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of claimKey
	 *	@return claimKey
	 */   
	 public ClaimKey getClaimKey() {
   	return claimKey;
   }


	/**
	 *	Returns the value of claimKeyFln
	 *	@return claimKeyFln
	 */
   public char[] getClaimKeyFln() throws CFException  {              
   		return claimKey.getClaimKeyFln();
   }

  
	/**
	*  set variable claimKeyFln
	*  @param value
	**/
   public void setClaimKeyFln(char[] value) throws CFException {
      claimKey.setClaimKeyFln(value);
   } 

     /**
	 * 	Update ClaimKeyFln 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setClaimKeyFln(char[] source, int sourceIndex) throws CFException {
      claimKey.setClaimKeyFln(source, sourceIndex);
   	
   }
   
   public void setClaimKeyFln(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      claimKey.setClaimKeyFln(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ClaimKeyFln 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setClaimKeyFln(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      claimKey.setClaimKeyFln(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ClaimKeyFln with another Field
	 *	@param value
	 */
   public void setClaimKeyFln(Field source) {
      claimKey.setClaimKeyFln(source);
   }  
   
     /**
	 * 	Update ClaimKeyFln 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setClaimKeyFln(Field source, int sourceIndex,int sourceLen) {
      claimKey.setClaimKeyFln(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ClaimKeyFln 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setClaimKeyFln(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      claimKey.setClaimKeyFln(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClaimKey
	 *	@return dt1ClaimKey
	 */
   public char[] getDt1ClaimKey(int index) throws CFException  {              
   		return dt1ClaimKeyTable.getDt1ClaimKeyArray().getDt1ClaimKeyEntry(index).getDt1ClaimKey();
   }

  
	/**
	*  set variable dt1ClaimKey
	*  @param value
	**/
   public void setDt1ClaimKey(int index,char[] value) throws CFException {
      dt1ClaimKeyTable.getDt1ClaimKeyArray().getDt1ClaimKeyEntry(index).setDt1ClaimKey(value);
   } 

     /**
	 * 	Update Dt1ClaimKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClaimKey(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClaimKeyTable.getDt1ClaimKeyArray().getDt1ClaimKeyEntry(index).setDt1ClaimKey(source, sourceIndex);
   	
   }
   
   public void setDt1ClaimKey(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClaimKeyTable.getDt1ClaimKeyArray().getDt1ClaimKeyEntry(index).setDt1ClaimKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClaimKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClaimKey(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClaimKeyTable.getDt1ClaimKeyArray().getDt1ClaimKeyEntry(index).setDt1ClaimKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClaimKey with another Field
	 *	@param value
	 */
   public void setDt1ClaimKey(int index,Field source) {
      dt1ClaimKeyTable.getDt1ClaimKeyArray().getDt1ClaimKeyEntry(index).setDt1ClaimKey(source);
   }  
   
     /**
	 * 	Update Dt1ClaimKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClaimKey(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClaimKeyTable.getDt1ClaimKeyArray().getDt1ClaimKeyEntry(index).setDt1ClaimKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClaimKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClaimKey(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClaimKeyTable.getDt1ClaimKeyArray().getDt1ClaimKeyEntry(index).setDt1ClaimKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of claimKeyDraftNo
	 *	@return claimKeyDraftNo
	 */
   public char[] getClaimKeyDraftNo() throws CFException  {              
   		return claimKey.getClaimKeyDraftNo();
   }

  
	/**
	*  set variable claimKeyDraftNo
	*  @param value
	**/
   public void setClaimKeyDraftNo(char[] value) throws CFException {
      claimKey.setClaimKeyDraftNo(value);
   } 

     /**
	 * 	Update ClaimKeyDraftNo 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setClaimKeyDraftNo(char[] source, int sourceIndex) throws CFException {
      claimKey.setClaimKeyDraftNo(source, sourceIndex);
   	
   }
   
   public void setClaimKeyDraftNo(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      claimKey.setClaimKeyDraftNo(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ClaimKeyDraftNo 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setClaimKeyDraftNo(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      claimKey.setClaimKeyDraftNo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ClaimKeyDraftNo with another Field
	 *	@param value
	 */
   public void setClaimKeyDraftNo(Field source) {
      claimKey.setClaimKeyDraftNo(source);
   }  
   
     /**
	 * 	Update ClaimKeyDraftNo 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setClaimKeyDraftNo(Field source, int sourceIndex,int sourceLen) {
      claimKey.setClaimKeyDraftNo(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ClaimKeyDraftNo 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setClaimKeyDraftNo(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      claimKey.setClaimKeyDraftNo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isClaimFound()
	 *	@return  Returns true if isClaimFound() is "Y"
	 */
   public boolean isClaimFound() throws CFException {
      return work.isClaimFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setClaimFoundTrue()  throws CFException{  			
    	work.setClaimFoundTrue();
   	}
	/**
	 *	Returns the value of dt1ClmProviderId
	 *	@return dt1ClmProviderId
	 */   
	 public Dt1ClmProviderId getDt1ClmProviderId(int index) {
   	return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId();
   }

   /**
	* 	Update Dt1ClmProviderId with the passed value
	*	@param value
	*/
   public void setDt1ClmProviderId(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(value);
   }   

     /**
	 * 	Update Dt1ClmProviderId 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProviderId 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmProviderId with another Field
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,Field source) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source);
   }  
   
     /**
	 * 	Update Dt1ClmProviderId 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,Field source, int sourceIndex,int sourceLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProviderId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmFln
	 *	@return dt1ClmFln
	 */
	public long getDt1ClmFln(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFln();
	}


	/**
	 *	Returns String value of dt1ClmFln
	 *	@return dt1ClmFln
	 */
	public char[]  getDt1ClmFlnString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFlnString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmFlnIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmFlnIsNumeric();
	}

	/**
	 * 	Update Dt1ClmFln with the passed value
	 *	@param number
	 */
	public void setDt1ClmFln(int index,long number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(number);
	}
	

	
	/**
	 * 	Update Dt1ClmFln with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmFln(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(value);
	}
	
	/**
	 * 	Update Dt1ClmFln with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmFlnString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(value);
	}	

	/**
	 *	Returns the value of claimKeyHeaderCt
	 *	@return claimKeyHeaderCt
	 */
   public char[] getClaimKeyHeaderCt() throws CFException  {              
   		return claimKey.getClaimKeyHeaderCt();
   }

  
	/**
	*  set variable claimKeyHeaderCt
	*  @param value
	**/
   public void setClaimKeyHeaderCt(char[] value) throws CFException {
      claimKey.setClaimKeyHeaderCt(value);
   } 

     /**
	 * 	Update ClaimKeyHeaderCt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setClaimKeyHeaderCt(char[] source, int sourceIndex) throws CFException {
      claimKey.setClaimKeyHeaderCt(source, sourceIndex);
   	
   }
   
   public void setClaimKeyHeaderCt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      claimKey.setClaimKeyHeaderCt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ClaimKeyHeaderCt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setClaimKeyHeaderCt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      claimKey.setClaimKeyHeaderCt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ClaimKeyHeaderCt with another Field
	 *	@param value
	 */
   public void setClaimKeyHeaderCt(Field source) {
      claimKey.setClaimKeyHeaderCt(source);
   }  
   
     /**
	 * 	Update ClaimKeyHeaderCt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setClaimKeyHeaderCt(Field source, int sourceIndex,int sourceLen) {
      claimKey.setClaimKeyHeaderCt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ClaimKeyHeaderCt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setClaimKeyHeaderCt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      claimKey.setClaimKeyHeaderCt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmIcn
	 *	@return dt1ClmIcn
	 */
   public char[] getDt1ClmIcn(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmIcn();
   }

  
	/**
	*  set variable dt1ClmIcn
	*  @param value
	**/
   public void setDt1ClmIcn(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(value);
   } 

     /**
	 * 	Update Dt1ClmIcn 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex);
   	
   }
   
   public void setDt1ClmIcn(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmIcn 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmIcn with another Field
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source);
   }  
   
     /**
	 * 	Update Dt1ClmIcn 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmIcn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of claimKeyProviderNo
	 *	@return claimKeyProviderNo
	 */
   public char[] getClaimKeyProviderNo() throws CFException  {              
   		return claimKey.getClaimKeyProviderNo();
   }

  
	/**
	*  set variable claimKeyProviderNo
	*  @param value
	**/
   public void setClaimKeyProviderNo(char[] value) throws CFException {
      claimKey.setClaimKeyProviderNo(value);
   } 

     /**
	 * 	Update ClaimKeyProviderNo 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setClaimKeyProviderNo(char[] source, int sourceIndex) throws CFException {
      claimKey.setClaimKeyProviderNo(source, sourceIndex);
   	
   }
   
   public void setClaimKeyProviderNo(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      claimKey.setClaimKeyProviderNo(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ClaimKeyProviderNo 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setClaimKeyProviderNo(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      claimKey.setClaimKeyProviderNo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ClaimKeyProviderNo with another Field
	 *	@param value
	 */
   public void setClaimKeyProviderNo(Field source) {
      claimKey.setClaimKeyProviderNo(source);
   }  
   
     /**
	 * 	Update ClaimKeyProviderNo 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setClaimKeyProviderNo(Field source, int sourceIndex,int sourceLen) {
      claimKey.setClaimKeyProviderNo(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ClaimKeyProviderNo 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setClaimKeyProviderNo(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      claimKey.setClaimKeyProviderNo(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmHeaderCt
	 *	@return dt1ClmHeaderCt
	 */
	public int getDt1ClmHeaderCt(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmHeaderCt();
	}


	/**
	 *	Returns String value of dt1ClmHeaderCt
	 *	@return dt1ClmHeaderCt
	 */
	public char[]  getDt1ClmHeaderCtString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmHeaderCtString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmHeaderCtIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmHeaderCtIsNumeric();
	}

	/**
	 * 	Update Dt1ClmHeaderCt with the passed value
	 *	@param number
	 */
	public void setDt1ClmHeaderCt(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(number);
	}
	

	public void setDt1ClmHeaderCt(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(number);
	}
	
	
	/**
	 * 	Update Dt1ClmHeaderCt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmHeaderCt(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(value);
	}
	
	/**
	 * 	Update Dt1ClmHeaderCt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmHeaderCtString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(value);
	}	

	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}
	/**
	 *	Returns the value of dt1ClaimKeyCnt
	 *	@return dt1ClaimKeyCnt
	 */
	public int getDt1ClaimKeyCnt() throws CFException {
   		return work.getDt1ClaimKeyCnt();
	}


	/**
	 *	Returns String value of dt1ClaimKeyCnt
	 *	@return dt1ClaimKeyCnt
	 */
	public char[]  getDt1ClaimKeyCntString() throws CFException {
	     return String.valueOf(work.getDt1ClaimKeyCntString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClaimKeyCntIsNumeric()  throws CFException{
	    return work.dt1ClaimKeyCntIsNumeric();
	}

	/**
	 * 	Update Dt1ClaimKeyCnt with the passed value
	 *	@param number
	 */
	public void setDt1ClaimKeyCnt(int number)  throws CFException{
		work.setDt1ClaimKeyCnt(number);
	}
	

	public void setDt1ClaimKeyCnt(long number)  throws CFException{
	    work.setDt1ClaimKeyCnt(number);
	}
	
	
	/**
	 * 	Update Dt1ClaimKeyCnt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClaimKeyCnt(char[] value)  throws CFException {
		work.setDt1ClaimKeyCnt(value);
	}
	
	/**
	 * 	Update Dt1ClaimKeyCnt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClaimKeyCntString(char[] value)  throws CFException{
		work.setDt1ClaimKeyCnt(value);
	}	

	/**
	 *	Returns the value of claimKeySuffixCd
	 *	@return claimKeySuffixCd
	 */
   public char[] getClaimKeySuffixCd() throws CFException  {              
   		return claimKey.getClaimKeySuffixCd();
   }

  
	/**
	*  set variable claimKeySuffixCd
	*  @param value
	**/
   public void setClaimKeySuffixCd(char[] value) throws CFException {
      claimKey.setClaimKeySuffixCd(value);
   } 

     /**
	 * 	Update ClaimKeySuffixCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setClaimKeySuffixCd(char[] source, int sourceIndex) throws CFException {
      claimKey.setClaimKeySuffixCd(source, sourceIndex);
   	
   }
   
   public void setClaimKeySuffixCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      claimKey.setClaimKeySuffixCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ClaimKeySuffixCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setClaimKeySuffixCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      claimKey.setClaimKeySuffixCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ClaimKeySuffixCd with another Field
	 *	@param value
	 */
   public void setClaimKeySuffixCd(Field source) {
      claimKey.setClaimKeySuffixCd(source);
   }  
   
     /**
	 * 	Update ClaimKeySuffixCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setClaimKeySuffixCd(Field source, int sourceIndex,int sourceLen) {
      claimKey.setClaimKeySuffixCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ClaimKeySuffixCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setClaimKeySuffixCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      claimKey.setClaimKeySuffixCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmSuffixCd
	 *	@return dt1ClmSuffixCd
	 */
	public int getDt1ClmSuffixCd(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmSuffixCd();
	}


	/**
	 *	Returns String value of dt1ClmSuffixCd
	 *	@return dt1ClmSuffixCd
	 */
	public char[]  getDt1ClmSuffixCdString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmSuffixCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmSuffixCdIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmSuffixCdIsNumeric();
	}

	/**
	 * 	Update Dt1ClmSuffixCd with the passed value
	 *	@param number
	 */
	public void setDt1ClmSuffixCd(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(number);
	}
	

	public void setDt1ClmSuffixCd(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(number);
	}
	
	
	/**
	 * 	Update Dt1ClmSuffixCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmSuffixCd(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(value);
	}
	
	/**
	 * 	Update Dt1ClmSuffixCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmSuffixCdString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(value);
	}	


public void setDt1ItemDx(int dt1ItemDx) { 
    D5427dt1Ctx.this.dt1ItemDx = dt1ItemDx;
}

public int getDt1ItemDx() { 
    return D5427dt1Ctx.this.dt1ItemDx;
}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1ClmContainer.hashCode();
        str += dt1ClaimKeyTable.hashCode();
        str += claimKey.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public SaveClaimKeySectOutCtx clone() {
        SaveClaimKeySectOutCtx cloneObj = new SaveClaimKeySectOutCtx();
        cloneObj.dt1ClmContainer = new Dt1ClmContainer();
        cloneObj.dt1ClmContainer.set(dt1ClmContainer.getClonedField());
        cloneObj.dt1ClaimKeyTable = new Dt1ClaimKeyTable();
        cloneObj.dt1ClaimKeyTable.set(dt1ClaimKeyTable.getClonedField());
        cloneObj.claimKey = new ClaimKey();
        cloneObj.claimKey.set(claimKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public SaveClaimKeySectOutCtx getSaveClaimKeySectOutCtx() {
            return new SaveClaimKeySectOutCtx();
    }
     public class SetNextKeyValueSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of headerCt
	 *	@return headerCt
	 */
	public short getHeaderCt() throws CFException {        
   		return work.getHeaderCt();
	}
	
	/**
	 * 	Update HeaderCt with the passed value
	 *	@param number
	 */
	public void setHeaderCt(short number)  throws CFException{
		work.setHeaderCt(number);
	}

	public void setHeaderCt(int number)  throws CFException{
		work.setHeaderCt((short)number);
	}

	public void setHeaderCt(long number)  throws CFException{
		work.setHeaderCt((short)number);
	}



	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaSub
	 *	@return hvaSub
	 */
	public short getHvaSub() throws CFException {        
   		return hvaClmHistArray.getHvaSub();
	}
	
	/**
	 * 	Update HvaSub with the passed value
	 *	@param number
	 */
	public void setHvaSub(short number)  throws CFException{
		hvaClmHistArray.setHvaSub(number);
	}

	public void setHvaSub(int number)  throws CFException{
		hvaClmHistArray.setHvaSub((short)number);
	}

	public void setHvaSub(long number)  throws CFException{
		hvaClmHistArray.setHvaSub((short)number);
	}



	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of nextKey
	 *	@return nextKey
	 */   
	 public NextKey getNextKey() {
   	return nextKey;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public SetNextKeyValueSectOutCtx getSetNextKeyValueSectOutCtx() {
            return new SetNextKeyValueSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public SetNextKeyValueSectInCtx clone() {
        SetNextKeyValueSectInCtx cloneObj = new SetNextKeyValueSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public SetNextKeyValueSectInCtx getSetNextKeyValueSectInCtx() {
            return new SetNextKeyValueSectInCtx();
    }
     public class SetNextKeyValueSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of nextProcTm
	 *	@return nextProcTm
	 */
   public char[] getNextProcTm() throws CFException  {              
   		return nextKey.getNextProcTm();
   }

  
	/**
	*  set variable nextProcTm
	*  @param value
	**/
   public void setNextProcTm(char[] value) throws CFException {
      nextKey.setNextProcTm(value);
   } 

     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcTm(source, sourceIndex);
   	
   }
   
   public void setNextProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcTm with another Field
	 *	@param value
	 */
   public void setNextProcTm(Field source) {
      nextKey.setNextProcTm(source);
   }  
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public int getNextIcnSufxVersNbr() throws CFException {
   		return nextKey.getNextIcnSufxVersNbr();
	}


	/**
	 *	Returns String value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public char[]  getNextIcnSufxVersNbrString() throws CFException {
	     return String.valueOf(nextKey.getNextIcnSufxVersNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextIcnSufxVersNbrIsNumeric()  throws CFException{
	    return nextKey.nextIcnSufxVersNbrIsNumeric();
	}

	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setNextIcnSufxVersNbr(int number)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(number);
	}
	

	public void setNextIcnSufxVersNbr(long number)  throws CFException{
	    nextKey.setNextIcnSufxVersNbr(number);
	}
	
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbr(char[] value)  throws CFException {
		nextKey.setNextIcnSufxVersNbr(value);
	}
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbrString(char[] value)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(value);
	}	

	/**
	 *	Test condition "1" for isDt1RspMultipleRecords()
	 *	@return  Returns true if isDt1RspMultipleRecords() is "1"
	 */
   public boolean isDt1RspMultipleRecords() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().isDt1RspMultipleRecords();
   }

	/**
	*  set values "1"
	*/
   	public void setDt1RspMultipleRecordsTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().setDt1RspMultipleRecordsTrue();
   	}
	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of dt1RspNextKey
	 *	@return dt1RspNextKey
	 */
   public char[] getDt1RspNextKey() throws CFException  {              
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspNextKey();
   }

  
	/**
	*  set variable dt1RspNextKey
	*  @param value
	**/
   public void setDt1RspNextKey(char[] value) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspNextKey(value);
   } 

     /**
	 * 	Update Dt1RspNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1RspNextKey(char[] source, int sourceIndex) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1RspNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1RspNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1RspNextKey with another Field
	 *	@param value
	 */
   public void setDt1RspNextKey(Field source) {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspNextKey(source);
   }  
   
     /**
	 * 	Update Dt1RspNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1RspNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1RspNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().setDt1RspNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextIcnSufxCd
	 *	@return nextIcnSufxCd
	 */
   public char[] getNextIcnSufxCd() throws CFException  {              
   		return nextKey.getNextIcnSufxCd();
   }

  
	/**
	*  set variable nextIcnSufxCd
	*  @param value
	**/
   public void setNextIcnSufxCd(char[] value) throws CFException {
      nextKey.setNextIcnSufxCd(value);
   } 

     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setNextIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextIcnSufxCd with another Field
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source) {
      nextKey.setNextIcnSufxCd(source);
   }  
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of nextLnId
	 *	@return nextLnId
	 */
	public int getNextLnId() throws CFException {
   		return nextKey.getNextLnId();
	}


	/**
	 *	Returns String value of nextLnId
	 *	@return nextLnId
	 */
	public char[]  getNextLnIdString() throws CFException {
	     return String.valueOf(nextKey.getNextLnIdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextLnIdIsNumeric()  throws CFException{
	    return nextKey.nextLnIdIsNumeric();
	}

	/**
	 * 	Update NextLnId with the passed value
	 *	@param number
	 */
	public void setNextLnId(int number)  throws CFException{
		nextKey.setNextLnId(number);
	}
	

	public void setNextLnId(long number)  throws CFException{
	    nextKey.setNextLnId(number);
	}
	
	
	/**
	 * 	Update NextLnId with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextLnId(char[] value)  throws CFException {
		nextKey.setNextLnId(value);
	}
	
	/**
	 * 	Update NextLnId with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextLnIdString(char[] value)  throws CFException{
		nextKey.setNextLnId(value);
	}	

	/**
	 *	Returns the value of headerCt
	 *	@return headerCt
	 */
	public short getHeaderCt() throws CFException {        
   		return work.getHeaderCt();
	}
	
	/**
	 * 	Update HeaderCt with the passed value
	 *	@param number
	 */
	public void setHeaderCt(short number)  throws CFException{
		work.setHeaderCt(number);
	}

	public void setHeaderCt(int number)  throws CFException{
		work.setHeaderCt((short)number);
	}

	public void setHeaderCt(long number)  throws CFException{
		work.setHeaderCt((short)number);
	}



	/**
	 *	Returns the value of nextInvnCtlNbr
	 *	@return nextInvnCtlNbr
	 */
   public char[] getNextInvnCtlNbr() throws CFException  {              
   		return nextKey.getNextInvnCtlNbr();
   }

  
	/**
	*  set variable nextInvnCtlNbr
	*  @param value
	**/
   public void setNextInvnCtlNbr(char[] value) throws CFException {
      nextKey.setNextInvnCtlNbr(value);
   } 

     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setNextInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source) {
      nextKey.setNextInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of nextHeaderCt
	 *	@return nextHeaderCt
	 */
	public int getNextHeaderCt() throws CFException {
   		return nextKey.getNextHeaderCt();
	}


	/**
	 *	Returns String value of nextHeaderCt
	 *	@return nextHeaderCt
	 */
	public char[]  getNextHeaderCtString() throws CFException {
	     return String.valueOf(nextKey.getNextHeaderCtString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextHeaderCtIsNumeric()  throws CFException{
	    return nextKey.nextHeaderCtIsNumeric();
	}

	/**
	 * 	Update NextHeaderCt with the passed value
	 *	@param number
	 */
	public void setNextHeaderCt(int number)  throws CFException{
		nextKey.setNextHeaderCt(number);
	}
	

	public void setNextHeaderCt(long number)  throws CFException{
	    nextKey.setNextHeaderCt(number);
	}
	
	
	/**
	 * 	Update NextHeaderCt with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextHeaderCt(char[] value)  throws CFException {
		nextKey.setNextHeaderCt(value);
	}
	
	/**
	 * 	Update NextHeaderCt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextHeaderCtString(char[] value)  throws CFException{
		nextKey.setNextHeaderCt(value);
	}	

	/**
	 *	Returns the value of nextKey
	 *	@return nextKey
	 */   
	 public NextKey getNextKey() {
   	return nextKey;
   }


	/**
	 *	Returns the value of nextPgmIdLstCharVal
	 *	@return nextPgmIdLstCharVal
	 */
   public char[] getNextPgmIdLstCharVal() throws CFException  {              
   		return nextKey.getNextPgmIdLstCharVal();
   }

  
	/**
	*  set variable nextPgmIdLstCharVal
	*  @param value
	**/
   public void setNextPgmIdLstCharVal(char[] value) throws CFException {
      nextKey.setNextPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source) {
      nextKey.setNextPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fetchRowsRetrieved
	 *	@return fetchRowsRetrieved
	 */
	public int getFetchRowsRetrieved() throws CFException {        
   		return work.getFetchRowsRetrieved();
	}
	
	/**
	 * 	Update FetchRowsRetrieved with the passed value
	 *	@param number
	 */
	public void setFetchRowsRetrieved(int number)  throws CFException{
		work.setFetchRowsRetrieved(number);
	}


	public void setFetchRowsRetrieved(long number)  throws CFException{
		work.setFetchRowsRetrieved((int)number);
	}


	/**
	 *	Returns the value of nextProcDt
	 *	@return nextProcDt
	 */
   public char[] getNextProcDt() throws CFException  {              
   		return nextKey.getNextProcDt();
   }

  
	/**
	*  set variable nextProcDt
	*  @param value
	**/
   public void setNextProcDt(char[] value) throws CFException {
      nextKey.setNextProcDt(value);
   } 

     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcDt(source, sourceIndex);
   	
   }
   
   public void setNextProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcDt with another Field
	 *	@param value
	 */
   public void setNextProcDt(Field source) {
      nextKey.setNextProcDt(source);
   }  
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public SetNextKeyValueSectOutCtx clone() {
        SetNextKeyValueSectOutCtx cloneObj = new SetNextKeyValueSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public SetNextKeyValueSectOutCtx getSetNextKeyValueSectOutCtx() {
            return new SetNextKeyValueSectOutCtx();
    }
     public class WriteClmDataSectInCtx implements Cloneable {
     Dt1ClmContainer dt1ClmContainer = D5427dt1Ctx.this.getDt1ClmContainer();
     HoldArea holdArea = D5427dt1Ctx.this.getHoldArea();
     Work work = D5427dt1Ctx.this.getWork();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hldInvnCtlNbr
	 *	@return hldInvnCtlNbr
	 */
   public char[] getHldInvnCtlNbr() throws CFException  {              
   		return holdArea.getHldInvnCtlNbr();
   }

  
	/**
	*  set variable hldInvnCtlNbr
	*  @param value
	**/
   public void setHldInvnCtlNbr(char[] value) throws CFException {
      holdArea.setHldInvnCtlNbr(value);
   } 

     /**
	 * 	Update HldInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHldInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      holdArea.setHldInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setHldInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      holdArea.setHldInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HldInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHldInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HldInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setHldInvnCtlNbr(Field source) {
      holdArea.setHldInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update HldInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHldInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      holdArea.setHldInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HldInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHldInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hldLstCharVal
	 *	@return hldLstCharVal
	 */
   public char[] getHldLstCharVal() throws CFException  {              
   		return holdArea.getHldLstCharVal();
   }

  
	/**
	*  set variable hldLstCharVal
	*  @param value
	**/
   public void setHldLstCharVal(char[] value) throws CFException {
      holdArea.setHldLstCharVal(value);
   } 

     /**
	 * 	Update HldLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHldLstCharVal(char[] source, int sourceIndex) throws CFException {
      holdArea.setHldLstCharVal(source, sourceIndex);
   	
   }
   
   public void setHldLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      holdArea.setHldLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HldLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHldLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HldLstCharVal with another Field
	 *	@param value
	 */
   public void setHldLstCharVal(Field source) {
      holdArea.setHldLstCharVal(source);
   }  
   
     /**
	 * 	Update HldLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHldLstCharVal(Field source, int sourceIndex,int sourceLen) {
      holdArea.setHldLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HldLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHldLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaSub
	 *	@return hvaSub
	 */
	public short getHvaSub() throws CFException {        
   		return hvaClmHistArray.getHvaSub();
	}
	
	/**
	 * 	Update HvaSub with the passed value
	 *	@param number
	 */
	public void setHvaSub(short number)  throws CFException{
		hvaClmHistArray.setHvaSub(number);
	}

	public void setHvaSub(int number)  throws CFException{
		hvaClmHistArray.setHvaSub((short)number);
	}

	public void setHvaSub(long number)  throws CFException{
		hvaClmHistArray.setHvaSub((short)number);
	}



	/**
	 *	Returns the value of hldProcDt
	 *	@return hldProcDt
	 */
   public char[] getHldProcDt() throws CFException  {              
   		return holdArea.getHldProcDt();
   }

  
	/**
	*  set variable hldProcDt
	*  @param value
	**/
   public void setHldProcDt(char[] value) throws CFException {
      holdArea.setHldProcDt(value);
   } 

     /**
	 * 	Update HldProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHldProcDt(char[] source, int sourceIndex) throws CFException {
      holdArea.setHldProcDt(source, sourceIndex);
   	
   }
   
   public void setHldProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      holdArea.setHldProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HldProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHldProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HldProcDt with another Field
	 *	@param value
	 */
   public void setHldProcDt(Field source) {
      holdArea.setHldProcDt(source);
   }  
   
     /**
	 * 	Update HldProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHldProcDt(Field source, int sourceIndex,int sourceLen) {
      holdArea.setHldProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HldProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHldProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of headerCt
	 *	@return headerCt
	 */
	public short getHeaderCt() throws CFException {        
   		return work.getHeaderCt();
	}
	
	/**
	 * 	Update HeaderCt with the passed value
	 *	@param number
	 */
	public void setHeaderCt(short number)  throws CFException{
		work.setHeaderCt(number);
	}

	public void setHeaderCt(int number)  throws CFException{
		work.setHeaderCt((short)number);
	}

	public void setHeaderCt(long number)  throws CFException{
		work.setHeaderCt((short)number);
	}



	/**
	 *	Returns the value of hldIcnSufxVersNbr
	 *	@return hldIcnSufxVersNbr
	 */
	public short getHldIcnSufxVersNbr() throws CFException {        
   		return holdArea.getHldIcnSufxVersNbr();
	}
	
	/**
	 * 	Update HldIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHldIcnSufxVersNbr(short number)  throws CFException{
		holdArea.setHldIcnSufxVersNbr(number);
	}

	public void setHldIcnSufxVersNbr(int number)  throws CFException{
		holdArea.setHldIcnSufxVersNbr((short)number);
	}

	public void setHldIcnSufxVersNbr(long number)  throws CFException{
		holdArea.setHldIcnSufxVersNbr((short)number);
	}



	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaTransCd
	 *	@return hvaTransCd
	 */
   public char[] getHvaTransCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTransCd(index);
   }

  
	/**
	*  set variable hvaTransCd
	*  @param value
	**/
   public void setHvaTransCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTransCd((index),value);
   } 

	/**
	 *	Returns the value of hldIcnSufxCd
	 *	@return hldIcnSufxCd
	 */
   public char[] getHldIcnSufxCd() throws CFException  {              
   		return holdArea.getHldIcnSufxCd();
   }

  
	/**
	*  set variable hldIcnSufxCd
	*  @param value
	**/
   public void setHldIcnSufxCd(char[] value) throws CFException {
      holdArea.setHldIcnSufxCd(value);
   } 

     /**
	 * 	Update HldIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHldIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      holdArea.setHldIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setHldIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      holdArea.setHldIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HldIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHldIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HldIcnSufxCd with another Field
	 *	@param value
	 */
   public void setHldIcnSufxCd(Field source) {
      holdArea.setHldIcnSufxCd(source);
   }  
   
     /**
	 * 	Update HldIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHldIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      holdArea.setHldIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HldIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHldIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hldProcTm
	 *	@return hldProcTm
	 */
   public char[] getHldProcTm() throws CFException  {              
   		return holdArea.getHldProcTm();
   }

  
	/**
	*  set variable hldProcTm
	*  @param value
	**/
   public void setHldProcTm(char[] value) throws CFException {
      holdArea.setHldProcTm(value);
   } 

     /**
	 * 	Update HldProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHldProcTm(char[] source, int sourceIndex) throws CFException {
      holdArea.setHldProcTm(source, sourceIndex);
   	
   }
   
   public void setHldProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      holdArea.setHldProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HldProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHldProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HldProcTm with another Field
	 *	@param value
	 */
   public void setHldProcTm(Field source) {
      holdArea.setHldProcTm(source);
   }  
   
     /**
	 * 	Update HldProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHldProcTm(Field source, int sourceIndex,int sourceLen) {
      holdArea.setHldProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HldProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHldProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public WriteClmDataSectOutCtx getWriteClmDataSectOutCtx() {
            return new WriteClmDataSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1ClmContainer.hashCode();
        str += holdArea.hashCode();
        str += work.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public WriteClmDataSectInCtx clone() {
        WriteClmDataSectInCtx cloneObj = new WriteClmDataSectInCtx();
        cloneObj.dt1ClmContainer = new Dt1ClmContainer();
        cloneObj.dt1ClmContainer.set(dt1ClmContainer.getClonedField());
        cloneObj.holdArea = new HoldArea();
        cloneObj.holdArea.set(holdArea.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public WriteClmDataSectInCtx getWriteClmDataSectInCtx() {
            return new WriteClmDataSectInCtx();
    }
     public class WriteClmDataSectOutCtx implements Cloneable {
     Dt1ClmContainer dt1ClmContainer = D5427dt1Ctx.this.getDt1ClmContainer();
     HoldArea holdArea = D5427dt1Ctx.this.getHoldArea();
     Work work = D5427dt1Ctx.this.getWork();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of recType
	 *	@return recType
	 */
   public char[] getRecType() throws CFException  {              
   		return work.getRecType();
   }

  
	/**
	*  set variable recType
	*  @param value
	**/
   public void setRecType(char[] value) throws CFException {
      work.setRecType(value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Test condition "N" for isDiffrntVerNotFound()
	 *	@return  Returns true if isDiffrntVerNotFound() is "N"
	 */
   public boolean isDiffrntVerNotFound() throws CFException {
      return work.isDiffrntVerNotFound();
   }

	/**
	*  set values "N"
	*/
   	public void setDiffrntVerNotFoundTrue()  throws CFException{  			
    	work.setDiffrntVerNotFoundTrue();
   	}
	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hldInvnCtlNbr
	 *	@return hldInvnCtlNbr
	 */
   public char[] getHldInvnCtlNbr() throws CFException  {              
   		return holdArea.getHldInvnCtlNbr();
   }

  
	/**
	*  set variable hldInvnCtlNbr
	*  @param value
	**/
   public void setHldInvnCtlNbr(char[] value) throws CFException {
      holdArea.setHldInvnCtlNbr(value);
   } 

     /**
	 * 	Update HldInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHldInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      holdArea.setHldInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setHldInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      holdArea.setHldInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HldInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHldInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HldInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setHldInvnCtlNbr(Field source) {
      holdArea.setHldInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update HldInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHldInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      holdArea.setHldInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HldInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHldInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hldLstCharVal
	 *	@return hldLstCharVal
	 */
   public char[] getHldLstCharVal() throws CFException  {              
   		return holdArea.getHldLstCharVal();
   }

  
	/**
	*  set variable hldLstCharVal
	*  @param value
	**/
   public void setHldLstCharVal(char[] value) throws CFException {
      holdArea.setHldLstCharVal(value);
   } 

     /**
	 * 	Update HldLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHldLstCharVal(char[] source, int sourceIndex) throws CFException {
      holdArea.setHldLstCharVal(source, sourceIndex);
   	
   }
   
   public void setHldLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      holdArea.setHldLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HldLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHldLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HldLstCharVal with another Field
	 *	@param value
	 */
   public void setHldLstCharVal(Field source) {
      holdArea.setHldLstCharVal(source);
   }  
   
     /**
	 * 	Update HldLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHldLstCharVal(Field source, int sourceIndex,int sourceLen) {
      holdArea.setHldLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HldLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHldLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hldProcDt
	 *	@return hldProcDt
	 */
   public char[] getHldProcDt() throws CFException  {              
   		return holdArea.getHldProcDt();
   }

  
	/**
	*  set variable hldProcDt
	*  @param value
	**/
   public void setHldProcDt(char[] value) throws CFException {
      holdArea.setHldProcDt(value);
   } 

     /**
	 * 	Update HldProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHldProcDt(char[] source, int sourceIndex) throws CFException {
      holdArea.setHldProcDt(source, sourceIndex);
   	
   }
   
   public void setHldProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      holdArea.setHldProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HldProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHldProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HldProcDt with another Field
	 *	@param value
	 */
   public void setHldProcDt(Field source) {
      holdArea.setHldProcDt(source);
   }  
   
     /**
	 * 	Update HldProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHldProcDt(Field source, int sourceIndex,int sourceLen) {
      holdArea.setHldProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HldProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHldProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	/**
	 *	Returns the value of holdArea
	 *	@return holdArea
	 */   
	 public HoldArea getHoldArea() {
   	return holdArea;
   }


	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of headerCt
	 *	@return headerCt
	 */
	public short getHeaderCt() throws CFException {        
   		return work.getHeaderCt();
	}
	
	/**
	 * 	Update HeaderCt with the passed value
	 *	@param number
	 */
	public void setHeaderCt(short number)  throws CFException{
		work.setHeaderCt(number);
	}

	public void setHeaderCt(int number)  throws CFException{
		work.setHeaderCt((short)number);
	}

	public void setHeaderCt(long number)  throws CFException{
		work.setHeaderCt((short)number);
	}



	/**
	 *	Returns the value of dt1ClmHeaderCt
	 *	@return dt1ClmHeaderCt
	 */
	public int getDt1ClmHeaderCt(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmHeaderCt();
	}


	/**
	 *	Returns String value of dt1ClmHeaderCt
	 *	@return dt1ClmHeaderCt
	 */
	public char[]  getDt1ClmHeaderCtString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmHeaderCtString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmHeaderCtIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmHeaderCtIsNumeric();
	}

	/**
	 * 	Update Dt1ClmHeaderCt with the passed value
	 *	@param number
	 */
	public void setDt1ClmHeaderCt(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(number);
	}
	

	public void setDt1ClmHeaderCt(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(number);
	}
	
	
	/**
	 * 	Update Dt1ClmHeaderCt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmHeaderCt(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(value);
	}
	
	/**
	 * 	Update Dt1ClmHeaderCt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmHeaderCtString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(value);
	}	

	/**
	 *	Test condition "Y" for isDiffrntVerFound()
	 *	@return  Returns true if isDiffrntVerFound() is "Y"
	 */
   public boolean isDiffrntVerFound() throws CFException {
      return work.isDiffrntVerFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setDiffrntVerFoundTrue()  throws CFException{  			
    	work.setDiffrntVerFoundTrue();
   	}
	/**
	 *	Returns the value of hldIcnSufxVersNbr
	 *	@return hldIcnSufxVersNbr
	 */
	public short getHldIcnSufxVersNbr() throws CFException {        
   		return holdArea.getHldIcnSufxVersNbr();
	}
	
	/**
	 * 	Update HldIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHldIcnSufxVersNbr(short number)  throws CFException{
		holdArea.setHldIcnSufxVersNbr(number);
	}

	public void setHldIcnSufxVersNbr(int number)  throws CFException{
		holdArea.setHldIcnSufxVersNbr((short)number);
	}

	public void setHldIcnSufxVersNbr(long number)  throws CFException{
		holdArea.setHldIcnSufxVersNbr((short)number);
	}



	/**
	 *	Returns the value of payeeCode
	 *	@return payeeCode
	 */
   public char[] getPayeeCode() throws CFException  {              
   		return work.getPayeeCode();
   }

  
	/**
	*  set variable payeeCode
	*  @param value
	**/
   public void setPayeeCode(char[] value) throws CFException {
      work.setPayeeCode(value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hldIcnSufxCd
	 *	@return hldIcnSufxCd
	 */
   public char[] getHldIcnSufxCd() throws CFException  {              
   		return holdArea.getHldIcnSufxCd();
   }

  
	/**
	*  set variable hldIcnSufxCd
	*  @param value
	**/
   public void setHldIcnSufxCd(char[] value) throws CFException {
      holdArea.setHldIcnSufxCd(value);
   } 

     /**
	 * 	Update HldIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHldIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      holdArea.setHldIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setHldIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      holdArea.setHldIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HldIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHldIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HldIcnSufxCd with another Field
	 *	@param value
	 */
   public void setHldIcnSufxCd(Field source) {
      holdArea.setHldIcnSufxCd(source);
   }  
   
     /**
	 * 	Update HldIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHldIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      holdArea.setHldIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HldIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHldIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hldProcTm
	 *	@return hldProcTm
	 */
   public char[] getHldProcTm() throws CFException  {              
   		return holdArea.getHldProcTm();
   }

  
	/**
	*  set variable hldProcTm
	*  @param value
	**/
   public void setHldProcTm(char[] value) throws CFException {
      holdArea.setHldProcTm(value);
   } 

     /**
	 * 	Update HldProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHldProcTm(char[] source, int sourceIndex) throws CFException {
      holdArea.setHldProcTm(source, sourceIndex);
   	
   }
   
   public void setHldProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      holdArea.setHldProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HldProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHldProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HldProcTm with another Field
	 *	@param value
	 */
   public void setHldProcTm(Field source) {
      holdArea.setHldProcTm(source);
   }  
   
     /**
	 * 	Update HldProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHldProcTm(Field source, int sourceIndex,int sourceLen) {
      holdArea.setHldProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HldProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHldProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      holdArea.setHldProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1ClmContainer.hashCode();
        str += holdArea.hashCode();
        str += work.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public WriteClmDataSectOutCtx clone() {
        WriteClmDataSectOutCtx cloneObj = new WriteClmDataSectOutCtx();
        cloneObj.dt1ClmContainer = new Dt1ClmContainer();
        cloneObj.dt1ClmContainer.set(dt1ClmContainer.getClonedField());
        cloneObj.holdArea = new HoldArea();
        cloneObj.holdArea.set(holdArea.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public WriteClmDataSectOutCtx getWriteClmDataSectOutCtx() {
            return new WriteClmDataSectOutCtx();
    }
     public class MoveClaimDataSectInCtx implements Cloneable {
     Dt1ClmContainer dt1ClmContainer = D5427dt1Ctx.this.getDt1ClmContainer();
     Chrdate chrdate = D5427dt1Ctx.this.getChrdate();
     Work work = D5427dt1Ctx.this.getWork();
     FormattedDateGroup formattedDateGroup = D5427dt1Ctx.this.getFormattedDateGroup();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaSub
	 *	@return hvaSub
	 */
	public short getHvaSub() throws CFException {        
   		return hvaClmHistArray.getHvaSub();
	}
	
	/**
	 * 	Update HvaSub with the passed value
	 *	@param number
	 */
	public void setHvaSub(short number)  throws CFException{
		hvaClmHistArray.setHvaSub(number);
	}

	public void setHvaSub(int number)  throws CFException{
		hvaClmHistArray.setHvaSub((short)number);
	}

	public void setHvaSub(long number)  throws CFException{
		hvaClmHistArray.setHvaSub((short)number);
	}



	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of dt1ClmProcDt
	 *	@return dt1ClmProcDt
	 */
   public char[] getDt1ClmProcDt(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProcDt();
   }

  
	/**
	*  set variable dt1ClmProcDt
	*  @param value
	**/
   public void setDt1ClmProcDt(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(value);
   } 

     /**
	 * 	Update Dt1ClmProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex);
   	
   }
   
   public void setDt1ClmProcDt(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmProcDt with another Field
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source);
   }  
   
     /**
	 * 	Update Dt1ClmProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaSub2
	 *	@return hvaSub2
	 */
	public short getHvaSub2() throws CFException {        
   		return hvaClmHistArray.getHvaSub2();
	}
	
	/**
	 * 	Update HvaSub2 with the passed value
	 *	@param number
	 */
	public void setHvaSub2(short number)  throws CFException{
		hvaClmHistArray.setHvaSub2(number);
	}

	public void setHvaSub2(int number)  throws CFException{
		hvaClmHistArray.setHvaSub2((short)number);
	}

	public void setHvaSub2(long number)  throws CFException{
		hvaClmHistArray.setHvaSub2((short)number);
	}



	/**
	 *	Returns the value of hvaMskNullInd
	 *	@return hvaMskNullInd
	 */
	public short getHvaMskNullInd(int index) throws CFException {        
   		return hvaClmHistArray.getHvaMskNullInd((index));
	}
	
	/**
	 * 	Update HvaMskNullInd with the passed value
	 *	@param number
	 */
	public void setHvaMskNullInd(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),number);
	}

	public void setHvaMskNullInd(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}

	public void setHvaMskNullInd(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}



	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktNbr
	 *	@return hvaProvMktNbr
	 */
   public char[] getHvaProvMktNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktNbr(index);
   }

  
	/**
	*  set variable hvaProvMktNbr
	*  @param value
	**/
   public void setHvaProvMktNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	/**
	 *	Returns the value of dt1ClmProviderPrefix
	 *	@return dt1ClmProviderPrefix
	 */
	public int getDt1ClmProviderPrefix(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId().getDt1ClmProviderPrefix();
	}


	/**
	 *	Returns String value of dt1ClmProviderPrefix
	 *	@return dt1ClmProviderPrefix
	 */
	public char[]  getDt1ClmProviderPrefixString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId().getDt1ClmProviderPrefixString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmProviderPrefixIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).getDt1ClmProviderId().dt1ClmProviderPrefixIsNumeric();
	}

	/**
	 * 	Update Dt1ClmProviderPrefix with the passed value
	 *	@param number
	 */
	public void setDt1ClmProviderPrefix(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId().setDt1ClmProviderPrefix(number);
	}
	

	public void setDt1ClmProviderPrefix(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId().setDt1ClmProviderPrefix(number);
	}
	
	
	/**
	 * 	Update Dt1ClmProviderPrefix with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmProviderPrefix(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId().setDt1ClmProviderPrefix(value);
	}
	
	/**
	 * 	Update Dt1ClmProviderPrefix with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmProviderPrefixString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId().setDt1ClmProviderPrefix(value);
	}	

	/**
	 *	Returns the value of hvaPpoCd
	 *	@return hvaPpoCd
	 */
   public char[] getHvaPpoCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPpoCd(index);
   }

  
	/**
	*  set variable hvaPpoCd
	*  @param value
	**/
   public void setHvaPpoCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPpoCd((index),value);
   } 

	/**
	 *	Returns the value of dt1ClmFln
	 *	@return dt1ClmFln
	 */
	public long getDt1ClmFln(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFln();
	}


	/**
	 *	Returns String value of dt1ClmFln
	 *	@return dt1ClmFln
	 */
	public char[]  getDt1ClmFlnString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFlnString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmFlnIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmFlnIsNumeric();
	}

	/**
	 * 	Update Dt1ClmFln with the passed value
	 *	@param number
	 */
	public void setDt1ClmFln(int index,long number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(number);
	}
	

	
	/**
	 * 	Update Dt1ClmFln with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmFln(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(value);
	}
	
	/**
	 * 	Update Dt1ClmFln with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmFlnString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(value);
	}	

	/**
	 *	Returns the value of dt1ClmClaimItem
	 *	@return dt1ClmClaimItem
	 */   
	 public Dt1ClmClaimItem getDt1ClmClaimItem(int index) {
   	return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index);
   }

    public List<Dt1ClmClaimItem> getDt1ClmClaimItem() {
        return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem();
    }
   /**
	* 	Update Dt1ClmClaimItem with the passed value
	*	@param value
	*/
   public void setDt1ClmClaimItem(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().setDt1ClmClaimItem((index),value);
   }   


	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of formattedDate
	 *	@return formattedDate
	 */
   public char[] getFormattedDate() throws CFException  {              
   		return formattedDateGroup.getFormattedDate();
   }

  
	/**
	*  set variable formattedDate
	*  @param value
	**/
   public void setFormattedDate(char[] value) throws CFException {
      formattedDateGroup.setFormattedDate(value);
   } 

     /**
	 * 	Update FormattedDate 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFormattedDate(char[] source, int sourceIndex) throws CFException {
      formattedDateGroup.setFormattedDate(source, sourceIndex);
   	
   }
   
   public void setFormattedDate(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      formattedDateGroup.setFormattedDate(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FormattedDate 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFormattedDate(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      formattedDateGroup.setFormattedDate(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FormattedDate with another Field
	 *	@param value
	 */
   public void setFormattedDate(Field source) {
      formattedDateGroup.setFormattedDate(source);
   }  
   
     /**
	 * 	Update FormattedDate 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFormattedDate(Field source, int sourceIndex,int sourceLen) {
      formattedDateGroup.setFormattedDate(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FormattedDate 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFormattedDate(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      formattedDateGroup.setFormattedDate(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProvIpaId
	 *	@return hvaProvIpaId
	 */
   public char[] getHvaProvIpaId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvIpaId(index);
   }

  
	/**
	*  set variable hvaProvIpaId
	*  @param value
	**/
   public void setHvaProvIpaId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvIpaId((index),value);
   } 

	/**
	 *	Returns the value of hvaPmtSvcCd
	 *	@return hvaPmtSvcCd
	 */
   public char[] getHvaPmtSvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPmtSvcCd(index);
   }

  
	/**
	*  set variable hvaPmtSvcCd
	*  @param value
	**/
   public void setHvaPmtSvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPmtSvcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvEobNm
	 *	@return hvaProvEobNm
	 */
   public char[] getHvaProvEobNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvEobNm(index);
   }

  
	/**
	*  set variable hvaProvEobNm
	*  @param value
	**/
   public void setHvaProvEobNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvEobNm((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvPrdctCd
	 *	@return hvaProvPrdctCd
	 */
   public char[] getHvaProvPrdctCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvPrdctCd(index);
   }

  
	/**
	*  set variable hvaProvPrdctCd
	*  @param value
	**/
   public void setHvaProvPrdctCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvPrdctCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPrsCreatSrcCd
	 *	@return hvaPrsCreatSrcCd
	 */
   public char[] getHvaPrsCreatSrcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPrsCreatSrcCd(index);
   }

  
	/**
	*  set variable hvaPrsCreatSrcCd
	*  @param value
	**/
   public void setHvaPrsCreatSrcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPrsCreatSrcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of hvaOvrCd
	 *	@return hvaOvrCd
	 */
   public char[] getHvaOvrCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaOvrCd(index);
   }

  
	/**
	*  set variable hvaOvrCd
	*  @param value
	**/
   public void setHvaOvrCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaOvrCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktTypCd
	 *	@return hvaProvMktTypCd
	 */
   public char[] getHvaProvMktTypCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktTypCd(index);
   }

  
	/**
	*  set variable hvaProvMktTypCd
	*  @param value
	**/
   public void setHvaProvMktTypCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktTypCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public MoveClaimDataSectOutCtx getMoveClaimDataSectOutCtx() {
            return new MoveClaimDataSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1ClmContainer.hashCode();
        str += chrdate.hashCode();
        str += work.hashCode();
        str += formattedDateGroup.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public MoveClaimDataSectInCtx clone() {
        MoveClaimDataSectInCtx cloneObj = new MoveClaimDataSectInCtx();
        cloneObj.dt1ClmContainer = new Dt1ClmContainer();
        cloneObj.dt1ClmContainer.set(dt1ClmContainer.getClonedField());
        cloneObj.chrdate = new Chrdate();
        cloneObj.chrdate.set(chrdate.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.formattedDateGroup = new FormattedDateGroup();
        cloneObj.formattedDateGroup.set(formattedDateGroup.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public MoveClaimDataSectInCtx getMoveClaimDataSectInCtx() {
            return new MoveClaimDataSectInCtx();
    }
     public class MoveClaimDataSectOutCtx implements Cloneable {
     Dt1ClmContainer dt1ClmContainer = D5427dt1Ctx.this.getDt1ClmContainer();
     Chrdate chrdate = D5427dt1Ctx.this.getChrdate();
     Work work = D5427dt1Ctx.this.getWork();
     FormattedDateGroup formattedDateGroup = D5427dt1Ctx.this.getFormattedDateGroup();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of dt1ClmDraftNo
	 *	@return dt1ClmDraftNo
	 */
	public long getDt1ClmDraftNo(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmDraftNo();
	}


	/**
	 *	Returns String value of dt1ClmDraftNo
	 *	@return dt1ClmDraftNo
	 */
	public char[]  getDt1ClmDraftNoString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmDraftNoString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmDraftNoIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmDraftNoIsNumeric();
	}

	/**
	 * 	Update Dt1ClmDraftNo with the passed value
	 *	@param number
	 */
	public void setDt1ClmDraftNo(int index,long number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDraftNo(number);
	}
	

	
	/**
	 * 	Update Dt1ClmDraftNo with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmDraftNo(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDraftNo(value);
	}
	
	/**
	 * 	Update Dt1ClmDraftNo with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmDraftNoString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDraftNo(value);
	}	

	/**
	 *	Returns the value of dt1ClmProvSpclCd
	 *	@return dt1ClmProvSpclCd
	 */
   public char[] getDt1ClmProvSpclCd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProvSpclCd();
   }

  
	/**
	*  set variable dt1ClmProvSpclCd
	*  @param value
	**/
   public void setDt1ClmProvSpclCd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProvSpclCd(value);
   } 

     /**
	 * 	Update Dt1ClmProvSpclCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProvSpclCd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProvSpclCd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmProvSpclCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProvSpclCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProvSpclCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProvSpclCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProvSpclCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmProvSpclCd with another Field
	 *	@param value
	 */
   public void setDt1ClmProvSpclCd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProvSpclCd(source);
   }  
   
     /**
	 * 	Update Dt1ClmProvSpclCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmProvSpclCd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProvSpclCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmProvSpclCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProvSpclCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProvSpclCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmClmLevelRc
	 *	@return dt1ClmClmLevelRc
	 */
   public char[] getDt1ClmClmLevelRc(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmClmLevelRc();
   }

  
	/**
	*  set variable dt1ClmClmLevelRc
	*  @param value
	**/
   public void setDt1ClmClmLevelRc(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClmLevelRc(value);
   } 

     /**
	 * 	Update Dt1ClmClmLevelRc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmClmLevelRc(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClmLevelRc(source, sourceIndex);
   	
   }
   
   public void setDt1ClmClmLevelRc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClmLevelRc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmClmLevelRc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmClmLevelRc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClmLevelRc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmClmLevelRc with another Field
	 *	@param value
	 */
   public void setDt1ClmClmLevelRc(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClmLevelRc(source);
   }  
   
     /**
	 * 	Update Dt1ClmClmLevelRc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmClmLevelRc(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClmLevelRc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmClmLevelRc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmClmLevelRc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClmLevelRc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmAuthProcCd
	 *	@return dt1ClmAuthProcCd
	 */
   public char[] getDt1ClmAuthProcCd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmAuthProcCd();
   }

  
	/**
	*  set variable dt1ClmAuthProcCd
	*  @param value
	**/
   public void setDt1ClmAuthProcCd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthProcCd(value);
   } 

     /**
	 * 	Update Dt1ClmAuthProcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmAuthProcCd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthProcCd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmAuthProcCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthProcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmAuthProcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmAuthProcCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthProcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmAuthProcCd with another Field
	 *	@param value
	 */
   public void setDt1ClmAuthProcCd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthProcCd(source);
   }  
   
     /**
	 * 	Update Dt1ClmAuthProcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmAuthProcCd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthProcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmAuthProcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmAuthProcCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthProcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "I" for isDt1ClmProviderTierInn()
	 *	@return  Returns true if isDt1ClmProviderTierInn() is "I"
	 */
   public boolean isDt1ClmProviderTierInn(int index) throws CFException {
      return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).isDt1ClmProviderTierInn();
   }

	/**
	*  set values "I"
	*/
   	public void setDt1ClmProviderTierInnTrue(int index)  throws CFException{  			
    	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderTierInnTrue();
   	}
	/**
	 *	Returns the value of dt1ClmFlnFormatDt
	 *	@return dt1ClmFlnFormatDt
	 */
   public char[] getDt1ClmFlnFormatDt(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFlnFormatDt();
   }

  
	/**
	*  set variable dt1ClmFlnFormatDt
	*  @param value
	**/
   public void setDt1ClmFlnFormatDt(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFlnFormatDt(value);
   } 

     /**
	 * 	Update Dt1ClmFlnFormatDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmFlnFormatDt(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFlnFormatDt(source, sourceIndex);
   	
   }
   
   public void setDt1ClmFlnFormatDt(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFlnFormatDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmFlnFormatDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmFlnFormatDt(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFlnFormatDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmFlnFormatDt with another Field
	 *	@param value
	 */
   public void setDt1ClmFlnFormatDt(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFlnFormatDt(source);
   }  
   
     /**
	 * 	Update Dt1ClmFlnFormatDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmFlnFormatDt(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFlnFormatDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmFlnFormatDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmFlnFormatDt(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFlnFormatDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Test condition "Y" for isDt1ClmClosed()
	 *	@return  Returns true if isDt1ClmClosed() is "Y"
	 */
   public boolean isDt1ClmClosed(int index) throws CFException {
      return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmClaimStatus().isDt1ClmClosed();
   }

	/**
	*  set values "Y"
	*/
   	public void setDt1ClmClosedTrue(int index)  throws CFException{  			
    	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmClaimStatus().setDt1ClmClosedTrue();
   	}
	/**
	 *	Returns the value of dt1ClmPtntRespAmt
	 *	@return dt1ClmPtntRespAmt
	 */
   public char[] getDt1ClmPtntRespAmt(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmPtntRespAmt();
   }

  
	/**
	*  set variable dt1ClmPtntRespAmt
	*  @param value
	**/
   public void setDt1ClmPtntRespAmt(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPtntRespAmt(value);
   } 

     /**
	 * 	Update Dt1ClmPtntRespAmt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmPtntRespAmt(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPtntRespAmt(source, sourceIndex);
   	
   }
   
   public void setDt1ClmPtntRespAmt(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPtntRespAmt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmPtntRespAmt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmPtntRespAmt(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPtntRespAmt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmPtntRespAmt with another Field
	 *	@param value
	 */
   public void setDt1ClmPtntRespAmt(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPtntRespAmt(source);
   }  
   
     /**
	 * 	Update Dt1ClmPtntRespAmt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmPtntRespAmt(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPtntRespAmt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmPtntRespAmt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmPtntRespAmt(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPtntRespAmt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmSmbAppCd
	 *	@return dt1ClmSmbAppCd
	 */
   public char[] getDt1ClmSmbAppCd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmSmbAppCd();
   }

  
	/**
	*  set variable dt1ClmSmbAppCd
	*  @param value
	**/
   public void setDt1ClmSmbAppCd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSmbAppCd(value);
   } 

     /**
	 * 	Update Dt1ClmSmbAppCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmSmbAppCd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSmbAppCd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmSmbAppCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSmbAppCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmSmbAppCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmSmbAppCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSmbAppCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmSmbAppCd with another Field
	 *	@param value
	 */
   public void setDt1ClmSmbAppCd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSmbAppCd(source);
   }  
   
     /**
	 * 	Update Dt1ClmSmbAppCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmSmbAppCd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSmbAppCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmSmbAppCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmSmbAppCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSmbAppCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of payeeCode
	 *	@return payeeCode
	 */
   public char[] getPayeeCode() throws CFException  {              
   		return work.getPayeeCode();
   }

  
	/**
	*  set variable payeeCode
	*  @param value
	**/
   public void setPayeeCode(char[] value) throws CFException {
      work.setPayeeCode(value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of dt1ClmChargeAmount
	 *	@return dt1ClmChargeAmount
	 */
   public char[] getDt1ClmChargeAmount(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmChargeAmount();
   }

  
	/**
	*  set variable dt1ClmChargeAmount
	*  @param value
	**/
   public void setDt1ClmChargeAmount(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmChargeAmount(value);
   } 

     /**
	 * 	Update Dt1ClmChargeAmount 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmChargeAmount(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmChargeAmount(source, sourceIndex);
   	
   }
   
   public void setDt1ClmChargeAmount(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmChargeAmount(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmChargeAmount 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmChargeAmount(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmChargeAmount(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmChargeAmount with another Field
	 *	@param value
	 */
   public void setDt1ClmChargeAmount(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmChargeAmount(source);
   }  
   
     /**
	 * 	Update Dt1ClmChargeAmount 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmChargeAmount(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmChargeAmount(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmChargeAmount 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmChargeAmount(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmChargeAmount(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmDlgteInd
	 *	@return dt1ClmDlgteInd
	 */
   public char[] getDt1ClmDlgteInd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmDlgteInd();
   }

  
	/**
	*  set variable dt1ClmDlgteInd
	*  @param value
	**/
   public void setDt1ClmDlgteInd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDlgteInd(value);
   } 

     /**
	 * 	Update Dt1ClmDlgteInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmDlgteInd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDlgteInd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmDlgteInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDlgteInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmDlgteInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmDlgteInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDlgteInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmDlgteInd with another Field
	 *	@param value
	 */
   public void setDt1ClmDlgteInd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDlgteInd(source);
   }  
   
     /**
	 * 	Update Dt1ClmDlgteInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmDlgteInd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDlgteInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmDlgteInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmDlgteInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDlgteInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmDeductibleAmount
	 *	@return dt1ClmDeductibleAmount
	 */
   public char[] getDt1ClmDeductibleAmount(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmDeductibleAmount();
   }

  
	/**
	*  set variable dt1ClmDeductibleAmount
	*  @param value
	**/
   public void setDt1ClmDeductibleAmount(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDeductibleAmount(value);
   } 

     /**
	 * 	Update Dt1ClmDeductibleAmount 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmDeductibleAmount(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDeductibleAmount(source, sourceIndex);
   	
   }
   
   public void setDt1ClmDeductibleAmount(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDeductibleAmount(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmDeductibleAmount 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmDeductibleAmount(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDeductibleAmount(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmDeductibleAmount with another Field
	 *	@param value
	 */
   public void setDt1ClmDeductibleAmount(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDeductibleAmount(source);
   }  
   
     /**
	 * 	Update Dt1ClmDeductibleAmount 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmDeductibleAmount(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDeductibleAmount(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmDeductibleAmount 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmDeductibleAmount(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDeductibleAmount(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmProcDt
	 *	@return dt1ClmProcDt
	 */
   public char[] getDt1ClmProcDt(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProcDt();
   }

  
	/**
	*  set variable dt1ClmProcDt
	*  @param value
	**/
   public void setDt1ClmProcDt(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(value);
   } 

     /**
	 * 	Update Dt1ClmProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex);
   	
   }
   
   public void setDt1ClmProcDt(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmProcDt with another Field
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source);
   }  
   
     /**
	 * 	Update Dt1ClmProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmAdjNbr
	 *	@return dt1ClmAdjNbr
	 */
	public int getDt1ClmAdjNbr(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmAdjNbr();
	}

    /**
	 *	Returns the String value of dt1ClmAdjNbr
	 *	@return dt1ClmAdjNbr
	 */
	public char[]  getDt1ClmAdjNbrActualString(int index) {
		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).getDt1ClmAdjNbrActualString();
	}

	/**
	 *	Returns String value of dt1ClmAdjNbr
	 *	@return dt1ClmAdjNbr
	 */
	public char[]  getDt1ClmAdjNbrString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmAdjNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmAdjNbrIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmAdjNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ClmAdjNbr with the passed value
	 *	@param number
	 */
	public void setDt1ClmAdjNbr(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjNbr(number);
	}
	

	public void setDt1ClmAdjNbr(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ClmAdjNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmAdjNbr(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjNbr(value);
	}
	
	/**
	 * 	Update Dt1ClmAdjNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmAdjNbrString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjNbr(value);
	}	

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Test condition "Y" for isDt1ClmRejected()
	 *	@return  Returns true if isDt1ClmRejected() is "Y"
	 */
   public boolean isDt1ClmRejected(int index) throws CFException {
      return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmClaimStatus().isDt1ClmRejected();
   }

	/**
	*  set values "Y"
	*/
   	public void setDt1ClmRejectedTrue(int index)  throws CFException{  			
    	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmClaimStatus().setDt1ClmRejectedTrue();
   	}
	/**
	 *	Returns the value of hvaSub2
	 *	@return hvaSub2
	 */
	public short getHvaSub2() throws CFException {        
   		return hvaClmHistArray.getHvaSub2();
	}
	
	/**
	 * 	Update HvaSub2 with the passed value
	 *	@param number
	 */
	public void setHvaSub2(short number)  throws CFException{
		hvaClmHistArray.setHvaSub2(number);
	}

	public void setHvaSub2(int number)  throws CFException{
		hvaClmHistArray.setHvaSub2((short)number);
	}

	public void setHvaSub2(long number)  throws CFException{
		hvaClmHistArray.setHvaSub2((short)number);
	}



	/**
	 *	Returns the value of dt1ClmNonParInd
	 *	@return dt1ClmNonParInd
	 */
   public char[] getDt1ClmNonParInd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmNonParInd();
   }

  
	/**
	*  set variable dt1ClmNonParInd
	*  @param value
	**/
   public void setDt1ClmNonParInd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmNonParInd(value);
   } 

     /**
	 * 	Update Dt1ClmNonParInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmNonParInd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmNonParInd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmNonParInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmNonParInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmNonParInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmNonParInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmNonParInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmNonParInd with another Field
	 *	@param value
	 */
   public void setDt1ClmNonParInd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmNonParInd(source);
   }  
   
     /**
	 * 	Update Dt1ClmNonParInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmNonParInd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmNonParInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmNonParInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmNonParInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmNonParInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmClmPhiInd
	 *	@return dt1ClmClmPhiInd
	 */
   public char[] getDt1ClmClmPhiInd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmClmPhiInd();
   }

  
	/**
	*  set variable dt1ClmClmPhiInd
	*  @param value
	**/
   public void setDt1ClmClmPhiInd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClmPhiInd(value);
   } 

     /**
	 * 	Update Dt1ClmClmPhiInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmClmPhiInd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClmPhiInd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmClmPhiInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClmPhiInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmClmPhiInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmClmPhiInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClmPhiInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmClmPhiInd with another Field
	 *	@param value
	 */
   public void setDt1ClmClmPhiInd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClmPhiInd(source);
   }  
   
     /**
	 * 	Update Dt1ClmClmPhiInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmClmPhiInd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClmPhiInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmClmPhiInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmClmPhiInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClmPhiInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "0000000001" THRU "9999999999" "AA00000000" THRU "ZZ99999999" for isValidIcnNumValue10()
	 *	@return  Returns true if isValidIcnNumValue10() is "0000000001" THRU "9999999999" "AA00000000" THRU "ZZ99999999"
	 */
   public boolean isValidIcnNumValue10() throws CFException {
      return work.isValidIcnNumValue10();
   }

	/**
	*  set values "0000000001" THRU "9999999999" "AA00000000" THRU "ZZ99999999"
	*/
   	public void setValidIcnNumValue10True()  throws CFException{  			
    	work.setValidIcnNumValue10True();
   	}
	public BigDecimal getHvaBaseDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseDedAmt((index));
	}

    public char[] getHvaBaseDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseDedAmt((index),number);
   }

	/**
	 *	Returns the value of dt1ClmLastServiceDate
	 *	@return dt1ClmLastServiceDate
	 */
	public long getDt1ClmLastServiceDate(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmLastServiceDate();
	}


	/**
	 *	Returns String value of dt1ClmLastServiceDate
	 *	@return dt1ClmLastServiceDate
	 */
	public char[]  getDt1ClmLastServiceDateString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmLastServiceDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmLastServiceDateIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmLastServiceDateIsNumeric();
	}

	/**
	 * 	Update Dt1ClmLastServiceDate with the passed value
	 *	@param number
	 */
	public void setDt1ClmLastServiceDate(int index,long number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmLastServiceDate(number);
	}
	

	
	/**
	 * 	Update Dt1ClmLastServiceDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmLastServiceDate(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmLastServiceDate(value);
	}
	
	/**
	 * 	Update Dt1ClmLastServiceDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmLastServiceDateString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmLastServiceDate(value);
	}	

	/**
	 *	Returns the value of dt1ClmFirstServiceDate
	 *	@return dt1ClmFirstServiceDate
	 */
	public long getDt1ClmFirstServiceDate(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFirstServiceDate();
	}


	/**
	 *	Returns String value of dt1ClmFirstServiceDate
	 *	@return dt1ClmFirstServiceDate
	 */
	public char[]  getDt1ClmFirstServiceDateString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFirstServiceDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmFirstServiceDateIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmFirstServiceDateIsNumeric();
	}

	/**
	 * 	Update Dt1ClmFirstServiceDate with the passed value
	 *	@param number
	 */
	public void setDt1ClmFirstServiceDate(int index,long number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFirstServiceDate(number);
	}
	

	
	/**
	 * 	Update Dt1ClmFirstServiceDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmFirstServiceDate(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFirstServiceDate(value);
	}
	
	/**
	 * 	Update Dt1ClmFirstServiceDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmFirstServiceDateString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFirstServiceDate(value);
	}	

	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of dt1ClmAuthClmLevelInd
	 *	@return dt1ClmAuthClmLevelInd
	 */
   public char[] getDt1ClmAuthClmLevelInd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmAuthClmLevelInd();
   }

  
	/**
	*  set variable dt1ClmAuthClmLevelInd
	*  @param value
	**/
   public void setDt1ClmAuthClmLevelInd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthClmLevelInd(value);
   } 

     /**
	 * 	Update Dt1ClmAuthClmLevelInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmAuthClmLevelInd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthClmLevelInd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmAuthClmLevelInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthClmLevelInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmAuthClmLevelInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmAuthClmLevelInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthClmLevelInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmAuthClmLevelInd with another Field
	 *	@param value
	 */
   public void setDt1ClmAuthClmLevelInd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthClmLevelInd(source);
   }  
   
     /**
	 * 	Update Dt1ClmAuthClmLevelInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmAuthClmLevelInd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthClmLevelInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmAuthClmLevelInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmAuthClmLevelInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthClmLevelInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	public BigDecimal getHvaBaseAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseAmt((index));
	}

    public char[] getHvaBaseAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseAmt((index),number);
   }

	public BigDecimal getHvaCobCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCobCrResAmt((index));
	}

    public char[] getHvaCobCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCobCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCobCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaCobCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCobCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	public BigDecimal getHvaMmDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmDedAmt((index));
	}

    public char[] getHvaMmDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmDedAmt((index),number);
   }

	/**
	 *	Returns the value of dt1ClmAuthNbr
	 *	@return dt1ClmAuthNbr
	 */
   public char[] getDt1ClmAuthNbr(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmAuthNbr();
   }

  
	/**
	*  set variable dt1ClmAuthNbr
	*  @param value
	**/
   public void setDt1ClmAuthNbr(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthNbr(value);
   } 

     /**
	 * 	Update Dt1ClmAuthNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmAuthNbr(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthNbr(source, sourceIndex);
   	
   }
   
   public void setDt1ClmAuthNbr(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmAuthNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmAuthNbr(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmAuthNbr with another Field
	 *	@param value
	 */
   public void setDt1ClmAuthNbr(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthNbr(source);
   }  
   
     /**
	 * 	Update Dt1ClmAuthNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmAuthNbr(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmAuthNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmAuthNbr(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	public BigDecimal getHvaMcCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMcCrResAmt((index));
	}

    public char[] getHvaMcCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMcCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMcCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaMcCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMcCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of dt1ClmNdbContrId
	 *	@return dt1ClmNdbContrId
	 */
   public char[] getDt1ClmNdbContrId(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmNdbContrId();
   }

  
	/**
	*  set variable dt1ClmNdbContrId
	*  @param value
	**/
   public void setDt1ClmNdbContrId(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmNdbContrId(value);
   } 

     /**
	 * 	Update Dt1ClmNdbContrId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmNdbContrId(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmNdbContrId(source, sourceIndex);
   	
   }
   
   public void setDt1ClmNdbContrId(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmNdbContrId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmNdbContrId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmNdbContrId(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmNdbContrId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmNdbContrId with another Field
	 *	@param value
	 */
   public void setDt1ClmNdbContrId(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmNdbContrId(source);
   }  
   
     /**
	 * 	Update Dt1ClmNdbContrId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmNdbContrId(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmNdbContrId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmNdbContrId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmNdbContrId(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmNdbContrId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of dt1ClmProviderName
	 *	@return dt1ClmProviderName
	 */
   public char[] getDt1ClmProviderName(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderName();
   }

  
	/**
	*  set variable dt1ClmProviderName
	*  @param value
	**/
   public void setDt1ClmProviderName(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderName(value);
   } 

     /**
	 * 	Update Dt1ClmProviderName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProviderName(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderName(source, sourceIndex);
   	
   }
   
   public void setDt1ClmProviderName(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProviderName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProviderName(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmProviderName with another Field
	 *	@param value
	 */
   public void setDt1ClmProviderName(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderName(source);
   }  
   
     /**
	 * 	Update Dt1ClmProviderName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmProviderName(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmProviderName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProviderName(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmHospProfInd
	 *	@return dt1ClmHospProfInd
	 */
   public char[] getDt1ClmHospProfInd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmHospProfInd();
   }

  
	/**
	*  set variable dt1ClmHospProfInd
	*  @param value
	**/
   public void setDt1ClmHospProfInd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHospProfInd(value);
   } 

     /**
	 * 	Update Dt1ClmHospProfInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmHospProfInd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHospProfInd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmHospProfInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHospProfInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmHospProfInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmHospProfInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHospProfInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmHospProfInd with another Field
	 *	@param value
	 */
   public void setDt1ClmHospProfInd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHospProfInd(source);
   }  
   
     /**
	 * 	Update Dt1ClmHospProfInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmHospProfInd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHospProfInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmHospProfInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmHospProfInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHospProfInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	/**
	 *	Returns the value of dt1ClmDrgNbr
	 *	@return dt1ClmDrgNbr
	 */
   public char[] getDt1ClmDrgNbr(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmDrgNbr();
   }

  
	/**
	*  set variable dt1ClmDrgNbr
	*  @param value
	**/
   public void setDt1ClmDrgNbr(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDrgNbr(value);
   } 

     /**
	 * 	Update Dt1ClmDrgNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmDrgNbr(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDrgNbr(source, sourceIndex);
   	
   }
   
   public void setDt1ClmDrgNbr(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDrgNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmDrgNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmDrgNbr(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDrgNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmDrgNbr with another Field
	 *	@param value
	 */
   public void setDt1ClmDrgNbr(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDrgNbr(source);
   }  
   
     /**
	 * 	Update Dt1ClmDrgNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmDrgNbr(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDrgNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmDrgNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmDrgNbr(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDrgNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmAdjInd
	 *	@return dt1ClmAdjInd
	 */
   public char[] getDt1ClmAdjInd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmAdjInd();
   }

  
	/**
	*  set variable dt1ClmAdjInd
	*  @param value
	**/
   public void setDt1ClmAdjInd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjInd(value);
   } 

     /**
	 * 	Update Dt1ClmAdjInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmAdjInd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjInd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmAdjInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmAdjInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmAdjInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmAdjInd with another Field
	 *	@param value
	 */
   public void setDt1ClmAdjInd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjInd(source);
   }  
   
     /**
	 * 	Update Dt1ClmAdjInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmAdjInd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmAdjInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmAdjInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "O" for isDt1ClmProviderTierOon()
	 *	@return  Returns true if isDt1ClmProviderTierOon() is "O"
	 */
   public boolean isDt1ClmProviderTierOon(int index) throws CFException {
      return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).isDt1ClmProviderTierOon();
   }

	/**
	*  set values "O"
	*/
   	public void setDt1ClmProviderTierOonTrue(int index)  throws CFException{  			
    	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderTierOonTrue();
   	}
	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Test condition "Y" for isDt1ClmPended()
	 *	@return  Returns true if isDt1ClmPended() is "Y"
	 */
   public boolean isDt1ClmPended(int index) throws CFException {
      return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmClaimStatus().isDt1ClmPended();
   }

	/**
	*  set values "Y"
	*/
   	public void setDt1ClmPendedTrue(int index)  throws CFException{  			
    	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmClaimStatus().setDt1ClmPendedTrue();
   	}
	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaMmDedDescTxt
	 *	@return hvaMmDedDescTxt
	 */
   public char[] getHvaMmDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMmDedDescTxt(index);
   }

  
	/**
	*  set variable hvaMmDedDescTxt
	*  @param value
	**/
   public void setHvaMmDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMmDedDescTxt((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of dt1ClmT1ProcessInd
	 *	@return dt1ClmT1ProcessInd
	 */
   public char[] getDt1ClmT1ProcessInd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmT1ProcessInd();
   }

  
	/**
	*  set variable dt1ClmT1ProcessInd
	*  @param value
	**/
   public void setDt1ClmT1ProcessInd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmT1ProcessInd(value);
   } 

     /**
	 * 	Update Dt1ClmT1ProcessInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmT1ProcessInd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmT1ProcessInd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmT1ProcessInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmT1ProcessInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmT1ProcessInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmT1ProcessInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmT1ProcessInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmT1ProcessInd with another Field
	 *	@param value
	 */
   public void setDt1ClmT1ProcessInd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmT1ProcessInd(source);
   }  
   
     /**
	 * 	Update Dt1ClmT1ProcessInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmT1ProcessInd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmT1ProcessInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmT1ProcessInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmT1ProcessInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmT1ProcessInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 

	/**
	 *	Returns the value of dt1ClmFilmOffice
	 *	@return dt1ClmFilmOffice
	 */
	public int getDt1ClmFilmOffice(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFilmOffice();
	}


	/**
	 *	Returns String value of dt1ClmFilmOffice
	 *	@return dt1ClmFilmOffice
	 */
	public char[]  getDt1ClmFilmOfficeString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFilmOfficeString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmFilmOfficeIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmFilmOfficeIsNumeric();
	}

	/**
	 * 	Update Dt1ClmFilmOffice with the passed value
	 *	@param number
	 */
	public void setDt1ClmFilmOffice(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFilmOffice(number);
	}
	

	public void setDt1ClmFilmOffice(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFilmOffice(number);
	}
	
	
	/**
	 * 	Update Dt1ClmFilmOffice with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmFilmOffice(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFilmOffice(value);
	}
	
	/**
	 * 	Update Dt1ClmFilmOffice with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmFilmOfficeString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFilmOffice(value);
	}	

	/**
	 *	Test condition "T" for isDt1ClmProviderTierT1()
	 *	@return  Returns true if isDt1ClmProviderTierT1() is "T"
	 */
   public boolean isDt1ClmProviderTierT1(int index) throws CFException {
      return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).isDt1ClmProviderTierT1();
   }

	/**
	*  set values "T"
	*/
   	public void setDt1ClmProviderTierT1True(int index)  throws CFException{  			
    	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderTierT1True();
   	}
	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of dt1ClmAuthUniqueCnt
	 *	@return dt1ClmAuthUniqueCnt
	 */
	public int getDt1ClmAuthUniqueCnt(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmAuthUniqueCnt();
	}


	/**
	 *	Returns String value of dt1ClmAuthUniqueCnt
	 *	@return dt1ClmAuthUniqueCnt
	 */
	public char[]  getDt1ClmAuthUniqueCntString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmAuthUniqueCntString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmAuthUniqueCntIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmAuthUniqueCntIsNumeric();
	}

	/**
	 * 	Update Dt1ClmAuthUniqueCnt with the passed value
	 *	@param number
	 */
	public void setDt1ClmAuthUniqueCnt(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthUniqueCnt(number);
	}
	

	public void setDt1ClmAuthUniqueCnt(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthUniqueCnt(number);
	}
	
	
	/**
	 * 	Update Dt1ClmAuthUniqueCnt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmAuthUniqueCnt(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthUniqueCnt(value);
	}
	
	/**
	 * 	Update Dt1ClmAuthUniqueCnt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmAuthUniqueCntString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthUniqueCnt(value);
	}	

	public BigDecimal getHvaSupAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaSupAmt((index));
	}

    public char[] getHvaSupAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaSupAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaSupAmt with the passed number
	 *	@param number
	 */
	public void setHvaSupAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaSupAmt((index),number);
   }

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Test condition "N" for isInfoLineNo()
	 *	@return  Returns true if isInfoLineNo() is "N"
	 */
   public boolean isInfoLineNo() throws CFException {
      return work.isInfoLineNo();
   }

	/**
	*  set values "N"
	*/
   	public void setInfoLineNoTrue()  throws CFException{  			
    	work.setInfoLineNoTrue();
   	}
	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of dt1ClmPpoInd
	 *	@return dt1ClmPpoInd
	 */
   public char[] getDt1ClmPpoInd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmPpoInd();
   }

  
	/**
	*  set variable dt1ClmPpoInd
	*  @param value
	**/
   public void setDt1ClmPpoInd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPpoInd(value);
   } 

     /**
	 * 	Update Dt1ClmPpoInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmPpoInd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPpoInd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmPpoInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPpoInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmPpoInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmPpoInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPpoInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmPpoInd with another Field
	 *	@param value
	 */
   public void setDt1ClmPpoInd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPpoInd(source);
   }  
   
     /**
	 * 	Update Dt1ClmPpoInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmPpoInd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPpoInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmPpoInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmPpoInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPpoInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmSmbStCd
	 *	@return dt1ClmSmbStCd
	 */
   public char[] getDt1ClmSmbStCd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmSmbStCd();
   }

  
	/**
	*  set variable dt1ClmSmbStCd
	*  @param value
	**/
   public void setDt1ClmSmbStCd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSmbStCd(value);
   } 

     /**
	 * 	Update Dt1ClmSmbStCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmSmbStCd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSmbStCd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmSmbStCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSmbStCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmSmbStCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmSmbStCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSmbStCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmSmbStCd with another Field
	 *	@param value
	 */
   public void setDt1ClmSmbStCd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSmbStCd(source);
   }  
   
     /**
	 * 	Update Dt1ClmSmbStCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmSmbStCd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSmbStCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmSmbStCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmSmbStCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSmbStCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmParsWaivInd
	 *	@return dt1ClmParsWaivInd
	 */
   public char[] getDt1ClmParsWaivInd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmParsWaivInd();
   }

  
	/**
	*  set variable dt1ClmParsWaivInd
	*  @param value
	**/
   public void setDt1ClmParsWaivInd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmParsWaivInd(value);
   } 

     /**
	 * 	Update Dt1ClmParsWaivInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmParsWaivInd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmParsWaivInd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmParsWaivInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmParsWaivInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmParsWaivInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmParsWaivInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmParsWaivInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmParsWaivInd with another Field
	 *	@param value
	 */
   public void setDt1ClmParsWaivInd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmParsWaivInd(source);
   }  
   
     /**
	 * 	Update Dt1ClmParsWaivInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmParsWaivInd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmParsWaivInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmParsWaivInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmParsWaivInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmParsWaivInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of chrdateString
	 *	@return chrdateString
	 */
   public char[] getChrdateString() throws CFException  {              
   		return chrdate.getChrdateString();
   }

  
	/**
	*  set variable chrdateString
	*  @param value
	**/
   public void setChrdateString(char[] value) throws CFException {
      chrdate.setChrdateString(value);
   } 

     /**
	 * 	Update ChrdateString 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setChrdateString(char[] source, int sourceIndex) throws CFException {
      chrdate.setChrdateString(source, sourceIndex);
   	
   }
   
   public void setChrdateString(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      chrdate.setChrdateString(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update ChrdateString 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setChrdateString(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      chrdate.setChrdateString(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update ChrdateString with another Field
	 *	@param value
	 */
   public void setChrdateString(Field source) {
      chrdate.setChrdateString(source);
   }  
   
     /**
	 * 	Update ChrdateString 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setChrdateString(Field source, int sourceIndex,int sourceLen) {
      chrdate.setChrdateString(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update ChrdateString 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setChrdateString(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      chrdate.setChrdateString(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmProcTm
	 *	@return dt1ClmProcTm
	 */
   public char[] getDt1ClmProcTm(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProcTm();
   }

  
	/**
	*  set variable dt1ClmProcTm
	*  @param value
	**/
   public void setDt1ClmProcTm(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(value);
   } 

     /**
	 * 	Update Dt1ClmProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProcTm(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source, sourceIndex);
   	
   }
   
   public void setDt1ClmProcTm(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProcTm(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmProcTm with another Field
	 *	@param value
	 */
   public void setDt1ClmProcTm(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source);
   }  
   
     /**
	 * 	Update Dt1ClmProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmProcTm(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProcTm(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmParInd
	 *	@return dt1ClmParInd
	 */
   public char[] getDt1ClmParInd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmParInd();
   }

  
	/**
	*  set variable dt1ClmParInd
	*  @param value
	**/
   public void setDt1ClmParInd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmParInd(value);
   } 

     /**
	 * 	Update Dt1ClmParInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmParInd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmParInd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmParInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmParInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmParInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmParInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmParInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmParInd with another Field
	 *	@param value
	 */
   public void setDt1ClmParInd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmParInd(source);
   }  
   
     /**
	 * 	Update Dt1ClmParInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmParInd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmParInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmParInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmParInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmParInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of chrdateLength
	 *	@return chrdateLength
	 */
	public short getChrdateLength() throws CFException {        
   		return chrdate.getChrdateLength();
	}
	
	/**
	 * 	Update ChrdateLength with the passed value
	 *	@param number
	 */
	public void setChrdateLength(short number)  throws CFException{
		chrdate.setChrdateLength(number);
	}

	public void setChrdateLength(int number)  throws CFException{
		chrdate.setChrdateLength((short)number);
	}

	public void setChrdateLength(long number)  throws CFException{
		chrdate.setChrdateLength((short)number);
	}



	/**
	 *	Returns the value of dt1ClmClaimStatus
	 *	@return dt1ClmClaimStatus
	 */   
	 public Dt1ClmClaimStatus getDt1ClmClaimStatus(int index) {
   	return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmClaimStatus();
   }

   /**
	* 	Update Dt1ClmClaimStatus with the passed value
	*	@param value
	*/
   public void setDt1ClmClaimStatus(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClaimStatus(value);
   }   

     /**
	 * 	Update Dt1ClmClaimStatus 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmClaimStatus(int index,char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClaimStatus(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmClaimStatus 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmClaimStatus(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClaimStatus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmClaimStatus with another Field
	 *	@param value
	 */
   public void setDt1ClmClaimStatus(int index,Field source) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClaimStatus(source);
   }  
   
     /**
	 * 	Update Dt1ClmClaimStatus 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmClaimStatus(int index,Field source, int sourceIndex,int sourceLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClaimStatus(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmClaimStatus 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmClaimStatus(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmClaimStatus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmProviderPrefix
	 *	@return dt1ClmProviderPrefix
	 */
	public int getDt1ClmProviderPrefix(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId().getDt1ClmProviderPrefix();
	}


	/**
	 *	Returns String value of dt1ClmProviderPrefix
	 *	@return dt1ClmProviderPrefix
	 */
	public char[]  getDt1ClmProviderPrefixString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId().getDt1ClmProviderPrefixString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmProviderPrefixIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).getDt1ClmProviderId().dt1ClmProviderPrefixIsNumeric();
	}

	/**
	 * 	Update Dt1ClmProviderPrefix with the passed value
	 *	@param number
	 */
	public void setDt1ClmProviderPrefix(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId().setDt1ClmProviderPrefix(number);
	}
	

	public void setDt1ClmProviderPrefix(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId().setDt1ClmProviderPrefix(number);
	}
	
	
	/**
	 * 	Update Dt1ClmProviderPrefix with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmProviderPrefix(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId().setDt1ClmProviderPrefix(value);
	}
	
	/**
	 * 	Update Dt1ClmProviderPrefix with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmProviderPrefixString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId().setDt1ClmProviderPrefix(value);
	}	

	/**
	 *	Returns the value of dt1ClmFln
	 *	@return dt1ClmFln
	 */
	public long getDt1ClmFln(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFln();
	}


	/**
	 *	Returns String value of dt1ClmFln
	 *	@return dt1ClmFln
	 */
	public char[]  getDt1ClmFlnString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFlnString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmFlnIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmFlnIsNumeric();
	}

	/**
	 * 	Update Dt1ClmFln with the passed value
	 *	@param number
	 */
	public void setDt1ClmFln(int index,long number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(number);
	}
	

	
	/**
	 * 	Update Dt1ClmFln with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmFln(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(value);
	}
	
	/**
	 * 	Update Dt1ClmFln with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmFlnString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(value);
	}	

	/**
	 *	Returns the value of dt1ClmTpsmCd
	 *	@return dt1ClmTpsmCd
	 */
   public char[] getDt1ClmTpsmCd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmTpsmCd();
   }

  
	/**
	*  set variable dt1ClmTpsmCd
	*  @param value
	**/
   public void setDt1ClmTpsmCd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmTpsmCd(value);
   } 

     /**
	 * 	Update Dt1ClmTpsmCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmTpsmCd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmTpsmCd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmTpsmCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmTpsmCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmTpsmCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmTpsmCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmTpsmCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmTpsmCd with another Field
	 *	@param value
	 */
   public void setDt1ClmTpsmCd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmTpsmCd(source);
   }  
   
     /**
	 * 	Update Dt1ClmTpsmCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmTpsmCd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmTpsmCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmTpsmCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmTpsmCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmTpsmCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmProvMedcdReclmInd
	 *	@return dt1ClmProvMedcdReclmInd
	 */
   public char[] getDt1ClmProvMedcdReclmInd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProvMedcdReclmInd();
   }

  
	/**
	*  set variable dt1ClmProvMedcdReclmInd
	*  @param value
	**/
   public void setDt1ClmProvMedcdReclmInd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProvMedcdReclmInd(value);
   } 

     /**
	 * 	Update Dt1ClmProvMedcdReclmInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProvMedcdReclmInd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProvMedcdReclmInd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmProvMedcdReclmInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProvMedcdReclmInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProvMedcdReclmInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProvMedcdReclmInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProvMedcdReclmInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmProvMedcdReclmInd with another Field
	 *	@param value
	 */
   public void setDt1ClmProvMedcdReclmInd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProvMedcdReclmInd(source);
   }  
   
     /**
	 * 	Update Dt1ClmProvMedcdReclmInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmProvMedcdReclmInd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProvMedcdReclmInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmProvMedcdReclmInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProvMedcdReclmInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProvMedcdReclmInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmIcn
	 *	@return dt1ClmIcn
	 */
   public char[] getDt1ClmIcn(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmIcn();
   }

  
	/**
	*  set variable dt1ClmIcn
	*  @param value
	**/
   public void setDt1ClmIcn(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(value);
   } 

     /**
	 * 	Update Dt1ClmIcn 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex);
   	
   }
   
   public void setDt1ClmIcn(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmIcn 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmIcn with another Field
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source);
   }  
   
     /**
	 * 	Update Dt1ClmIcn 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmIcn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of formattedDate
	 *	@return formattedDate
	 */
   public char[] getFormattedDate() throws CFException  {              
   		return formattedDateGroup.getFormattedDate();
   }

  
	/**
	*  set variable formattedDate
	*  @param value
	**/
   public void setFormattedDate(char[] value) throws CFException {
      formattedDateGroup.setFormattedDate(value);
   } 

     /**
	 * 	Update FormattedDate 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFormattedDate(char[] source, int sourceIndex) throws CFException {
      formattedDateGroup.setFormattedDate(source, sourceIndex);
   	
   }
   
   public void setFormattedDate(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      formattedDateGroup.setFormattedDate(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FormattedDate 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFormattedDate(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      formattedDateGroup.setFormattedDate(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FormattedDate with another Field
	 *	@param value
	 */
   public void setFormattedDate(Field source) {
      formattedDateGroup.setFormattedDate(source);
   }  
   
     /**
	 * 	Update FormattedDate 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFormattedDate(Field source, int sourceIndex,int sourceLen) {
      formattedDateGroup.setFormattedDate(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FormattedDate 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFormattedDate(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      formattedDateGroup.setFormattedDate(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of dt1ClmSuffixCd
	 *	@return dt1ClmSuffixCd
	 */
	public int getDt1ClmSuffixCd(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmSuffixCd();
	}


	/**
	 *	Returns String value of dt1ClmSuffixCd
	 *	@return dt1ClmSuffixCd
	 */
	public char[]  getDt1ClmSuffixCdString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmSuffixCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmSuffixCdIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmSuffixCdIsNumeric();
	}

	/**
	 * 	Update Dt1ClmSuffixCd with the passed value
	 *	@param number
	 */
	public void setDt1ClmSuffixCd(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(number);
	}
	

	public void setDt1ClmSuffixCd(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(number);
	}
	
	
	/**
	 * 	Update Dt1ClmSuffixCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmSuffixCd(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(value);
	}
	
	/**
	 * 	Update Dt1ClmSuffixCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmSuffixCdString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(value);
	}	

	/**
	 *	Test condition "Y" for isDt1ClmPaid()
	 *	@return  Returns true if isDt1ClmPaid() is "Y"
	 */
   public boolean isDt1ClmPaid(int index) throws CFException {
      return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmClaimStatus().isDt1ClmPaid();
   }

	/**
	*  set values "Y"
	*/
   	public void setDt1ClmPaidTrue(int index)  throws CFException{  			
    	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmClaimStatus().setDt1ClmPaidTrue();
   	}
	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	public BigDecimal getHvaMmAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmAmt((index));
	}

    public char[] getHvaMmAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	public BigDecimal getHvaCopayAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCopayAmt((index));
	}

    public char[] getHvaCopayAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCopayAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCopayAmt with the passed number
	 *	@param number
	 */
	public void setHvaCopayAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCopayAmt((index),number);
   }

	/**
	 *	Returns the value of dt1ClmAuthSrcId
	 *	@return dt1ClmAuthSrcId
	 */
   public char[] getDt1ClmAuthSrcId(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmAuthSrcId();
   }

  
	/**
	*  set variable dt1ClmAuthSrcId
	*  @param value
	**/
   public void setDt1ClmAuthSrcId(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthSrcId(value);
   } 

     /**
	 * 	Update Dt1ClmAuthSrcId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmAuthSrcId(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthSrcId(source, sourceIndex);
   	
   }
   
   public void setDt1ClmAuthSrcId(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthSrcId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmAuthSrcId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmAuthSrcId(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthSrcId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmAuthSrcId with another Field
	 *	@param value
	 */
   public void setDt1ClmAuthSrcId(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthSrcId(source);
   }  
   
     /**
	 * 	Update Dt1ClmAuthSrcId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmAuthSrcId(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthSrcId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmAuthSrcId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmAuthSrcId(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAuthSrcId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmPrimaryDiagnosis
	 *	@return dt1ClmPrimaryDiagnosis
	 */
   public char[] getDt1ClmPrimaryDiagnosis(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmPrimaryDiagnosis();
   }

  
	/**
	*  set variable dt1ClmPrimaryDiagnosis
	*  @param value
	**/
   public void setDt1ClmPrimaryDiagnosis(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPrimaryDiagnosis(value);
   } 

     /**
	 * 	Update Dt1ClmPrimaryDiagnosis 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmPrimaryDiagnosis(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPrimaryDiagnosis(source, sourceIndex);
   	
   }
   
   public void setDt1ClmPrimaryDiagnosis(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPrimaryDiagnosis(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmPrimaryDiagnosis 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmPrimaryDiagnosis(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPrimaryDiagnosis(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmPrimaryDiagnosis with another Field
	 *	@param value
	 */
   public void setDt1ClmPrimaryDiagnosis(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPrimaryDiagnosis(source);
   }  
   
     /**
	 * 	Update Dt1ClmPrimaryDiagnosis 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmPrimaryDiagnosis(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPrimaryDiagnosis(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmPrimaryDiagnosis 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmPrimaryDiagnosis(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPrimaryDiagnosis(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of topsIcn10
	 *	@return topsIcn10
	 */
   public char[] getTopsIcn10() throws CFException  {              
   		return work.getTopsIcn10();
   }

  
	/**
	*  set variable topsIcn10
	*  @param value
	**/
   public void setTopsIcn10(char[] value) throws CFException {
      work.setTopsIcn10(value);
   } 

	/**
	 *	Returns the value of dt1ClmProviderId
	 *	@return dt1ClmProviderId
	 */   
	 public Dt1ClmProviderId getDt1ClmProviderId(int index) {
   	return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId();
   }

   /**
	* 	Update Dt1ClmProviderId with the passed value
	*	@param value
	*/
   public void setDt1ClmProviderId(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(value);
   }   

     /**
	 * 	Update Dt1ClmProviderId 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProviderId 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmProviderId with another Field
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,Field source) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source);
   }  
   
     /**
	 * 	Update Dt1ClmProviderId 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,Field source, int sourceIndex,int sourceLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProviderId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isInfoLineYes()
	 *	@return  Returns true if isInfoLineYes() is "Y"
	 */
   public boolean isInfoLineYes() throws CFException {
      return work.isInfoLineYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setInfoLineYesTrue()  throws CFException{  			
    	work.setInfoLineYesTrue();
   	}
	/**
	 *	Returns the value of hvaBaseDedDescTxt
	 *	@return hvaBaseDedDescTxt
	 */
   public char[] getHvaBaseDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBaseDedDescTxt(index);
   }

  
	/**
	*  set variable hvaBaseDedDescTxt
	*  @param value
	**/
   public void setHvaBaseDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBaseDedDescTxt((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of dt1ClmMskInd
	 *	@return dt1ClmMskInd
	 */
   public char[] getDt1ClmMskInd(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmMskInd();
   }

  
	/**
	*  set variable dt1ClmMskInd
	*  @param value
	**/
   public void setDt1ClmMskInd(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmMskInd(value);
   } 

     /**
	 * 	Update Dt1ClmMskInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmMskInd(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmMskInd(source, sourceIndex);
   	
   }
   
   public void setDt1ClmMskInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmMskInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmMskInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmMskInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmMskInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmMskInd with another Field
	 *	@param value
	 */
   public void setDt1ClmMskInd(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmMskInd(source);
   }  
   
     /**
	 * 	Update Dt1ClmMskInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmMskInd(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmMskInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmMskInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmMskInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmMskInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of dt1ClmPaidAmount
	 *	@return dt1ClmPaidAmount
	 */
   public char[] getDt1ClmPaidAmount(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmPaidAmount();
   }

  
	/**
	*  set variable dt1ClmPaidAmount
	*  @param value
	**/
   public void setDt1ClmPaidAmount(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPaidAmount(value);
   } 

     /**
	 * 	Update Dt1ClmPaidAmount 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmPaidAmount(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPaidAmount(source, sourceIndex);
   	
   }
   
   public void setDt1ClmPaidAmount(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPaidAmount(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmPaidAmount 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmPaidAmount(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPaidAmount(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmPaidAmount with another Field
	 *	@param value
	 */
   public void setDt1ClmPaidAmount(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPaidAmount(source);
   }  
   
     /**
	 * 	Update Dt1ClmPaidAmount 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmPaidAmount(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPaidAmount(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmPaidAmount 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmPaidAmount(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmPaidAmount(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1ClmContainer.hashCode();
        str += chrdate.hashCode();
        str += work.hashCode();
        str += formattedDateGroup.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public MoveClaimDataSectOutCtx clone() {
        MoveClaimDataSectOutCtx cloneObj = new MoveClaimDataSectOutCtx();
        cloneObj.dt1ClmContainer = new Dt1ClmContainer();
        cloneObj.dt1ClmContainer.set(dt1ClmContainer.getClonedField());
        cloneObj.chrdate = new Chrdate();
        cloneObj.chrdate.set(chrdate.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.formattedDateGroup = new FormattedDateGroup();
        cloneObj.formattedDateGroup.set(formattedDateGroup.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public MoveClaimDataSectOutCtx getMoveClaimDataSectOutCtx() {
            return new MoveClaimDataSectOutCtx();
    }
     public class ProcCsrInitFil3SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcCsrInitFil3SectOutCtx getProcCsrInitFil3SectOutCtx() {
            return new ProcCsrInitFil3SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrInitFil3SectInCtx clone() {
        ProcCsrInitFil3SectInCtx cloneObj = new ProcCsrInitFil3SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrInitFil3SectInCtx getProcCsrInitFil3SectInCtx() {
            return new ProcCsrInitFil3SectInCtx();
    }
     public class ProcCsrInitFil3SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrInitFil3SectOutCtx clone() {
        ProcCsrInitFil3SectOutCtx cloneObj = new ProcCsrInitFil3SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrInitFil3SectOutCtx getProcCsrInitFil3SectOutCtx() {
            return new ProcCsrInitFil3SectOutCtx();
    }
     public class OpenCsrInitFil3SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of hvRemarkCd2
	 *	@return hvRemarkCd2
	 */
   public char[] getHvRemarkCd2() throws CFException  {              
   		return hostVariables.getHvRemarkCd2();
   }

  
	/**
	*  set variable hvRemarkCd2
	*  @param value
	**/
   public void setHvRemarkCd2(char[] value) throws CFException {
      hostVariables.setHvRemarkCd2(value);
   } 

     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd2(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd2 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source) {
      hostVariables.setHvRemarkCd2(source);
   }  
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvRevFrom
	 *	@return hvRevFrom
	 */
   public char[] getHvRevFrom() throws CFException  {              
   		return hostVariables.getHvRevFrom();
   }

  
	/**
	*  set variable hvRevFrom
	*  @param value
	**/
   public void setHvRevFrom(char[] value) throws CFException {
      hostVariables.setHvRevFrom(value);
   } 

     /**
	 * 	Update HvRevFrom 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRevFrom(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRevFrom(source, sourceIndex);
   	
   }
   
   public void setHvRevFrom(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRevFrom 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRevFrom(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRevFrom with another Field
	 *	@param value
	 */
   public void setHvRevFrom(Field source) {
      hostVariables.setHvRevFrom(source);
   }  
   
     /**
	 * 	Update HvRevFrom 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRevFrom(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRevFrom 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRevFrom(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of hvCauseCd1
	 *	@return hvCauseCd1
	 */
   public char[] getHvCauseCd1() throws CFException  {              
   		return hostVariables.getHvCauseCd1();
   }

  
	/**
	*  set variable hvCauseCd1
	*  @param value
	**/
   public void setHvCauseCd1(char[] value) throws CFException {
      hostVariables.setHvCauseCd1(value);
   } 

     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd1(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd1 with another Field
	 *	@param value
	 */
   public void setHvCauseCd1(Field source) {
      hostVariables.setHvCauseCd1(source);
   }  
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of hvFstDt
	 *	@return hvFstDt
	 */
   public char[] getHvFstDt() throws CFException  {              
   		return hostVariables.getHvFstDtGroup().getHvFstDt();
   }

  
	/**
	*  set variable hvFstDt
	*  @param value
	**/
   public void setHvFstDt(char[] value) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(value);
   } 

     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex);
   	
   }
   
   public void setHvFstDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFstDt with another Field
	 *	@param value
	 */
   public void setHvFstDt(Field source) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source);
   }  
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hostVariables
	 *	@return hostVariables
	 */   
	 public HostVariables getHostVariables() {
   	return hostVariables;
   }


	/**
	 *	Returns the value of hvProvTin
	 *	@return hvProvTin
	 */
   public char[] getHvProvTin() throws CFException  {              
   		return hostVariables.getHvProvTinsuffRedefined().getHvProvTin();
   }

  
	/**
	*  set variable hvProvTin
	*  @param value
	**/
   public void setHvProvTin(char[] value) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(value);
   } 

     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex);
   	
   }
   
   public void setHvProvTin(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin with another Field
	 *	@param value
	 */
   public void setHvProvTin(Field source) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source);
   }  
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvRevThru
	 *	@return hvRevThru
	 */
   public char[] getHvRevThru() throws CFException  {              
   		return hostVariables.getHvRevThru();
   }

  
	/**
	*  set variable hvRevThru
	*  @param value
	**/
   public void setHvRevThru(char[] value) throws CFException {
      hostVariables.setHvRevThru(value);
   } 

     /**
	 * 	Update HvRevThru 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRevThru(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRevThru(source, sourceIndex);
   	
   }
   
   public void setHvRevThru(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRevThru 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRevThru(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRevThru with another Field
	 *	@param value
	 */
   public void setHvRevThru(Field source) {
      hostVariables.setHvRevThru(source);
   }  
   
     /**
	 * 	Update HvRevThru 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRevThru(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRevThru 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRevThru(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvCauseCd2
	 *	@return hvCauseCd2
	 */
   public char[] getHvCauseCd2() throws CFException  {              
   		return hostVariables.getHvCauseCd2();
   }

  
	/**
	*  set variable hvCauseCd2
	*  @param value
	**/
   public void setHvCauseCd2(char[] value) throws CFException {
      hostVariables.setHvCauseCd2(value);
   } 

     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd2(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd2 with another Field
	 *	@param value
	 */
   public void setHvCauseCd2(Field source) {
      hostVariables.setHvCauseCd2(source);
   }  
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvProvTin1
	 *	@return hvProvTin1
	 */
   public char[] getHvProvTin1() throws CFException  {              
   		return hostVariables.getHvProvTinsuff1Redefined().getHvProvTin1();
   }

  
	/**
	*  set variable hvProvTin1
	*  @param value
	**/
   public void setHvProvTin1(char[] value) throws CFException {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(value);
   } 

     /**
	 * 	Update HvProvTin1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin1(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex);
   	
   }
   
   public void setHvProvTin1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin1 with another Field
	 *	@param value
	 */
   public void setHvProvTin1(Field source) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source);
   }  
   
     /**
	 * 	Update HvProvTin1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvLstSrvcDt
	 *	@return hvLstSrvcDt
	 */
   public char[] getHvLstSrvcDt() throws CFException  {              
   		return hostVariables.getHvLstSrvcDtGroup().getHvLstSrvcDt();
   }

  
	/**
	*  set variable hvLstSrvcDt
	*  @param value
	**/
   public void setHvLstSrvcDt(char[] value) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(value);
   } 

     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex);
   	
   }
   
   public void setHvLstSrvcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvLstSrvcDt with another Field
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source);
   }  
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvRemarkCd1
	 *	@return hvRemarkCd1
	 */
   public char[] getHvRemarkCd1() throws CFException  {              
   		return hostVariables.getHvRemarkCd1();
   }

  
	/**
	*  set variable hvRemarkCd1
	*  @param value
	**/
   public void setHvRemarkCd1(char[] value) throws CFException {
      hostVariables.setHvRemarkCd1(value);
   } 

     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd1(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd1 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source) {
      hostVariables.setHvRemarkCd1(source);
   }  
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public OpenCsrInitFil3SectOutCtx getOpenCsrInitFil3SectOutCtx() {
            return new OpenCsrInitFil3SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrInitFil3SectInCtx clone() {
        OpenCsrInitFil3SectInCtx cloneObj = new OpenCsrInitFil3SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrInitFil3SectInCtx getOpenCsrInitFil3SectInCtx() {
            return new OpenCsrInitFil3SectInCtx();
    }
     public class OpenCsrInitFil3SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dderefEeId
	 *	@return dderefEeId
	 */
   public char[] getDderefEeId() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefEeIdGroup().getDderefEeId();
   }

  
	/**
	*  set variable dderefEeId
	*  @param value
	**/
   public void setDderefEeId(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(value);
   } 

     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex);
   	
   }
   
   public void setDderefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeId with another Field
	 *	@param value
	 */
   public void setDderefEeId(Field source) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source);
   }  
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPolNbr
	 *	@return dderefPolNbr
	 */
   public char[] getDderefPolNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPolNbrGroup().getDderefPolNbr();
   }

  
	/**
	*  set variable dderefPolNbr
	*  @param value
	**/
   public void setDderefPolNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(value);
   } 

     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDderefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbr with another Field
	 *	@param value
	 */
   public void setDderefPolNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source);
   }  
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefDepnNbr
	 *	@return dderefDepnNbr
	 */
   public char[] getDderefDepnNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefDepnNbrGroup().getDderefDepnNbr();
   }

  
	/**
	*  set variable dderefDepnNbr
	*  @param value
	**/
   public void setDderefDepnNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(value);
   } 

     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDderefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbr with another Field
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source);
   }  
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrInitFil3SectOutCtx clone() {
        OpenCsrInitFil3SectOutCtx cloneObj = new OpenCsrInitFil3SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrInitFil3SectOutCtx getOpenCsrInitFil3SectOutCtx() {
            return new OpenCsrInitFil3SectOutCtx();
    }
     public class FetchCsrInitFil3SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrInitFil3SectOutCtx getFetchCsrInitFil3SectOutCtx() {
            return new FetchCsrInitFil3SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrInitFil3SectInCtx clone() {
        FetchCsrInitFil3SectInCtx cloneObj = new FetchCsrInitFil3SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrInitFil3SectInCtx getFetchCsrInitFil3SectInCtx() {
            return new FetchCsrInitFil3SectInCtx();
    }
     public class FetchCsrInitFil3SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrInitFil3SectOutCtx clone() {
        FetchCsrInitFil3SectOutCtx cloneObj = new FetchCsrInitFil3SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrInitFil3SectOutCtx getFetchCsrInitFil3SectOutCtx() {
            return new FetchCsrInitFil3SectOutCtx();
    }
     public class FetchCsrRowsSect4721InCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of fetchRowsetMax
	 *	@return fetchRowsetMax
	 */
	public int getFetchRowsetMax() throws CFException {        
   		return work.getFetchRowsetMax();
	}
	
	/**
	 * 	Update FetchRowsetMax with the passed value
	 *	@param number
	 */
	public void setFetchRowsetMax(int number)  throws CFException{
		work.setFetchRowsetMax(number);
	}


	public void setFetchRowsetMax(long number)  throws CFException{
		work.setFetchRowsetMax((int)number);
	}


	/**
	 *	Returns the value of work
	 *	@return work
	 */   
	 public Work getWork() {
   	return work;
   }


	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 

	public BigDecimal getHvaSupAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaSupAmt((index));
	}

    public char[] getHvaSupAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaSupAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaSupAmt with the passed number
	 *	@param number
	 */
	public void setHvaSupAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaSupAmt((index),number);
   }

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hvaPartnVal
	 *	@return hvaPartnVal
	 */
   public char[] getHvaPartnVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPartnVal(index);
   }

  
	/**
	*  set variable hvaPartnVal
	*  @param value
	**/
   public void setHvaPartnVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPartnVal((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaPartnId
	 *	@return hvaPartnId
	 */
	public short getHvaPartnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPartnId((index));
	}
	
	/**
	 * 	Update HvaPartnId with the passed value
	 *	@param number
	 */
	public void setHvaPartnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),number);
	}

	public void setHvaPartnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}

	public void setHvaPartnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}



	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	public BigDecimal getHvaBaseDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseDedAmt((index));
	}

    public char[] getHvaBaseDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseDedAmt((index),number);
   }

	/**
	 *	Returns the value of hvaMskNullInd
	 *	@return hvaMskNullInd
	 */
	public short getHvaMskNullInd(int index) throws CFException {        
   		return hvaClmHistArray.getHvaMskNullInd((index));
	}
	
	/**
	 * 	Update HvaMskNullInd with the passed value
	 *	@param number
	 */
	public void setHvaMskNullInd(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),number);
	}

	public void setHvaMskNullInd(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}

	public void setHvaMskNullInd(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}



	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of hvaTransCd
	 *	@return hvaTransCd
	 */
   public char[] getHvaTransCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTransCd(index);
   }

  
	/**
	*  set variable hvaTransCd
	*  @param value
	**/
   public void setHvaTransCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTransCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktNbr
	 *	@return hvaProvMktNbr
	 */
   public char[] getHvaProvMktNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktNbr(index);
   }

  
	/**
	*  set variable hvaProvMktNbr
	*  @param value
	**/
   public void setHvaProvMktNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktNbr((index),value);
   } 

	public BigDecimal getHvaBaseAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseAmt((index));
	}

    public char[] getHvaBaseAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseAmt((index),number);
   }

	public BigDecimal getHvaCobCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCobCrResAmt((index));
	}

    public char[] getHvaCobCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCobCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCobCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaCobCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCobCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPpoCd
	 *	@return hvaPpoCd
	 */
   public char[] getHvaPpoCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPpoCd(index);
   }

  
	/**
	*  set variable hvaPpoCd
	*  @param value
	**/
   public void setHvaPpoCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPpoCd((index),value);
   } 

	public BigDecimal getHvaMmDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmDedAmt((index));
	}

    public char[] getHvaMmDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmDedAmt((index),number);
   }

	public BigDecimal getHvaMcCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMcCrResAmt((index));
	}

    public char[] getHvaMcCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMcCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMcCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaMcCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMcCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProvIpaId
	 *	@return hvaProvIpaId
	 */
   public char[] getHvaProvIpaId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvIpaId(index);
   }

  
	/**
	*  set variable hvaProvIpaId
	*  @param value
	**/
   public void setHvaProvIpaId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvIpaId((index),value);
   } 

	/**
	 *	Returns the value of hvaPmtSvcCd
	 *	@return hvaPmtSvcCd
	 */
   public char[] getHvaPmtSvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPmtSvcCd(index);
   }

  
	/**
	*  set variable hvaPmtSvcCd
	*  @param value
	**/
   public void setHvaPmtSvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPmtSvcCd((index),value);
   } 

	public BigDecimal getHvaMmAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmAmt((index));
	}

    public char[] getHvaMmAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvEobNm
	 *	@return hvaProvEobNm
	 */
   public char[] getHvaProvEobNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvEobNm(index);
   }

  
	/**
	*  set variable hvaProvEobNm
	*  @param value
	**/
   public void setHvaProvEobNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvEobNm((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	public BigDecimal getHvaCopayAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCopayAmt((index));
	}

    public char[] getHvaCopayAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCopayAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCopayAmt with the passed number
	 *	@param number
	 */
	public void setHvaCopayAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCopayAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvPrdctCd
	 *	@return hvaProvPrdctCd
	 */
   public char[] getHvaProvPrdctCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvPrdctCd(index);
   }

  
	/**
	*  set variable hvaProvPrdctCd
	*  @param value
	**/
   public void setHvaProvPrdctCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvPrdctCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPrsCreatSrcCd
	 *	@return hvaPrsCreatSrcCd
	 */
   public char[] getHvaPrsCreatSrcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPrsCreatSrcCd(index);
   }

  
	/**
	*  set variable hvaPrsCreatSrcCd
	*  @param value
	**/
   public void setHvaPrsCreatSrcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPrsCreatSrcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of hvaBaseDedDescTxt
	 *	@return hvaBaseDedDescTxt
	 */
   public char[] getHvaBaseDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBaseDedDescTxt(index);
   }

  
	/**
	*  set variable hvaBaseDedDescTxt
	*  @param value
	**/
   public void setHvaBaseDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBaseDedDescTxt((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvaMmDedDescTxt
	 *	@return hvaMmDedDescTxt
	 */
   public char[] getHvaMmDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMmDedDescTxt(index);
   }

  
	/**
	*  set variable hvaMmDedDescTxt
	*  @param value
	**/
   public void setHvaMmDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMmDedDescTxt((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of hvaOvrCd
	 *	@return hvaOvrCd
	 */
   public char[] getHvaOvrCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaOvrCd(index);
   }

  
	/**
	*  set variable hvaOvrCd
	*  @param value
	**/
   public void setHvaOvrCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaOvrCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktTypCd
	 *	@return hvaProvMktTypCd
	 */
   public char[] getHvaProvMktTypCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktTypCd(index);
   }

  
	/**
	*  set variable hvaProvMktTypCd
	*  @param value
	**/
   public void setHvaProvMktTypCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktTypCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of hvaParInd
	 *	@return hvaParInd
	 */
   public char[] getHvaParInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaParInd(index);
   }

  
	/**
	*  set variable hvaParInd
	*  @param value
	**/
   public void setHvaParInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaParInd((index),value);
   } 

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrRowsSect4721OutCtx getFetchCsrRowsSect4721OutCtx() {
            return new FetchCsrRowsSect4721OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect4721InCtx clone() {
        FetchCsrRowsSect4721InCtx cloneObj = new FetchCsrRowsSect4721InCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect4721InCtx getFetchCsrRowsSect4721InCtx() {
            return new FetchCsrRowsSect4721InCtx();
    }
     public class FetchCsrRowsSect4721OutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Test condition 100 for isSqlcodeFetchEnd()
	 *	@return  Returns true if isSqlcodeFetchEnd() is 100
	 */
   public boolean isSqlcodeFetchEnd() throws CFException {
      return work.isSqlcodeFetchEnd();
   }

	/**
	*  set values 100
	*/
   	public void setSqlcodeFetchEndTrue()  throws CFException{  			
    	work.setSqlcodeFetchEndTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 0 for isSqlcodeOk()
	 *	@return  Returns true if isSqlcodeOk() is 0
	 */
   public boolean isSqlcodeOk() throws CFException {
      return work.isSqlcodeOk();
   }

	/**
	*  set values 0
	*/
   	public void setSqlcodeOkTrue()  throws CFException{  			
    	work.setSqlcodeOkTrue();
   	}
	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect4721OutCtx clone() {
        FetchCsrRowsSect4721OutCtx cloneObj = new FetchCsrRowsSect4721OutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect4721OutCtx getFetchCsrRowsSect4721OutCtx() {
            return new FetchCsrRowsSect4721OutCtx();
    }
     public class CloseCsrInitFil3SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public CloseCsrInitFil3SectOutCtx getCloseCsrInitFil3SectOutCtx() {
            return new CloseCsrInitFil3SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrInitFil3SectInCtx clone() {
        CloseCsrInitFil3SectInCtx cloneObj = new CloseCsrInitFil3SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrInitFil3SectInCtx getCloseCsrInitFil3SectInCtx() {
            return new CloseCsrInitFil3SectInCtx();
    }
     public class CloseCsrInitFil3SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrInitFil3SectOutCtx clone() {
        CloseCsrInitFil3SectOutCtx cloneObj = new CloseCsrInitFil3SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrInitFil3SectOutCtx getCloseCsrInitFil3SectOutCtx() {
            return new CloseCsrInitFil3SectOutCtx();
    }
     public class ProcCsrNextFil3SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcCsrNextFil3SectOutCtx getProcCsrNextFil3SectOutCtx() {
            return new ProcCsrNextFil3SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrNextFil3SectInCtx clone() {
        ProcCsrNextFil3SectInCtx cloneObj = new ProcCsrNextFil3SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrNextFil3SectInCtx getProcCsrNextFil3SectInCtx() {
            return new ProcCsrNextFil3SectInCtx();
    }
     public class ProcCsrNextFil3SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrNextFil3SectOutCtx clone() {
        ProcCsrNextFil3SectOutCtx cloneObj = new ProcCsrNextFil3SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrNextFil3SectOutCtx getProcCsrNextFil3SectOutCtx() {
            return new ProcCsrNextFil3SectOutCtx();
    }
     public class OpenCsrNextFil3SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of hvRemarkCd2
	 *	@return hvRemarkCd2
	 */
   public char[] getHvRemarkCd2() throws CFException  {              
   		return hostVariables.getHvRemarkCd2();
   }

  
	/**
	*  set variable hvRemarkCd2
	*  @param value
	**/
   public void setHvRemarkCd2(char[] value) throws CFException {
      hostVariables.setHvRemarkCd2(value);
   } 

     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd2(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd2 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source) {
      hostVariables.setHvRemarkCd2(source);
   }  
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvRevFrom
	 *	@return hvRevFrom
	 */
   public char[] getHvRevFrom() throws CFException  {              
   		return hostVariables.getHvRevFrom();
   }

  
	/**
	*  set variable hvRevFrom
	*  @param value
	**/
   public void setHvRevFrom(char[] value) throws CFException {
      hostVariables.setHvRevFrom(value);
   } 

     /**
	 * 	Update HvRevFrom 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRevFrom(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRevFrom(source, sourceIndex);
   	
   }
   
   public void setHvRevFrom(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRevFrom 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRevFrom(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRevFrom with another Field
	 *	@param value
	 */
   public void setHvRevFrom(Field source) {
      hostVariables.setHvRevFrom(source);
   }  
   
     /**
	 * 	Update HvRevFrom 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRevFrom(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRevFrom 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRevFrom(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of hvCauseCd1
	 *	@return hvCauseCd1
	 */
   public char[] getHvCauseCd1() throws CFException  {              
   		return hostVariables.getHvCauseCd1();
   }

  
	/**
	*  set variable hvCauseCd1
	*  @param value
	**/
   public void setHvCauseCd1(char[] value) throws CFException {
      hostVariables.setHvCauseCd1(value);
   } 

     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd1(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd1 with another Field
	 *	@param value
	 */
   public void setHvCauseCd1(Field source) {
      hostVariables.setHvCauseCd1(source);
   }  
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFstDt
	 *	@return hvFstDt
	 */
   public char[] getHvFstDt() throws CFException  {              
   		return hostVariables.getHvFstDtGroup().getHvFstDt();
   }

  
	/**
	*  set variable hvFstDt
	*  @param value
	**/
   public void setHvFstDt(char[] value) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(value);
   } 

     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex);
   	
   }
   
   public void setHvFstDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFstDt with another Field
	 *	@param value
	 */
   public void setHvFstDt(Field source) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source);
   }  
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hostVariables
	 *	@return hostVariables
	 */   
	 public HostVariables getHostVariables() {
   	return hostVariables;
   }


	/**
	 *	Returns the value of hvProvTin
	 *	@return hvProvTin
	 */
   public char[] getHvProvTin() throws CFException  {              
   		return hostVariables.getHvProvTinsuffRedefined().getHvProvTin();
   }

  
	/**
	*  set variable hvProvTin
	*  @param value
	**/
   public void setHvProvTin(char[] value) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(value);
   } 

     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex);
   	
   }
   
   public void setHvProvTin(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin with another Field
	 *	@param value
	 */
   public void setHvProvTin(Field source) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source);
   }  
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvRevThru
	 *	@return hvRevThru
	 */
   public char[] getHvRevThru() throws CFException  {              
   		return hostVariables.getHvRevThru();
   }

  
	/**
	*  set variable hvRevThru
	*  @param value
	**/
   public void setHvRevThru(char[] value) throws CFException {
      hostVariables.setHvRevThru(value);
   } 

     /**
	 * 	Update HvRevThru 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRevThru(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRevThru(source, sourceIndex);
   	
   }
   
   public void setHvRevThru(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRevThru 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRevThru(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRevThru with another Field
	 *	@param value
	 */
   public void setHvRevThru(Field source) {
      hostVariables.setHvRevThru(source);
   }  
   
     /**
	 * 	Update HvRevThru 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRevThru(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRevThru 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRevThru(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvCauseCd2
	 *	@return hvCauseCd2
	 */
   public char[] getHvCauseCd2() throws CFException  {              
   		return hostVariables.getHvCauseCd2();
   }

  
	/**
	*  set variable hvCauseCd2
	*  @param value
	**/
   public void setHvCauseCd2(char[] value) throws CFException {
      hostVariables.setHvCauseCd2(value);
   } 

     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd2(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd2 with another Field
	 *	@param value
	 */
   public void setHvCauseCd2(Field source) {
      hostVariables.setHvCauseCd2(source);
   }  
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvProvTin1
	 *	@return hvProvTin1
	 */
   public char[] getHvProvTin1() throws CFException  {              
   		return hostVariables.getHvProvTinsuff1Redefined().getHvProvTin1();
   }

  
	/**
	*  set variable hvProvTin1
	*  @param value
	**/
   public void setHvProvTin1(char[] value) throws CFException {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(value);
   } 

     /**
	 * 	Update HvProvTin1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin1(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex);
   	
   }
   
   public void setHvProvTin1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin1 with another Field
	 *	@param value
	 */
   public void setHvProvTin1(Field source) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source);
   }  
   
     /**
	 * 	Update HvProvTin1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvLstSrvcDt
	 *	@return hvLstSrvcDt
	 */
   public char[] getHvLstSrvcDt() throws CFException  {              
   		return hostVariables.getHvLstSrvcDtGroup().getHvLstSrvcDt();
   }

  
	/**
	*  set variable hvLstSrvcDt
	*  @param value
	**/
   public void setHvLstSrvcDt(char[] value) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(value);
   } 

     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex);
   	
   }
   
   public void setHvLstSrvcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvLstSrvcDt with another Field
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source);
   }  
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvRemarkCd1
	 *	@return hvRemarkCd1
	 */
   public char[] getHvRemarkCd1() throws CFException  {              
   		return hostVariables.getHvRemarkCd1();
   }

  
	/**
	*  set variable hvRemarkCd1
	*  @param value
	**/
   public void setHvRemarkCd1(char[] value) throws CFException {
      hostVariables.setHvRemarkCd1(value);
   } 

     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd1(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd1 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source) {
      hostVariables.setHvRemarkCd1(source);
   }  
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public OpenCsrNextFil3SectOutCtx getOpenCsrNextFil3SectOutCtx() {
            return new OpenCsrNextFil3SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrNextFil3SectInCtx clone() {
        OpenCsrNextFil3SectInCtx cloneObj = new OpenCsrNextFil3SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrNextFil3SectInCtx getOpenCsrNextFil3SectInCtx() {
            return new OpenCsrNextFil3SectInCtx();
    }
     public class OpenCsrNextFil3SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dderefEeId
	 *	@return dderefEeId
	 */
   public char[] getDderefEeId() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefEeIdGroup().getDderefEeId();
   }

  
	/**
	*  set variable dderefEeId
	*  @param value
	**/
   public void setDderefEeId(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(value);
   } 

     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex);
   	
   }
   
   public void setDderefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeId with another Field
	 *	@param value
	 */
   public void setDderefEeId(Field source) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source);
   }  
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public int getNextIcnSufxVersNbr() throws CFException {
   		return nextKey.getNextIcnSufxVersNbr();
	}


	/**
	 *	Returns String value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public char[]  getNextIcnSufxVersNbrString() throws CFException {
	     return String.valueOf(nextKey.getNextIcnSufxVersNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextIcnSufxVersNbrIsNumeric()  throws CFException{
	    return nextKey.nextIcnSufxVersNbrIsNumeric();
	}

	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setNextIcnSufxVersNbr(int number)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(number);
	}
	

	public void setNextIcnSufxVersNbr(long number)  throws CFException{
	    nextKey.setNextIcnSufxVersNbr(number);
	}
	
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbr(char[] value)  throws CFException {
		nextKey.setNextIcnSufxVersNbr(value);
	}
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbrString(char[] value)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(value);
	}	

	/**
	 *	Returns the value of dderefIcnSufxVersNbr
	 *	@return dderefIcnSufxVersNbr
	 */
	public short getDderefIcnSufxVersNbr() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefIcnSufxVersNbr();
	}
	
	/**
	 * 	Update DderefIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setDderefIcnSufxVersNbr(short number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr(number);
	}

	public void setDderefIcnSufxVersNbr(int number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}

	public void setDderefIcnSufxVersNbr(long number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}



	/**
	 *	Returns the value of dderefProcDt
	 *	@return dderefProcDt
	 */
   public char[] getDderefProcDt() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcDtGroup().getDderefProcDt();
   }

  
	/**
	*  set variable dderefProcDt
	*  @param value
	**/
   public void setDderefProcDt(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(value);
   } 

     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex);
   	
   }
   
   public void setDderefProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcDt with another Field
	 *	@param value
	 */
   public void setDderefProcDt(Field source) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source);
   }  
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextLnId
	 *	@return nextLnId
	 */
	public int getNextLnId() throws CFException {
   		return nextKey.getNextLnId();
	}


	/**
	 *	Returns String value of nextLnId
	 *	@return nextLnId
	 */
	public char[]  getNextLnIdString() throws CFException {
	     return String.valueOf(nextKey.getNextLnIdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextLnIdIsNumeric()  throws CFException{
	    return nextKey.nextLnIdIsNumeric();
	}

	/**
	 * 	Update NextLnId with the passed value
	 *	@param number
	 */
	public void setNextLnId(int number)  throws CFException{
		nextKey.setNextLnId(number);
	}
	

	public void setNextLnId(long number)  throws CFException{
	    nextKey.setNextLnId(number);
	}
	
	
	/**
	 * 	Update NextLnId with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextLnId(char[] value)  throws CFException {
		nextKey.setNextLnId(value);
	}
	
	/**
	 * 	Update NextLnId with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextLnIdString(char[] value)  throws CFException{
		nextKey.setNextLnId(value);
	}	

	/**
	 *	Returns the value of dderefIcnSufxCd
	 *	@return dderefIcnSufxCd
	 */
   public char[] getDderefIcnSufxCd() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().getDderefIcnSufxCd();
   }

  
	/**
	*  set variable dderefIcnSufxCd
	*  @param value
	**/
   public void setDderefIcnSufxCd(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(value);
   } 

     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setDderefIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefIcnSufxCd with another Field
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source);
   }  
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of nextPgmIdLstCharVal
	 *	@return nextPgmIdLstCharVal
	 */
   public char[] getNextPgmIdLstCharVal() throws CFException  {              
   		return nextKey.getNextPgmIdLstCharVal();
   }

  
	/**
	*  set variable nextPgmIdLstCharVal
	*  @param value
	**/
   public void setNextPgmIdLstCharVal(char[] value) throws CFException {
      nextKey.setNextPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source) {
      nextKey.setNextPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefLnId
	 *	@return dderefLnId
	 */
	public short getDderefLnId() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefLnIdGroup().getDderefLnId();
	}
	
	/**
	 * 	Update DderefLnId with the passed value
	 *	@param number
	 */
	public void setDderefLnId(short number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId(number);
	}

	public void setDderefLnId(int number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}

	public void setDderefLnId(long number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}



	/**
	 *	Returns the value of nextProcTm
	 *	@return nextProcTm
	 */
   public char[] getNextProcTm() throws CFException  {              
   		return nextKey.getNextProcTm();
   }

  
	/**
	*  set variable nextProcTm
	*  @param value
	**/
   public void setNextProcTm(char[] value) throws CFException {
      nextKey.setNextProcTm(value);
   } 

     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcTm(source, sourceIndex);
   	
   }
   
   public void setNextProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcTm with another Field
	 *	@param value
	 */
   public void setNextProcTm(Field source) {
      nextKey.setNextProcTm(source);
   }  
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefProcTm
	 *	@return dderefProcTm
	 */
   public char[] getDderefProcTm() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcTmGroup().getDderefProcTm();
   }

  
	/**
	*  set variable dderefProcTm
	*  @param value
	**/
   public void setDderefProcTm(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(value);
   } 

     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex);
   	
   }
   
   public void setDderefProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcTm with another Field
	 *	@param value
	 */
   public void setDderefProcTm(Field source) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source);
   }  
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dderefInvnCtlNbr
	 *	@return dderefInvnCtlNbr
	 */
   public char[] getDderefInvnCtlNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().getDderefInvnCtlNbr();
   }

  
	/**
	*  set variable dderefInvnCtlNbr
	*  @param value
	**/
   public void setDderefInvnCtlNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(value);
   } 

     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextIcnSufxCd
	 *	@return nextIcnSufxCd
	 */
   public char[] getNextIcnSufxCd() throws CFException  {              
   		return nextKey.getNextIcnSufxCd();
   }

  
	/**
	*  set variable nextIcnSufxCd
	*  @param value
	**/
   public void setNextIcnSufxCd(char[] value) throws CFException {
      nextKey.setNextIcnSufxCd(value);
   } 

     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setNextIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextIcnSufxCd with another Field
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source) {
      nextKey.setNextIcnSufxCd(source);
   }  
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPolNbr
	 *	@return dderefPolNbr
	 */
   public char[] getDderefPolNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPolNbrGroup().getDderefPolNbr();
   }

  
	/**
	*  set variable dderefPolNbr
	*  @param value
	**/
   public void setDderefPolNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(value);
   } 

     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDderefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbr with another Field
	 *	@param value
	 */
   public void setDderefPolNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source);
   }  
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextInvnCtlNbr
	 *	@return nextInvnCtlNbr
	 */
   public char[] getNextInvnCtlNbr() throws CFException  {              
   		return nextKey.getNextInvnCtlNbr();
   }

  
	/**
	*  set variable nextInvnCtlNbr
	*  @param value
	**/
   public void setNextInvnCtlNbr(char[] value) throws CFException {
      nextKey.setNextInvnCtlNbr(value);
   } 

     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setNextInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source) {
      nextKey.setNextInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextKey
	 *	@return nextKey
	 */   
	 public NextKey getNextKey() {
   	return nextKey;
   }


	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefDepnNbr
	 *	@return dderefDepnNbr
	 */
   public char[] getDderefDepnNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefDepnNbrGroup().getDderefDepnNbr();
   }

  
	/**
	*  set variable dderefDepnNbr
	*  @param value
	**/
   public void setDderefDepnNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(value);
   } 

     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDderefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbr with another Field
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source);
   }  
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextProcDt
	 *	@return nextProcDt
	 */
   public char[] getNextProcDt() throws CFException  {              
   		return nextKey.getNextProcDt();
   }

  
	/**
	*  set variable nextProcDt
	*  @param value
	**/
   public void setNextProcDt(char[] value) throws CFException {
      nextKey.setNextProcDt(value);
   } 

     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcDt(source, sourceIndex);
   	
   }
   
   public void setNextProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcDt with another Field
	 *	@param value
	 */
   public void setNextProcDt(Field source) {
      nextKey.setNextProcDt(source);
   }  
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPgmIdLstCharVal
	 *	@return dderefPgmIdLstCharVal
	 */
   public char[] getDderefPgmIdLstCharVal() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().getDderefPgmIdLstCharVal();
   }

  
	/**
	*  set variable dderefPgmIdLstCharVal
	*  @param value
	**/
   public void setDderefPgmIdLstCharVal(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrNextFil3SectOutCtx clone() {
        OpenCsrNextFil3SectOutCtx cloneObj = new OpenCsrNextFil3SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrNextFil3SectOutCtx getOpenCsrNextFil3SectOutCtx() {
            return new OpenCsrNextFil3SectOutCtx();
    }
     public class FetchCsrNextFil3SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrNextFil3SectOutCtx getFetchCsrNextFil3SectOutCtx() {
            return new FetchCsrNextFil3SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrNextFil3SectInCtx clone() {
        FetchCsrNextFil3SectInCtx cloneObj = new FetchCsrNextFil3SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrNextFil3SectInCtx getFetchCsrNextFil3SectInCtx() {
            return new FetchCsrNextFil3SectInCtx();
    }
     public class FetchCsrNextFil3SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrNextFil3SectOutCtx clone() {
        FetchCsrNextFil3SectOutCtx cloneObj = new FetchCsrNextFil3SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrNextFil3SectOutCtx getFetchCsrNextFil3SectOutCtx() {
            return new FetchCsrNextFil3SectOutCtx();
    }
     public class FetchCsrRowsSect4821InCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of fetchRowsetMax
	 *	@return fetchRowsetMax
	 */
	public int getFetchRowsetMax() throws CFException {        
   		return work.getFetchRowsetMax();
	}
	
	/**
	 * 	Update FetchRowsetMax with the passed value
	 *	@param number
	 */
	public void setFetchRowsetMax(int number)  throws CFException{
		work.setFetchRowsetMax(number);
	}


	public void setFetchRowsetMax(long number)  throws CFException{
		work.setFetchRowsetMax((int)number);
	}


	/**
	 *	Returns the value of work
	 *	@return work
	 */   
	 public Work getWork() {
   	return work;
   }


	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 

	public BigDecimal getHvaSupAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaSupAmt((index));
	}

    public char[] getHvaSupAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaSupAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaSupAmt with the passed number
	 *	@param number
	 */
	public void setHvaSupAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaSupAmt((index),number);
   }

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hvaPartnVal
	 *	@return hvaPartnVal
	 */
   public char[] getHvaPartnVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPartnVal(index);
   }

  
	/**
	*  set variable hvaPartnVal
	*  @param value
	**/
   public void setHvaPartnVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPartnVal((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaPartnId
	 *	@return hvaPartnId
	 */
	public short getHvaPartnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPartnId((index));
	}
	
	/**
	 * 	Update HvaPartnId with the passed value
	 *	@param number
	 */
	public void setHvaPartnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),number);
	}

	public void setHvaPartnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}

	public void setHvaPartnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}



	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	public BigDecimal getHvaBaseDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseDedAmt((index));
	}

    public char[] getHvaBaseDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseDedAmt((index),number);
   }

	/**
	 *	Returns the value of hvaMskNullInd
	 *	@return hvaMskNullInd
	 */
	public short getHvaMskNullInd(int index) throws CFException {        
   		return hvaClmHistArray.getHvaMskNullInd((index));
	}
	
	/**
	 * 	Update HvaMskNullInd with the passed value
	 *	@param number
	 */
	public void setHvaMskNullInd(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),number);
	}

	public void setHvaMskNullInd(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}

	public void setHvaMskNullInd(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}



	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of hvaTransCd
	 *	@return hvaTransCd
	 */
   public char[] getHvaTransCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTransCd(index);
   }

  
	/**
	*  set variable hvaTransCd
	*  @param value
	**/
   public void setHvaTransCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTransCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktNbr
	 *	@return hvaProvMktNbr
	 */
   public char[] getHvaProvMktNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktNbr(index);
   }

  
	/**
	*  set variable hvaProvMktNbr
	*  @param value
	**/
   public void setHvaProvMktNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktNbr((index),value);
   } 

	public BigDecimal getHvaBaseAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseAmt((index));
	}

    public char[] getHvaBaseAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseAmt((index),number);
   }

	public BigDecimal getHvaCobCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCobCrResAmt((index));
	}

    public char[] getHvaCobCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCobCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCobCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaCobCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCobCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPpoCd
	 *	@return hvaPpoCd
	 */
   public char[] getHvaPpoCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPpoCd(index);
   }

  
	/**
	*  set variable hvaPpoCd
	*  @param value
	**/
   public void setHvaPpoCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPpoCd((index),value);
   } 

	public BigDecimal getHvaMmDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmDedAmt((index));
	}

    public char[] getHvaMmDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmDedAmt((index),number);
   }

	public BigDecimal getHvaMcCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMcCrResAmt((index));
	}

    public char[] getHvaMcCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMcCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMcCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaMcCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMcCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProvIpaId
	 *	@return hvaProvIpaId
	 */
   public char[] getHvaProvIpaId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvIpaId(index);
   }

  
	/**
	*  set variable hvaProvIpaId
	*  @param value
	**/
   public void setHvaProvIpaId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvIpaId((index),value);
   } 

	/**
	 *	Returns the value of hvaPmtSvcCd
	 *	@return hvaPmtSvcCd
	 */
   public char[] getHvaPmtSvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPmtSvcCd(index);
   }

  
	/**
	*  set variable hvaPmtSvcCd
	*  @param value
	**/
   public void setHvaPmtSvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPmtSvcCd((index),value);
   } 

	public BigDecimal getHvaMmAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmAmt((index));
	}

    public char[] getHvaMmAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvEobNm
	 *	@return hvaProvEobNm
	 */
   public char[] getHvaProvEobNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvEobNm(index);
   }

  
	/**
	*  set variable hvaProvEobNm
	*  @param value
	**/
   public void setHvaProvEobNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvEobNm((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	public BigDecimal getHvaCopayAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCopayAmt((index));
	}

    public char[] getHvaCopayAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCopayAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCopayAmt with the passed number
	 *	@param number
	 */
	public void setHvaCopayAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCopayAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvPrdctCd
	 *	@return hvaProvPrdctCd
	 */
   public char[] getHvaProvPrdctCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvPrdctCd(index);
   }

  
	/**
	*  set variable hvaProvPrdctCd
	*  @param value
	**/
   public void setHvaProvPrdctCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvPrdctCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPrsCreatSrcCd
	 *	@return hvaPrsCreatSrcCd
	 */
   public char[] getHvaPrsCreatSrcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPrsCreatSrcCd(index);
   }

  
	/**
	*  set variable hvaPrsCreatSrcCd
	*  @param value
	**/
   public void setHvaPrsCreatSrcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPrsCreatSrcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of hvaBaseDedDescTxt
	 *	@return hvaBaseDedDescTxt
	 */
   public char[] getHvaBaseDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBaseDedDescTxt(index);
   }

  
	/**
	*  set variable hvaBaseDedDescTxt
	*  @param value
	**/
   public void setHvaBaseDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBaseDedDescTxt((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvaMmDedDescTxt
	 *	@return hvaMmDedDescTxt
	 */
   public char[] getHvaMmDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMmDedDescTxt(index);
   }

  
	/**
	*  set variable hvaMmDedDescTxt
	*  @param value
	**/
   public void setHvaMmDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMmDedDescTxt((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of hvaOvrCd
	 *	@return hvaOvrCd
	 */
   public char[] getHvaOvrCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaOvrCd(index);
   }

  
	/**
	*  set variable hvaOvrCd
	*  @param value
	**/
   public void setHvaOvrCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaOvrCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktTypCd
	 *	@return hvaProvMktTypCd
	 */
   public char[] getHvaProvMktTypCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktTypCd(index);
   }

  
	/**
	*  set variable hvaProvMktTypCd
	*  @param value
	**/
   public void setHvaProvMktTypCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktTypCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of hvaParInd
	 *	@return hvaParInd
	 */
   public char[] getHvaParInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaParInd(index);
   }

  
	/**
	*  set variable hvaParInd
	*  @param value
	**/
   public void setHvaParInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaParInd((index),value);
   } 

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrRowsSect4821OutCtx getFetchCsrRowsSect4821OutCtx() {
            return new FetchCsrRowsSect4821OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect4821InCtx clone() {
        FetchCsrRowsSect4821InCtx cloneObj = new FetchCsrRowsSect4821InCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect4821InCtx getFetchCsrRowsSect4821InCtx() {
            return new FetchCsrRowsSect4821InCtx();
    }
     public class FetchCsrRowsSect4821OutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Test condition 100 for isSqlcodeFetchEnd()
	 *	@return  Returns true if isSqlcodeFetchEnd() is 100
	 */
   public boolean isSqlcodeFetchEnd() throws CFException {
      return work.isSqlcodeFetchEnd();
   }

	/**
	*  set values 100
	*/
   	public void setSqlcodeFetchEndTrue()  throws CFException{  			
    	work.setSqlcodeFetchEndTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 0 for isSqlcodeOk()
	 *	@return  Returns true if isSqlcodeOk() is 0
	 */
   public boolean isSqlcodeOk() throws CFException {
      return work.isSqlcodeOk();
   }

	/**
	*  set values 0
	*/
   	public void setSqlcodeOkTrue()  throws CFException{  			
    	work.setSqlcodeOkTrue();
   	}
	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect4821OutCtx clone() {
        FetchCsrRowsSect4821OutCtx cloneObj = new FetchCsrRowsSect4821OutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect4821OutCtx getFetchCsrRowsSect4821OutCtx() {
            return new FetchCsrRowsSect4821OutCtx();
    }
     public class CloseCsrNextFil3SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public CloseCsrNextFil3SectOutCtx getCloseCsrNextFil3SectOutCtx() {
            return new CloseCsrNextFil3SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrNextFil3SectInCtx clone() {
        CloseCsrNextFil3SectInCtx cloneObj = new CloseCsrNextFil3SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrNextFil3SectInCtx getCloseCsrNextFil3SectInCtx() {
            return new CloseCsrNextFil3SectInCtx();
    }
     public class CloseCsrNextFil3SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrNextFil3SectOutCtx clone() {
        CloseCsrNextFil3SectOutCtx cloneObj = new CloseCsrNextFil3SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrNextFil3SectOutCtx getCloseCsrNextFil3SectOutCtx() {
            return new CloseCsrNextFil3SectOutCtx();
    }
     public class ProcCsrInitFil4SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcCsrInitFil4SectOutCtx getProcCsrInitFil4SectOutCtx() {
            return new ProcCsrInitFil4SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrInitFil4SectInCtx clone() {
        ProcCsrInitFil4SectInCtx cloneObj = new ProcCsrInitFil4SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrInitFil4SectInCtx getProcCsrInitFil4SectInCtx() {
            return new ProcCsrInitFil4SectInCtx();
    }
     public class ProcCsrInitFil4SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrInitFil4SectOutCtx clone() {
        ProcCsrInitFil4SectOutCtx cloneObj = new ProcCsrInitFil4SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrInitFil4SectOutCtx getProcCsrInitFil4SectOutCtx() {
            return new ProcCsrInitFil4SectOutCtx();
    }
     public class OpenCsrInitFil4SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of hvRemarkCd2
	 *	@return hvRemarkCd2
	 */
   public char[] getHvRemarkCd2() throws CFException  {              
   		return hostVariables.getHvRemarkCd2();
   }

  
	/**
	*  set variable hvRemarkCd2
	*  @param value
	**/
   public void setHvRemarkCd2(char[] value) throws CFException {
      hostVariables.setHvRemarkCd2(value);
   } 

     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd2(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd2 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source) {
      hostVariables.setHvRemarkCd2(source);
   }  
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of hvCauseCd1
	 *	@return hvCauseCd1
	 */
   public char[] getHvCauseCd1() throws CFException  {              
   		return hostVariables.getHvCauseCd1();
   }

  
	/**
	*  set variable hvCauseCd1
	*  @param value
	**/
   public void setHvCauseCd1(char[] value) throws CFException {
      hostVariables.setHvCauseCd1(value);
   } 

     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd1(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd1 with another Field
	 *	@param value
	 */
   public void setHvCauseCd1(Field source) {
      hostVariables.setHvCauseCd1(source);
   }  
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvCptFrom
	 *	@return hvCptFrom
	 */
   public char[] getHvCptFrom() throws CFException  {              
   		return hostVariables.getHvCptFrom();
   }

  
	/**
	*  set variable hvCptFrom
	*  @param value
	**/
   public void setHvCptFrom(char[] value) throws CFException {
      hostVariables.setHvCptFrom(value);
   } 

     /**
	 * 	Update HvCptFrom 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCptFrom(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCptFrom(source, sourceIndex);
   	
   }
   
   public void setHvCptFrom(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCptFrom 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCptFrom(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCptFrom with another Field
	 *	@param value
	 */
   public void setHvCptFrom(Field source) {
      hostVariables.setHvCptFrom(source);
   }  
   
     /**
	 * 	Update HvCptFrom 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCptFrom(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCptFrom 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCptFrom(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of hvCptThru
	 *	@return hvCptThru
	 */
   public char[] getHvCptThru() throws CFException  {              
   		return hostVariables.getHvCptThru();
   }

  
	/**
	*  set variable hvCptThru
	*  @param value
	**/
   public void setHvCptThru(char[] value) throws CFException {
      hostVariables.setHvCptThru(value);
   } 

     /**
	 * 	Update HvCptThru 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCptThru(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCptThru(source, sourceIndex);
   	
   }
   
   public void setHvCptThru(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCptThru 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCptThru(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCptThru with another Field
	 *	@param value
	 */
   public void setHvCptThru(Field source) {
      hostVariables.setHvCptThru(source);
   }  
   
     /**
	 * 	Update HvCptThru 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCptThru(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCptThru 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCptThru(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFstDt
	 *	@return hvFstDt
	 */
   public char[] getHvFstDt() throws CFException  {              
   		return hostVariables.getHvFstDtGroup().getHvFstDt();
   }

  
	/**
	*  set variable hvFstDt
	*  @param value
	**/
   public void setHvFstDt(char[] value) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(value);
   } 

     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex);
   	
   }
   
   public void setHvFstDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFstDt with another Field
	 *	@param value
	 */
   public void setHvFstDt(Field source) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source);
   }  
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hostVariables
	 *	@return hostVariables
	 */   
	 public HostVariables getHostVariables() {
   	return hostVariables;
   }


	/**
	 *	Returns the value of hvProvTin
	 *	@return hvProvTin
	 */
   public char[] getHvProvTin() throws CFException  {              
   		return hostVariables.getHvProvTinsuffRedefined().getHvProvTin();
   }

  
	/**
	*  set variable hvProvTin
	*  @param value
	**/
   public void setHvProvTin(char[] value) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(value);
   } 

     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex);
   	
   }
   
   public void setHvProvTin(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin with another Field
	 *	@param value
	 */
   public void setHvProvTin(Field source) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source);
   }  
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvCauseCd2
	 *	@return hvCauseCd2
	 */
   public char[] getHvCauseCd2() throws CFException  {              
   		return hostVariables.getHvCauseCd2();
   }

  
	/**
	*  set variable hvCauseCd2
	*  @param value
	**/
   public void setHvCauseCd2(char[] value) throws CFException {
      hostVariables.setHvCauseCd2(value);
   } 

     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd2(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd2 with another Field
	 *	@param value
	 */
   public void setHvCauseCd2(Field source) {
      hostVariables.setHvCauseCd2(source);
   }  
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvProvTin1
	 *	@return hvProvTin1
	 */
   public char[] getHvProvTin1() throws CFException  {              
   		return hostVariables.getHvProvTinsuff1Redefined().getHvProvTin1();
   }

  
	/**
	*  set variable hvProvTin1
	*  @param value
	**/
   public void setHvProvTin1(char[] value) throws CFException {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(value);
   } 

     /**
	 * 	Update HvProvTin1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin1(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex);
   	
   }
   
   public void setHvProvTin1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin1 with another Field
	 *	@param value
	 */
   public void setHvProvTin1(Field source) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source);
   }  
   
     /**
	 * 	Update HvProvTin1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvLstSrvcDt
	 *	@return hvLstSrvcDt
	 */
   public char[] getHvLstSrvcDt() throws CFException  {              
   		return hostVariables.getHvLstSrvcDtGroup().getHvLstSrvcDt();
   }

  
	/**
	*  set variable hvLstSrvcDt
	*  @param value
	**/
   public void setHvLstSrvcDt(char[] value) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(value);
   } 

     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex);
   	
   }
   
   public void setHvLstSrvcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvLstSrvcDt with another Field
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source);
   }  
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvRemarkCd1
	 *	@return hvRemarkCd1
	 */
   public char[] getHvRemarkCd1() throws CFException  {              
   		return hostVariables.getHvRemarkCd1();
   }

  
	/**
	*  set variable hvRemarkCd1
	*  @param value
	**/
   public void setHvRemarkCd1(char[] value) throws CFException {
      hostVariables.setHvRemarkCd1(value);
   } 

     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd1(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd1 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source) {
      hostVariables.setHvRemarkCd1(source);
   }  
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public OpenCsrInitFil4SectOutCtx getOpenCsrInitFil4SectOutCtx() {
            return new OpenCsrInitFil4SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrInitFil4SectInCtx clone() {
        OpenCsrInitFil4SectInCtx cloneObj = new OpenCsrInitFil4SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrInitFil4SectInCtx getOpenCsrInitFil4SectInCtx() {
            return new OpenCsrInitFil4SectInCtx();
    }
     public class OpenCsrInitFil4SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dderefEeId
	 *	@return dderefEeId
	 */
   public char[] getDderefEeId() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefEeIdGroup().getDderefEeId();
   }

  
	/**
	*  set variable dderefEeId
	*  @param value
	**/
   public void setDderefEeId(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(value);
   } 

     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex);
   	
   }
   
   public void setDderefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeId with another Field
	 *	@param value
	 */
   public void setDderefEeId(Field source) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source);
   }  
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPolNbr
	 *	@return dderefPolNbr
	 */
   public char[] getDderefPolNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPolNbrGroup().getDderefPolNbr();
   }

  
	/**
	*  set variable dderefPolNbr
	*  @param value
	**/
   public void setDderefPolNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(value);
   } 

     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDderefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbr with another Field
	 *	@param value
	 */
   public void setDderefPolNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source);
   }  
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefDepnNbr
	 *	@return dderefDepnNbr
	 */
   public char[] getDderefDepnNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefDepnNbrGroup().getDderefDepnNbr();
   }

  
	/**
	*  set variable dderefDepnNbr
	*  @param value
	**/
   public void setDderefDepnNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(value);
   } 

     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDderefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbr with another Field
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source);
   }  
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrInitFil4SectOutCtx clone() {
        OpenCsrInitFil4SectOutCtx cloneObj = new OpenCsrInitFil4SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrInitFil4SectOutCtx getOpenCsrInitFil4SectOutCtx() {
            return new OpenCsrInitFil4SectOutCtx();
    }
     public class FetchCsrInitFil4SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrInitFil4SectOutCtx getFetchCsrInitFil4SectOutCtx() {
            return new FetchCsrInitFil4SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrInitFil4SectInCtx clone() {
        FetchCsrInitFil4SectInCtx cloneObj = new FetchCsrInitFil4SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrInitFil4SectInCtx getFetchCsrInitFil4SectInCtx() {
            return new FetchCsrInitFil4SectInCtx();
    }
     public class FetchCsrInitFil4SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrInitFil4SectOutCtx clone() {
        FetchCsrInitFil4SectOutCtx cloneObj = new FetchCsrInitFil4SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrInitFil4SectOutCtx getFetchCsrInitFil4SectOutCtx() {
            return new FetchCsrInitFil4SectOutCtx();
    }
     public class FetchCsrRowsSect4921InCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of fetchRowsetMax
	 *	@return fetchRowsetMax
	 */
	public int getFetchRowsetMax() throws CFException {        
   		return work.getFetchRowsetMax();
	}
	
	/**
	 * 	Update FetchRowsetMax with the passed value
	 *	@param number
	 */
	public void setFetchRowsetMax(int number)  throws CFException{
		work.setFetchRowsetMax(number);
	}


	public void setFetchRowsetMax(long number)  throws CFException{
		work.setFetchRowsetMax((int)number);
	}


	/**
	 *	Returns the value of work
	 *	@return work
	 */   
	 public Work getWork() {
   	return work;
   }


	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 

	public BigDecimal getHvaSupAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaSupAmt((index));
	}

    public char[] getHvaSupAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaSupAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaSupAmt with the passed number
	 *	@param number
	 */
	public void setHvaSupAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaSupAmt((index),number);
   }

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hvaPartnVal
	 *	@return hvaPartnVal
	 */
   public char[] getHvaPartnVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPartnVal(index);
   }

  
	/**
	*  set variable hvaPartnVal
	*  @param value
	**/
   public void setHvaPartnVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPartnVal((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaPartnId
	 *	@return hvaPartnId
	 */
	public short getHvaPartnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPartnId((index));
	}
	
	/**
	 * 	Update HvaPartnId with the passed value
	 *	@param number
	 */
	public void setHvaPartnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),number);
	}

	public void setHvaPartnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}

	public void setHvaPartnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}



	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	public BigDecimal getHvaBaseDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseDedAmt((index));
	}

    public char[] getHvaBaseDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseDedAmt((index),number);
   }

	/**
	 *	Returns the value of hvaMskNullInd
	 *	@return hvaMskNullInd
	 */
	public short getHvaMskNullInd(int index) throws CFException {        
   		return hvaClmHistArray.getHvaMskNullInd((index));
	}
	
	/**
	 * 	Update HvaMskNullInd with the passed value
	 *	@param number
	 */
	public void setHvaMskNullInd(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),number);
	}

	public void setHvaMskNullInd(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}

	public void setHvaMskNullInd(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}



	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of hvaTransCd
	 *	@return hvaTransCd
	 */
   public char[] getHvaTransCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTransCd(index);
   }

  
	/**
	*  set variable hvaTransCd
	*  @param value
	**/
   public void setHvaTransCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTransCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktNbr
	 *	@return hvaProvMktNbr
	 */
   public char[] getHvaProvMktNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktNbr(index);
   }

  
	/**
	*  set variable hvaProvMktNbr
	*  @param value
	**/
   public void setHvaProvMktNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktNbr((index),value);
   } 

	public BigDecimal getHvaBaseAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseAmt((index));
	}

    public char[] getHvaBaseAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseAmt((index),number);
   }

	public BigDecimal getHvaCobCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCobCrResAmt((index));
	}

    public char[] getHvaCobCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCobCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCobCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaCobCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCobCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPpoCd
	 *	@return hvaPpoCd
	 */
   public char[] getHvaPpoCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPpoCd(index);
   }

  
	/**
	*  set variable hvaPpoCd
	*  @param value
	**/
   public void setHvaPpoCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPpoCd((index),value);
   } 

	public BigDecimal getHvaMmDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmDedAmt((index));
	}

    public char[] getHvaMmDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmDedAmt((index),number);
   }

	public BigDecimal getHvaMcCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMcCrResAmt((index));
	}

    public char[] getHvaMcCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMcCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMcCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaMcCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMcCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProvIpaId
	 *	@return hvaProvIpaId
	 */
   public char[] getHvaProvIpaId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvIpaId(index);
   }

  
	/**
	*  set variable hvaProvIpaId
	*  @param value
	**/
   public void setHvaProvIpaId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvIpaId((index),value);
   } 

	/**
	 *	Returns the value of hvaPmtSvcCd
	 *	@return hvaPmtSvcCd
	 */
   public char[] getHvaPmtSvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPmtSvcCd(index);
   }

  
	/**
	*  set variable hvaPmtSvcCd
	*  @param value
	**/
   public void setHvaPmtSvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPmtSvcCd((index),value);
   } 

	public BigDecimal getHvaMmAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmAmt((index));
	}

    public char[] getHvaMmAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvEobNm
	 *	@return hvaProvEobNm
	 */
   public char[] getHvaProvEobNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvEobNm(index);
   }

  
	/**
	*  set variable hvaProvEobNm
	*  @param value
	**/
   public void setHvaProvEobNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvEobNm((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	public BigDecimal getHvaCopayAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCopayAmt((index));
	}

    public char[] getHvaCopayAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCopayAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCopayAmt with the passed number
	 *	@param number
	 */
	public void setHvaCopayAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCopayAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvPrdctCd
	 *	@return hvaProvPrdctCd
	 */
   public char[] getHvaProvPrdctCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvPrdctCd(index);
   }

  
	/**
	*  set variable hvaProvPrdctCd
	*  @param value
	**/
   public void setHvaProvPrdctCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvPrdctCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPrsCreatSrcCd
	 *	@return hvaPrsCreatSrcCd
	 */
   public char[] getHvaPrsCreatSrcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPrsCreatSrcCd(index);
   }

  
	/**
	*  set variable hvaPrsCreatSrcCd
	*  @param value
	**/
   public void setHvaPrsCreatSrcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPrsCreatSrcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of hvaBaseDedDescTxt
	 *	@return hvaBaseDedDescTxt
	 */
   public char[] getHvaBaseDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBaseDedDescTxt(index);
   }

  
	/**
	*  set variable hvaBaseDedDescTxt
	*  @param value
	**/
   public void setHvaBaseDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBaseDedDescTxt((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvaMmDedDescTxt
	 *	@return hvaMmDedDescTxt
	 */
   public char[] getHvaMmDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMmDedDescTxt(index);
   }

  
	/**
	*  set variable hvaMmDedDescTxt
	*  @param value
	**/
   public void setHvaMmDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMmDedDescTxt((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of hvaOvrCd
	 *	@return hvaOvrCd
	 */
   public char[] getHvaOvrCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaOvrCd(index);
   }

  
	/**
	*  set variable hvaOvrCd
	*  @param value
	**/
   public void setHvaOvrCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaOvrCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktTypCd
	 *	@return hvaProvMktTypCd
	 */
   public char[] getHvaProvMktTypCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktTypCd(index);
   }

  
	/**
	*  set variable hvaProvMktTypCd
	*  @param value
	**/
   public void setHvaProvMktTypCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktTypCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of hvaParInd
	 *	@return hvaParInd
	 */
   public char[] getHvaParInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaParInd(index);
   }

  
	/**
	*  set variable hvaParInd
	*  @param value
	**/
   public void setHvaParInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaParInd((index),value);
   } 

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrRowsSect4921OutCtx getFetchCsrRowsSect4921OutCtx() {
            return new FetchCsrRowsSect4921OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect4921InCtx clone() {
        FetchCsrRowsSect4921InCtx cloneObj = new FetchCsrRowsSect4921InCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect4921InCtx getFetchCsrRowsSect4921InCtx() {
            return new FetchCsrRowsSect4921InCtx();
    }
     public class FetchCsrRowsSect4921OutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Test condition 100 for isSqlcodeFetchEnd()
	 *	@return  Returns true if isSqlcodeFetchEnd() is 100
	 */
   public boolean isSqlcodeFetchEnd() throws CFException {
      return work.isSqlcodeFetchEnd();
   }

	/**
	*  set values 100
	*/
   	public void setSqlcodeFetchEndTrue()  throws CFException{  			
    	work.setSqlcodeFetchEndTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 0 for isSqlcodeOk()
	 *	@return  Returns true if isSqlcodeOk() is 0
	 */
   public boolean isSqlcodeOk() throws CFException {
      return work.isSqlcodeOk();
   }

	/**
	*  set values 0
	*/
   	public void setSqlcodeOkTrue()  throws CFException{  			
    	work.setSqlcodeOkTrue();
   	}
	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect4921OutCtx clone() {
        FetchCsrRowsSect4921OutCtx cloneObj = new FetchCsrRowsSect4921OutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect4921OutCtx getFetchCsrRowsSect4921OutCtx() {
            return new FetchCsrRowsSect4921OutCtx();
    }
     public class CloseCsrInitFil4SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public CloseCsrInitFil4SectOutCtx getCloseCsrInitFil4SectOutCtx() {
            return new CloseCsrInitFil4SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrInitFil4SectInCtx clone() {
        CloseCsrInitFil4SectInCtx cloneObj = new CloseCsrInitFil4SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrInitFil4SectInCtx getCloseCsrInitFil4SectInCtx() {
            return new CloseCsrInitFil4SectInCtx();
    }
     public class CloseCsrInitFil4SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrInitFil4SectOutCtx clone() {
        CloseCsrInitFil4SectOutCtx cloneObj = new CloseCsrInitFil4SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrInitFil4SectOutCtx getCloseCsrInitFil4SectOutCtx() {
            return new CloseCsrInitFil4SectOutCtx();
    }
     public class ProcCsrNextFil4SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcCsrNextFil4SectOutCtx getProcCsrNextFil4SectOutCtx() {
            return new ProcCsrNextFil4SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrNextFil4SectInCtx clone() {
        ProcCsrNextFil4SectInCtx cloneObj = new ProcCsrNextFil4SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrNextFil4SectInCtx getProcCsrNextFil4SectInCtx() {
            return new ProcCsrNextFil4SectInCtx();
    }
     public class ProcCsrNextFil4SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrNextFil4SectOutCtx clone() {
        ProcCsrNextFil4SectOutCtx cloneObj = new ProcCsrNextFil4SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrNextFil4SectOutCtx getProcCsrNextFil4SectOutCtx() {
            return new ProcCsrNextFil4SectOutCtx();
    }
     public class OpenCsrNextFil4SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of hvRemarkCd2
	 *	@return hvRemarkCd2
	 */
   public char[] getHvRemarkCd2() throws CFException  {              
   		return hostVariables.getHvRemarkCd2();
   }

  
	/**
	*  set variable hvRemarkCd2
	*  @param value
	**/
   public void setHvRemarkCd2(char[] value) throws CFException {
      hostVariables.setHvRemarkCd2(value);
   } 

     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd2(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd2 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source) {
      hostVariables.setHvRemarkCd2(source);
   }  
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of hvCauseCd1
	 *	@return hvCauseCd1
	 */
   public char[] getHvCauseCd1() throws CFException  {              
   		return hostVariables.getHvCauseCd1();
   }

  
	/**
	*  set variable hvCauseCd1
	*  @param value
	**/
   public void setHvCauseCd1(char[] value) throws CFException {
      hostVariables.setHvCauseCd1(value);
   } 

     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd1(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd1 with another Field
	 *	@param value
	 */
   public void setHvCauseCd1(Field source) {
      hostVariables.setHvCauseCd1(source);
   }  
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvCptFrom
	 *	@return hvCptFrom
	 */
   public char[] getHvCptFrom() throws CFException  {              
   		return hostVariables.getHvCptFrom();
   }

  
	/**
	*  set variable hvCptFrom
	*  @param value
	**/
   public void setHvCptFrom(char[] value) throws CFException {
      hostVariables.setHvCptFrom(value);
   } 

     /**
	 * 	Update HvCptFrom 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCptFrom(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCptFrom(source, sourceIndex);
   	
   }
   
   public void setHvCptFrom(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCptFrom 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCptFrom(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCptFrom with another Field
	 *	@param value
	 */
   public void setHvCptFrom(Field source) {
      hostVariables.setHvCptFrom(source);
   }  
   
     /**
	 * 	Update HvCptFrom 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCptFrom(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCptFrom 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCptFrom(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of hvCptThru
	 *	@return hvCptThru
	 */
   public char[] getHvCptThru() throws CFException  {              
   		return hostVariables.getHvCptThru();
   }

  
	/**
	*  set variable hvCptThru
	*  @param value
	**/
   public void setHvCptThru(char[] value) throws CFException {
      hostVariables.setHvCptThru(value);
   } 

     /**
	 * 	Update HvCptThru 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCptThru(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCptThru(source, sourceIndex);
   	
   }
   
   public void setHvCptThru(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCptThru 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCptThru(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCptThru with another Field
	 *	@param value
	 */
   public void setHvCptThru(Field source) {
      hostVariables.setHvCptThru(source);
   }  
   
     /**
	 * 	Update HvCptThru 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCptThru(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCptThru 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCptThru(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFstDt
	 *	@return hvFstDt
	 */
   public char[] getHvFstDt() throws CFException  {              
   		return hostVariables.getHvFstDtGroup().getHvFstDt();
   }

  
	/**
	*  set variable hvFstDt
	*  @param value
	**/
   public void setHvFstDt(char[] value) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(value);
   } 

     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex);
   	
   }
   
   public void setHvFstDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFstDt with another Field
	 *	@param value
	 */
   public void setHvFstDt(Field source) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source);
   }  
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hostVariables
	 *	@return hostVariables
	 */   
	 public HostVariables getHostVariables() {
   	return hostVariables;
   }


	/**
	 *	Returns the value of hvProvTin
	 *	@return hvProvTin
	 */
   public char[] getHvProvTin() throws CFException  {              
   		return hostVariables.getHvProvTinsuffRedefined().getHvProvTin();
   }

  
	/**
	*  set variable hvProvTin
	*  @param value
	**/
   public void setHvProvTin(char[] value) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(value);
   } 

     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex);
   	
   }
   
   public void setHvProvTin(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin with another Field
	 *	@param value
	 */
   public void setHvProvTin(Field source) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source);
   }  
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvCauseCd2
	 *	@return hvCauseCd2
	 */
   public char[] getHvCauseCd2() throws CFException  {              
   		return hostVariables.getHvCauseCd2();
   }

  
	/**
	*  set variable hvCauseCd2
	*  @param value
	**/
   public void setHvCauseCd2(char[] value) throws CFException {
      hostVariables.setHvCauseCd2(value);
   } 

     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd2(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd2 with another Field
	 *	@param value
	 */
   public void setHvCauseCd2(Field source) {
      hostVariables.setHvCauseCd2(source);
   }  
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvProvTin1
	 *	@return hvProvTin1
	 */
   public char[] getHvProvTin1() throws CFException  {              
   		return hostVariables.getHvProvTinsuff1Redefined().getHvProvTin1();
   }

  
	/**
	*  set variable hvProvTin1
	*  @param value
	**/
   public void setHvProvTin1(char[] value) throws CFException {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(value);
   } 

     /**
	 * 	Update HvProvTin1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin1(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex);
   	
   }
   
   public void setHvProvTin1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin1 with another Field
	 *	@param value
	 */
   public void setHvProvTin1(Field source) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source);
   }  
   
     /**
	 * 	Update HvProvTin1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvLstSrvcDt
	 *	@return hvLstSrvcDt
	 */
   public char[] getHvLstSrvcDt() throws CFException  {              
   		return hostVariables.getHvLstSrvcDtGroup().getHvLstSrvcDt();
   }

  
	/**
	*  set variable hvLstSrvcDt
	*  @param value
	**/
   public void setHvLstSrvcDt(char[] value) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(value);
   } 

     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex);
   	
   }
   
   public void setHvLstSrvcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvLstSrvcDt with another Field
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source);
   }  
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvRemarkCd1
	 *	@return hvRemarkCd1
	 */
   public char[] getHvRemarkCd1() throws CFException  {              
   		return hostVariables.getHvRemarkCd1();
   }

  
	/**
	*  set variable hvRemarkCd1
	*  @param value
	**/
   public void setHvRemarkCd1(char[] value) throws CFException {
      hostVariables.setHvRemarkCd1(value);
   } 

     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd1(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd1 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source) {
      hostVariables.setHvRemarkCd1(source);
   }  
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public OpenCsrNextFil4SectOutCtx getOpenCsrNextFil4SectOutCtx() {
            return new OpenCsrNextFil4SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrNextFil4SectInCtx clone() {
        OpenCsrNextFil4SectInCtx cloneObj = new OpenCsrNextFil4SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrNextFil4SectInCtx getOpenCsrNextFil4SectInCtx() {
            return new OpenCsrNextFil4SectInCtx();
    }
     public class OpenCsrNextFil4SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dderefEeId
	 *	@return dderefEeId
	 */
   public char[] getDderefEeId() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefEeIdGroup().getDderefEeId();
   }

  
	/**
	*  set variable dderefEeId
	*  @param value
	**/
   public void setDderefEeId(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(value);
   } 

     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex);
   	
   }
   
   public void setDderefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeId with another Field
	 *	@param value
	 */
   public void setDderefEeId(Field source) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source);
   }  
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public int getNextIcnSufxVersNbr() throws CFException {
   		return nextKey.getNextIcnSufxVersNbr();
	}


	/**
	 *	Returns String value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public char[]  getNextIcnSufxVersNbrString() throws CFException {
	     return String.valueOf(nextKey.getNextIcnSufxVersNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextIcnSufxVersNbrIsNumeric()  throws CFException{
	    return nextKey.nextIcnSufxVersNbrIsNumeric();
	}

	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setNextIcnSufxVersNbr(int number)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(number);
	}
	

	public void setNextIcnSufxVersNbr(long number)  throws CFException{
	    nextKey.setNextIcnSufxVersNbr(number);
	}
	
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbr(char[] value)  throws CFException {
		nextKey.setNextIcnSufxVersNbr(value);
	}
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbrString(char[] value)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(value);
	}	

	/**
	 *	Returns the value of dderefIcnSufxVersNbr
	 *	@return dderefIcnSufxVersNbr
	 */
	public short getDderefIcnSufxVersNbr() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefIcnSufxVersNbr();
	}
	
	/**
	 * 	Update DderefIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setDderefIcnSufxVersNbr(short number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr(number);
	}

	public void setDderefIcnSufxVersNbr(int number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}

	public void setDderefIcnSufxVersNbr(long number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}



	/**
	 *	Returns the value of dderefProcDt
	 *	@return dderefProcDt
	 */
   public char[] getDderefProcDt() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcDtGroup().getDderefProcDt();
   }

  
	/**
	*  set variable dderefProcDt
	*  @param value
	**/
   public void setDderefProcDt(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(value);
   } 

     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex);
   	
   }
   
   public void setDderefProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcDt with another Field
	 *	@param value
	 */
   public void setDderefProcDt(Field source) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source);
   }  
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextLnId
	 *	@return nextLnId
	 */
	public int getNextLnId() throws CFException {
   		return nextKey.getNextLnId();
	}


	/**
	 *	Returns String value of nextLnId
	 *	@return nextLnId
	 */
	public char[]  getNextLnIdString() throws CFException {
	     return String.valueOf(nextKey.getNextLnIdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextLnIdIsNumeric()  throws CFException{
	    return nextKey.nextLnIdIsNumeric();
	}

	/**
	 * 	Update NextLnId with the passed value
	 *	@param number
	 */
	public void setNextLnId(int number)  throws CFException{
		nextKey.setNextLnId(number);
	}
	

	public void setNextLnId(long number)  throws CFException{
	    nextKey.setNextLnId(number);
	}
	
	
	/**
	 * 	Update NextLnId with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextLnId(char[] value)  throws CFException {
		nextKey.setNextLnId(value);
	}
	
	/**
	 * 	Update NextLnId with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextLnIdString(char[] value)  throws CFException{
		nextKey.setNextLnId(value);
	}	

	/**
	 *	Returns the value of dderefIcnSufxCd
	 *	@return dderefIcnSufxCd
	 */
   public char[] getDderefIcnSufxCd() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().getDderefIcnSufxCd();
   }

  
	/**
	*  set variable dderefIcnSufxCd
	*  @param value
	**/
   public void setDderefIcnSufxCd(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(value);
   } 

     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setDderefIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefIcnSufxCd with another Field
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source);
   }  
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of nextPgmIdLstCharVal
	 *	@return nextPgmIdLstCharVal
	 */
   public char[] getNextPgmIdLstCharVal() throws CFException  {              
   		return nextKey.getNextPgmIdLstCharVal();
   }

  
	/**
	*  set variable nextPgmIdLstCharVal
	*  @param value
	**/
   public void setNextPgmIdLstCharVal(char[] value) throws CFException {
      nextKey.setNextPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source) {
      nextKey.setNextPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefLnId
	 *	@return dderefLnId
	 */
	public short getDderefLnId() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefLnIdGroup().getDderefLnId();
	}
	
	/**
	 * 	Update DderefLnId with the passed value
	 *	@param number
	 */
	public void setDderefLnId(short number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId(number);
	}

	public void setDderefLnId(int number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}

	public void setDderefLnId(long number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}



	/**
	 *	Returns the value of nextProcTm
	 *	@return nextProcTm
	 */
   public char[] getNextProcTm() throws CFException  {              
   		return nextKey.getNextProcTm();
   }

  
	/**
	*  set variable nextProcTm
	*  @param value
	**/
   public void setNextProcTm(char[] value) throws CFException {
      nextKey.setNextProcTm(value);
   } 

     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcTm(source, sourceIndex);
   	
   }
   
   public void setNextProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcTm with another Field
	 *	@param value
	 */
   public void setNextProcTm(Field source) {
      nextKey.setNextProcTm(source);
   }  
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefProcTm
	 *	@return dderefProcTm
	 */
   public char[] getDderefProcTm() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcTmGroup().getDderefProcTm();
   }

  
	/**
	*  set variable dderefProcTm
	*  @param value
	**/
   public void setDderefProcTm(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(value);
   } 

     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex);
   	
   }
   
   public void setDderefProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcTm with another Field
	 *	@param value
	 */
   public void setDderefProcTm(Field source) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source);
   }  
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dderefInvnCtlNbr
	 *	@return dderefInvnCtlNbr
	 */
   public char[] getDderefInvnCtlNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().getDderefInvnCtlNbr();
   }

  
	/**
	*  set variable dderefInvnCtlNbr
	*  @param value
	**/
   public void setDderefInvnCtlNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(value);
   } 

     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextIcnSufxCd
	 *	@return nextIcnSufxCd
	 */
   public char[] getNextIcnSufxCd() throws CFException  {              
   		return nextKey.getNextIcnSufxCd();
   }

  
	/**
	*  set variable nextIcnSufxCd
	*  @param value
	**/
   public void setNextIcnSufxCd(char[] value) throws CFException {
      nextKey.setNextIcnSufxCd(value);
   } 

     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setNextIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextIcnSufxCd with another Field
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source) {
      nextKey.setNextIcnSufxCd(source);
   }  
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPolNbr
	 *	@return dderefPolNbr
	 */
   public char[] getDderefPolNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPolNbrGroup().getDderefPolNbr();
   }

  
	/**
	*  set variable dderefPolNbr
	*  @param value
	**/
   public void setDderefPolNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(value);
   } 

     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDderefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbr with another Field
	 *	@param value
	 */
   public void setDderefPolNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source);
   }  
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextInvnCtlNbr
	 *	@return nextInvnCtlNbr
	 */
   public char[] getNextInvnCtlNbr() throws CFException  {              
   		return nextKey.getNextInvnCtlNbr();
   }

  
	/**
	*  set variable nextInvnCtlNbr
	*  @param value
	**/
   public void setNextInvnCtlNbr(char[] value) throws CFException {
      nextKey.setNextInvnCtlNbr(value);
   } 

     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setNextInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source) {
      nextKey.setNextInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextKey
	 *	@return nextKey
	 */   
	 public NextKey getNextKey() {
   	return nextKey;
   }


	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefDepnNbr
	 *	@return dderefDepnNbr
	 */
   public char[] getDderefDepnNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefDepnNbrGroup().getDderefDepnNbr();
   }

  
	/**
	*  set variable dderefDepnNbr
	*  @param value
	**/
   public void setDderefDepnNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(value);
   } 

     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDderefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbr with another Field
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source);
   }  
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextProcDt
	 *	@return nextProcDt
	 */
   public char[] getNextProcDt() throws CFException  {              
   		return nextKey.getNextProcDt();
   }

  
	/**
	*  set variable nextProcDt
	*  @param value
	**/
   public void setNextProcDt(char[] value) throws CFException {
      nextKey.setNextProcDt(value);
   } 

     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcDt(source, sourceIndex);
   	
   }
   
   public void setNextProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcDt with another Field
	 *	@param value
	 */
   public void setNextProcDt(Field source) {
      nextKey.setNextProcDt(source);
   }  
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPgmIdLstCharVal
	 *	@return dderefPgmIdLstCharVal
	 */
   public char[] getDderefPgmIdLstCharVal() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().getDderefPgmIdLstCharVal();
   }

  
	/**
	*  set variable dderefPgmIdLstCharVal
	*  @param value
	**/
   public void setDderefPgmIdLstCharVal(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrNextFil4SectOutCtx clone() {
        OpenCsrNextFil4SectOutCtx cloneObj = new OpenCsrNextFil4SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrNextFil4SectOutCtx getOpenCsrNextFil4SectOutCtx() {
            return new OpenCsrNextFil4SectOutCtx();
    }
     public class FetchCsrNextFil4SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrNextFil4SectOutCtx getFetchCsrNextFil4SectOutCtx() {
            return new FetchCsrNextFil4SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrNextFil4SectInCtx clone() {
        FetchCsrNextFil4SectInCtx cloneObj = new FetchCsrNextFil4SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrNextFil4SectInCtx getFetchCsrNextFil4SectInCtx() {
            return new FetchCsrNextFil4SectInCtx();
    }
     public class FetchCsrNextFil4SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrNextFil4SectOutCtx clone() {
        FetchCsrNextFil4SectOutCtx cloneObj = new FetchCsrNextFil4SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrNextFil4SectOutCtx getFetchCsrNextFil4SectOutCtx() {
            return new FetchCsrNextFil4SectOutCtx();
    }
     public class FetchCsrRowsSect5021InCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of fetchRowsetMax
	 *	@return fetchRowsetMax
	 */
	public int getFetchRowsetMax() throws CFException {        
   		return work.getFetchRowsetMax();
	}
	
	/**
	 * 	Update FetchRowsetMax with the passed value
	 *	@param number
	 */
	public void setFetchRowsetMax(int number)  throws CFException{
		work.setFetchRowsetMax(number);
	}


	public void setFetchRowsetMax(long number)  throws CFException{
		work.setFetchRowsetMax((int)number);
	}


	/**
	 *	Returns the value of work
	 *	@return work
	 */   
	 public Work getWork() {
   	return work;
   }


	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 

	public BigDecimal getHvaSupAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaSupAmt((index));
	}

    public char[] getHvaSupAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaSupAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaSupAmt with the passed number
	 *	@param number
	 */
	public void setHvaSupAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaSupAmt((index),number);
   }

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hvaPartnVal
	 *	@return hvaPartnVal
	 */
   public char[] getHvaPartnVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPartnVal(index);
   }

  
	/**
	*  set variable hvaPartnVal
	*  @param value
	**/
   public void setHvaPartnVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPartnVal((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaPartnId
	 *	@return hvaPartnId
	 */
	public short getHvaPartnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPartnId((index));
	}
	
	/**
	 * 	Update HvaPartnId with the passed value
	 *	@param number
	 */
	public void setHvaPartnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),number);
	}

	public void setHvaPartnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}

	public void setHvaPartnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}



	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	public BigDecimal getHvaBaseDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseDedAmt((index));
	}

    public char[] getHvaBaseDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseDedAmt((index),number);
   }

	/**
	 *	Returns the value of hvaMskNullInd
	 *	@return hvaMskNullInd
	 */
	public short getHvaMskNullInd(int index) throws CFException {        
   		return hvaClmHistArray.getHvaMskNullInd((index));
	}
	
	/**
	 * 	Update HvaMskNullInd with the passed value
	 *	@param number
	 */
	public void setHvaMskNullInd(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),number);
	}

	public void setHvaMskNullInd(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}

	public void setHvaMskNullInd(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}



	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of hvaTransCd
	 *	@return hvaTransCd
	 */
   public char[] getHvaTransCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTransCd(index);
   }

  
	/**
	*  set variable hvaTransCd
	*  @param value
	**/
   public void setHvaTransCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTransCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktNbr
	 *	@return hvaProvMktNbr
	 */
   public char[] getHvaProvMktNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktNbr(index);
   }

  
	/**
	*  set variable hvaProvMktNbr
	*  @param value
	**/
   public void setHvaProvMktNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktNbr((index),value);
   } 

	public BigDecimal getHvaBaseAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseAmt((index));
	}

    public char[] getHvaBaseAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseAmt((index),number);
   }

	public BigDecimal getHvaCobCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCobCrResAmt((index));
	}

    public char[] getHvaCobCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCobCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCobCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaCobCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCobCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPpoCd
	 *	@return hvaPpoCd
	 */
   public char[] getHvaPpoCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPpoCd(index);
   }

  
	/**
	*  set variable hvaPpoCd
	*  @param value
	**/
   public void setHvaPpoCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPpoCd((index),value);
   } 

	public BigDecimal getHvaMmDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmDedAmt((index));
	}

    public char[] getHvaMmDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmDedAmt((index),number);
   }

	public BigDecimal getHvaMcCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMcCrResAmt((index));
	}

    public char[] getHvaMcCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMcCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMcCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaMcCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMcCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProvIpaId
	 *	@return hvaProvIpaId
	 */
   public char[] getHvaProvIpaId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvIpaId(index);
   }

  
	/**
	*  set variable hvaProvIpaId
	*  @param value
	**/
   public void setHvaProvIpaId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvIpaId((index),value);
   } 

	/**
	 *	Returns the value of hvaPmtSvcCd
	 *	@return hvaPmtSvcCd
	 */
   public char[] getHvaPmtSvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPmtSvcCd(index);
   }

  
	/**
	*  set variable hvaPmtSvcCd
	*  @param value
	**/
   public void setHvaPmtSvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPmtSvcCd((index),value);
   } 

	public BigDecimal getHvaMmAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmAmt((index));
	}

    public char[] getHvaMmAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvEobNm
	 *	@return hvaProvEobNm
	 */
   public char[] getHvaProvEobNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvEobNm(index);
   }

  
	/**
	*  set variable hvaProvEobNm
	*  @param value
	**/
   public void setHvaProvEobNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvEobNm((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	public BigDecimal getHvaCopayAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCopayAmt((index));
	}

    public char[] getHvaCopayAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCopayAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCopayAmt with the passed number
	 *	@param number
	 */
	public void setHvaCopayAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCopayAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvPrdctCd
	 *	@return hvaProvPrdctCd
	 */
   public char[] getHvaProvPrdctCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvPrdctCd(index);
   }

  
	/**
	*  set variable hvaProvPrdctCd
	*  @param value
	**/
   public void setHvaProvPrdctCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvPrdctCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPrsCreatSrcCd
	 *	@return hvaPrsCreatSrcCd
	 */
   public char[] getHvaPrsCreatSrcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPrsCreatSrcCd(index);
   }

  
	/**
	*  set variable hvaPrsCreatSrcCd
	*  @param value
	**/
   public void setHvaPrsCreatSrcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPrsCreatSrcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of hvaBaseDedDescTxt
	 *	@return hvaBaseDedDescTxt
	 */
   public char[] getHvaBaseDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBaseDedDescTxt(index);
   }

  
	/**
	*  set variable hvaBaseDedDescTxt
	*  @param value
	**/
   public void setHvaBaseDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBaseDedDescTxt((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvaMmDedDescTxt
	 *	@return hvaMmDedDescTxt
	 */
   public char[] getHvaMmDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMmDedDescTxt(index);
   }

  
	/**
	*  set variable hvaMmDedDescTxt
	*  @param value
	**/
   public void setHvaMmDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMmDedDescTxt((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of hvaOvrCd
	 *	@return hvaOvrCd
	 */
   public char[] getHvaOvrCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaOvrCd(index);
   }

  
	/**
	*  set variable hvaOvrCd
	*  @param value
	**/
   public void setHvaOvrCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaOvrCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktTypCd
	 *	@return hvaProvMktTypCd
	 */
   public char[] getHvaProvMktTypCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktTypCd(index);
   }

  
	/**
	*  set variable hvaProvMktTypCd
	*  @param value
	**/
   public void setHvaProvMktTypCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktTypCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of hvaParInd
	 *	@return hvaParInd
	 */
   public char[] getHvaParInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaParInd(index);
   }

  
	/**
	*  set variable hvaParInd
	*  @param value
	**/
   public void setHvaParInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaParInd((index),value);
   } 

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrRowsSect5021OutCtx getFetchCsrRowsSect5021OutCtx() {
            return new FetchCsrRowsSect5021OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect5021InCtx clone() {
        FetchCsrRowsSect5021InCtx cloneObj = new FetchCsrRowsSect5021InCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect5021InCtx getFetchCsrRowsSect5021InCtx() {
            return new FetchCsrRowsSect5021InCtx();
    }
     public class FetchCsrRowsSect5021OutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Test condition 100 for isSqlcodeFetchEnd()
	 *	@return  Returns true if isSqlcodeFetchEnd() is 100
	 */
   public boolean isSqlcodeFetchEnd() throws CFException {
      return work.isSqlcodeFetchEnd();
   }

	/**
	*  set values 100
	*/
   	public void setSqlcodeFetchEndTrue()  throws CFException{  			
    	work.setSqlcodeFetchEndTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 0 for isSqlcodeOk()
	 *	@return  Returns true if isSqlcodeOk() is 0
	 */
   public boolean isSqlcodeOk() throws CFException {
      return work.isSqlcodeOk();
   }

	/**
	*  set values 0
	*/
   	public void setSqlcodeOkTrue()  throws CFException{  			
    	work.setSqlcodeOkTrue();
   	}
	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect5021OutCtx clone() {
        FetchCsrRowsSect5021OutCtx cloneObj = new FetchCsrRowsSect5021OutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect5021OutCtx getFetchCsrRowsSect5021OutCtx() {
            return new FetchCsrRowsSect5021OutCtx();
    }
     public class CloseCsrNextFil4SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public CloseCsrNextFil4SectOutCtx getCloseCsrNextFil4SectOutCtx() {
            return new CloseCsrNextFil4SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrNextFil4SectInCtx clone() {
        CloseCsrNextFil4SectInCtx cloneObj = new CloseCsrNextFil4SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrNextFil4SectInCtx getCloseCsrNextFil4SectInCtx() {
            return new CloseCsrNextFil4SectInCtx();
    }
     public class CloseCsrNextFil4SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrNextFil4SectOutCtx clone() {
        CloseCsrNextFil4SectOutCtx cloneObj = new CloseCsrNextFil4SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrNextFil4SectOutCtx getCloseCsrNextFil4SectOutCtx() {
            return new CloseCsrNextFil4SectOutCtx();
    }
     public class ProcCsrInitFil5SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcCsrInitFil5SectOutCtx getProcCsrInitFil5SectOutCtx() {
            return new ProcCsrInitFil5SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrInitFil5SectInCtx clone() {
        ProcCsrInitFil5SectInCtx cloneObj = new ProcCsrInitFil5SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrInitFil5SectInCtx getProcCsrInitFil5SectInCtx() {
            return new ProcCsrInitFil5SectInCtx();
    }
     public class ProcCsrInitFil5SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrInitFil5SectOutCtx clone() {
        ProcCsrInitFil5SectOutCtx cloneObj = new ProcCsrInitFil5SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrInitFil5SectOutCtx getProcCsrInitFil5SectOutCtx() {
            return new ProcCsrInitFil5SectOutCtx();
    }
     public class OpenCsrInitFil5SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of hvRemarkCd2
	 *	@return hvRemarkCd2
	 */
   public char[] getHvRemarkCd2() throws CFException  {              
   		return hostVariables.getHvRemarkCd2();
   }

  
	/**
	*  set variable hvRemarkCd2
	*  @param value
	**/
   public void setHvRemarkCd2(char[] value) throws CFException {
      hostVariables.setHvRemarkCd2(value);
   } 

     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd2(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd2 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source) {
      hostVariables.setHvRemarkCd2(source);
   }  
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvRevFrom
	 *	@return hvRevFrom
	 */
   public char[] getHvRevFrom() throws CFException  {              
   		return hostVariables.getHvRevFrom();
   }

  
	/**
	*  set variable hvRevFrom
	*  @param value
	**/
   public void setHvRevFrom(char[] value) throws CFException {
      hostVariables.setHvRevFrom(value);
   } 

     /**
	 * 	Update HvRevFrom 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRevFrom(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRevFrom(source, sourceIndex);
   	
   }
   
   public void setHvRevFrom(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRevFrom 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRevFrom(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRevFrom with another Field
	 *	@param value
	 */
   public void setHvRevFrom(Field source) {
      hostVariables.setHvRevFrom(source);
   }  
   
     /**
	 * 	Update HvRevFrom 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRevFrom(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRevFrom 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRevFrom(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of hvCauseCd1
	 *	@return hvCauseCd1
	 */
   public char[] getHvCauseCd1() throws CFException  {              
   		return hostVariables.getHvCauseCd1();
   }

  
	/**
	*  set variable hvCauseCd1
	*  @param value
	**/
   public void setHvCauseCd1(char[] value) throws CFException {
      hostVariables.setHvCauseCd1(value);
   } 

     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd1(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd1 with another Field
	 *	@param value
	 */
   public void setHvCauseCd1(Field source) {
      hostVariables.setHvCauseCd1(source);
   }  
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of hvFstDt
	 *	@return hvFstDt
	 */
   public char[] getHvFstDt() throws CFException  {              
   		return hostVariables.getHvFstDtGroup().getHvFstDt();
   }

  
	/**
	*  set variable hvFstDt
	*  @param value
	**/
   public void setHvFstDt(char[] value) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(value);
   } 

     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex);
   	
   }
   
   public void setHvFstDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFstDt with another Field
	 *	@param value
	 */
   public void setHvFstDt(Field source) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source);
   }  
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hostVariables
	 *	@return hostVariables
	 */   
	 public HostVariables getHostVariables() {
   	return hostVariables;
   }


	/**
	 *	Returns the value of hvProvTin
	 *	@return hvProvTin
	 */
   public char[] getHvProvTin() throws CFException  {              
   		return hostVariables.getHvProvTinsuffRedefined().getHvProvTin();
   }

  
	/**
	*  set variable hvProvTin
	*  @param value
	**/
   public void setHvProvTin(char[] value) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(value);
   } 

     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex);
   	
   }
   
   public void setHvProvTin(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin with another Field
	 *	@param value
	 */
   public void setHvProvTin(Field source) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source);
   }  
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvRevThru
	 *	@return hvRevThru
	 */
   public char[] getHvRevThru() throws CFException  {              
   		return hostVariables.getHvRevThru();
   }

  
	/**
	*  set variable hvRevThru
	*  @param value
	**/
   public void setHvRevThru(char[] value) throws CFException {
      hostVariables.setHvRevThru(value);
   } 

     /**
	 * 	Update HvRevThru 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRevThru(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRevThru(source, sourceIndex);
   	
   }
   
   public void setHvRevThru(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRevThru 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRevThru(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRevThru with another Field
	 *	@param value
	 */
   public void setHvRevThru(Field source) {
      hostVariables.setHvRevThru(source);
   }  
   
     /**
	 * 	Update HvRevThru 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRevThru(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRevThru 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRevThru(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvCauseCd2
	 *	@return hvCauseCd2
	 */
   public char[] getHvCauseCd2() throws CFException  {              
   		return hostVariables.getHvCauseCd2();
   }

  
	/**
	*  set variable hvCauseCd2
	*  @param value
	**/
   public void setHvCauseCd2(char[] value) throws CFException {
      hostVariables.setHvCauseCd2(value);
   } 

     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd2(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd2 with another Field
	 *	@param value
	 */
   public void setHvCauseCd2(Field source) {
      hostVariables.setHvCauseCd2(source);
   }  
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvProvTin1
	 *	@return hvProvTin1
	 */
   public char[] getHvProvTin1() throws CFException  {              
   		return hostVariables.getHvProvTinsuff1Redefined().getHvProvTin1();
   }

  
	/**
	*  set variable hvProvTin1
	*  @param value
	**/
   public void setHvProvTin1(char[] value) throws CFException {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(value);
   } 

     /**
	 * 	Update HvProvTin1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin1(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex);
   	
   }
   
   public void setHvProvTin1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin1 with another Field
	 *	@param value
	 */
   public void setHvProvTin1(Field source) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source);
   }  
   
     /**
	 * 	Update HvProvTin1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvLstSrvcDt
	 *	@return hvLstSrvcDt
	 */
   public char[] getHvLstSrvcDt() throws CFException  {              
   		return hostVariables.getHvLstSrvcDtGroup().getHvLstSrvcDt();
   }

  
	/**
	*  set variable hvLstSrvcDt
	*  @param value
	**/
   public void setHvLstSrvcDt(char[] value) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(value);
   } 

     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex);
   	
   }
   
   public void setHvLstSrvcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvLstSrvcDt with another Field
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source);
   }  
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvRemarkCd1
	 *	@return hvRemarkCd1
	 */
   public char[] getHvRemarkCd1() throws CFException  {              
   		return hostVariables.getHvRemarkCd1();
   }

  
	/**
	*  set variable hvRemarkCd1
	*  @param value
	**/
   public void setHvRemarkCd1(char[] value) throws CFException {
      hostVariables.setHvRemarkCd1(value);
   } 

     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd1(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd1 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source) {
      hostVariables.setHvRemarkCd1(source);
   }  
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public OpenCsrInitFil5SectOutCtx getOpenCsrInitFil5SectOutCtx() {
            return new OpenCsrInitFil5SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrInitFil5SectInCtx clone() {
        OpenCsrInitFil5SectInCtx cloneObj = new OpenCsrInitFil5SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrInitFil5SectInCtx getOpenCsrInitFil5SectInCtx() {
            return new OpenCsrInitFil5SectInCtx();
    }
     public class OpenCsrInitFil5SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dderefEeId
	 *	@return dderefEeId
	 */
   public char[] getDderefEeId() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefEeIdGroup().getDderefEeId();
   }

  
	/**
	*  set variable dderefEeId
	*  @param value
	**/
   public void setDderefEeId(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(value);
   } 

     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex);
   	
   }
   
   public void setDderefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeId with another Field
	 *	@param value
	 */
   public void setDderefEeId(Field source) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source);
   }  
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPolNbr
	 *	@return dderefPolNbr
	 */
   public char[] getDderefPolNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPolNbrGroup().getDderefPolNbr();
   }

  
	/**
	*  set variable dderefPolNbr
	*  @param value
	**/
   public void setDderefPolNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(value);
   } 

     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDderefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbr with another Field
	 *	@param value
	 */
   public void setDderefPolNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source);
   }  
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefDepnNbr
	 *	@return dderefDepnNbr
	 */
   public char[] getDderefDepnNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefDepnNbrGroup().getDderefDepnNbr();
   }

  
	/**
	*  set variable dderefDepnNbr
	*  @param value
	**/
   public void setDderefDepnNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(value);
   } 

     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDderefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbr with another Field
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source);
   }  
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrInitFil5SectOutCtx clone() {
        OpenCsrInitFil5SectOutCtx cloneObj = new OpenCsrInitFil5SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrInitFil5SectOutCtx getOpenCsrInitFil5SectOutCtx() {
            return new OpenCsrInitFil5SectOutCtx();
    }
     public class FetchCsrInitFil5SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrInitFil5SectOutCtx getFetchCsrInitFil5SectOutCtx() {
            return new FetchCsrInitFil5SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrInitFil5SectInCtx clone() {
        FetchCsrInitFil5SectInCtx cloneObj = new FetchCsrInitFil5SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrInitFil5SectInCtx getFetchCsrInitFil5SectInCtx() {
            return new FetchCsrInitFil5SectInCtx();
    }
     public class FetchCsrInitFil5SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrInitFil5SectOutCtx clone() {
        FetchCsrInitFil5SectOutCtx cloneObj = new FetchCsrInitFil5SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrInitFil5SectOutCtx getFetchCsrInitFil5SectOutCtx() {
            return new FetchCsrInitFil5SectOutCtx();
    }
     public class FetchCsrRowsSect5121InCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of fetchRowsetMax
	 *	@return fetchRowsetMax
	 */
	public int getFetchRowsetMax() throws CFException {        
   		return work.getFetchRowsetMax();
	}
	
	/**
	 * 	Update FetchRowsetMax with the passed value
	 *	@param number
	 */
	public void setFetchRowsetMax(int number)  throws CFException{
		work.setFetchRowsetMax(number);
	}


	public void setFetchRowsetMax(long number)  throws CFException{
		work.setFetchRowsetMax((int)number);
	}


	/**
	 *	Returns the value of work
	 *	@return work
	 */   
	 public Work getWork() {
   	return work;
   }


	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 

	public BigDecimal getHvaSupAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaSupAmt((index));
	}

    public char[] getHvaSupAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaSupAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaSupAmt with the passed number
	 *	@param number
	 */
	public void setHvaSupAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaSupAmt((index),number);
   }

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hvaPartnVal
	 *	@return hvaPartnVal
	 */
   public char[] getHvaPartnVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPartnVal(index);
   }

  
	/**
	*  set variable hvaPartnVal
	*  @param value
	**/
   public void setHvaPartnVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPartnVal((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaPartnId
	 *	@return hvaPartnId
	 */
	public short getHvaPartnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPartnId((index));
	}
	
	/**
	 * 	Update HvaPartnId with the passed value
	 *	@param number
	 */
	public void setHvaPartnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),number);
	}

	public void setHvaPartnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}

	public void setHvaPartnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}



	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	public BigDecimal getHvaBaseDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseDedAmt((index));
	}

    public char[] getHvaBaseDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseDedAmt((index),number);
   }

	/**
	 *	Returns the value of hvaMskNullInd
	 *	@return hvaMskNullInd
	 */
	public short getHvaMskNullInd(int index) throws CFException {        
   		return hvaClmHistArray.getHvaMskNullInd((index));
	}
	
	/**
	 * 	Update HvaMskNullInd with the passed value
	 *	@param number
	 */
	public void setHvaMskNullInd(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),number);
	}

	public void setHvaMskNullInd(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}

	public void setHvaMskNullInd(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}



	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of hvaTransCd
	 *	@return hvaTransCd
	 */
   public char[] getHvaTransCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTransCd(index);
   }

  
	/**
	*  set variable hvaTransCd
	*  @param value
	**/
   public void setHvaTransCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTransCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktNbr
	 *	@return hvaProvMktNbr
	 */
   public char[] getHvaProvMktNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktNbr(index);
   }

  
	/**
	*  set variable hvaProvMktNbr
	*  @param value
	**/
   public void setHvaProvMktNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktNbr((index),value);
   } 

	public BigDecimal getHvaBaseAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseAmt((index));
	}

    public char[] getHvaBaseAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseAmt((index),number);
   }

	public BigDecimal getHvaCobCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCobCrResAmt((index));
	}

    public char[] getHvaCobCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCobCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCobCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaCobCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCobCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPpoCd
	 *	@return hvaPpoCd
	 */
   public char[] getHvaPpoCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPpoCd(index);
   }

  
	/**
	*  set variable hvaPpoCd
	*  @param value
	**/
   public void setHvaPpoCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPpoCd((index),value);
   } 

	public BigDecimal getHvaMmDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmDedAmt((index));
	}

    public char[] getHvaMmDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmDedAmt((index),number);
   }

	public BigDecimal getHvaMcCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMcCrResAmt((index));
	}

    public char[] getHvaMcCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMcCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMcCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaMcCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMcCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProvIpaId
	 *	@return hvaProvIpaId
	 */
   public char[] getHvaProvIpaId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvIpaId(index);
   }

  
	/**
	*  set variable hvaProvIpaId
	*  @param value
	**/
   public void setHvaProvIpaId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvIpaId((index),value);
   } 

	/**
	 *	Returns the value of hvaPmtSvcCd
	 *	@return hvaPmtSvcCd
	 */
   public char[] getHvaPmtSvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPmtSvcCd(index);
   }

  
	/**
	*  set variable hvaPmtSvcCd
	*  @param value
	**/
   public void setHvaPmtSvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPmtSvcCd((index),value);
   } 

	public BigDecimal getHvaMmAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmAmt((index));
	}

    public char[] getHvaMmAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvEobNm
	 *	@return hvaProvEobNm
	 */
   public char[] getHvaProvEobNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvEobNm(index);
   }

  
	/**
	*  set variable hvaProvEobNm
	*  @param value
	**/
   public void setHvaProvEobNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvEobNm((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	public BigDecimal getHvaCopayAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCopayAmt((index));
	}

    public char[] getHvaCopayAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCopayAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCopayAmt with the passed number
	 *	@param number
	 */
	public void setHvaCopayAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCopayAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvPrdctCd
	 *	@return hvaProvPrdctCd
	 */
   public char[] getHvaProvPrdctCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvPrdctCd(index);
   }

  
	/**
	*  set variable hvaProvPrdctCd
	*  @param value
	**/
   public void setHvaProvPrdctCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvPrdctCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPrsCreatSrcCd
	 *	@return hvaPrsCreatSrcCd
	 */
   public char[] getHvaPrsCreatSrcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPrsCreatSrcCd(index);
   }

  
	/**
	*  set variable hvaPrsCreatSrcCd
	*  @param value
	**/
   public void setHvaPrsCreatSrcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPrsCreatSrcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of hvaBaseDedDescTxt
	 *	@return hvaBaseDedDescTxt
	 */
   public char[] getHvaBaseDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBaseDedDescTxt(index);
   }

  
	/**
	*  set variable hvaBaseDedDescTxt
	*  @param value
	**/
   public void setHvaBaseDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBaseDedDescTxt((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvaMmDedDescTxt
	 *	@return hvaMmDedDescTxt
	 */
   public char[] getHvaMmDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMmDedDescTxt(index);
   }

  
	/**
	*  set variable hvaMmDedDescTxt
	*  @param value
	**/
   public void setHvaMmDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMmDedDescTxt((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of hvaOvrCd
	 *	@return hvaOvrCd
	 */
   public char[] getHvaOvrCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaOvrCd(index);
   }

  
	/**
	*  set variable hvaOvrCd
	*  @param value
	**/
   public void setHvaOvrCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaOvrCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktTypCd
	 *	@return hvaProvMktTypCd
	 */
   public char[] getHvaProvMktTypCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktTypCd(index);
   }

  
	/**
	*  set variable hvaProvMktTypCd
	*  @param value
	**/
   public void setHvaProvMktTypCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktTypCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of hvaParInd
	 *	@return hvaParInd
	 */
   public char[] getHvaParInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaParInd(index);
   }

  
	/**
	*  set variable hvaParInd
	*  @param value
	**/
   public void setHvaParInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaParInd((index),value);
   } 

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrRowsSect5121OutCtx getFetchCsrRowsSect5121OutCtx() {
            return new FetchCsrRowsSect5121OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect5121InCtx clone() {
        FetchCsrRowsSect5121InCtx cloneObj = new FetchCsrRowsSect5121InCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect5121InCtx getFetchCsrRowsSect5121InCtx() {
            return new FetchCsrRowsSect5121InCtx();
    }
     public class FetchCsrRowsSect5121OutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Test condition 100 for isSqlcodeFetchEnd()
	 *	@return  Returns true if isSqlcodeFetchEnd() is 100
	 */
   public boolean isSqlcodeFetchEnd() throws CFException {
      return work.isSqlcodeFetchEnd();
   }

	/**
	*  set values 100
	*/
   	public void setSqlcodeFetchEndTrue()  throws CFException{  			
    	work.setSqlcodeFetchEndTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 0 for isSqlcodeOk()
	 *	@return  Returns true if isSqlcodeOk() is 0
	 */
   public boolean isSqlcodeOk() throws CFException {
      return work.isSqlcodeOk();
   }

	/**
	*  set values 0
	*/
   	public void setSqlcodeOkTrue()  throws CFException{  			
    	work.setSqlcodeOkTrue();
   	}
	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect5121OutCtx clone() {
        FetchCsrRowsSect5121OutCtx cloneObj = new FetchCsrRowsSect5121OutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect5121OutCtx getFetchCsrRowsSect5121OutCtx() {
            return new FetchCsrRowsSect5121OutCtx();
    }
     public class CloseCsrInitFil5SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public CloseCsrInitFil5SectOutCtx getCloseCsrInitFil5SectOutCtx() {
            return new CloseCsrInitFil5SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrInitFil5SectInCtx clone() {
        CloseCsrInitFil5SectInCtx cloneObj = new CloseCsrInitFil5SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrInitFil5SectInCtx getCloseCsrInitFil5SectInCtx() {
            return new CloseCsrInitFil5SectInCtx();
    }
     public class CloseCsrInitFil5SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrInitFil5SectOutCtx clone() {
        CloseCsrInitFil5SectOutCtx cloneObj = new CloseCsrInitFil5SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrInitFil5SectOutCtx getCloseCsrInitFil5SectOutCtx() {
            return new CloseCsrInitFil5SectOutCtx();
    }
     public class ProcCsrNextFil5SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcCsrNextFil5SectOutCtx getProcCsrNextFil5SectOutCtx() {
            return new ProcCsrNextFil5SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrNextFil5SectInCtx clone() {
        ProcCsrNextFil5SectInCtx cloneObj = new ProcCsrNextFil5SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrNextFil5SectInCtx getProcCsrNextFil5SectInCtx() {
            return new ProcCsrNextFil5SectInCtx();
    }
     public class ProcCsrNextFil5SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrNextFil5SectOutCtx clone() {
        ProcCsrNextFil5SectOutCtx cloneObj = new ProcCsrNextFil5SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrNextFil5SectOutCtx getProcCsrNextFil5SectOutCtx() {
            return new ProcCsrNextFil5SectOutCtx();
    }
     public class OpenCsrNextFil5SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of hvRemarkCd2
	 *	@return hvRemarkCd2
	 */
   public char[] getHvRemarkCd2() throws CFException  {              
   		return hostVariables.getHvRemarkCd2();
   }

  
	/**
	*  set variable hvRemarkCd2
	*  @param value
	**/
   public void setHvRemarkCd2(char[] value) throws CFException {
      hostVariables.setHvRemarkCd2(value);
   } 

     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd2(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd2 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source) {
      hostVariables.setHvRemarkCd2(source);
   }  
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvRevFrom
	 *	@return hvRevFrom
	 */
   public char[] getHvRevFrom() throws CFException  {              
   		return hostVariables.getHvRevFrom();
   }

  
	/**
	*  set variable hvRevFrom
	*  @param value
	**/
   public void setHvRevFrom(char[] value) throws CFException {
      hostVariables.setHvRevFrom(value);
   } 

     /**
	 * 	Update HvRevFrom 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRevFrom(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRevFrom(source, sourceIndex);
   	
   }
   
   public void setHvRevFrom(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRevFrom 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRevFrom(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRevFrom with another Field
	 *	@param value
	 */
   public void setHvRevFrom(Field source) {
      hostVariables.setHvRevFrom(source);
   }  
   
     /**
	 * 	Update HvRevFrom 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRevFrom(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRevFrom 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRevFrom(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of hvCauseCd1
	 *	@return hvCauseCd1
	 */
   public char[] getHvCauseCd1() throws CFException  {              
   		return hostVariables.getHvCauseCd1();
   }

  
	/**
	*  set variable hvCauseCd1
	*  @param value
	**/
   public void setHvCauseCd1(char[] value) throws CFException {
      hostVariables.setHvCauseCd1(value);
   } 

     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd1(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd1 with another Field
	 *	@param value
	 */
   public void setHvCauseCd1(Field source) {
      hostVariables.setHvCauseCd1(source);
   }  
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFstDt
	 *	@return hvFstDt
	 */
   public char[] getHvFstDt() throws CFException  {              
   		return hostVariables.getHvFstDtGroup().getHvFstDt();
   }

  
	/**
	*  set variable hvFstDt
	*  @param value
	**/
   public void setHvFstDt(char[] value) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(value);
   } 

     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex);
   	
   }
   
   public void setHvFstDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFstDt with another Field
	 *	@param value
	 */
   public void setHvFstDt(Field source) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source);
   }  
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hostVariables
	 *	@return hostVariables
	 */   
	 public HostVariables getHostVariables() {
   	return hostVariables;
   }


	/**
	 *	Returns the value of hvProvTin
	 *	@return hvProvTin
	 */
   public char[] getHvProvTin() throws CFException  {              
   		return hostVariables.getHvProvTinsuffRedefined().getHvProvTin();
   }

  
	/**
	*  set variable hvProvTin
	*  @param value
	**/
   public void setHvProvTin(char[] value) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(value);
   } 

     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex);
   	
   }
   
   public void setHvProvTin(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin with another Field
	 *	@param value
	 */
   public void setHvProvTin(Field source) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source);
   }  
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvRevThru
	 *	@return hvRevThru
	 */
   public char[] getHvRevThru() throws CFException  {              
   		return hostVariables.getHvRevThru();
   }

  
	/**
	*  set variable hvRevThru
	*  @param value
	**/
   public void setHvRevThru(char[] value) throws CFException {
      hostVariables.setHvRevThru(value);
   } 

     /**
	 * 	Update HvRevThru 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRevThru(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRevThru(source, sourceIndex);
   	
   }
   
   public void setHvRevThru(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRevThru 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRevThru(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRevThru with another Field
	 *	@param value
	 */
   public void setHvRevThru(Field source) {
      hostVariables.setHvRevThru(source);
   }  
   
     /**
	 * 	Update HvRevThru 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRevThru(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRevThru 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRevThru(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRevThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvCauseCd2
	 *	@return hvCauseCd2
	 */
   public char[] getHvCauseCd2() throws CFException  {              
   		return hostVariables.getHvCauseCd2();
   }

  
	/**
	*  set variable hvCauseCd2
	*  @param value
	**/
   public void setHvCauseCd2(char[] value) throws CFException {
      hostVariables.setHvCauseCd2(value);
   } 

     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd2(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd2 with another Field
	 *	@param value
	 */
   public void setHvCauseCd2(Field source) {
      hostVariables.setHvCauseCd2(source);
   }  
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvProvTin1
	 *	@return hvProvTin1
	 */
   public char[] getHvProvTin1() throws CFException  {              
   		return hostVariables.getHvProvTinsuff1Redefined().getHvProvTin1();
   }

  
	/**
	*  set variable hvProvTin1
	*  @param value
	**/
   public void setHvProvTin1(char[] value) throws CFException {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(value);
   } 

     /**
	 * 	Update HvProvTin1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin1(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex);
   	
   }
   
   public void setHvProvTin1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin1 with another Field
	 *	@param value
	 */
   public void setHvProvTin1(Field source) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source);
   }  
   
     /**
	 * 	Update HvProvTin1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvLstSrvcDt
	 *	@return hvLstSrvcDt
	 */
   public char[] getHvLstSrvcDt() throws CFException  {              
   		return hostVariables.getHvLstSrvcDtGroup().getHvLstSrvcDt();
   }

  
	/**
	*  set variable hvLstSrvcDt
	*  @param value
	**/
   public void setHvLstSrvcDt(char[] value) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(value);
   } 

     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex);
   	
   }
   
   public void setHvLstSrvcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvLstSrvcDt with another Field
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source);
   }  
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvRemarkCd1
	 *	@return hvRemarkCd1
	 */
   public char[] getHvRemarkCd1() throws CFException  {              
   		return hostVariables.getHvRemarkCd1();
   }

  
	/**
	*  set variable hvRemarkCd1
	*  @param value
	**/
   public void setHvRemarkCd1(char[] value) throws CFException {
      hostVariables.setHvRemarkCd1(value);
   } 

     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd1(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd1 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source) {
      hostVariables.setHvRemarkCd1(source);
   }  
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public OpenCsrNextFil5SectOutCtx getOpenCsrNextFil5SectOutCtx() {
            return new OpenCsrNextFil5SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrNextFil5SectInCtx clone() {
        OpenCsrNextFil5SectInCtx cloneObj = new OpenCsrNextFil5SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrNextFil5SectInCtx getOpenCsrNextFil5SectInCtx() {
            return new OpenCsrNextFil5SectInCtx();
    }
     public class OpenCsrNextFil5SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dderefEeId
	 *	@return dderefEeId
	 */
   public char[] getDderefEeId() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefEeIdGroup().getDderefEeId();
   }

  
	/**
	*  set variable dderefEeId
	*  @param value
	**/
   public void setDderefEeId(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(value);
   } 

     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex);
   	
   }
   
   public void setDderefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeId with another Field
	 *	@param value
	 */
   public void setDderefEeId(Field source) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source);
   }  
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public int getNextIcnSufxVersNbr() throws CFException {
   		return nextKey.getNextIcnSufxVersNbr();
	}


	/**
	 *	Returns String value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public char[]  getNextIcnSufxVersNbrString() throws CFException {
	     return String.valueOf(nextKey.getNextIcnSufxVersNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextIcnSufxVersNbrIsNumeric()  throws CFException{
	    return nextKey.nextIcnSufxVersNbrIsNumeric();
	}

	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setNextIcnSufxVersNbr(int number)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(number);
	}
	

	public void setNextIcnSufxVersNbr(long number)  throws CFException{
	    nextKey.setNextIcnSufxVersNbr(number);
	}
	
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbr(char[] value)  throws CFException {
		nextKey.setNextIcnSufxVersNbr(value);
	}
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbrString(char[] value)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(value);
	}	

	/**
	 *	Returns the value of dderefIcnSufxVersNbr
	 *	@return dderefIcnSufxVersNbr
	 */
	public short getDderefIcnSufxVersNbr() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefIcnSufxVersNbr();
	}
	
	/**
	 * 	Update DderefIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setDderefIcnSufxVersNbr(short number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr(number);
	}

	public void setDderefIcnSufxVersNbr(int number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}

	public void setDderefIcnSufxVersNbr(long number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}



	/**
	 *	Returns the value of dderefProcDt
	 *	@return dderefProcDt
	 */
   public char[] getDderefProcDt() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcDtGroup().getDderefProcDt();
   }

  
	/**
	*  set variable dderefProcDt
	*  @param value
	**/
   public void setDderefProcDt(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(value);
   } 

     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex);
   	
   }
   
   public void setDderefProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcDt with another Field
	 *	@param value
	 */
   public void setDderefProcDt(Field source) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source);
   }  
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextLnId
	 *	@return nextLnId
	 */
	public int getNextLnId() throws CFException {
   		return nextKey.getNextLnId();
	}


	/**
	 *	Returns String value of nextLnId
	 *	@return nextLnId
	 */
	public char[]  getNextLnIdString() throws CFException {
	     return String.valueOf(nextKey.getNextLnIdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextLnIdIsNumeric()  throws CFException{
	    return nextKey.nextLnIdIsNumeric();
	}

	/**
	 * 	Update NextLnId with the passed value
	 *	@param number
	 */
	public void setNextLnId(int number)  throws CFException{
		nextKey.setNextLnId(number);
	}
	

	public void setNextLnId(long number)  throws CFException{
	    nextKey.setNextLnId(number);
	}
	
	
	/**
	 * 	Update NextLnId with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextLnId(char[] value)  throws CFException {
		nextKey.setNextLnId(value);
	}
	
	/**
	 * 	Update NextLnId with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextLnIdString(char[] value)  throws CFException{
		nextKey.setNextLnId(value);
	}	

	/**
	 *	Returns the value of dderefIcnSufxCd
	 *	@return dderefIcnSufxCd
	 */
   public char[] getDderefIcnSufxCd() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().getDderefIcnSufxCd();
   }

  
	/**
	*  set variable dderefIcnSufxCd
	*  @param value
	**/
   public void setDderefIcnSufxCd(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(value);
   } 

     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setDderefIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefIcnSufxCd with another Field
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source);
   }  
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of nextPgmIdLstCharVal
	 *	@return nextPgmIdLstCharVal
	 */
   public char[] getNextPgmIdLstCharVal() throws CFException  {              
   		return nextKey.getNextPgmIdLstCharVal();
   }

  
	/**
	*  set variable nextPgmIdLstCharVal
	*  @param value
	**/
   public void setNextPgmIdLstCharVal(char[] value) throws CFException {
      nextKey.setNextPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source) {
      nextKey.setNextPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefLnId
	 *	@return dderefLnId
	 */
	public short getDderefLnId() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefLnIdGroup().getDderefLnId();
	}
	
	/**
	 * 	Update DderefLnId with the passed value
	 *	@param number
	 */
	public void setDderefLnId(short number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId(number);
	}

	public void setDderefLnId(int number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}

	public void setDderefLnId(long number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}



	/**
	 *	Returns the value of nextProcTm
	 *	@return nextProcTm
	 */
   public char[] getNextProcTm() throws CFException  {              
   		return nextKey.getNextProcTm();
   }

  
	/**
	*  set variable nextProcTm
	*  @param value
	**/
   public void setNextProcTm(char[] value) throws CFException {
      nextKey.setNextProcTm(value);
   } 

     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcTm(source, sourceIndex);
   	
   }
   
   public void setNextProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcTm with another Field
	 *	@param value
	 */
   public void setNextProcTm(Field source) {
      nextKey.setNextProcTm(source);
   }  
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefProcTm
	 *	@return dderefProcTm
	 */
   public char[] getDderefProcTm() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcTmGroup().getDderefProcTm();
   }

  
	/**
	*  set variable dderefProcTm
	*  @param value
	**/
   public void setDderefProcTm(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(value);
   } 

     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex);
   	
   }
   
   public void setDderefProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcTm with another Field
	 *	@param value
	 */
   public void setDderefProcTm(Field source) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source);
   }  
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dderefInvnCtlNbr
	 *	@return dderefInvnCtlNbr
	 */
   public char[] getDderefInvnCtlNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().getDderefInvnCtlNbr();
   }

  
	/**
	*  set variable dderefInvnCtlNbr
	*  @param value
	**/
   public void setDderefInvnCtlNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(value);
   } 

     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextIcnSufxCd
	 *	@return nextIcnSufxCd
	 */
   public char[] getNextIcnSufxCd() throws CFException  {              
   		return nextKey.getNextIcnSufxCd();
   }

  
	/**
	*  set variable nextIcnSufxCd
	*  @param value
	**/
   public void setNextIcnSufxCd(char[] value) throws CFException {
      nextKey.setNextIcnSufxCd(value);
   } 

     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setNextIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextIcnSufxCd with another Field
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source) {
      nextKey.setNextIcnSufxCd(source);
   }  
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPolNbr
	 *	@return dderefPolNbr
	 */
   public char[] getDderefPolNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPolNbrGroup().getDderefPolNbr();
   }

  
	/**
	*  set variable dderefPolNbr
	*  @param value
	**/
   public void setDderefPolNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(value);
   } 

     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDderefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbr with another Field
	 *	@param value
	 */
   public void setDderefPolNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source);
   }  
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextInvnCtlNbr
	 *	@return nextInvnCtlNbr
	 */
   public char[] getNextInvnCtlNbr() throws CFException  {              
   		return nextKey.getNextInvnCtlNbr();
   }

  
	/**
	*  set variable nextInvnCtlNbr
	*  @param value
	**/
   public void setNextInvnCtlNbr(char[] value) throws CFException {
      nextKey.setNextInvnCtlNbr(value);
   } 

     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setNextInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source) {
      nextKey.setNextInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextKey
	 *	@return nextKey
	 */   
	 public NextKey getNextKey() {
   	return nextKey;
   }


	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefDepnNbr
	 *	@return dderefDepnNbr
	 */
   public char[] getDderefDepnNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefDepnNbrGroup().getDderefDepnNbr();
   }

  
	/**
	*  set variable dderefDepnNbr
	*  @param value
	**/
   public void setDderefDepnNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(value);
   } 

     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDderefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbr with another Field
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source);
   }  
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextProcDt
	 *	@return nextProcDt
	 */
   public char[] getNextProcDt() throws CFException  {              
   		return nextKey.getNextProcDt();
   }

  
	/**
	*  set variable nextProcDt
	*  @param value
	**/
   public void setNextProcDt(char[] value) throws CFException {
      nextKey.setNextProcDt(value);
   } 

     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcDt(source, sourceIndex);
   	
   }
   
   public void setNextProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcDt with another Field
	 *	@param value
	 */
   public void setNextProcDt(Field source) {
      nextKey.setNextProcDt(source);
   }  
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPgmIdLstCharVal
	 *	@return dderefPgmIdLstCharVal
	 */
   public char[] getDderefPgmIdLstCharVal() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().getDderefPgmIdLstCharVal();
   }

  
	/**
	*  set variable dderefPgmIdLstCharVal
	*  @param value
	**/
   public void setDderefPgmIdLstCharVal(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrNextFil5SectOutCtx clone() {
        OpenCsrNextFil5SectOutCtx cloneObj = new OpenCsrNextFil5SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrNextFil5SectOutCtx getOpenCsrNextFil5SectOutCtx() {
            return new OpenCsrNextFil5SectOutCtx();
    }
     public class FetchCsrNextFil5SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrNextFil5SectOutCtx getFetchCsrNextFil5SectOutCtx() {
            return new FetchCsrNextFil5SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrNextFil5SectInCtx clone() {
        FetchCsrNextFil5SectInCtx cloneObj = new FetchCsrNextFil5SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrNextFil5SectInCtx getFetchCsrNextFil5SectInCtx() {
            return new FetchCsrNextFil5SectInCtx();
    }
     public class FetchCsrNextFil5SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrNextFil5SectOutCtx clone() {
        FetchCsrNextFil5SectOutCtx cloneObj = new FetchCsrNextFil5SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrNextFil5SectOutCtx getFetchCsrNextFil5SectOutCtx() {
            return new FetchCsrNextFil5SectOutCtx();
    }
     public class FetchCsrRowsSect5221InCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of fetchRowsetMax
	 *	@return fetchRowsetMax
	 */
	public int getFetchRowsetMax() throws CFException {        
   		return work.getFetchRowsetMax();
	}
	
	/**
	 * 	Update FetchRowsetMax with the passed value
	 *	@param number
	 */
	public void setFetchRowsetMax(int number)  throws CFException{
		work.setFetchRowsetMax(number);
	}


	public void setFetchRowsetMax(long number)  throws CFException{
		work.setFetchRowsetMax((int)number);
	}


	/**
	 *	Returns the value of work
	 *	@return work
	 */   
	 public Work getWork() {
   	return work;
   }


	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 

	public BigDecimal getHvaSupAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaSupAmt((index));
	}

    public char[] getHvaSupAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaSupAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaSupAmt with the passed number
	 *	@param number
	 */
	public void setHvaSupAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaSupAmt((index),number);
   }

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hvaPartnVal
	 *	@return hvaPartnVal
	 */
   public char[] getHvaPartnVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPartnVal(index);
   }

  
	/**
	*  set variable hvaPartnVal
	*  @param value
	**/
   public void setHvaPartnVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPartnVal((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaPartnId
	 *	@return hvaPartnId
	 */
	public short getHvaPartnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPartnId((index));
	}
	
	/**
	 * 	Update HvaPartnId with the passed value
	 *	@param number
	 */
	public void setHvaPartnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),number);
	}

	public void setHvaPartnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}

	public void setHvaPartnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}



	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	public BigDecimal getHvaBaseDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseDedAmt((index));
	}

    public char[] getHvaBaseDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseDedAmt((index),number);
   }

	/**
	 *	Returns the value of hvaMskNullInd
	 *	@return hvaMskNullInd
	 */
	public short getHvaMskNullInd(int index) throws CFException {        
   		return hvaClmHistArray.getHvaMskNullInd((index));
	}
	
	/**
	 * 	Update HvaMskNullInd with the passed value
	 *	@param number
	 */
	public void setHvaMskNullInd(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),number);
	}

	public void setHvaMskNullInd(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}

	public void setHvaMskNullInd(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}



	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of hvaTransCd
	 *	@return hvaTransCd
	 */
   public char[] getHvaTransCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTransCd(index);
   }

  
	/**
	*  set variable hvaTransCd
	*  @param value
	**/
   public void setHvaTransCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTransCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktNbr
	 *	@return hvaProvMktNbr
	 */
   public char[] getHvaProvMktNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktNbr(index);
   }

  
	/**
	*  set variable hvaProvMktNbr
	*  @param value
	**/
   public void setHvaProvMktNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktNbr((index),value);
   } 

	public BigDecimal getHvaBaseAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseAmt((index));
	}

    public char[] getHvaBaseAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseAmt((index),number);
   }

	public BigDecimal getHvaCobCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCobCrResAmt((index));
	}

    public char[] getHvaCobCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCobCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCobCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaCobCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCobCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPpoCd
	 *	@return hvaPpoCd
	 */
   public char[] getHvaPpoCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPpoCd(index);
   }

  
	/**
	*  set variable hvaPpoCd
	*  @param value
	**/
   public void setHvaPpoCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPpoCd((index),value);
   } 

	public BigDecimal getHvaMmDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmDedAmt((index));
	}

    public char[] getHvaMmDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmDedAmt((index),number);
   }

	public BigDecimal getHvaMcCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMcCrResAmt((index));
	}

    public char[] getHvaMcCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMcCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMcCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaMcCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMcCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProvIpaId
	 *	@return hvaProvIpaId
	 */
   public char[] getHvaProvIpaId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvIpaId(index);
   }

  
	/**
	*  set variable hvaProvIpaId
	*  @param value
	**/
   public void setHvaProvIpaId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvIpaId((index),value);
   } 

	/**
	 *	Returns the value of hvaPmtSvcCd
	 *	@return hvaPmtSvcCd
	 */
   public char[] getHvaPmtSvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPmtSvcCd(index);
   }

  
	/**
	*  set variable hvaPmtSvcCd
	*  @param value
	**/
   public void setHvaPmtSvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPmtSvcCd((index),value);
   } 

	public BigDecimal getHvaMmAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmAmt((index));
	}

    public char[] getHvaMmAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvEobNm
	 *	@return hvaProvEobNm
	 */
   public char[] getHvaProvEobNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvEobNm(index);
   }

  
	/**
	*  set variable hvaProvEobNm
	*  @param value
	**/
   public void setHvaProvEobNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvEobNm((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	public BigDecimal getHvaCopayAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCopayAmt((index));
	}

    public char[] getHvaCopayAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCopayAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCopayAmt with the passed number
	 *	@param number
	 */
	public void setHvaCopayAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCopayAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvPrdctCd
	 *	@return hvaProvPrdctCd
	 */
   public char[] getHvaProvPrdctCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvPrdctCd(index);
   }

  
	/**
	*  set variable hvaProvPrdctCd
	*  @param value
	**/
   public void setHvaProvPrdctCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvPrdctCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPrsCreatSrcCd
	 *	@return hvaPrsCreatSrcCd
	 */
   public char[] getHvaPrsCreatSrcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPrsCreatSrcCd(index);
   }

  
	/**
	*  set variable hvaPrsCreatSrcCd
	*  @param value
	**/
   public void setHvaPrsCreatSrcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPrsCreatSrcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of hvaBaseDedDescTxt
	 *	@return hvaBaseDedDescTxt
	 */
   public char[] getHvaBaseDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBaseDedDescTxt(index);
   }

  
	/**
	*  set variable hvaBaseDedDescTxt
	*  @param value
	**/
   public void setHvaBaseDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBaseDedDescTxt((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvaMmDedDescTxt
	 *	@return hvaMmDedDescTxt
	 */
   public char[] getHvaMmDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMmDedDescTxt(index);
   }

  
	/**
	*  set variable hvaMmDedDescTxt
	*  @param value
	**/
   public void setHvaMmDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMmDedDescTxt((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of hvaOvrCd
	 *	@return hvaOvrCd
	 */
   public char[] getHvaOvrCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaOvrCd(index);
   }

  
	/**
	*  set variable hvaOvrCd
	*  @param value
	**/
   public void setHvaOvrCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaOvrCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktTypCd
	 *	@return hvaProvMktTypCd
	 */
   public char[] getHvaProvMktTypCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktTypCd(index);
   }

  
	/**
	*  set variable hvaProvMktTypCd
	*  @param value
	**/
   public void setHvaProvMktTypCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktTypCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of hvaParInd
	 *	@return hvaParInd
	 */
   public char[] getHvaParInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaParInd(index);
   }

  
	/**
	*  set variable hvaParInd
	*  @param value
	**/
   public void setHvaParInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaParInd((index),value);
   } 

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrRowsSect5221OutCtx getFetchCsrRowsSect5221OutCtx() {
            return new FetchCsrRowsSect5221OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect5221InCtx clone() {
        FetchCsrRowsSect5221InCtx cloneObj = new FetchCsrRowsSect5221InCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect5221InCtx getFetchCsrRowsSect5221InCtx() {
            return new FetchCsrRowsSect5221InCtx();
    }
     public class FetchCsrRowsSect5221OutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Test condition 100 for isSqlcodeFetchEnd()
	 *	@return  Returns true if isSqlcodeFetchEnd() is 100
	 */
   public boolean isSqlcodeFetchEnd() throws CFException {
      return work.isSqlcodeFetchEnd();
   }

	/**
	*  set values 100
	*/
   	public void setSqlcodeFetchEndTrue()  throws CFException{  			
    	work.setSqlcodeFetchEndTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 0 for isSqlcodeOk()
	 *	@return  Returns true if isSqlcodeOk() is 0
	 */
   public boolean isSqlcodeOk() throws CFException {
      return work.isSqlcodeOk();
   }

	/**
	*  set values 0
	*/
   	public void setSqlcodeOkTrue()  throws CFException{  			
    	work.setSqlcodeOkTrue();
   	}
	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect5221OutCtx clone() {
        FetchCsrRowsSect5221OutCtx cloneObj = new FetchCsrRowsSect5221OutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect5221OutCtx getFetchCsrRowsSect5221OutCtx() {
            return new FetchCsrRowsSect5221OutCtx();
    }
     public class CloseCsrNextFil5SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public CloseCsrNextFil5SectOutCtx getCloseCsrNextFil5SectOutCtx() {
            return new CloseCsrNextFil5SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrNextFil5SectInCtx clone() {
        CloseCsrNextFil5SectInCtx cloneObj = new CloseCsrNextFil5SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrNextFil5SectInCtx getCloseCsrNextFil5SectInCtx() {
            return new CloseCsrNextFil5SectInCtx();
    }
     public class CloseCsrNextFil5SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrNextFil5SectOutCtx clone() {
        CloseCsrNextFil5SectOutCtx cloneObj = new CloseCsrNextFil5SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrNextFil5SectOutCtx getCloseCsrNextFil5SectOutCtx() {
            return new CloseCsrNextFil5SectOutCtx();
    }
     public class ProcCsrInitFil6SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcCsrInitFil6SectOutCtx getProcCsrInitFil6SectOutCtx() {
            return new ProcCsrInitFil6SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrInitFil6SectInCtx clone() {
        ProcCsrInitFil6SectInCtx cloneObj = new ProcCsrInitFil6SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrInitFil6SectInCtx getProcCsrInitFil6SectInCtx() {
            return new ProcCsrInitFil6SectInCtx();
    }
     public class ProcCsrInitFil6SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrInitFil6SectOutCtx clone() {
        ProcCsrInitFil6SectOutCtx cloneObj = new ProcCsrInitFil6SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrInitFil6SectOutCtx getProcCsrInitFil6SectOutCtx() {
            return new ProcCsrInitFil6SectOutCtx();
    }
     public class OpenCsrInitFil6SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of hvRemarkCd2
	 *	@return hvRemarkCd2
	 */
   public char[] getHvRemarkCd2() throws CFException  {              
   		return hostVariables.getHvRemarkCd2();
   }

  
	/**
	*  set variable hvRemarkCd2
	*  @param value
	**/
   public void setHvRemarkCd2(char[] value) throws CFException {
      hostVariables.setHvRemarkCd2(value);
   } 

     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd2(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd2 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source) {
      hostVariables.setHvRemarkCd2(source);
   }  
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of hvCauseCd1
	 *	@return hvCauseCd1
	 */
   public char[] getHvCauseCd1() throws CFException  {              
   		return hostVariables.getHvCauseCd1();
   }

  
	/**
	*  set variable hvCauseCd1
	*  @param value
	**/
   public void setHvCauseCd1(char[] value) throws CFException {
      hostVariables.setHvCauseCd1(value);
   } 

     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd1(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd1 with another Field
	 *	@param value
	 */
   public void setHvCauseCd1(Field source) {
      hostVariables.setHvCauseCd1(source);
   }  
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvCptFrom
	 *	@return hvCptFrom
	 */
   public char[] getHvCptFrom() throws CFException  {              
   		return hostVariables.getHvCptFrom();
   }

  
	/**
	*  set variable hvCptFrom
	*  @param value
	**/
   public void setHvCptFrom(char[] value) throws CFException {
      hostVariables.setHvCptFrom(value);
   } 

     /**
	 * 	Update HvCptFrom 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCptFrom(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCptFrom(source, sourceIndex);
   	
   }
   
   public void setHvCptFrom(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCptFrom 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCptFrom(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCptFrom with another Field
	 *	@param value
	 */
   public void setHvCptFrom(Field source) {
      hostVariables.setHvCptFrom(source);
   }  
   
     /**
	 * 	Update HvCptFrom 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCptFrom(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCptFrom 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCptFrom(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of hvCptThru
	 *	@return hvCptThru
	 */
   public char[] getHvCptThru() throws CFException  {              
   		return hostVariables.getHvCptThru();
   }

  
	/**
	*  set variable hvCptThru
	*  @param value
	**/
   public void setHvCptThru(char[] value) throws CFException {
      hostVariables.setHvCptThru(value);
   } 

     /**
	 * 	Update HvCptThru 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCptThru(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCptThru(source, sourceIndex);
   	
   }
   
   public void setHvCptThru(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCptThru 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCptThru(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCptThru with another Field
	 *	@param value
	 */
   public void setHvCptThru(Field source) {
      hostVariables.setHvCptThru(source);
   }  
   
     /**
	 * 	Update HvCptThru 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCptThru(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCptThru 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCptThru(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFstDt
	 *	@return hvFstDt
	 */
   public char[] getHvFstDt() throws CFException  {              
   		return hostVariables.getHvFstDtGroup().getHvFstDt();
   }

  
	/**
	*  set variable hvFstDt
	*  @param value
	**/
   public void setHvFstDt(char[] value) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(value);
   } 

     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex);
   	
   }
   
   public void setHvFstDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFstDt with another Field
	 *	@param value
	 */
   public void setHvFstDt(Field source) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source);
   }  
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hostVariables
	 *	@return hostVariables
	 */   
	 public HostVariables getHostVariables() {
   	return hostVariables;
   }


	/**
	 *	Returns the value of hvProvTin
	 *	@return hvProvTin
	 */
   public char[] getHvProvTin() throws CFException  {              
   		return hostVariables.getHvProvTinsuffRedefined().getHvProvTin();
   }

  
	/**
	*  set variable hvProvTin
	*  @param value
	**/
   public void setHvProvTin(char[] value) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(value);
   } 

     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex);
   	
   }
   
   public void setHvProvTin(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin with another Field
	 *	@param value
	 */
   public void setHvProvTin(Field source) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source);
   }  
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvCauseCd2
	 *	@return hvCauseCd2
	 */
   public char[] getHvCauseCd2() throws CFException  {              
   		return hostVariables.getHvCauseCd2();
   }

  
	/**
	*  set variable hvCauseCd2
	*  @param value
	**/
   public void setHvCauseCd2(char[] value) throws CFException {
      hostVariables.setHvCauseCd2(value);
   } 

     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd2(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd2 with another Field
	 *	@param value
	 */
   public void setHvCauseCd2(Field source) {
      hostVariables.setHvCauseCd2(source);
   }  
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvProvTin1
	 *	@return hvProvTin1
	 */
   public char[] getHvProvTin1() throws CFException  {              
   		return hostVariables.getHvProvTinsuff1Redefined().getHvProvTin1();
   }

  
	/**
	*  set variable hvProvTin1
	*  @param value
	**/
   public void setHvProvTin1(char[] value) throws CFException {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(value);
   } 

     /**
	 * 	Update HvProvTin1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin1(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex);
   	
   }
   
   public void setHvProvTin1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin1 with another Field
	 *	@param value
	 */
   public void setHvProvTin1(Field source) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source);
   }  
   
     /**
	 * 	Update HvProvTin1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvLstSrvcDt
	 *	@return hvLstSrvcDt
	 */
   public char[] getHvLstSrvcDt() throws CFException  {              
   		return hostVariables.getHvLstSrvcDtGroup().getHvLstSrvcDt();
   }

  
	/**
	*  set variable hvLstSrvcDt
	*  @param value
	**/
   public void setHvLstSrvcDt(char[] value) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(value);
   } 

     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex);
   	
   }
   
   public void setHvLstSrvcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvLstSrvcDt with another Field
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source);
   }  
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvRemarkCd1
	 *	@return hvRemarkCd1
	 */
   public char[] getHvRemarkCd1() throws CFException  {              
   		return hostVariables.getHvRemarkCd1();
   }

  
	/**
	*  set variable hvRemarkCd1
	*  @param value
	**/
   public void setHvRemarkCd1(char[] value) throws CFException {
      hostVariables.setHvRemarkCd1(value);
   } 

     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd1(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd1 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source) {
      hostVariables.setHvRemarkCd1(source);
   }  
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public OpenCsrInitFil6SectOutCtx getOpenCsrInitFil6SectOutCtx() {
            return new OpenCsrInitFil6SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrInitFil6SectInCtx clone() {
        OpenCsrInitFil6SectInCtx cloneObj = new OpenCsrInitFil6SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrInitFil6SectInCtx getOpenCsrInitFil6SectInCtx() {
            return new OpenCsrInitFil6SectInCtx();
    }
     public class OpenCsrInitFil6SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dderefEeId
	 *	@return dderefEeId
	 */
   public char[] getDderefEeId() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefEeIdGroup().getDderefEeId();
   }

  
	/**
	*  set variable dderefEeId
	*  @param value
	**/
   public void setDderefEeId(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(value);
   } 

     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex);
   	
   }
   
   public void setDderefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeId with another Field
	 *	@param value
	 */
   public void setDderefEeId(Field source) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source);
   }  
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPolNbr
	 *	@return dderefPolNbr
	 */
   public char[] getDderefPolNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPolNbrGroup().getDderefPolNbr();
   }

  
	/**
	*  set variable dderefPolNbr
	*  @param value
	**/
   public void setDderefPolNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(value);
   } 

     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDderefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbr with another Field
	 *	@param value
	 */
   public void setDderefPolNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source);
   }  
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefDepnNbr
	 *	@return dderefDepnNbr
	 */
   public char[] getDderefDepnNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefDepnNbrGroup().getDderefDepnNbr();
   }

  
	/**
	*  set variable dderefDepnNbr
	*  @param value
	**/
   public void setDderefDepnNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(value);
   } 

     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDderefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbr with another Field
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source);
   }  
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrInitFil6SectOutCtx clone() {
        OpenCsrInitFil6SectOutCtx cloneObj = new OpenCsrInitFil6SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrInitFil6SectOutCtx getOpenCsrInitFil6SectOutCtx() {
            return new OpenCsrInitFil6SectOutCtx();
    }
     public class FetchCsrInitFil6SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrInitFil6SectOutCtx getFetchCsrInitFil6SectOutCtx() {
            return new FetchCsrInitFil6SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrInitFil6SectInCtx clone() {
        FetchCsrInitFil6SectInCtx cloneObj = new FetchCsrInitFil6SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrInitFil6SectInCtx getFetchCsrInitFil6SectInCtx() {
            return new FetchCsrInitFil6SectInCtx();
    }
     public class FetchCsrInitFil6SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrInitFil6SectOutCtx clone() {
        FetchCsrInitFil6SectOutCtx cloneObj = new FetchCsrInitFil6SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrInitFil6SectOutCtx getFetchCsrInitFil6SectOutCtx() {
            return new FetchCsrInitFil6SectOutCtx();
    }
     public class FetchCsrRowsSect5321InCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of fetchRowsetMax
	 *	@return fetchRowsetMax
	 */
	public int getFetchRowsetMax() throws CFException {        
   		return work.getFetchRowsetMax();
	}
	
	/**
	 * 	Update FetchRowsetMax with the passed value
	 *	@param number
	 */
	public void setFetchRowsetMax(int number)  throws CFException{
		work.setFetchRowsetMax(number);
	}


	public void setFetchRowsetMax(long number)  throws CFException{
		work.setFetchRowsetMax((int)number);
	}


	/**
	 *	Returns the value of work
	 *	@return work
	 */   
	 public Work getWork() {
   	return work;
   }


	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 

	public BigDecimal getHvaSupAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaSupAmt((index));
	}

    public char[] getHvaSupAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaSupAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaSupAmt with the passed number
	 *	@param number
	 */
	public void setHvaSupAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaSupAmt((index),number);
   }

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hvaPartnVal
	 *	@return hvaPartnVal
	 */
   public char[] getHvaPartnVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPartnVal(index);
   }

  
	/**
	*  set variable hvaPartnVal
	*  @param value
	**/
   public void setHvaPartnVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPartnVal((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaPartnId
	 *	@return hvaPartnId
	 */
	public short getHvaPartnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPartnId((index));
	}
	
	/**
	 * 	Update HvaPartnId with the passed value
	 *	@param number
	 */
	public void setHvaPartnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),number);
	}

	public void setHvaPartnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}

	public void setHvaPartnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}



	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	public BigDecimal getHvaBaseDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseDedAmt((index));
	}

    public char[] getHvaBaseDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseDedAmt((index),number);
   }

	/**
	 *	Returns the value of hvaMskNullInd
	 *	@return hvaMskNullInd
	 */
	public short getHvaMskNullInd(int index) throws CFException {        
   		return hvaClmHistArray.getHvaMskNullInd((index));
	}
	
	/**
	 * 	Update HvaMskNullInd with the passed value
	 *	@param number
	 */
	public void setHvaMskNullInd(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),number);
	}

	public void setHvaMskNullInd(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}

	public void setHvaMskNullInd(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}



	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of hvaTransCd
	 *	@return hvaTransCd
	 */
   public char[] getHvaTransCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTransCd(index);
   }

  
	/**
	*  set variable hvaTransCd
	*  @param value
	**/
   public void setHvaTransCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTransCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktNbr
	 *	@return hvaProvMktNbr
	 */
   public char[] getHvaProvMktNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktNbr(index);
   }

  
	/**
	*  set variable hvaProvMktNbr
	*  @param value
	**/
   public void setHvaProvMktNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktNbr((index),value);
   } 

	public BigDecimal getHvaBaseAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseAmt((index));
	}

    public char[] getHvaBaseAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseAmt((index),number);
   }

	public BigDecimal getHvaCobCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCobCrResAmt((index));
	}

    public char[] getHvaCobCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCobCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCobCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaCobCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCobCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPpoCd
	 *	@return hvaPpoCd
	 */
   public char[] getHvaPpoCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPpoCd(index);
   }

  
	/**
	*  set variable hvaPpoCd
	*  @param value
	**/
   public void setHvaPpoCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPpoCd((index),value);
   } 

	public BigDecimal getHvaMmDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmDedAmt((index));
	}

    public char[] getHvaMmDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmDedAmt((index),number);
   }

	public BigDecimal getHvaMcCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMcCrResAmt((index));
	}

    public char[] getHvaMcCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMcCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMcCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaMcCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMcCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProvIpaId
	 *	@return hvaProvIpaId
	 */
   public char[] getHvaProvIpaId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvIpaId(index);
   }

  
	/**
	*  set variable hvaProvIpaId
	*  @param value
	**/
   public void setHvaProvIpaId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvIpaId((index),value);
   } 

	/**
	 *	Returns the value of hvaPmtSvcCd
	 *	@return hvaPmtSvcCd
	 */
   public char[] getHvaPmtSvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPmtSvcCd(index);
   }

  
	/**
	*  set variable hvaPmtSvcCd
	*  @param value
	**/
   public void setHvaPmtSvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPmtSvcCd((index),value);
   } 

	public BigDecimal getHvaMmAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmAmt((index));
	}

    public char[] getHvaMmAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvEobNm
	 *	@return hvaProvEobNm
	 */
   public char[] getHvaProvEobNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvEobNm(index);
   }

  
	/**
	*  set variable hvaProvEobNm
	*  @param value
	**/
   public void setHvaProvEobNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvEobNm((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	public BigDecimal getHvaCopayAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCopayAmt((index));
	}

    public char[] getHvaCopayAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCopayAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCopayAmt with the passed number
	 *	@param number
	 */
	public void setHvaCopayAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCopayAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvPrdctCd
	 *	@return hvaProvPrdctCd
	 */
   public char[] getHvaProvPrdctCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvPrdctCd(index);
   }

  
	/**
	*  set variable hvaProvPrdctCd
	*  @param value
	**/
   public void setHvaProvPrdctCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvPrdctCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPrsCreatSrcCd
	 *	@return hvaPrsCreatSrcCd
	 */
   public char[] getHvaPrsCreatSrcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPrsCreatSrcCd(index);
   }

  
	/**
	*  set variable hvaPrsCreatSrcCd
	*  @param value
	**/
   public void setHvaPrsCreatSrcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPrsCreatSrcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of hvaBaseDedDescTxt
	 *	@return hvaBaseDedDescTxt
	 */
   public char[] getHvaBaseDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBaseDedDescTxt(index);
   }

  
	/**
	*  set variable hvaBaseDedDescTxt
	*  @param value
	**/
   public void setHvaBaseDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBaseDedDescTxt((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvaMmDedDescTxt
	 *	@return hvaMmDedDescTxt
	 */
   public char[] getHvaMmDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMmDedDescTxt(index);
   }

  
	/**
	*  set variable hvaMmDedDescTxt
	*  @param value
	**/
   public void setHvaMmDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMmDedDescTxt((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of hvaOvrCd
	 *	@return hvaOvrCd
	 */
   public char[] getHvaOvrCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaOvrCd(index);
   }

  
	/**
	*  set variable hvaOvrCd
	*  @param value
	**/
   public void setHvaOvrCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaOvrCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktTypCd
	 *	@return hvaProvMktTypCd
	 */
   public char[] getHvaProvMktTypCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktTypCd(index);
   }

  
	/**
	*  set variable hvaProvMktTypCd
	*  @param value
	**/
   public void setHvaProvMktTypCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktTypCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of hvaParInd
	 *	@return hvaParInd
	 */
   public char[] getHvaParInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaParInd(index);
   }

  
	/**
	*  set variable hvaParInd
	*  @param value
	**/
   public void setHvaParInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaParInd((index),value);
   } 

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrRowsSect5321OutCtx getFetchCsrRowsSect5321OutCtx() {
            return new FetchCsrRowsSect5321OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect5321InCtx clone() {
        FetchCsrRowsSect5321InCtx cloneObj = new FetchCsrRowsSect5321InCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect5321InCtx getFetchCsrRowsSect5321InCtx() {
            return new FetchCsrRowsSect5321InCtx();
    }
     public class FetchCsrRowsSect5321OutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Test condition 100 for isSqlcodeFetchEnd()
	 *	@return  Returns true if isSqlcodeFetchEnd() is 100
	 */
   public boolean isSqlcodeFetchEnd() throws CFException {
      return work.isSqlcodeFetchEnd();
   }

	/**
	*  set values 100
	*/
   	public void setSqlcodeFetchEndTrue()  throws CFException{  			
    	work.setSqlcodeFetchEndTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 0 for isSqlcodeOk()
	 *	@return  Returns true if isSqlcodeOk() is 0
	 */
   public boolean isSqlcodeOk() throws CFException {
      return work.isSqlcodeOk();
   }

	/**
	*  set values 0
	*/
   	public void setSqlcodeOkTrue()  throws CFException{  			
    	work.setSqlcodeOkTrue();
   	}
	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect5321OutCtx clone() {
        FetchCsrRowsSect5321OutCtx cloneObj = new FetchCsrRowsSect5321OutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect5321OutCtx getFetchCsrRowsSect5321OutCtx() {
            return new FetchCsrRowsSect5321OutCtx();
    }
     public class CloseCsrInitFil6SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public CloseCsrInitFil6SectOutCtx getCloseCsrInitFil6SectOutCtx() {
            return new CloseCsrInitFil6SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrInitFil6SectInCtx clone() {
        CloseCsrInitFil6SectInCtx cloneObj = new CloseCsrInitFil6SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrInitFil6SectInCtx getCloseCsrInitFil6SectInCtx() {
            return new CloseCsrInitFil6SectInCtx();
    }
     public class CloseCsrInitFil6SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrInitFil6SectOutCtx clone() {
        CloseCsrInitFil6SectOutCtx cloneObj = new CloseCsrInitFil6SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrInitFil6SectOutCtx getCloseCsrInitFil6SectOutCtx() {
            return new CloseCsrInitFil6SectOutCtx();
    }
     public class ProcCsrNextFil6SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcCsrNextFil6SectOutCtx getProcCsrNextFil6SectOutCtx() {
            return new ProcCsrNextFil6SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrNextFil6SectInCtx clone() {
        ProcCsrNextFil6SectInCtx cloneObj = new ProcCsrNextFil6SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrNextFil6SectInCtx getProcCsrNextFil6SectInCtx() {
            return new ProcCsrNextFil6SectInCtx();
    }
     public class ProcCsrNextFil6SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcCsrNextFil6SectOutCtx clone() {
        ProcCsrNextFil6SectOutCtx cloneObj = new ProcCsrNextFil6SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcCsrNextFil6SectOutCtx getProcCsrNextFil6SectOutCtx() {
            return new ProcCsrNextFil6SectOutCtx();
    }
     public class OpenCsrNextFil6SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of hvRemarkCd2
	 *	@return hvRemarkCd2
	 */
   public char[] getHvRemarkCd2() throws CFException  {              
   		return hostVariables.getHvRemarkCd2();
   }

  
	/**
	*  set variable hvRemarkCd2
	*  @param value
	**/
   public void setHvRemarkCd2(char[] value) throws CFException {
      hostVariables.setHvRemarkCd2(value);
   } 

     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd2(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd2 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source) {
      hostVariables.setHvRemarkCd2(source);
   }  
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of hvCauseCd1
	 *	@return hvCauseCd1
	 */
   public char[] getHvCauseCd1() throws CFException  {              
   		return hostVariables.getHvCauseCd1();
   }

  
	/**
	*  set variable hvCauseCd1
	*  @param value
	**/
   public void setHvCauseCd1(char[] value) throws CFException {
      hostVariables.setHvCauseCd1(value);
   } 

     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd1(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd1 with another Field
	 *	@param value
	 */
   public void setHvCauseCd1(Field source) {
      hostVariables.setHvCauseCd1(source);
   }  
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvCptFrom
	 *	@return hvCptFrom
	 */
   public char[] getHvCptFrom() throws CFException  {              
   		return hostVariables.getHvCptFrom();
   }

  
	/**
	*  set variable hvCptFrom
	*  @param value
	**/
   public void setHvCptFrom(char[] value) throws CFException {
      hostVariables.setHvCptFrom(value);
   } 

     /**
	 * 	Update HvCptFrom 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCptFrom(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCptFrom(source, sourceIndex);
   	
   }
   
   public void setHvCptFrom(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCptFrom 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCptFrom(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCptFrom with another Field
	 *	@param value
	 */
   public void setHvCptFrom(Field source) {
      hostVariables.setHvCptFrom(source);
   }  
   
     /**
	 * 	Update HvCptFrom 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCptFrom(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCptFrom 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCptFrom(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptFrom(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of hvCptThru
	 *	@return hvCptThru
	 */
   public char[] getHvCptThru() throws CFException  {              
   		return hostVariables.getHvCptThru();
   }

  
	/**
	*  set variable hvCptThru
	*  @param value
	**/
   public void setHvCptThru(char[] value) throws CFException {
      hostVariables.setHvCptThru(value);
   } 

     /**
	 * 	Update HvCptThru 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCptThru(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCptThru(source, sourceIndex);
   	
   }
   
   public void setHvCptThru(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCptThru 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCptThru(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCptThru with another Field
	 *	@param value
	 */
   public void setHvCptThru(Field source) {
      hostVariables.setHvCptThru(source);
   }  
   
     /**
	 * 	Update HvCptThru 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCptThru(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCptThru 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCptThru(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCptThru(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvFstDt
	 *	@return hvFstDt
	 */
   public char[] getHvFstDt() throws CFException  {              
   		return hostVariables.getHvFstDtGroup().getHvFstDt();
   }

  
	/**
	*  set variable hvFstDt
	*  @param value
	**/
   public void setHvFstDt(char[] value) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(value);
   } 

     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex);
   	
   }
   
   public void setHvFstDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvFstDt with another Field
	 *	@param value
	 */
   public void setHvFstDt(Field source) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source);
   }  
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvFstDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvFstDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvFstDtGroup().setHvFstDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hostVariables
	 *	@return hostVariables
	 */   
	 public HostVariables getHostVariables() {
   	return hostVariables;
   }


	/**
	 *	Returns the value of hvProvTin
	 *	@return hvProvTin
	 */
   public char[] getHvProvTin() throws CFException  {              
   		return hostVariables.getHvProvTinsuffRedefined().getHvProvTin();
   }

  
	/**
	*  set variable hvProvTin
	*  @param value
	**/
   public void setHvProvTin(char[] value) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(value);
   } 

     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex);
   	
   }
   
   public void setHvProvTin(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin with another Field
	 *	@param value
	 */
   public void setHvProvTin(Field source) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source);
   }  
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuffRedefined().setHvProvTin(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvCauseCd2
	 *	@return hvCauseCd2
	 */
   public char[] getHvCauseCd2() throws CFException  {              
   		return hostVariables.getHvCauseCd2();
   }

  
	/**
	*  set variable hvCauseCd2
	*  @param value
	**/
   public void setHvCauseCd2(char[] value) throws CFException {
      hostVariables.setHvCauseCd2(value);
   } 

     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvCauseCd2(source, sourceIndex);
   	
   }
   
   public void setHvCauseCd2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvCauseCd2 with another Field
	 *	@param value
	 */
   public void setHvCauseCd2(Field source) {
      hostVariables.setHvCauseCd2(source);
   }  
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvCauseCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvCauseCd2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvProvTin1
	 *	@return hvProvTin1
	 */
   public char[] getHvProvTin1() throws CFException  {              
   		return hostVariables.getHvProvTinsuff1Redefined().getHvProvTin1();
   }

  
	/**
	*  set variable hvProvTin1
	*  @param value
	**/
   public void setHvProvTin1(char[] value) throws CFException {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(value);
   } 

     /**
	 * 	Update HvProvTin1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvProvTin1(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex);
   	
   }
   
   public void setHvProvTin1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvProvTin1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvProvTin1 with another Field
	 *	@param value
	 */
   public void setHvProvTin1(Field source) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source);
   }  
   
     /**
	 * 	Update HvProvTin1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvProvTin1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvProvTin1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvProvTin1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvProvTinsuff1Redefined().setHvProvTin1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvLstSrvcDt
	 *	@return hvLstSrvcDt
	 */
   public char[] getHvLstSrvcDt() throws CFException  {              
   		return hostVariables.getHvLstSrvcDtGroup().getHvLstSrvcDt();
   }

  
	/**
	*  set variable hvLstSrvcDt
	*  @param value
	**/
   public void setHvLstSrvcDt(char[] value) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(value);
   } 

     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex) throws CFException {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex);
   	
   }
   
   public void setHvLstSrvcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvLstSrvcDt with another Field
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source);
   }  
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvLstSrvcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvLstSrvcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.getHvLstSrvcDtGroup().setHvLstSrvcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvRemarkCd1
	 *	@return hvRemarkCd1
	 */
   public char[] getHvRemarkCd1() throws CFException  {              
   		return hostVariables.getHvRemarkCd1();
   }

  
	/**
	*  set variable hvRemarkCd1
	*  @param value
	**/
   public void setHvRemarkCd1(char[] value) throws CFException {
      hostVariables.setHvRemarkCd1(value);
   } 

     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex) throws CFException {
      hostVariables.setHvRemarkCd1(source, sourceIndex);
   	
   }
   
   public void setHvRemarkCd1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update HvRemarkCd1 with another Field
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source) {
      hostVariables.setHvRemarkCd1(source);
   }  
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update HvRemarkCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setHvRemarkCd1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      hostVariables.setHvRemarkCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public OpenCsrNextFil6SectOutCtx getOpenCsrNextFil6SectOutCtx() {
            return new OpenCsrNextFil6SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrNextFil6SectInCtx clone() {
        OpenCsrNextFil6SectInCtx cloneObj = new OpenCsrNextFil6SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrNextFil6SectInCtx getOpenCsrNextFil6SectInCtx() {
            return new OpenCsrNextFil6SectInCtx();
    }
     public class OpenCsrNextFil6SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     DcladjdClmhstDenormRef dcladjdClmhstDenormRef = D5427dt1Ctx.this.getDcladjdClmhstDenormRef();
     Dt1ReqContainer dt1ReqContainer = D5427dt1Ctx.this.getDt1ReqContainer();
     NextKey nextKey = D5427dt1Ctx.this.getNextKey();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HostVariables hostVariables = D5427dt1Ctx.this.getHostVariables();

	/**
	 *	Returns the value of dderefEeId
	 *	@return dderefEeId
	 */
   public char[] getDderefEeId() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefEeIdGroup().getDderefEeId();
   }

  
	/**
	*  set variable dderefEeId
	*  @param value
	**/
   public void setDderefEeId(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(value);
   } 

     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex);
   	
   }
   
   public void setDderefEeId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefEeId with another Field
	 *	@param value
	 */
   public void setDderefEeId(Field source) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source);
   }  
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefEeId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefEeId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefEeIdGroup().setDderefEeId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqEmpid
	 *	@return dt1ReqEmpid
	 */
   public char[] getDt1ReqEmpid() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqEmpid();
   }

  
	/**
	*  set variable dt1ReqEmpid
	*  @param value
	**/
   public void setDt1ReqEmpid(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(value);
   } 

     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex);
   	
   }
   
   public void setDt1ReqEmpid(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqEmpid with another Field
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source);
   }  
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqEmpid 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqEmpid(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqEmpid(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public int getNextIcnSufxVersNbr() throws CFException {
   		return nextKey.getNextIcnSufxVersNbr();
	}


	/**
	 *	Returns String value of nextIcnSufxVersNbr
	 *	@return nextIcnSufxVersNbr
	 */
	public char[]  getNextIcnSufxVersNbrString() throws CFException {
	     return String.valueOf(nextKey.getNextIcnSufxVersNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextIcnSufxVersNbrIsNumeric()  throws CFException{
	    return nextKey.nextIcnSufxVersNbrIsNumeric();
	}

	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setNextIcnSufxVersNbr(int number)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(number);
	}
	

	public void setNextIcnSufxVersNbr(long number)  throws CFException{
	    nextKey.setNextIcnSufxVersNbr(number);
	}
	
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbr(char[] value)  throws CFException {
		nextKey.setNextIcnSufxVersNbr(value);
	}
	
	/**
	 * 	Update NextIcnSufxVersNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextIcnSufxVersNbrString(char[] value)  throws CFException{
		nextKey.setNextIcnSufxVersNbr(value);
	}	

	/**
	 *	Returns the value of dderefIcnSufxVersNbr
	 *	@return dderefIcnSufxVersNbr
	 */
	public short getDderefIcnSufxVersNbr() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefIcnSufxVersNbr();
	}
	
	/**
	 * 	Update DderefIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setDderefIcnSufxVersNbr(short number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr(number);
	}

	public void setDderefIcnSufxVersNbr(int number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}

	public void setDderefIcnSufxVersNbr(long number)  throws CFException{
		dcladjdClmhstDenormRef.setDderefIcnSufxVersNbr((short)number);
	}



	/**
	 *	Returns the value of dderefProcDt
	 *	@return dderefProcDt
	 */
   public char[] getDderefProcDt() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcDtGroup().getDderefProcDt();
   }

  
	/**
	*  set variable dderefProcDt
	*  @param value
	**/
   public void setDderefProcDt(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(value);
   } 

     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex);
   	
   }
   
   public void setDderefProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcDt with another Field
	 *	@param value
	 */
   public void setDderefProcDt(Field source) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source);
   }  
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcDtGroup().setDderefProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextLnId
	 *	@return nextLnId
	 */
	public int getNextLnId() throws CFException {
   		return nextKey.getNextLnId();
	}


	/**
	 *	Returns String value of nextLnId
	 *	@return nextLnId
	 */
	public char[]  getNextLnIdString() throws CFException {
	     return String.valueOf(nextKey.getNextLnIdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean nextLnIdIsNumeric()  throws CFException{
	    return nextKey.nextLnIdIsNumeric();
	}

	/**
	 * 	Update NextLnId with the passed value
	 *	@param number
	 */
	public void setNextLnId(int number)  throws CFException{
		nextKey.setNextLnId(number);
	}
	

	public void setNextLnId(long number)  throws CFException{
	    nextKey.setNextLnId(number);
	}
	
	
	/**
	 * 	Update NextLnId with the passed value
	 *	@param value (String or char[])
	 */
	public void setNextLnId(char[] value)  throws CFException {
		nextKey.setNextLnId(value);
	}
	
	/**
	 * 	Update NextLnId with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNextLnIdString(char[] value)  throws CFException{
		nextKey.setNextLnId(value);
	}	

	/**
	 *	Returns the value of dderefIcnSufxCd
	 *	@return dderefIcnSufxCd
	 */
   public char[] getDderefIcnSufxCd() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().getDderefIcnSufxCd();
   }

  
	/**
	*  set variable dderefIcnSufxCd
	*  @param value
	**/
   public void setDderefIcnSufxCd(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(value);
   } 

     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setDderefIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefIcnSufxCd with another Field
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source);
   }  
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefIcnSufxCdGroup().setDderefIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of nextPgmIdLstCharVal
	 *	@return nextPgmIdLstCharVal
	 */
   public char[] getNextPgmIdLstCharVal() throws CFException  {              
   		return nextKey.getNextPgmIdLstCharVal();
   }

  
	/**
	*  set variable nextPgmIdLstCharVal
	*  @param value
	**/
   public void setNextPgmIdLstCharVal(char[] value) throws CFException {
      nextKey.setNextPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source) {
      nextKey.setNextPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefLnId
	 *	@return dderefLnId
	 */
	public short getDderefLnId() throws CFException {        
   		return dcladjdClmhstDenormRef.getDderefLnIdGroup().getDderefLnId();
	}
	
	/**
	 * 	Update DderefLnId with the passed value
	 *	@param number
	 */
	public void setDderefLnId(short number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId(number);
	}

	public void setDderefLnId(int number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}

	public void setDderefLnId(long number)  throws CFException{
		dcladjdClmhstDenormRef.getDderefLnIdGroup().setDderefLnId((short)number);
	}



	/**
	 *	Returns the value of nextProcTm
	 *	@return nextProcTm
	 */
   public char[] getNextProcTm() throws CFException  {              
   		return nextKey.getNextProcTm();
   }

  
	/**
	*  set variable nextProcTm
	*  @param value
	**/
   public void setNextProcTm(char[] value) throws CFException {
      nextKey.setNextProcTm(value);
   } 

     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcTm(source, sourceIndex);
   	
   }
   
   public void setNextProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcTm with another Field
	 *	@param value
	 */
   public void setNextProcTm(Field source) {
      nextKey.setNextProcTm(source);
   }  
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefProcTm
	 *	@return dderefProcTm
	 */
   public char[] getDderefProcTm() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefProcTmGroup().getDderefProcTm();
   }

  
	/**
	*  set variable dderefProcTm
	*  @param value
	**/
   public void setDderefProcTm(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(value);
   } 

     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex);
   	
   }
   
   public void setDderefProcTm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefProcTm with another Field
	 *	@param value
	 */
   public void setDderefProcTm(Field source) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source);
   }  
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefProcTm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefProcTmGroup().setDderefProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dderefInvnCtlNbr
	 *	@return dderefInvnCtlNbr
	 */
   public char[] getDderefInvnCtlNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().getDderefInvnCtlNbr();
   }

  
	/**
	*  set variable dderefInvnCtlNbr
	*  @param value
	**/
   public void setDderefInvnCtlNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(value);
   } 

     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefInvnCtlNbrGroup().setDderefInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public int getDt1ReqDepNbr() throws CFException {
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbr();
	}


	/**
	 *	Returns String value of dt1ReqDepNbr
	 *	@return dt1ReqDepNbr
	 */
	public char[]  getDt1ReqDepNbrString() throws CFException {
	     return String.valueOf(dt1ReqContainer.getDt1RequestArea().getDt1ReqDepNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ReqDepNbrIsNumeric()  throws CFException{
	    return dt1ReqContainer.getDt1RequestArea().dt1ReqDepNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param number
	 */
	public void setDt1ReqDepNbr(int number)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	

	public void setDt1ReqDepNbr(long number)  throws CFException{
	    dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbr(char[] value)  throws CFException {
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}
	
	/**
	 * 	Update Dt1ReqDepNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ReqDepNbrString(char[] value)  throws CFException{
		dt1ReqContainer.getDt1RequestArea().setDt1ReqDepNbr(value);
	}	

	/**
	 *	Returns the value of dcladjdClmhstDenormRef
	 *	@return dcladjdClmhstDenormRef
	 */   
	 public DcladjdClmhstDenormRef getDcladjdClmhstDenormRef() {
   	return dcladjdClmhstDenormRef;
   }


	/**
	 *	Returns the value of dt1ReqNextKey
	 *	@return dt1ReqNextKey
	 */
   public char[] getDt1ReqNextKey() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqNextKey();
   }

  
	/**
	*  set variable dt1ReqNextKey
	*  @param value
	**/
   public void setDt1ReqNextKey(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(value);
   } 

     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex);
   	
   }
   
   public void setDt1ReqNextKey(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqNextKey with another Field
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source);
   }  
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqNextKey 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqNextKey(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqNextKey(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextIcnSufxCd
	 *	@return nextIcnSufxCd
	 */
   public char[] getNextIcnSufxCd() throws CFException  {              
   		return nextKey.getNextIcnSufxCd();
   }

  
	/**
	*  set variable nextIcnSufxCd
	*  @param value
	**/
   public void setNextIcnSufxCd(char[] value) throws CFException {
      nextKey.setNextIcnSufxCd(value);
   } 

     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextIcnSufxCd(source, sourceIndex);
   	
   }
   
   public void setNextIcnSufxCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextIcnSufxCd with another Field
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source) {
      nextKey.setNextIcnSufxCd(source);
   }  
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextIcnSufxCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextIcnSufxCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextIcnSufxCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPolNbr
	 *	@return dderefPolNbr
	 */
   public char[] getDderefPolNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPolNbrGroup().getDderefPolNbr();
   }

  
	/**
	*  set variable dderefPolNbr
	*  @param value
	**/
   public void setDderefPolNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(value);
   } 

     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex);
   	
   }
   
   public void setDderefPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPolNbr with another Field
	 *	@param value
	 */
   public void setDderefPolNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source);
   }  
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPolNbrGroup().setDderefPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextInvnCtlNbr
	 *	@return nextInvnCtlNbr
	 */
   public char[] getNextInvnCtlNbr() throws CFException  {              
   		return nextKey.getNextInvnCtlNbr();
   }

  
	/**
	*  set variable nextInvnCtlNbr
	*  @param value
	**/
   public void setNextInvnCtlNbr(char[] value) throws CFException {
      nextKey.setNextInvnCtlNbr(value);
   } 

     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextInvnCtlNbr(source, sourceIndex);
   	
   }
   
   public void setNextInvnCtlNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextInvnCtlNbr with another Field
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source) {
      nextKey.setNextInvnCtlNbr(source);
   }  
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextInvnCtlNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextInvnCtlNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextInvnCtlNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextKey
	 *	@return nextKey
	 */   
	 public NextKey getNextKey() {
   	return nextKey;
   }


	/**
	 *	Returns the value of dt1ReqPolicy
	 *	@return dt1ReqPolicy
	 */
   public char[] getDt1ReqPolicy() throws CFException  {              
   		return dt1ReqContainer.getDt1RequestArea().getDt1ReqPolicy();
   }

  
	/**
	*  set variable dt1ReqPolicy
	*  @param value
	**/
   public void setDt1ReqPolicy(char[] value) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(value);
   } 

     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex) throws CFException {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex);
   	
   }
   
   public void setDt1ReqPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ReqPolicy with another Field
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source);
   }  
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ReqPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ReqPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ReqContainer.getDt1RequestArea().setDt1ReqPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefDepnNbr
	 *	@return dderefDepnNbr
	 */
   public char[] getDderefDepnNbr() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefDepnNbrGroup().getDderefDepnNbr();
   }

  
	/**
	*  set variable dderefDepnNbr
	*  @param value
	**/
   public void setDderefDepnNbr(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(value);
   } 

     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex);
   	
   }
   
   public void setDderefDepnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefDepnNbr with another Field
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source);
   }  
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefDepnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefDepnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefDepnNbrGroup().setDderefDepnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of nextProcDt
	 *	@return nextProcDt
	 */
   public char[] getNextProcDt() throws CFException  {              
   		return nextKey.getNextProcDt();
   }

  
	/**
	*  set variable nextProcDt
	*  @param value
	**/
   public void setNextProcDt(char[] value) throws CFException {
      nextKey.setNextProcDt(value);
   } 

     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex) throws CFException {
      nextKey.setNextProcDt(source, sourceIndex);
   	
   }
   
   public void setNextProcDt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update NextProcDt with another Field
	 *	@param value
	 */
   public void setNextProcDt(Field source) {
      nextKey.setNextProcDt(source);
   }  
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update NextProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNextProcDt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      nextKey.setNextProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dderefPgmIdLstCharVal
	 *	@return dderefPgmIdLstCharVal
	 */
   public char[] getDderefPgmIdLstCharVal() throws CFException  {              
   		return dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().getDderefPgmIdLstCharVal();
   }

  
	/**
	*  set variable dderefPgmIdLstCharVal
	*  @param value
	**/
   public void setDderefPgmIdLstCharVal(char[] value) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(value);
   } 

     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex) throws CFException {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex);
   	
   }
   
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DderefPgmIdLstCharVal with another Field
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source);
   }  
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DderefPgmIdLstCharVal 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDderefPgmIdLstCharVal(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dcladjdClmhstDenormRef.getDderefPgmIdLstCharValGroup().setDderefPgmIdLstCharVal(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += dcladjdClmhstDenormRef.hashCode();
        str += dt1ReqContainer.hashCode();
        str += nextKey.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hostVariables.hashCode();
       return str.hashCode();
    }

    public OpenCsrNextFil6SectOutCtx clone() {
        OpenCsrNextFil6SectOutCtx cloneObj = new OpenCsrNextFil6SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.dcladjdClmhstDenormRef = new DcladjdClmhstDenormRef();
        cloneObj.dcladjdClmhstDenormRef.set(dcladjdClmhstDenormRef.getClonedField());
        cloneObj.dt1ReqContainer = new Dt1ReqContainer();
        cloneObj.dt1ReqContainer.set(dt1ReqContainer.getClonedField());
        cloneObj.nextKey = new NextKey();
        cloneObj.nextKey.set(nextKey.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hostVariables = new HostVariables();
        cloneObj.hostVariables.set(hostVariables.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsrNextFil6SectOutCtx getOpenCsrNextFil6SectOutCtx() {
            return new OpenCsrNextFil6SectOutCtx();
    }
     public class FetchCsrNextFil6SectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrNextFil6SectOutCtx getFetchCsrNextFil6SectOutCtx() {
            return new FetchCsrNextFil6SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrNextFil6SectInCtx clone() {
        FetchCsrNextFil6SectInCtx cloneObj = new FetchCsrNextFil6SectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrNextFil6SectInCtx getFetchCsrNextFil6SectInCtx() {
            return new FetchCsrNextFil6SectInCtx();
    }
     public class FetchCsrNextFil6SectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchCsrNextFil6SectOutCtx clone() {
        FetchCsrNextFil6SectOutCtx cloneObj = new FetchCsrNextFil6SectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrNextFil6SectOutCtx getFetchCsrNextFil6SectOutCtx() {
            return new FetchCsrNextFil6SectOutCtx();
    }
     public class FetchCsrRowsSect5421InCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of fetchRowsetMax
	 *	@return fetchRowsetMax
	 */
	public int getFetchRowsetMax() throws CFException {        
   		return work.getFetchRowsetMax();
	}
	
	/**
	 * 	Update FetchRowsetMax with the passed value
	 *	@param number
	 */
	public void setFetchRowsetMax(int number)  throws CFException{
		work.setFetchRowsetMax(number);
	}


	public void setFetchRowsetMax(long number)  throws CFException{
		work.setFetchRowsetMax((int)number);
	}


	/**
	 *	Returns the value of work
	 *	@return work
	 */   
	 public Work getWork() {
   	return work;
   }


	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 

	public BigDecimal getHvaSupAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaSupAmt((index));
	}

    public char[] getHvaSupAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaSupAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaSupAmt with the passed number
	 *	@param number
	 */
	public void setHvaSupAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaSupAmt((index),number);
   }

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hvaPartnVal
	 *	@return hvaPartnVal
	 */
   public char[] getHvaPartnVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPartnVal(index);
   }

  
	/**
	*  set variable hvaPartnVal
	*  @param value
	**/
   public void setHvaPartnVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPartnVal((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaPartnId
	 *	@return hvaPartnId
	 */
	public short getHvaPartnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPartnId((index));
	}
	
	/**
	 * 	Update HvaPartnId with the passed value
	 *	@param number
	 */
	public void setHvaPartnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),number);
	}

	public void setHvaPartnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}

	public void setHvaPartnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}



	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	public BigDecimal getHvaBaseDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseDedAmt((index));
	}

    public char[] getHvaBaseDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseDedAmt((index),number);
   }

	/**
	 *	Returns the value of hvaMskNullInd
	 *	@return hvaMskNullInd
	 */
	public short getHvaMskNullInd(int index) throws CFException {        
   		return hvaClmHistArray.getHvaMskNullInd((index));
	}
	
	/**
	 * 	Update HvaMskNullInd with the passed value
	 *	@param number
	 */
	public void setHvaMskNullInd(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),number);
	}

	public void setHvaMskNullInd(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}

	public void setHvaMskNullInd(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}



	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of hvaTransCd
	 *	@return hvaTransCd
	 */
   public char[] getHvaTransCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTransCd(index);
   }

  
	/**
	*  set variable hvaTransCd
	*  @param value
	**/
   public void setHvaTransCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTransCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktNbr
	 *	@return hvaProvMktNbr
	 */
   public char[] getHvaProvMktNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktNbr(index);
   }

  
	/**
	*  set variable hvaProvMktNbr
	*  @param value
	**/
   public void setHvaProvMktNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktNbr((index),value);
   } 

	public BigDecimal getHvaBaseAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseAmt((index));
	}

    public char[] getHvaBaseAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseAmt((index),number);
   }

	public BigDecimal getHvaCobCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCobCrResAmt((index));
	}

    public char[] getHvaCobCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCobCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCobCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaCobCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCobCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPpoCd
	 *	@return hvaPpoCd
	 */
   public char[] getHvaPpoCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPpoCd(index);
   }

  
	/**
	*  set variable hvaPpoCd
	*  @param value
	**/
   public void setHvaPpoCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPpoCd((index),value);
   } 

	public BigDecimal getHvaMmDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmDedAmt((index));
	}

    public char[] getHvaMmDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmDedAmt((index),number);
   }

	public BigDecimal getHvaMcCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMcCrResAmt((index));
	}

    public char[] getHvaMcCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMcCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMcCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaMcCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMcCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProvIpaId
	 *	@return hvaProvIpaId
	 */
   public char[] getHvaProvIpaId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvIpaId(index);
   }

  
	/**
	*  set variable hvaProvIpaId
	*  @param value
	**/
   public void setHvaProvIpaId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvIpaId((index),value);
   } 

	/**
	 *	Returns the value of hvaPmtSvcCd
	 *	@return hvaPmtSvcCd
	 */
   public char[] getHvaPmtSvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPmtSvcCd(index);
   }

  
	/**
	*  set variable hvaPmtSvcCd
	*  @param value
	**/
   public void setHvaPmtSvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPmtSvcCd((index),value);
   } 

	public BigDecimal getHvaMmAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmAmt((index));
	}

    public char[] getHvaMmAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvEobNm
	 *	@return hvaProvEobNm
	 */
   public char[] getHvaProvEobNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvEobNm(index);
   }

  
	/**
	*  set variable hvaProvEobNm
	*  @param value
	**/
   public void setHvaProvEobNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvEobNm((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	public BigDecimal getHvaCopayAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCopayAmt((index));
	}

    public char[] getHvaCopayAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCopayAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCopayAmt with the passed number
	 *	@param number
	 */
	public void setHvaCopayAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCopayAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvPrdctCd
	 *	@return hvaProvPrdctCd
	 */
   public char[] getHvaProvPrdctCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvPrdctCd(index);
   }

  
	/**
	*  set variable hvaProvPrdctCd
	*  @param value
	**/
   public void setHvaProvPrdctCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvPrdctCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPrsCreatSrcCd
	 *	@return hvaPrsCreatSrcCd
	 */
   public char[] getHvaPrsCreatSrcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPrsCreatSrcCd(index);
   }

  
	/**
	*  set variable hvaPrsCreatSrcCd
	*  @param value
	**/
   public void setHvaPrsCreatSrcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPrsCreatSrcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of hvaBaseDedDescTxt
	 *	@return hvaBaseDedDescTxt
	 */
   public char[] getHvaBaseDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBaseDedDescTxt(index);
   }

  
	/**
	*  set variable hvaBaseDedDescTxt
	*  @param value
	**/
   public void setHvaBaseDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBaseDedDescTxt((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvaMmDedDescTxt
	 *	@return hvaMmDedDescTxt
	 */
   public char[] getHvaMmDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMmDedDescTxt(index);
   }

  
	/**
	*  set variable hvaMmDedDescTxt
	*  @param value
	**/
   public void setHvaMmDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMmDedDescTxt((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of hvaOvrCd
	 *	@return hvaOvrCd
	 */
   public char[] getHvaOvrCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaOvrCd(index);
   }

  
	/**
	*  set variable hvaOvrCd
	*  @param value
	**/
   public void setHvaOvrCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaOvrCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktTypCd
	 *	@return hvaProvMktTypCd
	 */
   public char[] getHvaProvMktTypCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktTypCd(index);
   }

  
	/**
	*  set variable hvaProvMktTypCd
	*  @param value
	**/
   public void setHvaProvMktTypCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktTypCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of hvaParInd
	 *	@return hvaParInd
	 */
   public char[] getHvaParInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaParInd(index);
   }

  
	/**
	*  set variable hvaParInd
	*  @param value
	**/
   public void setHvaParInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaParInd((index),value);
   } 

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrRowsSect5421OutCtx getFetchCsrRowsSect5421OutCtx() {
            return new FetchCsrRowsSect5421OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect5421InCtx clone() {
        FetchCsrRowsSect5421InCtx cloneObj = new FetchCsrRowsSect5421InCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect5421InCtx getFetchCsrRowsSect5421InCtx() {
            return new FetchCsrRowsSect5421InCtx();
    }
     public class FetchCsrRowsSect5421OutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Test condition 100 for isSqlcodeFetchEnd()
	 *	@return  Returns true if isSqlcodeFetchEnd() is 100
	 */
   public boolean isSqlcodeFetchEnd() throws CFException {
      return work.isSqlcodeFetchEnd();
   }

	/**
	*  set values 100
	*/
   	public void setSqlcodeFetchEndTrue()  throws CFException{  			
    	work.setSqlcodeFetchEndTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 0 for isSqlcodeOk()
	 *	@return  Returns true if isSqlcodeOk() is 0
	 */
   public boolean isSqlcodeOk() throws CFException {
      return work.isSqlcodeOk();
   }

	/**
	*  set values 0
	*/
   	public void setSqlcodeOkTrue()  throws CFException{  			
    	work.setSqlcodeOkTrue();
   	}
	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect5421OutCtx clone() {
        FetchCsrRowsSect5421OutCtx cloneObj = new FetchCsrRowsSect5421OutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect5421OutCtx getFetchCsrRowsSect5421OutCtx() {
            return new FetchCsrRowsSect5421OutCtx();
    }
     public class CloseCsrNextFil6SectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public CloseCsrNextFil6SectOutCtx getCloseCsrNextFil6SectOutCtx() {
            return new CloseCsrNextFil6SectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrNextFil6SectInCtx clone() {
        CloseCsrNextFil6SectInCtx cloneObj = new CloseCsrNextFil6SectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrNextFil6SectInCtx getCloseCsrNextFil6SectInCtx() {
            return new CloseCsrNextFil6SectInCtx();
    }
     public class CloseCsrNextFil6SectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrNextFil6SectOutCtx clone() {
        CloseCsrNextFil6SectOutCtx cloneObj = new CloseCsrNextFil6SectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrNextFil6SectOutCtx getCloseCsrNextFil6SectOutCtx() {
            return new CloseCsrNextFil6SectOutCtx();
    }
     public class ProcDynCursorSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ProcDynCursorSectOutCtx getProcDynCursorSectOutCtx() {
            return new ProcDynCursorSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcDynCursorSectInCtx clone() {
        ProcDynCursorSectInCtx cloneObj = new ProcDynCursorSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcDynCursorSectInCtx getProcDynCursorSectInCtx() {
            return new ProcDynCursorSectInCtx();
    }
     public class ProcDynCursorSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ProcDynCursorSectOutCtx clone() {
        ProcDynCursorSectOutCtx cloneObj = new ProcDynCursorSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ProcDynCursorSectOutCtx getProcDynCursorSectOutCtx() {
            return new ProcDynCursorSectOutCtx();
    }
     public class OpenDynCursorSectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public OpenDynCursorSectOutCtx getOpenDynCursorSectOutCtx() {
            return new OpenDynCursorSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public OpenDynCursorSectInCtx clone() {
        OpenDynCursorSectInCtx cloneObj = new OpenDynCursorSectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public OpenDynCursorSectInCtx getOpenDynCursorSectInCtx() {
            return new OpenDynCursorSectInCtx();
    }
     public class OpenDynCursorSectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public OpenDynCursorSectOutCtx clone() {
        OpenDynCursorSectOutCtx cloneObj = new OpenDynCursorSectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public OpenDynCursorSectOutCtx getOpenDynCursorSectOutCtx() {
            return new OpenDynCursorSectOutCtx();
    }
     public class FetchDynCursorSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchDynCursorSectOutCtx getFetchDynCursorSectOutCtx() {
            return new FetchDynCursorSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchDynCursorSectInCtx clone() {
        FetchDynCursorSectInCtx cloneObj = new FetchDynCursorSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchDynCursorSectInCtx getFetchDynCursorSectInCtx() {
            return new FetchDynCursorSectInCtx();
    }
     public class FetchDynCursorSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Test condition "N" for isClmHstEndOfFetchNo()
	 *	@return  Returns true if isClmHstEndOfFetchNo() is "N"
	 */
   public boolean isClmHstEndOfFetchNo() throws CFException {
      return work.isClmHstEndOfFetchNo();
   }

	/**
	*  set values "N"
	*/
   	public void setClmHstEndOfFetchNoTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchNoTrue();
   	}
	/**
	 *	Test condition "Y" for isClmHstEndOfFetchYes()
	 *	@return  Returns true if isClmHstEndOfFetchYes() is "Y"
	 */
   public boolean isClmHstEndOfFetchYes() throws CFException {
      return work.isClmHstEndOfFetchYes();
   }

	/**
	*  set values "Y"
	*/
   	public void setClmHstEndOfFetchYesTrue()  throws CFException{  			
    	work.setClmHstEndOfFetchYesTrue();
   	}

        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public FetchDynCursorSectOutCtx clone() {
        FetchDynCursorSectOutCtx cloneObj = new FetchDynCursorSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public FetchDynCursorSectOutCtx getFetchDynCursorSectOutCtx() {
            return new FetchDynCursorSectOutCtx();
    }
     public class FetchCsrRowsSect6221InCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of hvaProvSpclCd
	 *	@return hvaProvSpclCd
	 */
   public char[] getHvaProvSpclCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvSpclCd(index);
   }

  
	/**
	*  set variable hvaProvSpclCd
	*  @param value
	**/
   public void setHvaProvSpclCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvSpclCd((index),value);
   } 

	/**
	 *	Returns the value of hvaClmLvlRsnCd
	 *	@return hvaClmLvlRsnCd
	 */
   public char[] getHvaClmLvlRsnCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmLvlRsnCd(index);
   }

  
	/**
	*  set variable hvaClmLvlRsnCd
	*  @param value
	**/
   public void setHvaClmLvlRsnCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmLvlRsnCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMedcdReclmInd
	 *	@return hvaProvMedcdReclmInd
	 */
   public char[] getHvaProvMedcdReclmInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMedcdReclmInd(index);
   }

  
	/**
	*  set variable hvaProvMedcdReclmInd
	*  @param value
	**/
   public void setHvaProvMedcdReclmInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMedcdReclmInd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvNm
	 *	@return hvaProvNm
	 */
   public char[] getHvaProvNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvNm(index);
   }

  
	/**
	*  set variable hvaProvNm
	*  @param value
	**/
   public void setHvaProvNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvNm((index),value);
   } 

	/**
	 *	Returns the value of hvaProcTm
	 *	@return hvaProcTm
	 */
   public char[] getHvaProcTm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcTm(index);
   }

  
	/**
	*  set variable hvaProcTm
	*  @param value
	**/
   public void setHvaProcTm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcTm((index),value);
   } 

	/**
	 *	Returns the value of hvaProvTinsuff
	 *	@return hvaProvTinsuff
	 */
   public char[] getHvaProvTinsuff(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvTinsuff(index);
   }

  
	/**
	*  set variable hvaProvTinsuff
	*  @param value
	**/
   public void setHvaProvTinsuff(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvTinsuff((index),value);
   } 

	/**
	 *	Returns the value of hvaPhysMedcnMskCnt
	 *	@return hvaPhysMedcnMskCnt
	 */
	public int getHvaPhysMedcnMskCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPhysMedcnMskCnt((index));
	}
	
	/**
	 * 	Update HvaPhysMedcnMskCnt with the passed value
	 *	@param number
	 */
	public void setHvaPhysMedcnMskCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),number);
	}


	public void setHvaPhysMedcnMskCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPhysMedcnMskCnt((index),(int)number);
	}


	/**
	 *	Returns the value of fetchRowsetMax
	 *	@return fetchRowsetMax
	 */
	public int getFetchRowsetMax() throws CFException {        
   		return work.getFetchRowsetMax();
	}
	
	/**
	 * 	Update FetchRowsetMax with the passed value
	 *	@param number
	 */
	public void setFetchRowsetMax(int number)  throws CFException{
		work.setFetchRowsetMax(number);
	}


	public void setFetchRowsetMax(long number)  throws CFException{
		work.setFetchRowsetMax((int)number);
	}


	/**
	 *	Returns the value of work
	 *	@return work
	 */   
	 public Work getWork() {
   	return work;
   }


	/**
	 *	Returns the value of hvaSrvcCd
	 *	@return hvaSrvcCd
	 */
   public char[] getHvaSrvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSrvcCd(index);
   }

  
	/**
	*  set variable hvaSrvcCd
	*  @param value
	**/
   public void setHvaSrvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSrvcCd((index),value);
   } 

	public BigDecimal getHvaSupAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaSupAmt((index));
	}

    public char[] getHvaSupAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaSupAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaSupAmt with the passed number
	 *	@param number
	 */
	public void setHvaSupAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaSupAmt((index),number);
   }

	/**
	 *	Returns the value of hvaAuthProcCd
	 *	@return hvaAuthProcCd
	 */
   public char[] getHvaAuthProcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthProcCd(index);
   }

  
	/**
	*  set variable hvaAuthProcCd
	*  @param value
	**/
   public void setHvaAuthProcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthProcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProcT1Ind
	 *	@return hvaProcT1Ind
	 */
   public char[] getHvaProcT1Ind(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcT1Ind(index);
   }

  
	/**
	*  set variable hvaProcT1Ind
	*  @param value
	**/
   public void setHvaProcT1Ind(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcT1Ind((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthNbr
	 *	@return hvaAuthNbr
	 */
   public char[] getHvaAuthNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthNbr(index);
   }

  
	/**
	*  set variable hvaAuthNbr
	*  @param value
	**/
   public void setHvaAuthNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthNbr((index),value);
   } 

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hvaPartnVal
	 *	@return hvaPartnVal
	 */
   public char[] getHvaPartnVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPartnVal(index);
   }

  
	/**
	*  set variable hvaPartnVal
	*  @param value
	**/
   public void setHvaPartnVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPartnVal((index),value);
   } 

	/**
	 *	Returns the value of hvaInvnCtlNbr
	 *	@return hvaInvnCtlNbr
	 */
   public char[] getHvaInvnCtlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaInvnCtlNbr(index);
   }

  
	/**
	*  set variable hvaInvnCtlNbr
	*  @param value
	**/
   public void setHvaInvnCtlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaInvnCtlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDrgNbr
	 *	@return hvaDrgNbr
	 */
   public char[] getHvaDrgNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDrgNbr(index);
   }

  
	/**
	*  set variable hvaDrgNbr
	*  @param value
	**/
   public void setHvaDrgNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDrgNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaPartnId
	 *	@return hvaPartnId
	 */
	public short getHvaPartnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaPartnId((index));
	}
	
	/**
	 * 	Update HvaPartnId with the passed value
	 *	@param number
	 */
	public void setHvaPartnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),number);
	}

	public void setHvaPartnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}

	public void setHvaPartnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaPartnId((index),(short)number);
	}



	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaProvScrnNbr
	 *	@return hvaProvScrnNbr
	 */
   public char[] getHvaProvScrnNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvScrnNbr(index);
   }

  
	/**
	*  set variable hvaProvScrnNbr
	*  @param value
	**/
   public void setHvaProvScrnNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvScrnNbr((index),value);
   } 

	public BigDecimal getHvaBaseDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseDedAmt((index));
	}

    public char[] getHvaBaseDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseDedAmt((index),number);
   }

	/**
	 *	Returns the value of hvaMskNullInd
	 *	@return hvaMskNullInd
	 */
	public short getHvaMskNullInd(int index) throws CFException {        
   		return hvaClmHistArray.getHvaMskNullInd((index));
	}
	
	/**
	 * 	Update HvaMskNullInd with the passed value
	 *	@param number
	 */
	public void setHvaMskNullInd(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),number);
	}

	public void setHvaMskNullInd(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}

	public void setHvaMskNullInd(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaMskNullInd((index),(short)number);
	}



	/**
	 *	Returns the value of hvaSmbStCd
	 *	@return hvaSmbStCd
	 */
   public char[] getHvaSmbStCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaSmbStCd(index);
   }

  
	/**
	*  set variable hvaSmbStCd
	*  @param value
	**/
   public void setHvaSmbStCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaSmbStCd((index),value);
   } 

	/**
	 *	Returns the value of hvaTransCd
	 *	@return hvaTransCd
	 */
   public char[] getHvaTransCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTransCd(index);
   }

  
	/**
	*  set variable hvaTransCd
	*  @param value
	**/
   public void setHvaTransCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTransCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktNbr
	 *	@return hvaProvMktNbr
	 */
   public char[] getHvaProvMktNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktNbr(index);
   }

  
	/**
	*  set variable hvaProvMktNbr
	*  @param value
	**/
   public void setHvaProvMktNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktNbr((index),value);
   } 

	public BigDecimal getHvaBaseAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaBaseAmt((index));
	}

    public char[] getHvaBaseAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaBaseAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaBaseAmt with the passed number
	 *	@param number
	 */
	public void setHvaBaseAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaBaseAmt((index),number);
   }

	public BigDecimal getHvaCobCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCobCrResAmt((index));
	}

    public char[] getHvaCobCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCobCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCobCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaCobCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCobCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaLnId
	 *	@return hvaLnId
	 */
	public short getHvaLnId(int index) throws CFException {        
   		return hvaClmHistArray.getHvaLnId((index));
	}
	
	/**
	 * 	Update HvaLnId with the passed value
	 *	@param number
	 */
	public void setHvaLnId(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),number);
	}

	public void setHvaLnId(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}

	public void setHvaLnId(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaLnId((index),(short)number);
	}



	/**
	 *	Returns the value of hvaDlgteInd
	 *	@return hvaDlgteInd
	 */
   public char[] getHvaDlgteInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDlgteInd(index);
   }

  
	/**
	*  set variable hvaDlgteInd
	*  @param value
	**/
   public void setHvaDlgteInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDlgteInd((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaPpoCd
	 *	@return hvaPpoCd
	 */
   public char[] getHvaPpoCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPpoCd(index);
   }

  
	/**
	*  set variable hvaPpoCd
	*  @param value
	**/
   public void setHvaPpoCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPpoCd((index),value);
   } 

	public BigDecimal getHvaMmDedAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmDedAmt((index));
	}

    public char[] getHvaMmDedAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmDedAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmDedAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmDedAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmDedAmt((index),number);
   }

	public BigDecimal getHvaMcCrResAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMcCrResAmt((index));
	}

    public char[] getHvaMcCrResAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMcCrResAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMcCrResAmt with the passed number
	 *	@param number
	 */
	public void setHvaMcCrResAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMcCrResAmt((index),number);
   }

	/**
	 *	Returns the value of hvaFstDt
	 *	@return hvaFstDt
	 */
   public char[] getHvaFstDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFstDt(index);
   }

  
	/**
	*  set variable hvaFstDt
	*  @param value
	**/
   public void setHvaFstDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFstDt((index),value);
   } 

	/**
	 *	Returns the value of hvaFilmOfcNbr
	 *	@return hvaFilmOfcNbr
	 */
   public char[] getHvaFilmOfcNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFilmOfcNbr(index);
   }

  
	/**
	*  set variable hvaFilmOfcNbr
	*  @param value
	**/
   public void setHvaFilmOfcNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFilmOfcNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDftNbr
	 *	@return hvaDftNbr
	 */
   public char[] getHvaDftNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDftNbr(index);
   }

  
	/**
	*  set variable hvaDftNbr
	*  @param value
	**/
   public void setHvaDftNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDftNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDiagCd
	 *	@return hvaDiagCd
	 */
   public char[] getHvaDiagCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDiagCd(index);
   }

  
	/**
	*  set variable hvaDiagCd
	*  @param value
	**/
   public void setHvaDiagCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDiagCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthUniqCnt
	 *	@return hvaAuthUniqCnt
	 */
	public int getHvaAuthUniqCnt(int index) throws CFException {        
   		return hvaClmHistArray.getHvaAuthUniqCnt((index));
	}
	
	/**
	 * 	Update HvaAuthUniqCnt with the passed value
	 *	@param number
	 */
	public void setHvaAuthUniqCnt(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),number);
	}


	public void setHvaAuthUniqCnt(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaAuthUniqCnt((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	public BigDecimal getHvaChrgAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaChrgAmt((index));
	}

    public char[] getHvaChrgAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaChrgAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaChrgAmt with the passed number
	 *	@param number
	 */
	public void setHvaChrgAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaChrgAmt((index),number);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hvaFlnSrlNbr
	 *	@return hvaFlnSrlNbr
	 */
   public char[] getHvaFlnSrlNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnSrlNbr(index);
   }

  
	/**
	*  set variable hvaFlnSrlNbr
	*  @param value
	**/
   public void setHvaFlnSrlNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnSrlNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProvIpaId
	 *	@return hvaProvIpaId
	 */
   public char[] getHvaProvIpaId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvIpaId(index);
   }

  
	/**
	*  set variable hvaProvIpaId
	*  @param value
	**/
   public void setHvaProvIpaId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvIpaId((index),value);
   } 

	/**
	 *	Returns the value of hvaPmtSvcCd
	 *	@return hvaPmtSvcCd
	 */
   public char[] getHvaPmtSvcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPmtSvcCd(index);
   }

  
	/**
	*  set variable hvaPmtSvcCd
	*  @param value
	**/
   public void setHvaPmtSvcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPmtSvcCd((index),value);
   } 

	public BigDecimal getHvaMmAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaMmAmt((index));
	}

    public char[] getHvaMmAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaMmAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaMmAmt with the passed number
	 *	@param number
	 */
	public void setHvaMmAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaMmAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvEobNm
	 *	@return hvaProvEobNm
	 */
   public char[] getHvaProvEobNm(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvEobNm(index);
   }

  
	/**
	*  set variable hvaProvEobNm
	*  @param value
	**/
   public void setHvaProvEobNm(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvEobNm((index),value);
   } 

	/**
	 *	Returns the value of hvaClmSmbTypAppCd
	 *	@return hvaClmSmbTypAppCd
	 */
   public char[] getHvaClmSmbTypAppCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClmSmbTypAppCd(index);
   }

  
	/**
	*  set variable hvaClmSmbTypAppCd
	*  @param value
	**/
   public void setHvaClmSmbTypAppCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClmSmbTypAppCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of hvaFlnJulianDtNbr
	 *	@return hvaFlnJulianDtNbr
	 */
   public char[] getHvaFlnJulianDtNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFlnJulianDtNbr(index);
   }

  
	/**
	*  set variable hvaFlnJulianDtNbr
	*  @param value
	**/
   public void setHvaFlnJulianDtNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFlnJulianDtNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaProcDt
	 *	@return hvaProcDt
	 */
   public char[] getHvaProcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProcDt(index);
   }

  
	/**
	*  set variable hvaProcDt
	*  @param value
	**/
   public void setHvaProcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaNtfyWaivCd
	 *	@return hvaNtfyWaivCd
	 */
   public char[] getHvaNtfyWaivCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNtfyWaivCd(index);
   }

  
	/**
	*  set variable hvaNtfyWaivCd
	*  @param value
	**/
   public void setHvaNtfyWaivCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNtfyWaivCd((index),value);
   } 

	public BigDecimal getHvaCopayAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaCopayAmt((index));
	}

    public char[] getHvaCopayAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaCopayAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaCopayAmt with the passed number
	 *	@param number
	 */
	public void setHvaCopayAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaCopayAmt((index),number);
   }

	/**
	 *	Returns the value of hvaProvPrdctCd
	 *	@return hvaProvPrdctCd
	 */
   public char[] getHvaProvPrdctCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvPrdctCd(index);
   }

  
	/**
	*  set variable hvaProvPrdctCd
	*  @param value
	**/
   public void setHvaProvPrdctCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvPrdctCd((index),value);
   } 

	/**
	 *	Returns the value of hvaPrsCreatSrcCd
	 *	@return hvaPrsCreatSrcCd
	 */
   public char[] getHvaPrsCreatSrcCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPrsCreatSrcCd(index);
   }

  
	/**
	*  set variable hvaPrsCreatSrcCd
	*  @param value
	**/
   public void setHvaPrsCreatSrcCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPrsCreatSrcCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAuthSrcId
	 *	@return hvaAuthSrcId
	 */
   public char[] getHvaAuthSrcId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAuthSrcId(index);
   }

  
	/**
	*  set variable hvaAuthSrcId
	*  @param value
	**/
   public void setHvaAuthSrcId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAuthSrcId((index),value);
   } 

	/**
	 *	Returns the value of hvaPayCd
	 *	@return hvaPayCd
	 */
   public char[] getHvaPayCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPayCd(index);
   }

  
	/**
	*  set variable hvaPayCd
	*  @param value
	**/
   public void setHvaPayCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPayCd((index),value);
   } 

	/**
	 *	Returns the value of hvaFaclOrProfCd
	 *	@return hvaFaclOrProfCd
	 */
   public char[] getHvaFaclOrProfCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaFaclOrProfCd(index);
   }

  
	/**
	*  set variable hvaFaclOrProfCd
	*  @param value
	**/
   public void setHvaFaclOrProfCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaFaclOrProfCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of hvaBaseDedDescTxt
	 *	@return hvaBaseDedDescTxt
	 */
   public char[] getHvaBaseDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBaseDedDescTxt(index);
   }

  
	/**
	*  set variable hvaBaseDedDescTxt
	*  @param value
	**/
   public void setHvaBaseDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBaseDedDescTxt((index),value);
   } 

	public BigDecimal getHvaNcAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaNcAmt((index));
	}

    public char[] getHvaNcAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaNcAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaNcAmt with the passed number
	 *	@param number
	 */
	public void setHvaNcAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaNcAmt((index),number);
   }

	/**
	 *	Returns the value of hvaNdbContrId
	 *	@return hvaNdbContrId
	 */
   public char[] getHvaNdbContrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaNdbContrId(index);
   }

  
	/**
	*  set variable hvaNdbContrId
	*  @param value
	**/
   public void setHvaNdbContrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaNdbContrId((index),value);
   } 

	/**
	 *	Returns the value of hvaIcnSufxVersNbr
	 *	@return hvaIcnSufxVersNbr
	 */
	public short getHvaIcnSufxVersNbr(int index) throws CFException {        
   		return hvaClmHistArray.getHvaIcnSufxVersNbr((index));
	}
	
	/**
	 * 	Update HvaIcnSufxVersNbr with the passed value
	 *	@param number
	 */
	public void setHvaIcnSufxVersNbr(int index,short number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),number);
	}

	public void setHvaIcnSufxVersNbr(int index,int number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}

	public void setHvaIcnSufxVersNbr(int index,long number)  throws CFException{
		hvaClmHistArray.setHvaIcnSufxVersNbr((index),(short)number);
	}



	/**
	 *	Returns the value of hvaIcnSufxCd
	 *	@return hvaIcnSufxCd
	 */
   public char[] getHvaIcnSufxCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaIcnSufxCd(index);
   }

  
	/**
	*  set variable hvaIcnSufxCd
	*  @param value
	**/
   public void setHvaIcnSufxCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaIcnSufxCd((index),value);
   } 

	/**
	 *	Returns the value of hvaRelSrvcClmLvlInd
	 *	@return hvaRelSrvcClmLvlInd
	 */
   public char[] getHvaRelSrvcClmLvlInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRelSrvcClmLvlInd(index);
   }

  
	/**
	*  set variable hvaRelSrvcClmLvlInd
	*  @param value
	**/
   public void setHvaRelSrvcClmLvlInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRelSrvcClmLvlInd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hvaMmDedDescTxt
	 *	@return hvaMmDedDescTxt
	 */
   public char[] getHvaMmDedDescTxt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMmDedDescTxt(index);
   }

  
	/**
	*  set variable hvaMmDedDescTxt
	*  @param value
	**/
   public void setHvaMmDedDescTxt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMmDedDescTxt((index),value);
   } 

	/**
	 *	Returns the value of hvaMbrPrvInd
	 *	@return hvaMbrPrvInd
	 */
   public char[] getHvaMbrPrvInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaMbrPrvInd(index);
   }

  
	/**
	*  set variable hvaMbrPrvInd
	*  @param value
	**/
   public void setHvaMbrPrvInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaMbrPrvInd((index),value);
   } 

	/**
	 *	Returns the value of hvaOvrCd
	 *	@return hvaOvrCd
	 */
   public char[] getHvaOvrCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaOvrCd(index);
   }

  
	/**
	*  set variable hvaOvrCd
	*  @param value
	**/
   public void setHvaOvrCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaOvrCd((index),value);
   } 

	/**
	 *	Returns the value of hvaProvMktTypCd
	 *	@return hvaProvMktTypCd
	 */
   public char[] getHvaProvMktTypCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaProvMktTypCd(index);
   }

  
	/**
	*  set variable hvaProvMktTypCd
	*  @param value
	**/
   public void setHvaProvMktTypCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaProvMktTypCd((index),value);
   } 

	/**
	 *	Returns the value of hvaAdjtrId
	 *	@return hvaAdjtrId
	 */
   public char[] getHvaAdjtrId(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaAdjtrId(index);
   }

  
	/**
	*  set variable hvaAdjtrId
	*  @param value
	**/
   public void setHvaAdjtrId(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaAdjtrId((index),value);
   } 

	/**
	 *	Returns the value of hvaParInd
	 *	@return hvaParInd
	 */
   public char[] getHvaParInd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaParInd(index);
   }

  
	/**
	*  set variable hvaParInd
	*  @param value
	**/
   public void setHvaParInd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaParInd((index),value);
   } 

	/**
	 *	Returns the value of hvaLstSrvcDt
	 *	@return hvaLstSrvcDt
	 */
   public char[] getHvaLstSrvcDt(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaLstSrvcDt(index);
   }

  
	/**
	*  set variable hvaLstSrvcDt
	*  @param value
	**/
   public void setHvaLstSrvcDt(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaLstSrvcDt((index),value);
   } 

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	public BigDecimal getHvaPtntRespAmt(int index) throws CFException{      
   		return hvaClmHistArray.getHvaPtntRespAmt((index));
	}

    public char[] getHvaPtntRespAmtString(int index) throws CFException {
          return  hvaClmHistArray.getHvaPtntRespAmt((index)).toPlainString().toCharArray();
    }
	
	/**
	 * 	Update HvaPtntRespAmt with the passed number
	 *	@param number
	 */
	public void setHvaPtntRespAmt(int index,BigDecimal number)  throws CFException{
		hvaClmHistArray.setHvaPtntRespAmt((index),number);
   }

	/**
	 *	Returns the value of hvaTpsmCd
	 *	@return hvaTpsmCd
	 */
   public char[] getHvaTpsmCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaTpsmCd(index);
   }

  
	/**
	*  set variable hvaTpsmCd
	*  @param value
	**/
   public void setHvaTpsmCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaTpsmCd((index),value);
   } 

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public FetchCsrRowsSect6221OutCtx getFetchCsrRowsSect6221OutCtx() {
            return new FetchCsrRowsSect6221OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect6221InCtx clone() {
        FetchCsrRowsSect6221InCtx cloneObj = new FetchCsrRowsSect6221InCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect6221InCtx getFetchCsrRowsSect6221InCtx() {
            return new FetchCsrRowsSect6221InCtx();
    }
     public class FetchCsrRowsSect6221OutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Test condition 100 for isSqlcodeFetchEnd()
	 *	@return  Returns true if isSqlcodeFetchEnd() is 100
	 */
   public boolean isSqlcodeFetchEnd() throws CFException {
      return work.isSqlcodeFetchEnd();
   }

	/**
	*  set values 100
	*/
   	public void setSqlcodeFetchEndTrue()  throws CFException{  			
    	work.setSqlcodeFetchEndTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 0 for isSqlcodeOk()
	 *	@return  Returns true if isSqlcodeOk() is 0
	 */
   public boolean isSqlcodeOk() throws CFException {
      return work.isSqlcodeOk();
   }

	/**
	*  set values 0
	*/
   	public void setSqlcodeOkTrue()  throws CFException{  			
    	work.setSqlcodeOkTrue();
   	}
	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaClmHistArray
	 *	@return hvaClmHistArray
	 */   
	 public HvaClmHistArray getHvaClmHistArray() {
   	return hvaClmHistArray;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public FetchCsrRowsSect6221OutCtx clone() {
        FetchCsrRowsSect6221OutCtx cloneObj = new FetchCsrRowsSect6221OutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsrRowsSect6221OutCtx getFetchCsrRowsSect6221OutCtx() {
            return new FetchCsrRowsSect6221OutCtx();
    }
     public class CloseDynCursorSectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public CloseDynCursorSectOutCtx getCloseDynCursorSectOutCtx() {
            return new CloseDynCursorSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseDynCursorSectInCtx clone() {
        CloseDynCursorSectInCtx cloneObj = new CloseDynCursorSectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseDynCursorSectInCtx getCloseDynCursorSectInCtx() {
            return new CloseDynCursorSectInCtx();
    }
     public class CloseDynCursorSectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseDynCursorSectOutCtx clone() {
        CloseDynCursorSectOutCtx cloneObj = new CloseDynCursorSectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseDynCursorSectOutCtx getCloseDynCursorSectOutCtx() {
            return new CloseDynCursorSectOutCtx();
    }
     public class SortDt1srtSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     SrpSortRequestParameters srpSortRequestParameters = D5427dt1Ctx.this.getSrpSortRequestParameters();
     Dt1SrtContainer dt1SrtContainer = D5427dt1Ctx.this.getDt1SrtContainer();

	/**
	 *	Returns the value of srpReturnCode
	 *	@return srpReturnCode
	 */
   public char[] getSrpReturnCode() throws CFException  {              
   		return srpSortRequestParameters.getSrpReturnCode();
   }

  
	/**
	*  set variable srpReturnCode
	*  @param value
	**/
   public void setSrpReturnCode(char[] value) throws CFException {
      srpSortRequestParameters.setSrpReturnCode(value);
   } 

     /**
	 * 	Update SrpReturnCode 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSrpReturnCode(char[] source, int sourceIndex) throws CFException {
      srpSortRequestParameters.setSrpReturnCode(source, sourceIndex);
   	
   }
   
   public void setSrpReturnCode(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      srpSortRequestParameters.setSrpReturnCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SrpReturnCode 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSrpReturnCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      srpSortRequestParameters.setSrpReturnCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update SrpReturnCode with another Field
	 *	@param value
	 */
   public void setSrpReturnCode(Field source) {
      srpSortRequestParameters.setSrpReturnCode(source);
   }  
   
     /**
	 * 	Update SrpReturnCode 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSrpReturnCode(Field source, int sourceIndex,int sourceLen) {
      srpSortRequestParameters.setSrpReturnCode(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update SrpReturnCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSrpReturnCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      srpSortRequestParameters.setSrpReturnCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1SrtItem
	 *	@return dt1SrtItem
	 */   
	 public Dt1SrtItem getDt1SrtItem(int index) {
   	return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index);
   }

    public List<Dt1SrtItem> getDt1SrtItem() {
        return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem();
    }
   /**
	* 	Update Dt1SrtItem with the passed value
	*	@param value
	*/
   public void setDt1SrtItem(int index,char[] value) throws CFException {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().setDt1SrtItem((index),value);
   }   


	/**
	 *	Returns the value of dt1SrtArray
	 *	@return dt1SrtArray
	 */   
	 public Dt1SrtArray getDt1SrtArray() {
   	return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray();
   }

   /**
	* 	Update Dt1SrtArray with the passed value
	*	@param value
	*/
   public void setDt1SrtArray(char[] value) throws CFException {
      dt1SrtContainer.getDt1SrtVariableArea().setDt1SrtArray(value);
   }   

     /**
	 * 	Update Dt1SrtArray 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDt1SrtArray(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dt1SrtContainer.getDt1SrtVariableArea().setDt1SrtArray(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1SrtArray 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtArray(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1SrtContainer.getDt1SrtVariableArea().setDt1SrtArray(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1SrtArray with another Field
	 *	@param value
	 */
   public void setDt1SrtArray(Field source) {
   	dt1SrtContainer.getDt1SrtVariableArea().setDt1SrtArray(source);
   }  
   
     /**
	 * 	Update Dt1SrtArray 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDt1SrtArray(Field source, int sourceIndex,int sourceLen) {
   	dt1SrtContainer.getDt1SrtVariableArea().setDt1SrtArray(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1SrtArray 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtArray(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1SrtContainer.getDt1SrtVariableArea().setDt1SrtArray(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "00" for isSrpGoodReturn()
	 *	@return  Returns true if isSrpGoodReturn() is "00"
	 */
   public boolean isSrpGoodReturn() throws CFException {
      return srpSortRequestParameters.isSrpGoodReturn();
   }

	/**
	*  set values "00"
	*/
   	public void setSrpGoodReturnTrue()  throws CFException{  			
    	srpSortRequestParameters.setSrpGoodReturnTrue();
   	}
	/**
	 *	Returns the value of srpSortRequestParameters
	 *	@return srpSortRequestParameters
	 */   
	 public SrpSortRequestParameters getSrpSortRequestParameters() {
   	return srpSortRequestParameters;
   }


	/**
	 *	Returns the value of dt1SrtItemCnt
	 *	@return dt1SrtItemCnt
	 */
	public int getDt1SrtItemCnt() throws CFException {
   		return dt1SrtContainer.getDt1SrtFixedArea().getDt1SrtItemCnt();
	}


	/**
	 *	Returns String value of dt1SrtItemCnt
	 *	@return dt1SrtItemCnt
	 */
	public char[]  getDt1SrtItemCntString() throws CFException {
	     return String.valueOf(dt1SrtContainer.getDt1SrtFixedArea().getDt1SrtItemCntString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1SrtItemCntIsNumeric()  throws CFException{
	    return dt1SrtContainer.getDt1SrtFixedArea().dt1SrtItemCntIsNumeric();
	}

	/**
	 * 	Update Dt1SrtItemCnt with the passed value
	 *	@param number
	 */
	public void setDt1SrtItemCnt(int number)  throws CFException{
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(number);
	}
	

	public void setDt1SrtItemCnt(long number)  throws CFException{
	    dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(number);
	}
	
	
	/**
	 * 	Update Dt1SrtItemCnt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1SrtItemCnt(char[] value)  throws CFException {
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(value);
	}
	
	/**
	 * 	Update Dt1SrtItemCnt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1SrtItemCntString(char[] value)  throws CFException{
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(value);
	}	

	/**
	 *	Returns the value of vp776a0001
	 *	@return vp776a0001
	 */
   public char[] getVp776a0001() throws CFException  {              
   		return standardVars.getVp776a0001();
   }

  
	/**
	*  set variable vp776a0001
	*  @param value
	**/
   public void setVp776a0001(char[] value) throws CFException {
      standardVars.setVp776a0001(value);
   } 

     /**
	 * 	Update Vp776a0001 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setVp776a0001(char[] source, int sourceIndex) throws CFException {
      standardVars.setVp776a0001(source, sourceIndex);
   	
   }
   
   public void setVp776a0001(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setVp776a0001(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Vp776a0001 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setVp776a0001(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setVp776a0001(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Vp776a0001 with another Field
	 *	@param value
	 */
   public void setVp776a0001(Field source) {
      standardVars.setVp776a0001(source);
   }  
   
     /**
	 * 	Update Vp776a0001 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setVp776a0001(Field source, int sourceIndex,int sourceLen) {
      standardVars.setVp776a0001(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Vp776a0001 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setVp776a0001(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setVp776a0001(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public SortDt1srtSectOutCtx getSortDt1srtSectOutCtx() {
            return new SortDt1srtSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += standardVars.hashCode();
        str += srpSortRequestParameters.hashCode();
        str += dt1SrtContainer.hashCode();
       return str.hashCode();
    }

    public SortDt1srtSectInCtx clone() {
        SortDt1srtSectInCtx cloneObj = new SortDt1srtSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.srpSortRequestParameters = new SrpSortRequestParameters();
        cloneObj.srpSortRequestParameters.set(srpSortRequestParameters.getClonedField());
        cloneObj.dt1SrtContainer = new Dt1SrtContainer();
        cloneObj.dt1SrtContainer.set(dt1SrtContainer.getClonedField());
        return cloneObj;
    }

    }

    public SortDt1srtSectInCtx getSortDt1srtSectInCtx() {
            return new SortDt1srtSectInCtx();
    }
     public class SortDt1srtSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     SrpSortRequestParameters srpSortRequestParameters = D5427dt1Ctx.this.getSrpSortRequestParameters();
     Dt1SrtContainer dt1SrtContainer = D5427dt1Ctx.this.getDt1SrtContainer();

	/**
	 *	Returns the value of dt1SrtArray
	 *	@return dt1SrtArray
	 */   
	 public Dt1SrtArray getDt1SrtArray() {
   	return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray();
   }

   /**
	* 	Update Dt1SrtArray with the passed value
	*	@param value
	*/
   public void setDt1SrtArray(char[] value) throws CFException {
      dt1SrtContainer.getDt1SrtVariableArea().setDt1SrtArray(value);
   }   

     /**
	 * 	Update Dt1SrtArray 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDt1SrtArray(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dt1SrtContainer.getDt1SrtVariableArea().setDt1SrtArray(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1SrtArray 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtArray(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1SrtContainer.getDt1SrtVariableArea().setDt1SrtArray(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1SrtArray with another Field
	 *	@param value
	 */
   public void setDt1SrtArray(Field source) {
   	dt1SrtContainer.getDt1SrtVariableArea().setDt1SrtArray(source);
   }  
   
     /**
	 * 	Update Dt1SrtArray 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDt1SrtArray(Field source, int sourceIndex,int sourceLen) {
   	dt1SrtContainer.getDt1SrtVariableArea().setDt1SrtArray(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1SrtArray 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtArray(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1SrtContainer.getDt1SrtVariableArea().setDt1SrtArray(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 998 for isDt1RspSeeViewForMoreInfo()
	 *	@return  Returns true if isDt1RspSeeViewForMoreInfo() is 998
	 */
   public boolean isDt1RspSeeViewForMoreInfo() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspSeeViewForMoreInfo();
   }

	/**
	*  set values 998
	*/
   	public void setDt1RspSeeViewForMoreInfoTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspSeeViewForMoreInfoTrue();
   	}
public int getSrpKeyLength() throws CFException {  
        return srpSortRequestParameters.getSrpKeyLength();
}
	/**
	 * 	Update SrpKeyLength with the passed value
	 *	@param number
	 */
	public void setSrpKeyLength(int number)  throws CFException{
		srpSortRequestParameters.setSrpKeyLength(number);
	}


	public void setSrpKeyLength(long number)  throws CFException{
	    srpSortRequestParameters.setSrpKeyLength(number);
	}
	

	/**
	 *	Returns the value of srpReturnCode
	 *	@return srpReturnCode
	 */
   public char[] getSrpReturnCode() throws CFException  {              
   		return srpSortRequestParameters.getSrpReturnCode();
   }

  
	/**
	*  set variable srpReturnCode
	*  @param value
	**/
   public void setSrpReturnCode(char[] value) throws CFException {
      srpSortRequestParameters.setSrpReturnCode(value);
   } 

     /**
	 * 	Update SrpReturnCode 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSrpReturnCode(char[] source, int sourceIndex) throws CFException {
      srpSortRequestParameters.setSrpReturnCode(source, sourceIndex);
   	
   }
   
   public void setSrpReturnCode(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      srpSortRequestParameters.setSrpReturnCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update SrpReturnCode 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSrpReturnCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      srpSortRequestParameters.setSrpReturnCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update SrpReturnCode with another Field
	 *	@param value
	 */
   public void setSrpReturnCode(Field source) {
      srpSortRequestParameters.setSrpReturnCode(source);
   }  
   
     /**
	 * 	Update SrpReturnCode 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSrpReturnCode(Field source, int sourceIndex,int sourceLen) {
      srpSortRequestParameters.setSrpReturnCode(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update SrpReturnCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSrpReturnCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      srpSortRequestParameters.setSrpReturnCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1RspErrSection
	 *	@return dt1RspErrSection
	 */
   public char[] getDt1RspErrSection() throws CFException  {              
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspErrSection();
   }

  
	/**
	*  set variable dt1RspErrSection
	*  @param value
	**/
   public void setDt1RspErrSection(char[] value) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(value);
   } 

     /**
	 * 	Update Dt1RspErrSection 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1RspErrSection(char[] source, int sourceIndex) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex);
   	
   }
   
   public void setDt1RspErrSection(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspErrSection(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1RspErrSection with another Field
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source);
   }  
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source, int sourceIndex,int sourceLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getSrpKeyStart() throws CFException {  
        return srpSortRequestParameters.getSrpKeyStart();
}
	/**
	 * 	Update SrpKeyStart with the passed value
	 *	@param number
	 */
	public void setSrpKeyStart(int number)  throws CFException{
		srpSortRequestParameters.setSrpKeyStart(number);
	}


	public void setSrpKeyStart(long number)  throws CFException{
	    srpSortRequestParameters.setSrpKeyStart(number);
	}
	

	/**
	 *	Test condition 6 for isDt1RspFailedSeeExpCode()
	 *	@return  Returns true if isDt1RspFailedSeeExpCode() is 6
	 */
   public boolean isDt1RspFailedSeeExpCode() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspFailedSeeExpCode();
   }

	/**
	*  set values 6
	*/
   	public void setDt1RspFailedSeeExpCodeTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspFailedSeeExpCodeTrue();
   	}
	/**
	 *	Test condition "D" for isSrpDescendingSort()
	 *	@return  Returns true if isSrpDescendingSort() is "D"
	 */
   public boolean isSrpDescendingSort() throws CFException {
      return srpSortRequestParameters.isSrpDescendingSort();
   }

	/**
	*  set values "D"
	*/
   	public void setSrpDescendingSortTrue()  throws CFException{  			
    	srpSortRequestParameters.setSrpDescendingSortTrue();
   	}
	/**
	 *	Returns the value of srpSortRequestParameters
	 *	@return srpSortRequestParameters
	 */   
	 public SrpSortRequestParameters getSrpSortRequestParameters() {
   	return srpSortRequestParameters;
   }


	/**
	 *	Returns the value of dt1SrtItemCnt
	 *	@return dt1SrtItemCnt
	 */
	public int getDt1SrtItemCnt() throws CFException {
   		return dt1SrtContainer.getDt1SrtFixedArea().getDt1SrtItemCnt();
	}


	/**
	 *	Returns String value of dt1SrtItemCnt
	 *	@return dt1SrtItemCnt
	 */
	public char[]  getDt1SrtItemCntString() throws CFException {
	     return String.valueOf(dt1SrtContainer.getDt1SrtFixedArea().getDt1SrtItemCntString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1SrtItemCntIsNumeric()  throws CFException{
	    return dt1SrtContainer.getDt1SrtFixedArea().dt1SrtItemCntIsNumeric();
	}

	/**
	 * 	Update Dt1SrtItemCnt with the passed value
	 *	@param number
	 */
	public void setDt1SrtItemCnt(int number)  throws CFException{
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(number);
	}
	

	public void setDt1SrtItemCnt(long number)  throws CFException{
	    dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(number);
	}
	
	
	/**
	 * 	Update Dt1SrtItemCnt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1SrtItemCnt(char[] value)  throws CFException {
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(value);
	}
	
	/**
	 * 	Update Dt1SrtItemCnt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1SrtItemCntString(char[] value)  throws CFException{
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(value);
	}	

public int getSrpEntryCount() throws CFException {  
        return srpSortRequestParameters.getSrpEntryCount();
}
	/**
	 * 	Update SrpEntryCount with the passed value
	 *	@param number
	 */
	public void setSrpEntryCount(int number)  throws CFException{
		srpSortRequestParameters.setSrpEntryCount(number);
	}


	public void setSrpEntryCount(long number)  throws CFException{
	    srpSortRequestParameters.setSrpEntryCount(number);
	}
	

	/**
	 *	Returns the value of dt1RspRespCode
	 *	@return dt1RspRespCode
	 */
	public int getDt1RspRespCode() throws CFException {
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspRespCode();
	}


	/**
	 *	Returns String value of dt1RspRespCode
	 *	@return dt1RspRespCode
	 */
	public char[]  getDt1RspRespCodeString() throws CFException {
	     return String.valueOf(dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspRespCodeString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1RspRespCodeIsNumeric()  throws CFException{
	    return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().dt1RspRespCodeIsNumeric();
	}

	/**
	 * 	Update Dt1RspRespCode with the passed value
	 *	@param number
	 */
	public void setDt1RspRespCode(int number)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(number);
	}
	

	public void setDt1RspRespCode(long number)  throws CFException{
	    dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(number);
	}
	
	
	/**
	 * 	Update Dt1RspRespCode with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1RspRespCode(char[] value)  throws CFException {
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(value);
	}
	
	/**
	 * 	Update Dt1RspRespCode with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1RspRespCodeString(char[] value)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(value);
	}	

public int getSrpEntryLength() throws CFException {  
        return srpSortRequestParameters.getSrpEntryLength();
}
	/**
	 * 	Update SrpEntryLength with the passed value
	 *	@param number
	 */
	public void setSrpEntryLength(int number)  throws CFException{
		srpSortRequestParameters.setSrpEntryLength(number);
	}


	public void setSrpEntryLength(long number)  throws CFException{
	    srpSortRequestParameters.setSrpEntryLength(number);
	}
	


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += standardVars.hashCode();
        str += srpSortRequestParameters.hashCode();
        str += dt1SrtContainer.hashCode();
       return str.hashCode();
    }

    public SortDt1srtSectOutCtx clone() {
        SortDt1srtSectOutCtx cloneObj = new SortDt1srtSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.srpSortRequestParameters = new SrpSortRequestParameters();
        cloneObj.srpSortRequestParameters.set(srpSortRequestParameters.getClonedField());
        cloneObj.dt1SrtContainer = new Dt1SrtContainer();
        cloneObj.dt1SrtContainer.set(dt1SrtContainer.getClonedField());
        return cloneObj;
    }

    }

    public SortDt1srtSectOutCtx getSortDt1srtSectOutCtx() {
            return new SortDt1srtSectOutCtx();
    }
     public class GetClmContStgSectInCtx implements Cloneable {
     Dt1ClmContainer dt1ClmContainer = D5427dt1Ctx.this.getDt1ClmContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();

	/**
	 *	Returns the value of dt1ClmContainer
	 *	@return dt1ClmContainer
	 */   
	 public Dt1ClmContainer getDt1ClmContainer() {
   	return dt1ClmContainer;
   }


	/**
	 *	Returns the value of dt1ClmClaimItem
	 *	@return dt1ClmClaimItem
	 */   
	 public Dt1ClmClaimItem getDt1ClmClaimItem(int index) {
   	return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index);
   }

    public List<Dt1ClmClaimItem> getDt1ClmClaimItem() {
        return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem();
    }
   /**
	* 	Update Dt1ClmClaimItem with the passed value
	*	@param value
	*/
   public void setDt1ClmClaimItem(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().setDt1ClmClaimItem((index),value);
   }   


	/**
	 *	Returns the value of dt1ClmFixedArea
	 *	@return dt1ClmFixedArea
	 */   
	 public Dt1ClmFixedArea getDt1ClmFixedArea() {
   	return dt1ClmContainer.getDt1ClmFixedArea();
   }

   /**
	* 	Update Dt1ClmFixedArea with the passed value
	*	@param value
	*/
   public void setDt1ClmFixedArea(char[] value) throws CFException {
      dt1ClmContainer.setDt1ClmFixedArea(value);
   }   

     /**
	 * 	Update Dt1ClmFixedArea 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmFixedArea(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dt1ClmContainer.setDt1ClmFixedArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmFixedArea 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmFixedArea(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.setDt1ClmFixedArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmFixedArea with another Field
	 *	@param value
	 */
   public void setDt1ClmFixedArea(Field source) {
   	dt1ClmContainer.setDt1ClmFixedArea(source);
   }  
   
     /**
	 * 	Update Dt1ClmFixedArea 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmFixedArea(Field source, int sourceIndex,int sourceLen) {
   	dt1ClmContainer.setDt1ClmFixedArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmFixedArea 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmFixedArea(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.setDt1ClmFixedArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public GetClmContStgSectOutCtx getGetClmContStgSectOutCtx() {
            return new GetClmContStgSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1ClmContainer.hashCode();
        str += standardVars.hashCode();
       return str.hashCode();
    }

    public GetClmContStgSectInCtx clone() {
        GetClmContStgSectInCtx cloneObj = new GetClmContStgSectInCtx();
        cloneObj.dt1ClmContainer = new Dt1ClmContainer();
        cloneObj.dt1ClmContainer.set(dt1ClmContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        return cloneObj;
    }

    }

    public GetClmContStgSectInCtx getGetClmContStgSectInCtx() {
            return new GetClmContStgSectInCtx();
    }
     public class GetClmContStgSectOutCtx implements Cloneable {
     Dt1ClmContainer dt1ClmContainer = D5427dt1Ctx.this.getDt1ClmContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();

	/**
	 *	Returns the value of dt1ClmContainer
	 *	@return dt1ClmContainer
	 */   
	 public Dt1ClmContainer getDt1ClmContainer() {
   	return dt1ClmContainer;
   }


	/**
	 *	Returns the value of dt1ClmItemFillerArea
	 *	@return dt1ClmItemFillerArea
	 */
   public char[] getDt1ClmItemFillerArea(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmItemFillerArea();
   }

  
	/**
	*  set variable dt1ClmItemFillerArea
	*  @param value
	**/
   public void setDt1ClmItemFillerArea(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmItemFillerArea(value);
   } 

     /**
	 * 	Update Dt1ClmItemFillerArea 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmItemFillerArea(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmItemFillerArea(source, sourceIndex);
   	
   }
   
   public void setDt1ClmItemFillerArea(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmItemFillerArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmItemFillerArea 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmItemFillerArea(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmItemFillerArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmItemFillerArea with another Field
	 *	@param value
	 */
   public void setDt1ClmItemFillerArea(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmItemFillerArea(source);
   }  
   
     /**
	 * 	Update Dt1ClmItemFillerArea 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmItemFillerArea(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmItemFillerArea(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmItemFillerArea 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmItemFillerArea(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmItemFillerArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmClaimItem
	 *	@return dt1ClmClaimItem
	 */   
	 public Dt1ClmClaimItem getDt1ClmClaimItem(int index) {
   	return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index);
   }

    public List<Dt1ClmClaimItem> getDt1ClmClaimItem() {
        return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem();
    }
   /**
	* 	Update Dt1ClmClaimItem with the passed value
	*	@param value
	*/
   public void setDt1ClmClaimItem(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().setDt1ClmClaimItem((index),value);
   }   


	/**
	 *	Returns the value of dt1ClmClmContainerItemLen
	 *	@return dt1ClmClmContainerItemLen
	 */
	public long getDt1ClmClmContainerItemLen() throws CFException {
   		return dt1ClmContainer.getDt1ClmFixedArea().getDt1ClmClmContainerItemLen();
	}


	/**
	 *	Returns String value of dt1ClmClmContainerItemLen
	 *	@return dt1ClmClmContainerItemLen
	 */
	public char[]  getDt1ClmClmContainerItemLenString() throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmFixedArea().getDt1ClmClmContainerItemLenString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmClmContainerItemLenIsNumeric()  throws CFException{
	    return dt1ClmContainer.getDt1ClmFixedArea().dt1ClmClmContainerItemLenIsNumeric();
	}

	/**
	 * 	Update Dt1ClmClmContainerItemLen with the passed value
	 *	@param number
	 */
	public void setDt1ClmClmContainerItemLen(long number)  throws CFException{
		dt1ClmContainer.getDt1ClmFixedArea().setDt1ClmClmContainerItemLen(number);
	}
	

	
	/**
	 * 	Update Dt1ClmClmContainerItemLen with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmClmContainerItemLen(char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmFixedArea().setDt1ClmClmContainerItemLen(value);
	}
	
	/**
	 * 	Update Dt1ClmClmContainerItemLen with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmClmContainerItemLenString(char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmFixedArea().setDt1ClmClmContainerItemLen(value);
	}	

	/**
	 *	Returns the value of cicsresp2
	 *	@return cicsresp2
	 */
	public int getCicsresp2() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp2();
	}
	
	/**
	 * 	Update Cicsresp2 with the passed value
	 *	@param number
	 */
	public void setCicsresp2(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2(number);
	}


	public void setCicsresp2(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2((int)number);
	}


	/**
	 *	Returns the value of dt1ClmFixedArea
	 *	@return dt1ClmFixedArea
	 */   
	 public Dt1ClmFixedArea getDt1ClmFixedArea() {
   	return dt1ClmContainer.getDt1ClmFixedArea();
   }

   /**
	* 	Update Dt1ClmFixedArea with the passed value
	*	@param value
	*/
   public void setDt1ClmFixedArea(char[] value) throws CFException {
      dt1ClmContainer.setDt1ClmFixedArea(value);
   }   

     /**
	 * 	Update Dt1ClmFixedArea 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmFixedArea(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dt1ClmContainer.setDt1ClmFixedArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmFixedArea 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmFixedArea(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.setDt1ClmFixedArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmFixedArea with another Field
	 *	@param value
	 */
   public void setDt1ClmFixedArea(Field source) {
   	dt1ClmContainer.setDt1ClmFixedArea(source);
   }  
   
     /**
	 * 	Update Dt1ClmFixedArea 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmFixedArea(Field source, int sourceIndex,int sourceLen) {
   	dt1ClmContainer.setDt1ClmFixedArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmFixedArea 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmFixedArea(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.setDt1ClmFixedArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cicsresp
	 *	@return cicsresp
	 */
	public int getCicsresp() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp();
	}
	
	/**
	 * 	Update Cicsresp with the passed value
	 *	@param number
	 */
	public void setCicsresp(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp(number);
	}


	public void setCicsresp(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp((int)number);
	}


	/**
	 *	Returns the value of storageSizeRequired
	 *	@return storageSizeRequired
	 */
	public int getStorageSizeRequired() throws CFException {        
   		return standardVars.getStorageAllocVars().getStorageSizeRequired();
	}
	
	/**
	 * 	Update StorageSizeRequired with the passed value
	 *	@param number
	 */
	public void setStorageSizeRequired(int number)  throws CFException{
		standardVars.getStorageAllocVars().setStorageSizeRequired(number);
	}


	public void setStorageSizeRequired(long number)  throws CFException{
		standardVars.getStorageAllocVars().setStorageSizeRequired((int)number);
	}


	/**
	 *	Returns the value of dt1ClmClmContainerItemCnt
	 *	@return dt1ClmClmContainerItemCnt
	 */
	public long getDt1ClmClmContainerItemCnt() throws CFException {
   		return dt1ClmContainer.getDt1ClmFixedArea().getDt1ClmClmContainerItemCnt();
	}


	/**
	 *	Returns String value of dt1ClmClmContainerItemCnt
	 *	@return dt1ClmClmContainerItemCnt
	 */
	public char[]  getDt1ClmClmContainerItemCntString() throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmFixedArea().getDt1ClmClmContainerItemCntString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmClmContainerItemCntIsNumeric()  throws CFException{
	    return dt1ClmContainer.getDt1ClmFixedArea().dt1ClmClmContainerItemCntIsNumeric();
	}

	/**
	 * 	Update Dt1ClmClmContainerItemCnt with the passed value
	 *	@param number
	 */
	public void setDt1ClmClmContainerItemCnt(long number)  throws CFException{
		dt1ClmContainer.getDt1ClmFixedArea().setDt1ClmClmContainerItemCnt(number);
	}
	

	
	/**
	 * 	Update Dt1ClmClmContainerItemCnt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmClmContainerItemCnt(char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmFixedArea().setDt1ClmClmContainerItemCnt(value);
	}
	
	/**
	 * 	Update Dt1ClmClmContainerItemCnt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmClmContainerItemCntString(char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmFixedArea().setDt1ClmClmContainerItemCnt(value);
	}	

	/**
	 *	Returns the value of storageAreaPtr
	 *	@return storageAreaPtr
	 */
	public int getStorageAreaPtr() throws CFException {        
   		return standardVars.getStorageAllocVars().getStorageAreaPtr();
	}
	
	/**
	 * 	Update StorageAreaPtr with the passed value
	 *	@param number
	 */
	public void setStorageAreaPtr(int number)  throws CFException{
		standardVars.getStorageAllocVars().setStorageAreaPtr(number);
	}


	public void setStorageAreaPtr(long number)  throws CFException{
		standardVars.getStorageAllocVars().setStorageAreaPtr((int)number);
	}



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1ClmContainer.hashCode();
        str += standardVars.hashCode();
       return str.hashCode();
    }

    public GetClmContStgSectOutCtx clone() {
        GetClmContStgSectOutCtx cloneObj = new GetClmContStgSectOutCtx();
        cloneObj.dt1ClmContainer = new Dt1ClmContainer();
        cloneObj.dt1ClmContainer.set(dt1ClmContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        return cloneObj;
    }

    }

    public GetClmContStgSectOutCtx getGetClmContStgSectOutCtx() {
            return new GetClmContStgSectOutCtx();
    }
     public class GetSrtContStgSectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Dt1SrtContainer dt1SrtContainer = D5427dt1Ctx.this.getDt1SrtContainer();

	/**
	 *	Returns the value of dt1SrtFixedArea
	 *	@return dt1SrtFixedArea
	 */   
	 public Dt1SrtFixedArea getDt1SrtFixedArea() {
   	return dt1SrtContainer.getDt1SrtFixedArea();
   }

   /**
	* 	Update Dt1SrtFixedArea with the passed value
	*	@param value
	*/
   public void setDt1SrtFixedArea(char[] value) throws CFException {
      dt1SrtContainer.setDt1SrtFixedArea(value);
   }   

     /**
	 * 	Update Dt1SrtFixedArea 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDt1SrtFixedArea(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dt1SrtContainer.setDt1SrtFixedArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1SrtFixedArea 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtFixedArea(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1SrtContainer.setDt1SrtFixedArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1SrtFixedArea with another Field
	 *	@param value
	 */
   public void setDt1SrtFixedArea(Field source) {
   	dt1SrtContainer.setDt1SrtFixedArea(source);
   }  
   
     /**
	 * 	Update Dt1SrtFixedArea 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDt1SrtFixedArea(Field source, int sourceIndex,int sourceLen) {
   	dt1SrtContainer.setDt1SrtFixedArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1SrtFixedArea 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtFixedArea(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1SrtContainer.setDt1SrtFixedArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1SrtItem
	 *	@return dt1SrtItem
	 */   
	 public Dt1SrtItem getDt1SrtItem(int index) {
   	return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index);
   }

    public List<Dt1SrtItem> getDt1SrtItem() {
        return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem();
    }
   /**
	* 	Update Dt1SrtItem with the passed value
	*	@param value
	*/
   public void setDt1SrtItem(int index,char[] value) throws CFException {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().setDt1SrtItem((index),value);
   }   


	/**
	 *	Returns the value of dt1SrtContainer
	 *	@return dt1SrtContainer
	 */   
	 public Dt1SrtContainer getDt1SrtContainer() {
   	return dt1SrtContainer;
   }


	/**
	 *	Returns the value of nbrSrtItems
	 *	@return nbrSrtItems
	 */
	public int getNbrSrtItems() throws CFException {        
   		return work.getNbrSrtItems();
	}
	
	/**
	 * 	Update NbrSrtItems with the passed value
	 *	@param number
	 */
	public void setNbrSrtItems(int number)  throws CFException{
		work.setNbrSrtItems(number);
	}


	public void setNbrSrtItems(long number)  throws CFException{
		work.setNbrSrtItems((int)number);
	}



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public GetSrtContStgSectOutCtx getGetSrtContStgSectOutCtx() {
            return new GetSrtContStgSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += dt1SrtContainer.hashCode();
       return str.hashCode();
    }

    public GetSrtContStgSectInCtx clone() {
        GetSrtContStgSectInCtx cloneObj = new GetSrtContStgSectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dt1SrtContainer = new Dt1SrtContainer();
        cloneObj.dt1SrtContainer.set(dt1SrtContainer.getClonedField());
        return cloneObj;
    }

    }

    public GetSrtContStgSectInCtx getGetSrtContStgSectInCtx() {
            return new GetSrtContStgSectInCtx();
    }
     public class GetSrtContStgSectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     Work work = D5427dt1Ctx.this.getWork();
     Dt1SrtContainer dt1SrtContainer = D5427dt1Ctx.this.getDt1SrtContainer();

	/**
	 *	Returns the value of dt1SrtFixedArea
	 *	@return dt1SrtFixedArea
	 */   
	 public Dt1SrtFixedArea getDt1SrtFixedArea() {
   	return dt1SrtContainer.getDt1SrtFixedArea();
   }

   /**
	* 	Update Dt1SrtFixedArea with the passed value
	*	@param value
	*/
   public void setDt1SrtFixedArea(char[] value) throws CFException {
      dt1SrtContainer.setDt1SrtFixedArea(value);
   }   

     /**
	 * 	Update Dt1SrtFixedArea 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDt1SrtFixedArea(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dt1SrtContainer.setDt1SrtFixedArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1SrtFixedArea 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtFixedArea(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1SrtContainer.setDt1SrtFixedArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1SrtFixedArea with another Field
	 *	@param value
	 */
   public void setDt1SrtFixedArea(Field source) {
   	dt1SrtContainer.setDt1SrtFixedArea(source);
   }  
   
     /**
	 * 	Update Dt1SrtFixedArea 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDt1SrtFixedArea(Field source, int sourceIndex,int sourceLen) {
   	dt1SrtContainer.setDt1SrtFixedArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1SrtFixedArea 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtFixedArea(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1SrtContainer.setDt1SrtFixedArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cicsresp2
	 *	@return cicsresp2
	 */
	public int getCicsresp2() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp2();
	}
	
	/**
	 * 	Update Cicsresp2 with the passed value
	 *	@param number
	 */
	public void setCicsresp2(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2(number);
	}


	public void setCicsresp2(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2((int)number);
	}


	/**
	 *	Returns the value of cicsresp
	 *	@return cicsresp
	 */
	public int getCicsresp() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp();
	}
	
	/**
	 * 	Update Cicsresp with the passed value
	 *	@param number
	 */
	public void setCicsresp(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp(number);
	}


	public void setCicsresp(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp((int)number);
	}


	/**
	 *	Returns the value of storageSizeRequired
	 *	@return storageSizeRequired
	 */
	public int getStorageSizeRequired() throws CFException {        
   		return standardVars.getStorageAllocVars().getStorageSizeRequired();
	}
	
	/**
	 * 	Update StorageSizeRequired with the passed value
	 *	@param number
	 */
	public void setStorageSizeRequired(int number)  throws CFException{
		standardVars.getStorageAllocVars().setStorageSizeRequired(number);
	}


	public void setStorageSizeRequired(long number)  throws CFException{
		standardVars.getStorageAllocVars().setStorageSizeRequired((int)number);
	}


	/**
	 *	Returns the value of storageAreaPtr
	 *	@return storageAreaPtr
	 */
	public int getStorageAreaPtr() throws CFException {        
   		return standardVars.getStorageAllocVars().getStorageAreaPtr();
	}
	
	/**
	 * 	Update StorageAreaPtr with the passed value
	 *	@param number
	 */
	public void setStorageAreaPtr(int number)  throws CFException{
		standardVars.getStorageAllocVars().setStorageAreaPtr(number);
	}


	public void setStorageAreaPtr(long number)  throws CFException{
		standardVars.getStorageAllocVars().setStorageAreaPtr((int)number);
	}


	/**
	 *	Returns the value of dt1SrtContainer
	 *	@return dt1SrtContainer
	 */   
	 public Dt1SrtContainer getDt1SrtContainer() {
   	return dt1SrtContainer;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += work.hashCode();
        str += dt1SrtContainer.hashCode();
       return str.hashCode();
    }

    public GetSrtContStgSectOutCtx clone() {
        GetSrtContStgSectOutCtx cloneObj = new GetSrtContStgSectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dt1SrtContainer = new Dt1SrtContainer();
        cloneObj.dt1SrtContainer.set(dt1SrtContainer.getClonedField());
        return cloneObj;
    }

    }

    public GetSrtContStgSectOutCtx getGetSrtContStgSectOutCtx() {
            return new GetSrtContStgSectOutCtx();
    }
     public class PutD5427dt1SrtSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     StsContainer stsContainer = D5427dt1Ctx.this.getStsContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Dt1SrtContainer dt1SrtContainer = D5427dt1Ctx.this.getDt1SrtContainer();

	/**
	 *	Returns the value of cicsresp2
	 *	@return cicsresp2
	 */
	public int getCicsresp2() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp2();
	}
	
	/**
	 * 	Update Cicsresp2 with the passed value
	 *	@param number
	 */
	public void setCicsresp2(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2(number);
	}


	public void setCicsresp2(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2((int)number);
	}


	/**
	 *	Returns the value of dt1SrtContainerName
	 *	@return dt1SrtContainerName
	 */
   public char[] getDt1SrtContainerName() throws CFException  {              
   		return work.getDt1SrtContainerName();
   }

  
	/**
	*  set variable dt1SrtContainerName
	*  @param value
	**/
   public void setDt1SrtContainerName(char[] value) throws CFException {
      work.setDt1SrtContainerName(value);
   } 

	/**
	 *	Returns the value of dt1SrtContainerLayout
	 *	@return dt1SrtContainerLayout
	 */
   public char[] getDt1SrtContainerLayout() throws CFException  {              
   		return work.getDt1SrtContainerLayout();
   }

  
	/**
	*  set variable dt1SrtContainerLayout
	*  @param value
	**/
   public void setDt1SrtContainerLayout(char[] value) throws CFException {
      work.setDt1SrtContainerLayout(value);
   } 

	/**
	 *	Returns the value of cicsresp
	 *	@return cicsresp
	 */
	public int getCicsresp() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp();
	}
	
	/**
	 * 	Update Cicsresp with the passed value
	 *	@param number
	 */
	public void setCicsresp(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp(number);
	}


	public void setCicsresp(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp((int)number);
	}


	/**
	 *	Returns the value of dt1SrtItemCnt
	 *	@return dt1SrtItemCnt
	 */
	public int getDt1SrtItemCnt() throws CFException {
   		return dt1SrtContainer.getDt1SrtFixedArea().getDt1SrtItemCnt();
	}


	/**
	 *	Returns String value of dt1SrtItemCnt
	 *	@return dt1SrtItemCnt
	 */
	public char[]  getDt1SrtItemCntString() throws CFException {
	     return String.valueOf(dt1SrtContainer.getDt1SrtFixedArea().getDt1SrtItemCntString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1SrtItemCntIsNumeric()  throws CFException{
	    return dt1SrtContainer.getDt1SrtFixedArea().dt1SrtItemCntIsNumeric();
	}

	/**
	 * 	Update Dt1SrtItemCnt with the passed value
	 *	@param number
	 */
	public void setDt1SrtItemCnt(int number)  throws CFException{
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(number);
	}
	

	public void setDt1SrtItemCnt(long number)  throws CFException{
	    dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(number);
	}
	
	
	/**
	 * 	Update Dt1SrtItemCnt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1SrtItemCnt(char[] value)  throws CFException {
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(value);
	}
	
	/**
	 * 	Update Dt1SrtItemCnt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1SrtItemCntString(char[] value)  throws CFException{
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(value);
	}	

	/**
	 *	Returns the value of currentChannelName
	 *	@return currentChannelName
	 */
   public char[] getCurrentChannelName() throws CFException  {              
   		return standardVars.getCurrentVariables().getCurrentChannelName();
   }

  
	/**
	*  set variable currentChannelName
	*  @param value
	**/
   public void setCurrentChannelName(char[] value) throws CFException {
      standardVars.getCurrentVariables().setCurrentChannelName(value);
   } 

     /**
	 * 	Update CurrentChannelName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCurrentChannelName(char[] source, int sourceIndex) throws CFException {
      standardVars.getCurrentVariables().setCurrentChannelName(source, sourceIndex);
   	
   }
   
   public void setCurrentChannelName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getCurrentVariables().setCurrentChannelName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CurrentChannelName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCurrentChannelName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentChannelName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CurrentChannelName with another Field
	 *	@param value
	 */
   public void setCurrentChannelName(Field source) {
      standardVars.getCurrentVariables().setCurrentChannelName(source);
   }  
   
     /**
	 * 	Update CurrentChannelName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCurrentChannelName(Field source, int sourceIndex,int sourceLen) {
      standardVars.getCurrentVariables().setCurrentChannelName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CurrentChannelName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCurrentChannelName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentChannelName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1SrtContainer
	 *	@return dt1SrtContainer
	 */   
	 public Dt1SrtContainer getDt1SrtContainer() {
   	return dt1SrtContainer;
   }



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public PutD5427dt1SrtSectOutCtx getPutD5427dt1SrtSectOutCtx() {
            return new PutD5427dt1SrtSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += standardVars.hashCode();
        str += stsContainer.hashCode();
        str += work.hashCode();
        str += dt1SrtContainer.hashCode();
       return str.hashCode();
    }

    public PutD5427dt1SrtSectInCtx clone() {
        PutD5427dt1SrtSectInCtx cloneObj = new PutD5427dt1SrtSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dt1SrtContainer = new Dt1SrtContainer();
        cloneObj.dt1SrtContainer.set(dt1SrtContainer.getClonedField());
        return cloneObj;
    }

    }

    public PutD5427dt1SrtSectInCtx getPutD5427dt1SrtSectInCtx() {
            return new PutD5427dt1SrtSectInCtx();
    }
     public class PutD5427dt1SrtSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     StsContainer stsContainer = D5427dt1Ctx.this.getStsContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Dt1SrtContainer dt1SrtContainer = D5427dt1Ctx.this.getDt1SrtContainer();

	/**
	 *	Test condition "9006" for isStsRespCodePutError()
	 *	@return  Returns true if isStsRespCodePutError() is "9006"
	 */
   public boolean isStsRespCodePutError() throws CFException {
      return stsContainer.getStsFixedArea().isStsRespCodePutError();
   }

	/**
	*  set values "9006"
	*/
   	public void setStsRespCodePutErrorTrue()  throws CFException{  			
    	stsContainer.getStsFixedArea().setStsRespCodePutErrorTrue();
   	}
	/**
	 *	Returns the value of cicsresp2
	 *	@return cicsresp2
	 */
	public int getCicsresp2() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp2();
	}
	
	/**
	 * 	Update Cicsresp2 with the passed value
	 *	@param number
	 */
	public void setCicsresp2(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2(number);
	}


	public void setCicsresp2(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2((int)number);
	}


	/**
	 *	Returns the value of dt1SrtContainerName
	 *	@return dt1SrtContainerName
	 */
   public char[] getDt1SrtContainerName() throws CFException  {              
   		return work.getDt1SrtContainerName();
   }

  
	/**
	*  set variable dt1SrtContainerName
	*  @param value
	**/
   public void setDt1SrtContainerName(char[] value) throws CFException {
      work.setDt1SrtContainerName(value);
   } 

	/**
	 *	Returns the value of cicsresp
	 *	@return cicsresp
	 */
	public int getCicsresp() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp();
	}
	
	/**
	 * 	Update Cicsresp with the passed value
	 *	@param number
	 */
	public void setCicsresp(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp(number);
	}


	public void setCicsresp(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp((int)number);
	}


	/**
	 *	Returns the value of stsRespCode
	 *	@return stsRespCode
	 */
   public char[] getStsRespCode() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsRespCode();
   }

  
	/**
	*  set variable stsRespCode
	*  @param value
	**/
   public void setStsRespCode(char[] value) throws CFException {
      stsContainer.getStsFixedArea().setStsRespCode(value);
   } 

     /**
	 * 	Update StsRespCode 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsRespCode(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex);
   	
   }
   
   public void setStsRespCode(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsRespCode 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsRespCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsRespCode with another Field
	 *	@param value
	 */
   public void setStsRespCode(Field source) {
      stsContainer.getStsFixedArea().setStsRespCode(source);
   }  
   
     /**
	 * 	Update StsRespCode 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsRespCode(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsRespCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsRespCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 998 for isDt1RspSeeViewForMoreInfo()
	 *	@return  Returns true if isDt1RspSeeViewForMoreInfo() is 998
	 */
   public boolean isDt1RspSeeViewForMoreInfo() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspSeeViewForMoreInfo();
   }

	/**
	*  set values 998
	*/
   	public void setDt1RspSeeViewForMoreInfoTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspSeeViewForMoreInfoTrue();
   	}
	/**
	 *	Returns the value of stsResponseVars
	 *	@return stsResponseVars
	 */   
	 public StsResponseVars getStsResponseVars() {
   	return stsContainer.getStsFixedArea().getStsResponseVars();
   }

   /**
	* 	Update StsResponseVars with the passed value
	*	@param value
	*/
   public void setStsResponseVars(char[] value) throws CFException {
      stsContainer.getStsFixedArea().setStsResponseVars(value);
   }   

     /**
	 * 	Update StsResponseVars 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setStsResponseVars(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsResponseVars 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsResponseVars(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsResponseVars with another Field
	 *	@param value
	 */
   public void setStsResponseVars(Field source) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source);
   }  
   
     /**
	 * 	Update StsResponseVars 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setStsResponseVars(Field source, int sourceIndex,int sourceLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsResponseVars 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsResponseVars(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1RspErrSection
	 *	@return dt1RspErrSection
	 */
   public char[] getDt1RspErrSection() throws CFException  {              
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspErrSection();
   }

  
	/**
	*  set variable dt1RspErrSection
	*  @param value
	**/
   public void setDt1RspErrSection(char[] value) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(value);
   } 

     /**
	 * 	Update Dt1RspErrSection 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1RspErrSection(char[] source, int sourceIndex) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex);
   	
   }
   
   public void setDt1RspErrSection(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspErrSection(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1RspErrSection with another Field
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source);
   }  
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source, int sourceIndex,int sourceLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of stsEibtaskn
	 *	@return stsEibtaskn
	 */
	public long getStsEibtaskn() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsEibtaskn();
	}


	/**
	 *	Returns String value of stsEibtaskn
	 *	@return stsEibtaskn
	 */
	public char[]  getStsEibtasknString() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsEibtasknString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsEibtasknIsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsEibtasknIsNumeric();
	}

	/**
	 * 	Update StsEibtaskn with the passed value
	 *	@param number
	 */
	public void setStsEibtaskn(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(number);
	}
	

	
	/**
	 * 	Update StsEibtaskn with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsEibtaskn(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(value);
	}
	
	/**
	 * 	Update StsEibtaskn with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsEibtasknString(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(value);
	}	

	/**
	 *	Returns the value of currentContainerLayout
	 *	@return currentContainerLayout
	 */
   public char[] getCurrentContainerLayout() throws CFException  {              
   		return standardVars.getCurrentVariables().getCurrentContainerLayout();
   }

  
	/**
	*  set variable currentContainerLayout
	*  @param value
	**/
   public void setCurrentContainerLayout(char[] value) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerLayout(value);
   } 

     /**
	 * 	Update CurrentContainerLayout 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCurrentContainerLayout(char[] source, int sourceIndex) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex);
   	
   }
   
   public void setCurrentContainerLayout(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CurrentContainerLayout 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerLayout(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CurrentContainerLayout with another Field
	 *	@param value
	 */
   public void setCurrentContainerLayout(Field source) {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source);
   }  
   
     /**
	 * 	Update CurrentContainerLayout 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCurrentContainerLayout(Field source, int sourceIndex,int sourceLen) {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CurrentContainerLayout 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerLayout(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of currentContainerLength
	 *	@return currentContainerLength
	 */
	public int getCurrentContainerLength() throws CFException {        
   		return standardVars.getCurrentVariables().getCurrentContainerLength();
	}
	
	/**
	 * 	Update CurrentContainerLength with the passed value
	 *	@param number
	 */
	public void setCurrentContainerLength(int number)  throws CFException{
		standardVars.getCurrentVariables().setCurrentContainerLength(number);
	}


	public void setCurrentContainerLength(long number)  throws CFException{
		standardVars.getCurrentVariables().setCurrentContainerLength((int)number);
	}


	/**
	 *	Test condition 99 for isDt1RspFail()
	 *	@return  Returns true if isDt1RspFail() is 99
	 */
   public boolean isDt1RspFail() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspFail();
   }

	/**
	*  set values 99
	*/
   	public void setDt1RspFailTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspFailTrue();
   	}
	/**
	 *	Test condition "C" for isStsRespMessageCics()
	 *	@return  Returns true if isStsRespMessageCics() is "C"
	 */
   public boolean isStsRespMessageCics() throws CFException {
      return stsContainer.getStsFixedArea().getStsResponseVars().isStsRespMessageCics();
   }

	/**
	*  set values "C"
	*/
   	public void setStsRespMessageCicsTrue()  throws CFException{  			
    	stsContainer.getStsFixedArea().getStsResponseVars().setStsRespMessageCicsTrue();
   	}
	/**
	 *	Returns the value of dt1SrtContainerLayout
	 *	@return dt1SrtContainerLayout
	 */
   public char[] getDt1SrtContainerLayout() throws CFException  {              
   		return work.getDt1SrtContainerLayout();
   }

  
	/**
	*  set variable dt1SrtContainerLayout
	*  @param value
	**/
   public void setDt1SrtContainerLayout(char[] value) throws CFException {
      work.setDt1SrtContainerLayout(value);
   } 

	/**
	 *	Returns the value of currentContainerName
	 *	@return currentContainerName
	 */
   public char[] getCurrentContainerName() throws CFException  {              
   		return standardVars.getCurrentVariables().getCurrentContainerName();
   }

  
	/**
	*  set variable currentContainerName
	*  @param value
	**/
   public void setCurrentContainerName(char[] value) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerName(value);
   } 

     /**
	 * 	Update CurrentContainerName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCurrentContainerName(char[] source, int sourceIndex) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex);
   	
   }
   
   public void setCurrentContainerName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CurrentContainerName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CurrentContainerName with another Field
	 *	@param value
	 */
   public void setCurrentContainerName(Field source) {
      standardVars.getCurrentVariables().setCurrentContainerName(source);
   }  
   
     /**
	 * 	Update CurrentContainerName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCurrentContainerName(Field source, int sourceIndex,int sourceLen) {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CurrentContainerName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of stsCicsresp
	 *	@return stsCicsresp
	 */
	public long getStsCicsresp() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp();
	}


	/**
	 *	Returns String value of stsCicsresp
	 *	@return stsCicsresp
	 */
	public char[]  getStsCicsrespString() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsrespString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsCicsrespIsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsCicsrespIsNumeric();
	}

	/**
	 * 	Update StsCicsresp with the passed value
	 *	@param number
	 */
	public void setStsCicsresp(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(number);
	}
	

	
	/**
	 * 	Update StsCicsresp with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(value);
	}
	
	/**
	 * 	Update StsCicsresp with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsCicsrespString(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(value);
	}	

	/**
	 *	Returns the value of stsCicsresp2
	 *	@return stsCicsresp2
	 */
	public long getStsCicsresp2() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp2();
	}


	/**
	 *	Returns String value of stsCicsresp2
	 *	@return stsCicsresp2
	 */
	public char[]  getStsCicsresp2String() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp2String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsCicsresp2IsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsCicsresp2IsNumeric();
	}

	/**
	 * 	Update StsCicsresp2 with the passed value
	 *	@param number
	 */
	public void setStsCicsresp2(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(number);
	}
	

	
	/**
	 * 	Update StsCicsresp2 with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp2(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(value);
	}
	
	/**
	 * 	Update StsCicsresp2 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp2String(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(value);
	}	

	/**
	 *	Returns the value of dt1RspRespCode
	 *	@return dt1RspRespCode
	 */
	public int getDt1RspRespCode() throws CFException {
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspRespCode();
	}


	/**
	 *	Returns String value of dt1RspRespCode
	 *	@return dt1RspRespCode
	 */
	public char[]  getDt1RspRespCodeString() throws CFException {
	     return String.valueOf(dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspRespCodeString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1RspRespCodeIsNumeric()  throws CFException{
	    return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().dt1RspRespCodeIsNumeric();
	}

	/**
	 * 	Update Dt1RspRespCode with the passed value
	 *	@param number
	 */
	public void setDt1RspRespCode(int number)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(number);
	}
	

	public void setDt1RspRespCode(long number)  throws CFException{
	    dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(number);
	}
	
	
	/**
	 * 	Update Dt1RspRespCode with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1RspRespCode(char[] value)  throws CFException {
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(value);
	}
	
	/**
	 * 	Update Dt1RspRespCode with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1RspRespCodeString(char[] value)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(value);
	}	

	/**
	 *	Returns the value of stsRespAdditionalInfo1
	 *	@return stsRespAdditionalInfo1
	 */
   public char[] getStsRespAdditionalInfo1() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsRespAdditionalInfo1();
   }

  
	/**
	*  set variable stsRespAdditionalInfo1
	*  @param value
	**/
   public void setStsRespAdditionalInfo1(char[] value) throws CFException {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(value);
   } 

     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex);
   	
   }
   
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsRespAdditionalInfo1 with another Field
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source);
   }  
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += standardVars.hashCode();
        str += stsContainer.hashCode();
        str += work.hashCode();
        str += dt1SrtContainer.hashCode();
       return str.hashCode();
    }

    public PutD5427dt1SrtSectOutCtx clone() {
        PutD5427dt1SrtSectOutCtx cloneObj = new PutD5427dt1SrtSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dt1SrtContainer = new Dt1SrtContainer();
        cloneObj.dt1SrtContainer.set(dt1SrtContainer.getClonedField());
        return cloneObj;
    }

    }

    public PutD5427dt1SrtSectOutCtx getPutD5427dt1SrtSectOutCtx() {
            return new PutD5427dt1SrtSectOutCtx();
    }
     public class PutD5427dt1ClmSectInCtx implements Cloneable {
     Dt1ClmContainer dt1ClmContainer = D5427dt1Ctx.this.getDt1ClmContainer();
     LastBitXGroup lastBitXGroup = D5427dt1Ctx.this.getLastBitXGroup();
     TimeXGroup timeXGroup = D5427dt1Ctx.this.getTimeXGroup();
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     StsContainer stsContainer = D5427dt1Ctx.this.getStsContainer();
     Num3 num3 = D5427dt1Ctx.this.getNum3();
     Num15 num15 = D5427dt1Ctx.this.getNum15();
     Work work = D5427dt1Ctx.this.getWork();
     Dt1SrtContainer dt1SrtContainer = D5427dt1Ctx.this.getDt1SrtContainer();
     DateXGroup dateXGroup = D5427dt1Ctx.this.getDateXGroup();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of dt1ClmContainer
	 *	@return dt1ClmContainer
	 */   
	 public Dt1ClmContainer getDt1ClmContainer() {
   	return dt1ClmContainer;
   }


	/**
	 *	Returns the value of dt1ClmDraftNo
	 *	@return dt1ClmDraftNo
	 */
	public long getDt1ClmDraftNo(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmDraftNo();
	}


	/**
	 *	Returns String value of dt1ClmDraftNo
	 *	@return dt1ClmDraftNo
	 */
	public char[]  getDt1ClmDraftNoString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmDraftNoString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmDraftNoIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmDraftNoIsNumeric();
	}

	/**
	 * 	Update Dt1ClmDraftNo with the passed value
	 *	@param number
	 */
	public void setDt1ClmDraftNo(int index,long number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDraftNo(number);
	}
	

	
	/**
	 * 	Update Dt1ClmDraftNo with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmDraftNo(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDraftNo(value);
	}
	
	/**
	 * 	Update Dt1ClmDraftNo with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmDraftNoString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDraftNo(value);
	}	

	/**
	 *	Returns the value of dt1RspClmContainerItemCnt
	 *	@return dt1RspClmContainerItemCnt
	 */
	public long getDt1RspClmContainerItemCnt() throws CFException {
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspClmContainerItemCnt();
	}


	/**
	 *	Returns String value of dt1RspClmContainerItemCnt
	 *	@return dt1RspClmContainerItemCnt
	 */
	public char[]  getDt1RspClmContainerItemCntString() throws CFException {
	     return String.valueOf(dt1RspContainer.getDt1RspFixedArea().getDt1RspClmContainerItemCntString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1RspClmContainerItemCntIsNumeric()  throws CFException{
	    return dt1RspContainer.getDt1RspFixedArea().dt1RspClmContainerItemCntIsNumeric();
	}

	/**
	 * 	Update Dt1RspClmContainerItemCnt with the passed value
	 *	@param number
	 */
	public void setDt1RspClmContainerItemCnt(long number)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().setDt1RspClmContainerItemCnt(number);
	}
	

	
	/**
	 * 	Update Dt1RspClmContainerItemCnt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1RspClmContainerItemCnt(char[] value)  throws CFException {
		dt1RspContainer.getDt1RspFixedArea().setDt1RspClmContainerItemCnt(value);
	}
	
	/**
	 * 	Update Dt1RspClmContainerItemCnt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1RspClmContainerItemCntString(char[] value)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().setDt1RspClmContainerItemCnt(value);
	}	

	/**
	 *	Returns the value of num39
	 *	@return num39
	 */
	public int getNum39() throws CFException {
   		return num3.getNum39();
	}


	/**
	 *	Returns String value of num39
	 *	@return num39
	 */
	public char[]  getNum39String() throws CFException {
	     return String.valueOf(num3.getNum39String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean num39IsNumeric()  throws CFException{
	    return num3.num39IsNumeric();
	}

	/**
	 * 	Update Num39 with the passed value
	 *	@param number
	 */
	public void setNum39(int number)  throws CFException{
		num3.setNum39(number);
	}
	

	public void setNum39(long number)  throws CFException{
	    num3.setNum39(number);
	}
	
	
	/**
	 * 	Update Num39 with the passed value
	 *	@param value (String or char[])
	 */
	public void setNum39(char[] value)  throws CFException {
		num3.setNum39(value);
	}
	
	/**
	 * 	Update Num39 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNum39String(char[] value)  throws CFException{
		num3.setNum39(value);
	}	

	/**
	 *	Returns the value of cicsresp2
	 *	@return cicsresp2
	 */
	public int getCicsresp2() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp2();
	}
	
	/**
	 * 	Update Cicsresp2 with the passed value
	 *	@param number
	 */
	public void setCicsresp2(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2(number);
	}


	public void setCicsresp2(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2((int)number);
	}



public void setDt1SrtDx(int dt1SrtDx) { 
    D5427dt1Ctx.this.dt1SrtDx = dt1SrtDx;
}

public int getDt1SrtDx() { 
    return D5427dt1Ctx.this.dt1SrtDx;
}
	/**
	 *	Returns the value of num3
	 *	@return num3
	 */   
	 public Num3 getNum3() {
   	return num3;
   }


	/**
	 *	Returns the value of hvaSub
	 *	@return hvaSub
	 */
	public short getHvaSub() throws CFException {        
   		return hvaClmHistArray.getHvaSub();
	}
	
	/**
	 * 	Update HvaSub with the passed value
	 *	@param number
	 */
	public void setHvaSub(short number)  throws CFException{
		hvaClmHistArray.setHvaSub(number);
	}

	public void setHvaSub(int number)  throws CFException{
		hvaClmHistArray.setHvaSub((short)number);
	}

	public void setHvaSub(long number)  throws CFException{
		hvaClmHistArray.setHvaSub((short)number);
	}



	/**
	 *	Returns the value of cicsresp
	 *	@return cicsresp
	 */
	public int getCicsresp() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp();
	}
	
	/**
	 * 	Update Cicsresp with the passed value
	 *	@param number
	 */
	public void setCicsresp(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp(number);
	}


	public void setCicsresp(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp((int)number);
	}


	/**
	 *	Returns the value of dt1ClmFln
	 *	@return dt1ClmFln
	 */
	public long getDt1ClmFln(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFln();
	}


	/**
	 *	Returns String value of dt1ClmFln
	 *	@return dt1ClmFln
	 */
	public char[]  getDt1ClmFlnString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFlnString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmFlnIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmFlnIsNumeric();
	}

	/**
	 * 	Update Dt1ClmFln with the passed value
	 *	@param number
	 */
	public void setDt1ClmFln(int index,long number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(number);
	}
	

	
	/**
	 * 	Update Dt1ClmFln with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmFln(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(value);
	}
	
	/**
	 * 	Update Dt1ClmFln with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmFlnString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(value);
	}	

	/**
	 *	Returns the value of dt1ClmClaimItem
	 *	@return dt1ClmClaimItem
	 */   
	 public Dt1ClmClaimItem getDt1ClmClaimItem(int index) {
   	return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index);
   }

    public List<Dt1ClmClaimItem> getDt1ClmClaimItem() {
        return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem();
    }
   /**
	* 	Update Dt1ClmClaimItem with the passed value
	*	@param value
	*/
   public void setDt1ClmClaimItem(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().setDt1ClmClaimItem((index),value);
   }   


	/**
	 *	Returns the value of dt1ClmIcn
	 *	@return dt1ClmIcn
	 */
   public char[] getDt1ClmIcn(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmIcn();
   }

  
	/**
	*  set variable dt1ClmIcn
	*  @param value
	**/
   public void setDt1ClmIcn(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(value);
   } 

     /**
	 * 	Update Dt1ClmIcn 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex);
   	
   }
   
   public void setDt1ClmIcn(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmIcn 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmIcn with another Field
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source);
   }  
   
     /**
	 * 	Update Dt1ClmIcn 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmIcn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmHeaderCt
	 *	@return dt1ClmHeaderCt
	 */
	public int getDt1ClmHeaderCt(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmHeaderCt();
	}


	/**
	 *	Returns String value of dt1ClmHeaderCt
	 *	@return dt1ClmHeaderCt
	 */
	public char[]  getDt1ClmHeaderCtString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmHeaderCtString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmHeaderCtIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmHeaderCtIsNumeric();
	}

	/**
	 * 	Update Dt1ClmHeaderCt with the passed value
	 *	@param number
	 */
	public void setDt1ClmHeaderCt(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(number);
	}
	

	public void setDt1ClmHeaderCt(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(number);
	}
	
	
	/**
	 * 	Update Dt1ClmHeaderCt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmHeaderCt(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(value);
	}
	
	/**
	 * 	Update Dt1ClmHeaderCt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmHeaderCtString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(value);
	}	

	/**
	 *	Returns the value of payeeCode
	 *	@return payeeCode
	 */
   public char[] getPayeeCode() throws CFException  {              
   		return work.getPayeeCode();
   }

  
	/**
	*  set variable payeeCode
	*  @param value
	**/
   public void setPayeeCode(char[] value) throws CFException {
      work.setPayeeCode(value);
   } 

	/**
	 *	Returns the value of dt1ClmSuffixCd
	 *	@return dt1ClmSuffixCd
	 */
	public int getDt1ClmSuffixCd(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmSuffixCd();
	}


	/**
	 *	Returns String value of dt1ClmSuffixCd
	 *	@return dt1ClmSuffixCd
	 */
	public char[]  getDt1ClmSuffixCdString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmSuffixCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmSuffixCdIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmSuffixCdIsNumeric();
	}

	/**
	 * 	Update Dt1ClmSuffixCd with the passed value
	 *	@param number
	 */
	public void setDt1ClmSuffixCd(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(number);
	}
	

	public void setDt1ClmSuffixCd(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(number);
	}
	
	
	/**
	 * 	Update Dt1ClmSuffixCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmSuffixCd(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(value);
	}
	
	/**
	 * 	Update Dt1ClmSuffixCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmSuffixCdString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(value);
	}	

	/**
	 *	Returns the value of dt1ClmProcDt
	 *	@return dt1ClmProcDt
	 */
   public char[] getDt1ClmProcDt(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProcDt();
   }

  
	/**
	*  set variable dt1ClmProcDt
	*  @param value
	**/
   public void setDt1ClmProcDt(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(value);
   } 

     /**
	 * 	Update Dt1ClmProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex);
   	
   }
   
   public void setDt1ClmProcDt(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmProcDt with another Field
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source);
   }  
   
     /**
	 * 	Update Dt1ClmProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of date9
	 *	@return date9
	 */
	public long getDate9() throws CFException {
   		return dateXGroup.getDate9();
	}


	/**
	 *	Returns String value of date9
	 *	@return date9
	 */
	public char[]  getDate9String() throws CFException {
	     return String.valueOf(dateXGroup.getDate9String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean date9IsNumeric()  throws CFException{
	    return dateXGroup.date9IsNumeric();
	}

	/**
	 * 	Update Date9 with the passed value
	 *	@param number
	 */
	public void setDate9(long number)  throws CFException{
		dateXGroup.setDate9(number);
	}
	

	
	/**
	 * 	Update Date9 with the passed value
	 *	@param value (String or char[])
	 */
	public void setDate9(char[] value)  throws CFException {
		dateXGroup.setDate9(value);
	}
	
	/**
	 * 	Update Date9 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDate9String(char[] value)  throws CFException{
		dateXGroup.setDate9(value);
	}	

	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of dt1ClmAdjNbr
	 *	@return dt1ClmAdjNbr
	 */
	public int getDt1ClmAdjNbr(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmAdjNbr();
	}

    /**
	 *	Returns the String value of dt1ClmAdjNbr
	 *	@return dt1ClmAdjNbr
	 */
	public char[]  getDt1ClmAdjNbrActualString(int index) {
		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).getDt1ClmAdjNbrActualString();
	}

	/**
	 *	Returns String value of dt1ClmAdjNbr
	 *	@return dt1ClmAdjNbr
	 */
	public char[]  getDt1ClmAdjNbrString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmAdjNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmAdjNbrIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmAdjNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ClmAdjNbr with the passed value
	 *	@param number
	 */
	public void setDt1ClmAdjNbr(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjNbr(number);
	}
	

	public void setDt1ClmAdjNbr(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ClmAdjNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmAdjNbr(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjNbr(value);
	}
	
	/**
	 * 	Update Dt1ClmAdjNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmAdjNbrString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjNbr(value);
	}	

	/**
	 *	Returns the value of dt1ClmContainerLayout
	 *	@return dt1ClmContainerLayout
	 */
   public char[] getDt1ClmContainerLayout() throws CFException  {              
   		return work.getDt1ClmContainerLayout();
   }

  
	/**
	*  set variable dt1ClmContainerLayout
	*  @param value
	**/
   public void setDt1ClmContainerLayout(char[] value) throws CFException {
      work.setDt1ClmContainerLayout(value);
   } 

	/**
	 *	Returns the value of dt1ClmFixedArea
	 *	@return dt1ClmFixedArea
	 */   
	 public Dt1ClmFixedArea getDt1ClmFixedArea() {
   	return dt1ClmContainer.getDt1ClmFixedArea();
   }

   /**
	* 	Update Dt1ClmFixedArea with the passed value
	*	@param value
	*/
   public void setDt1ClmFixedArea(char[] value) throws CFException {
      dt1ClmContainer.setDt1ClmFixedArea(value);
   }   

     /**
	 * 	Update Dt1ClmFixedArea 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmFixedArea(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dt1ClmContainer.setDt1ClmFixedArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmFixedArea 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmFixedArea(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.setDt1ClmFixedArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmFixedArea with another Field
	 *	@param value
	 */
   public void setDt1ClmFixedArea(Field source) {
   	dt1ClmContainer.setDt1ClmFixedArea(source);
   }  
   
     /**
	 * 	Update Dt1ClmFixedArea 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmFixedArea(Field source, int sourceIndex,int sourceLen) {
   	dt1ClmContainer.setDt1ClmFixedArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmFixedArea 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmFixedArea(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.setDt1ClmFixedArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of lastBit9
	 *	@return lastBit9
	 */
	public int getLastBit9() throws CFException {
   		return lastBitXGroup.getLastBit9();
	}


	/**
	 *	Returns String value of lastBit9
	 *	@return lastBit9
	 */
	public char[]  getLastBit9String() throws CFException {
	     return String.valueOf(lastBitXGroup.getLastBit9String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean lastBit9IsNumeric()  throws CFException{
	    return lastBitXGroup.lastBit9IsNumeric();
	}

	/**
	 * 	Update LastBit9 with the passed value
	 *	@param number
	 */
	public void setLastBit9(int number)  throws CFException{
		lastBitXGroup.setLastBit9(number);
	}
	

	public void setLastBit9(long number)  throws CFException{
	    lastBitXGroup.setLastBit9(number);
	}
	
	
	/**
	 * 	Update LastBit9 with the passed value
	 *	@param value (String or char[])
	 */
	public void setLastBit9(char[] value)  throws CFException {
		lastBitXGroup.setLastBit9(value);
	}
	
	/**
	 * 	Update LastBit9 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setLastBit9String(char[] value)  throws CFException{
		lastBitXGroup.setLastBit9(value);
	}	

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of dt1ClmContainerName
	 *	@return dt1ClmContainerName
	 */
   public char[] getDt1ClmContainerName() throws CFException  {              
   		return work.getDt1ClmContainerName();
   }

  
	/**
	*  set variable dt1ClmContainerName
	*  @param value
	**/
   public void setDt1ClmContainerName(char[] value) throws CFException {
      work.setDt1ClmContainerName(value);
   } 

	/**
	 *	Returns the value of currentChannelName
	 *	@return currentChannelName
	 */
   public char[] getCurrentChannelName() throws CFException  {              
   		return standardVars.getCurrentVariables().getCurrentChannelName();
   }

  
	/**
	*  set variable currentChannelName
	*  @param value
	**/
   public void setCurrentChannelName(char[] value) throws CFException {
      standardVars.getCurrentVariables().setCurrentChannelName(value);
   } 

     /**
	 * 	Update CurrentChannelName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCurrentChannelName(char[] source, int sourceIndex) throws CFException {
      standardVars.getCurrentVariables().setCurrentChannelName(source, sourceIndex);
   	
   }
   
   public void setCurrentChannelName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getCurrentVariables().setCurrentChannelName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CurrentChannelName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCurrentChannelName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentChannelName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CurrentChannelName with another Field
	 *	@param value
	 */
   public void setCurrentChannelName(Field source) {
      standardVars.getCurrentVariables().setCurrentChannelName(source);
   }  
   
     /**
	 * 	Update CurrentChannelName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCurrentChannelName(Field source, int sourceIndex,int sourceLen) {
      standardVars.getCurrentVariables().setCurrentChannelName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CurrentChannelName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCurrentChannelName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentChannelName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmProviderId
	 *	@return dt1ClmProviderId
	 */   
	 public Dt1ClmProviderId getDt1ClmProviderId(int index) {
   	return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId();
   }

   /**
	* 	Update Dt1ClmProviderId with the passed value
	*	@param value
	*/
   public void setDt1ClmProviderId(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(value);
   }   

     /**
	 * 	Update Dt1ClmProviderId 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProviderId 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmProviderId with another Field
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,Field source) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source);
   }  
   
     /**
	 * 	Update Dt1ClmProviderId 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,Field source, int sourceIndex,int sourceLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProviderId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of dt1SrtItemCnt
	 *	@return dt1SrtItemCnt
	 */
	public int getDt1SrtItemCnt() throws CFException {
   		return dt1SrtContainer.getDt1SrtFixedArea().getDt1SrtItemCnt();
	}


	/**
	 *	Returns String value of dt1SrtItemCnt
	 *	@return dt1SrtItemCnt
	 */
	public char[]  getDt1SrtItemCntString() throws CFException {
	     return String.valueOf(dt1SrtContainer.getDt1SrtFixedArea().getDt1SrtItemCntString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1SrtItemCntIsNumeric()  throws CFException{
	    return dt1SrtContainer.getDt1SrtFixedArea().dt1SrtItemCntIsNumeric();
	}

	/**
	 * 	Update Dt1SrtItemCnt with the passed value
	 *	@param number
	 */
	public void setDt1SrtItemCnt(int number)  throws CFException{
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(number);
	}
	

	public void setDt1SrtItemCnt(long number)  throws CFException{
	    dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(number);
	}
	
	
	/**
	 * 	Update Dt1SrtItemCnt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1SrtItemCnt(char[] value)  throws CFException {
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(value);
	}
	
	/**
	 * 	Update Dt1SrtItemCnt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1SrtItemCntString(char[] value)  throws CFException{
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(value);
	}	

	/**
	 *	Returns the value of dt1ClmProcTm
	 *	@return dt1ClmProcTm
	 */
   public char[] getDt1ClmProcTm(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProcTm();
   }

  
	/**
	*  set variable dt1ClmProcTm
	*  @param value
	**/
   public void setDt1ClmProcTm(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(value);
   } 

     /**
	 * 	Update Dt1ClmProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProcTm(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source, sourceIndex);
   	
   }
   
   public void setDt1ClmProcTm(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProcTm(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmProcTm with another Field
	 *	@param value
	 */
   public void setDt1ClmProcTm(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source);
   }  
   
     /**
	 * 	Update Dt1ClmProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmProcTm(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProcTm(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of time9
	 *	@return time9
	 */
	public long getTime9() throws CFException {
   		return timeXGroup.getTime9();
	}


	/**
	 *	Returns String value of time9
	 *	@return time9
	 */
	public char[]  getTime9String() throws CFException {
	     return String.valueOf(timeXGroup.getTime9String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean time9IsNumeric()  throws CFException{
	    return timeXGroup.time9IsNumeric();
	}

	/**
	 * 	Update Time9 with the passed value
	 *	@param number
	 */
	public void setTime9(long number)  throws CFException{
		timeXGroup.setTime9(number);
	}
	

	
	/**
	 * 	Update Time9 with the passed value
	 *	@param value (String or char[])
	 */
	public void setTime9(char[] value)  throws CFException {
		timeXGroup.setTime9(value);
	}
	
	/**
	 * 	Update Time9 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setTime9String(char[] value)  throws CFException{
		timeXGroup.setTime9(value);
	}	

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public PutD5427dt1ClmSectOutCtx getPutD5427dt1ClmSectOutCtx() {
            return new PutD5427dt1ClmSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1ClmContainer.hashCode();
        str += lastBitXGroup.hashCode();
        str += timeXGroup.hashCode();
        str += dt1RspContainer.hashCode();
        str += standardVars.hashCode();
        str += stsContainer.hashCode();
        str += num3.hashCode();
        str += num15.hashCode();
        str += work.hashCode();
        str += dt1SrtContainer.hashCode();
        str += dateXGroup.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public PutD5427dt1ClmSectInCtx clone() {
        PutD5427dt1ClmSectInCtx cloneObj = new PutD5427dt1ClmSectInCtx();
        cloneObj.dt1ClmContainer = new Dt1ClmContainer();
        cloneObj.dt1ClmContainer.set(dt1ClmContainer.getClonedField());
        cloneObj.lastBitXGroup = new LastBitXGroup();
        cloneObj.lastBitXGroup.set(lastBitXGroup.getClonedField());
        cloneObj.timeXGroup = new TimeXGroup();
        cloneObj.timeXGroup.set(timeXGroup.getClonedField());
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.num3 = new Num3();
        cloneObj.num3.set(num3.getClonedField());
        cloneObj.num15 = new Num15();
        cloneObj.num15.set(num15.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dt1SrtContainer = new Dt1SrtContainer();
        cloneObj.dt1SrtContainer.set(dt1SrtContainer.getClonedField());
        cloneObj.dateXGroup = new DateXGroup();
        cloneObj.dateXGroup.set(dateXGroup.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public PutD5427dt1ClmSectInCtx getPutD5427dt1ClmSectInCtx() {
            return new PutD5427dt1ClmSectInCtx();
    }
     public class PutD5427dt1ClmSectOutCtx implements Cloneable {
     Dt1ClmContainer dt1ClmContainer = D5427dt1Ctx.this.getDt1ClmContainer();
     LastBitXGroup lastBitXGroup = D5427dt1Ctx.this.getLastBitXGroup();
     TimeXGroup timeXGroup = D5427dt1Ctx.this.getTimeXGroup();
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     StsContainer stsContainer = D5427dt1Ctx.this.getStsContainer();
     Num3 num3 = D5427dt1Ctx.this.getNum3();
     Num15 num15 = D5427dt1Ctx.this.getNum15();
     Work work = D5427dt1Ctx.this.getWork();
     Dt1SrtContainer dt1SrtContainer = D5427dt1Ctx.this.getDt1SrtContainer();
     DateXGroup dateXGroup = D5427dt1Ctx.this.getDateXGroup();
     HvaClmHistArray hvaClmHistArray = D5427dt1Ctx.this.getHvaClmHistArray();

	/**
	 *	Returns the value of dt1ClmDraftNo
	 *	@return dt1ClmDraftNo
	 */
	public long getDt1ClmDraftNo(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmDraftNo();
	}


	/**
	 *	Returns String value of dt1ClmDraftNo
	 *	@return dt1ClmDraftNo
	 */
	public char[]  getDt1ClmDraftNoString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmDraftNoString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmDraftNoIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmDraftNoIsNumeric();
	}

	/**
	 * 	Update Dt1ClmDraftNo with the passed value
	 *	@param number
	 */
	public void setDt1ClmDraftNo(int index,long number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDraftNo(number);
	}
	

	
	/**
	 * 	Update Dt1ClmDraftNo with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmDraftNo(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDraftNo(value);
	}
	
	/**
	 * 	Update Dt1ClmDraftNo with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmDraftNoString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmDraftNo(value);
	}	

public long getDt1SrtTime(int index) throws CFException {  
        return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtTime();
}
	/**
	 * 	Update Dt1SrtTime with the passed value
	 *	@param number
	 */
	public void setDt1SrtTime(int index,long number)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtTime(number);
	}



	/**
	 *	Returns the value of cicsresp2
	 *	@return cicsresp2
	 */
	public int getCicsresp2() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp2();
	}
	
	/**
	 * 	Update Cicsresp2 with the passed value
	 *	@param number
	 */
	public void setCicsresp2(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2(number);
	}


	public void setCicsresp2(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2((int)number);
	}



public void setDt1SrtDx(int dt1SrtDx) { 
    D5427dt1Ctx.this.dt1SrtDx = dt1SrtDx;
}

public int getDt1SrtDx() { 
    return D5427dt1Ctx.this.dt1SrtDx;
}
public long getDt1SrtFln(int index) throws CFException {  
        return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtFln();
}
	/**
	 * 	Update Dt1SrtFln with the passed value
	 *	@param number
	 */
	public void setDt1SrtFln(int index,long number)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtFln(number);
	}



	/**
	 *	Returns the value of stsRespCode
	 *	@return stsRespCode
	 */
   public char[] getStsRespCode() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsRespCode();
   }

  
	/**
	*  set variable stsRespCode
	*  @param value
	**/
   public void setStsRespCode(char[] value) throws CFException {
      stsContainer.getStsFixedArea().setStsRespCode(value);
   } 

     /**
	 * 	Update StsRespCode 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsRespCode(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex);
   	
   }
   
   public void setStsRespCode(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsRespCode 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsRespCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsRespCode with another Field
	 *	@param value
	 */
   public void setStsRespCode(Field source) {
      stsContainer.getStsFixedArea().setStsRespCode(source);
   }  
   
     /**
	 * 	Update StsRespCode 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsRespCode(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsRespCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsRespCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public int getDt1SrtBankCode(int index) throws CFException {  
        return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtBankCode();
}
	/**
	 * 	Update Dt1SrtBankCode with the passed value
	 *	@param number
	 */
	public void setDt1SrtBankCode(int index,int number)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtBankCode(number);
	}


	public void setDt1SrtBankCode(int index,long number)  throws CFException{
	    dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtBankCode(number);
	}
	

public long getDt1SrtDraft(int index) throws CFException {  
        return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtDraft();
}
	/**
	 * 	Update Dt1SrtDraft with the passed value
	 *	@param number
	 */
	public void setDt1SrtDraft(int index,long number)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtDraft(number);
	}



	/**
	 *	Returns the value of payeeCode
	 *	@return payeeCode
	 */
   public char[] getPayeeCode() throws CFException  {              
   		return work.getPayeeCode();
   }

  
	/**
	*  set variable payeeCode
	*  @param value
	**/
   public void setPayeeCode(char[] value) throws CFException {
      work.setPayeeCode(value);
   } 

	/**
	 *	Test condition 99 for isDt1RspFail()
	 *	@return  Returns true if isDt1RspFail() is 99
	 */
   public boolean isDt1RspFail() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspFail();
   }

	/**
	*  set values 99
	*/
   	public void setDt1RspFailTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspFailTrue();
   	}
	/**
	 *	Returns the value of lastBitX
	 *	@return lastBitX
	 */
   public char[] getLastBitX() throws CFException  {              
   		return lastBitXGroup.getLastBitX();
   }

  
	/**
	*  set variable lastBitX
	*  @param value
	**/
   public void setLastBitX(char[] value) throws CFException {
      lastBitXGroup.setLastBitX(value);
   } 

     /**
	 * 	Update LastBitX 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setLastBitX(char[] source, int sourceIndex) throws CFException {
      lastBitXGroup.setLastBitX(source, sourceIndex);
   	
   }
   
   public void setLastBitX(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      lastBitXGroup.setLastBitX(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update LastBitX 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setLastBitX(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      lastBitXGroup.setLastBitX(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update LastBitX with another Field
	 *	@param value
	 */
   public void setLastBitX(Field source) {
      lastBitXGroup.setLastBitX(source);
   }  
   
     /**
	 * 	Update LastBitX 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setLastBitX(Field source, int sourceIndex,int sourceLen) {
      lastBitXGroup.setLastBitX(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update LastBitX 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setLastBitX(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      lastBitXGroup.setLastBitX(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of stsCicsresp
	 *	@return stsCicsresp
	 */
	public long getStsCicsresp() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp();
	}


	/**
	 *	Returns String value of stsCicsresp
	 *	@return stsCicsresp
	 */
	public char[]  getStsCicsrespString() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsrespString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsCicsrespIsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsCicsrespIsNumeric();
	}

	/**
	 * 	Update StsCicsresp with the passed value
	 *	@param number
	 */
	public void setStsCicsresp(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(number);
	}
	

	
	/**
	 * 	Update StsCicsresp with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(value);
	}
	
	/**
	 * 	Update StsCicsresp with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsCicsrespString(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(value);
	}	

	/**
	 *	Returns the value of stsCicsresp2
	 *	@return stsCicsresp2
	 */
	public long getStsCicsresp2() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp2();
	}


	/**
	 *	Returns String value of stsCicsresp2
	 *	@return stsCicsresp2
	 */
	public char[]  getStsCicsresp2String() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp2String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsCicsresp2IsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsCicsresp2IsNumeric();
	}

	/**
	 * 	Update StsCicsresp2 with the passed value
	 *	@param number
	 */
	public void setStsCicsresp2(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(number);
	}
	

	
	/**
	 * 	Update StsCicsresp2 with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp2(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(value);
	}
	
	/**
	 * 	Update StsCicsresp2 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp2String(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(value);
	}	

	/**
	 *	Returns the value of dt1ClmProcDt
	 *	@return dt1ClmProcDt
	 */
   public char[] getDt1ClmProcDt(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProcDt();
   }

  
	/**
	*  set variable dt1ClmProcDt
	*  @param value
	**/
   public void setDt1ClmProcDt(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(value);
   } 

     /**
	 * 	Update Dt1ClmProcDt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex);
   	
   }
   
   public void setDt1ClmProcDt(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProcDt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmProcDt with another Field
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source);
   }  
   
     /**
	 * 	Update Dt1ClmProcDt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmProcDt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProcDt(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcDt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of date9
	 *	@return date9
	 */
	public long getDate9() throws CFException {
   		return dateXGroup.getDate9();
	}


	/**
	 *	Returns String value of date9
	 *	@return date9
	 */
	public char[]  getDate9String() throws CFException {
	     return String.valueOf(dateXGroup.getDate9String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean date9IsNumeric()  throws CFException{
	    return dateXGroup.date9IsNumeric();
	}

	/**
	 * 	Update Date9 with the passed value
	 *	@param number
	 */
	public void setDate9(long number)  throws CFException{
		dateXGroup.setDate9(number);
	}
	

	
	/**
	 * 	Update Date9 with the passed value
	 *	@param value (String or char[])
	 */
	public void setDate9(char[] value)  throws CFException {
		dateXGroup.setDate9(value);
	}
	
	/**
	 * 	Update Date9 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDate9String(char[] value)  throws CFException{
		dateXGroup.setDate9(value);
	}	

public short getDt1SrtClmItem(int index) throws CFException {  
        return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtClmItem();
}
	/**
	 * 	Update Dt1SrtClmItem with the passed value
	 *	@param number
	 */
	public void setDt1SrtClmItem(int index,short number)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtClmItem(number);
	}

	public void setDt1SrtClmItem(int index,int number)  throws CFException{
	   dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtClmItem(number);
	}
	public void setDt1SrtClmItem(int index,long number)  throws CFException {
	    dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtClmItem(number);
	}
	


	/**
	 *	Returns the value of num159
	 *	@return num159
	 */
	public long getNum159() throws CFException {
   		return num15.getNum159();
	}


	/**
	 *	Returns String value of num159
	 *	@return num159
	 */
	public char[]  getNum159String() throws CFException {
	     return String.valueOf(num15.getNum159String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean num159IsNumeric()  throws CFException{
	    return num15.num159IsNumeric();
	}

	/**
	 * 	Update Num159 with the passed value
	 *	@param number
	 */
	public void setNum159(long number)  throws CFException{
		num15.setNum159(number);
	}
	

	
	/**
	 * 	Update Num159 with the passed value
	 *	@param value (String or char[])
	 */
	public void setNum159(char[] value)  throws CFException {
		num15.setNum159(value);
	}
	
	/**
	 * 	Update Num159 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNum159String(char[] value)  throws CFException{
		num15.setNum159(value);
	}	

	/**
	 *	Returns the value of dt1ClmAdjNbr
	 *	@return dt1ClmAdjNbr
	 */
	public int getDt1ClmAdjNbr(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmAdjNbr();
	}

    /**
	 *	Returns the String value of dt1ClmAdjNbr
	 *	@return dt1ClmAdjNbr
	 */
	public char[]  getDt1ClmAdjNbrActualString(int index) {
		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).getDt1ClmAdjNbrActualString();
	}

	/**
	 *	Returns String value of dt1ClmAdjNbr
	 *	@return dt1ClmAdjNbr
	 */
	public char[]  getDt1ClmAdjNbrString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmAdjNbrString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmAdjNbrIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmAdjNbrIsNumeric();
	}

	/**
	 * 	Update Dt1ClmAdjNbr with the passed value
	 *	@param number
	 */
	public void setDt1ClmAdjNbr(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjNbr(number);
	}
	

	public void setDt1ClmAdjNbr(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjNbr(number);
	}
	
	
	/**
	 * 	Update Dt1ClmAdjNbr with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmAdjNbr(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjNbr(value);
	}
	
	/**
	 * 	Update Dt1ClmAdjNbr with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmAdjNbrString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmAdjNbr(value);
	}	

	/**
	 *	Returns the value of dt1SrtFlnCent
	 *	@return dt1SrtFlnCent
	 */
	public int getDt1SrtFlnCent(int index) throws CFException {
   		return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtFlnCent();
	}


	/**
	 *	Returns String value of dt1SrtFlnCent
	 *	@return dt1SrtFlnCent
	 */
	public char[]  getDt1SrtFlnCentString(int index) throws CFException {
	     return String.valueOf(dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtFlnCentString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1SrtFlnCentIsNumeric(int index)  throws CFException{
	    return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index - 1).dt1SrtFlnCentIsNumeric();
	}

	/**
	 * 	Update Dt1SrtFlnCent with the passed value
	 *	@param number
	 */
	public void setDt1SrtFlnCent(int index,int number)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtFlnCent(number);
	}
	

	public void setDt1SrtFlnCent(int index,long number)  throws CFException{
	    dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtFlnCent(number);
	}
	
	
	/**
	 * 	Update Dt1SrtFlnCent with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1SrtFlnCent(int index,char[] value)  throws CFException {
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtFlnCent(value);
	}
	
	/**
	 * 	Update Dt1SrtFlnCent with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1SrtFlnCentString(int index,char[] value)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtFlnCent(value);
	}	

	/**
	 *	Returns the value of dt1SrtLineSequence
	 *	@return dt1SrtLineSequence
	 */
	public int getDt1SrtLineSequence(int index) throws CFException {
   		return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtLineSequence();
	}


	/**
	 *	Returns String value of dt1SrtLineSequence
	 *	@return dt1SrtLineSequence
	 */
	public char[]  getDt1SrtLineSequenceString(int index) throws CFException {
	     return String.valueOf(dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtLineSequenceString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1SrtLineSequenceIsNumeric(int index)  throws CFException{
	    return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index - 1).dt1SrtLineSequenceIsNumeric();
	}

	/**
	 * 	Update Dt1SrtLineSequence with the passed value
	 *	@param number
	 */
	public void setDt1SrtLineSequence(int index,int number)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtLineSequence(number);
	}
	

	public void setDt1SrtLineSequence(int index,long number)  throws CFException{
	    dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtLineSequence(number);
	}
	
	
	/**
	 * 	Update Dt1SrtLineSequence with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1SrtLineSequence(int index,char[] value)  throws CFException {
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtLineSequence(value);
	}
	
	/**
	 * 	Update Dt1SrtLineSequence with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1SrtLineSequenceString(int index,char[] value)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtLineSequence(value);
	}	

public long getDt1SrtDate(int index) throws CFException {  
        return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtDate();
}
	/**
	 * 	Update Dt1SrtDate with the passed value
	 *	@param number
	 */
	public void setDt1SrtDate(int index,long number)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtDate(number);
	}



	/**
	 *	Returns the value of dt1ClmContainerLayout
	 *	@return dt1ClmContainerLayout
	 */
   public char[] getDt1ClmContainerLayout() throws CFException  {              
   		return work.getDt1ClmContainerLayout();
   }

  
	/**
	*  set variable dt1ClmContainerLayout
	*  @param value
	**/
   public void setDt1ClmContainerLayout(char[] value) throws CFException {
      work.setDt1ClmContainerLayout(value);
   } 

	/**
	 *	Returns the value of hvaBankCd
	 *	@return hvaBankCd
	 */
   public char[] getHvaBankCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaBankCd(index);
   }

  
	/**
	*  set variable hvaBankCd
	*  @param value
	**/
   public void setHvaBankCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaBankCd((index),value);
   } 

	/**
	 *	Returns the value of dateX
	 *	@return dateX
	 */
   public char[] getDateX() throws CFException  {              
   		return dateXGroup.getDateX();
   }

  
	/**
	*  set variable dateX
	*  @param value
	**/
   public void setDateX(char[] value) throws CFException {
      dateXGroup.setDateX(value);
   } 

     /**
	 * 	Update DateX 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDateX(char[] source, int sourceIndex) throws CFException {
      dateXGroup.setDateX(source, sourceIndex);
   	
   }
   
   public void setDateX(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dateXGroup.setDateX(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DateX 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDateX(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dateXGroup.setDateX(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DateX with another Field
	 *	@param value
	 */
   public void setDateX(Field source) {
      dateXGroup.setDateX(source);
   }  
   
     /**
	 * 	Update DateX 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDateX(Field source, int sourceIndex,int sourceLen) {
      dateXGroup.setDateX(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DateX 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDateX(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dateXGroup.setDateX(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of timeX
	 *	@return timeX
	 */
   public char[] getTimeX() throws CFException  {              
   		return timeXGroup.getTimeX();
   }

  
	/**
	*  set variable timeX
	*  @param value
	**/
   public void setTimeX(char[] value) throws CFException {
      timeXGroup.setTimeX(value);
   } 

     /**
	 * 	Update TimeX 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTimeX(char[] source, int sourceIndex) throws CFException {
      timeXGroup.setTimeX(source, sourceIndex);
   	
   }
   
   public void setTimeX(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      timeXGroup.setTimeX(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TimeX 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTimeX(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      timeXGroup.setTimeX(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TimeX with another Field
	 *	@param value
	 */
   public void setTimeX(Field source) {
      timeXGroup.setTimeX(source);
   }  
   
     /**
	 * 	Update TimeX 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTimeX(Field source, int sourceIndex,int sourceLen) {
      timeXGroup.setTimeX(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TimeX 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTimeX(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      timeXGroup.setTimeX(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

public long getDt1SrtApproverAltId(int index) throws CFException {  
        return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtApproverAltId();
}
	/**
	 * 	Update Dt1SrtApproverAltId with the passed value
	 *	@param number
	 */
	public void setDt1SrtApproverAltId(int index,long number)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtApproverAltId(number);
	}



	/**
	 *	Returns the value of dt1SrtHeaderCt
	 *	@return dt1SrtHeaderCt
	 */
	public int getDt1SrtHeaderCt(int index) throws CFException {
   		return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtHeaderCt();
	}


	/**
	 *	Returns String value of dt1SrtHeaderCt
	 *	@return dt1SrtHeaderCt
	 */
	public char[]  getDt1SrtHeaderCtString(int index) throws CFException {
	     return String.valueOf(dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtHeaderCtString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1SrtHeaderCtIsNumeric(int index)  throws CFException{
	    return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index - 1).dt1SrtHeaderCtIsNumeric();
	}

	/**
	 * 	Update Dt1SrtHeaderCt with the passed value
	 *	@param number
	 */
	public void setDt1SrtHeaderCt(int index,int number)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtHeaderCt(number);
	}
	

	public void setDt1SrtHeaderCt(int index,long number)  throws CFException{
	    dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtHeaderCt(number);
	}
	
	
	/**
	 * 	Update Dt1SrtHeaderCt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1SrtHeaderCt(int index,char[] value)  throws CFException {
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtHeaderCt(value);
	}
	
	/**
	 * 	Update Dt1SrtHeaderCt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1SrtHeaderCtString(int index,char[] value)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtHeaderCt(value);
	}	

	/**
	 *	Returns the value of dt1SrtProviderId
	 *	@return dt1SrtProviderId
	 */
	public long getDt1SrtProviderId(int index) throws CFException {
   		return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtProviderId();
	}


	/**
	 *	Returns String value of dt1SrtProviderId
	 *	@return dt1SrtProviderId
	 */
	public char[]  getDt1SrtProviderIdString(int index) throws CFException {
	     return String.valueOf(dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtProviderIdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1SrtProviderIdIsNumeric(int index)  throws CFException{
	    return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index - 1).dt1SrtProviderIdIsNumeric();
	}

	/**
	 * 	Update Dt1SrtProviderId with the passed value
	 *	@param number
	 */
	public void setDt1SrtProviderId(int index,long number)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtProviderId(number);
	}
	

	
	/**
	 * 	Update Dt1SrtProviderId with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1SrtProviderId(int index,char[] value)  throws CFException {
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtProviderId(value);
	}
	
	/**
	 * 	Update Dt1SrtProviderId with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1SrtProviderIdString(int index,char[] value)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtProviderId(value);
	}	

	/**
	 *	Returns the value of stsEibtaskn
	 *	@return stsEibtaskn
	 */
	public long getStsEibtaskn() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsEibtaskn();
	}


	/**
	 *	Returns String value of stsEibtaskn
	 *	@return stsEibtaskn
	 */
	public char[]  getStsEibtasknString() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsEibtasknString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsEibtasknIsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsEibtasknIsNumeric();
	}

	/**
	 * 	Update StsEibtaskn with the passed value
	 *	@param number
	 */
	public void setStsEibtaskn(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(number);
	}
	

	
	/**
	 * 	Update StsEibtaskn with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsEibtaskn(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(value);
	}
	
	/**
	 * 	Update StsEibtaskn with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsEibtasknString(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(value);
	}	

	/**
	 *	Returns the value of currentContainerLength
	 *	@return currentContainerLength
	 */
	public int getCurrentContainerLength() throws CFException {        
   		return standardVars.getCurrentVariables().getCurrentContainerLength();
	}
	
	/**
	 * 	Update CurrentContainerLength with the passed value
	 *	@param number
	 */
	public void setCurrentContainerLength(int number)  throws CFException{
		standardVars.getCurrentVariables().setCurrentContainerLength(number);
	}


	public void setCurrentContainerLength(long number)  throws CFException{
		standardVars.getCurrentVariables().setCurrentContainerLength((int)number);
	}


	/**
	 *	Returns the value of dt1SrtIcn
	 *	@return dt1SrtIcn
	 */
   public char[] getDt1SrtIcn(int index) throws CFException  {              
   		return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtIcn();
   }

  
	/**
	*  set variable dt1SrtIcn
	*  @param value
	**/
   public void setDt1SrtIcn(int index,char[] value) throws CFException {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtIcn(value);
   } 

     /**
	 * 	Update Dt1SrtIcn 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1SrtIcn(int index,char[] source, int sourceIndex) throws CFException {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtIcn(source, sourceIndex);
   	
   }
   
   public void setDt1SrtIcn(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtIcn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1SrtIcn 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtIcn(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1SrtIcn with another Field
	 *	@param value
	 */
   public void setDt1SrtIcn(int index,Field source) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtIcn(source);
   }  
   
     /**
	 * 	Update Dt1SrtIcn 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1SrtIcn(int index,Field source, int sourceIndex,int sourceLen) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtIcn(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1SrtIcn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtIcn(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of currentContainerName
	 *	@return currentContainerName
	 */
   public char[] getCurrentContainerName() throws CFException  {              
   		return standardVars.getCurrentVariables().getCurrentContainerName();
   }

  
	/**
	*  set variable currentContainerName
	*  @param value
	**/
   public void setCurrentContainerName(char[] value) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerName(value);
   } 

     /**
	 * 	Update CurrentContainerName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCurrentContainerName(char[] source, int sourceIndex) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex);
   	
   }
   
   public void setCurrentContainerName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CurrentContainerName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CurrentContainerName with another Field
	 *	@param value
	 */
   public void setCurrentContainerName(Field source) {
      standardVars.getCurrentVariables().setCurrentContainerName(source);
   }  
   
     /**
	 * 	Update CurrentContainerName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCurrentContainerName(Field source, int sourceIndex,int sourceLen) {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CurrentContainerName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmProcTm
	 *	@return dt1ClmProcTm
	 */
   public char[] getDt1ClmProcTm(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProcTm();
   }

  
	/**
	*  set variable dt1ClmProcTm
	*  @param value
	**/
   public void setDt1ClmProcTm(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(value);
   } 

     /**
	 * 	Update Dt1ClmProcTm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProcTm(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source, sourceIndex);
   	
   }
   
   public void setDt1ClmProcTm(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProcTm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProcTm(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmProcTm with another Field
	 *	@param value
	 */
   public void setDt1ClmProcTm(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source);
   }  
   
     /**
	 * 	Update Dt1ClmProcTm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmProcTm(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmProcTm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProcTm(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProcTm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1SrtSuffixCd
	 *	@return dt1SrtSuffixCd
	 */
	public int getDt1SrtSuffixCd(int index) throws CFException {
   		return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtSuffixCd();
	}


	/**
	 *	Returns String value of dt1SrtSuffixCd
	 *	@return dt1SrtSuffixCd
	 */
	public char[]  getDt1SrtSuffixCdString(int index) throws CFException {
	     return String.valueOf(dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtSuffixCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1SrtSuffixCdIsNumeric(int index)  throws CFException{
	    return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index - 1).dt1SrtSuffixCdIsNumeric();
	}

	/**
	 * 	Update Dt1SrtSuffixCd with the passed value
	 *	@param number
	 */
	public void setDt1SrtSuffixCd(int index,int number)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtSuffixCd(number);
	}
	

	public void setDt1SrtSuffixCd(int index,long number)  throws CFException{
	    dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtSuffixCd(number);
	}
	
	
	/**
	 * 	Update Dt1SrtSuffixCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1SrtSuffixCd(int index,char[] value)  throws CFException {
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtSuffixCd(value);
	}
	
	/**
	 * 	Update Dt1SrtSuffixCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1SrtSuffixCdString(int index,char[] value)  throws CFException{
		dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtSuffixCd(value);
	}	

	/**
	 *	Returns the value of dt1RspClmContainerItemCnt
	 *	@return dt1RspClmContainerItemCnt
	 */
	public long getDt1RspClmContainerItemCnt() throws CFException {
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspClmContainerItemCnt();
	}


	/**
	 *	Returns String value of dt1RspClmContainerItemCnt
	 *	@return dt1RspClmContainerItemCnt
	 */
	public char[]  getDt1RspClmContainerItemCntString() throws CFException {
	     return String.valueOf(dt1RspContainer.getDt1RspFixedArea().getDt1RspClmContainerItemCntString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1RspClmContainerItemCntIsNumeric()  throws CFException{
	    return dt1RspContainer.getDt1RspFixedArea().dt1RspClmContainerItemCntIsNumeric();
	}

	/**
	 * 	Update Dt1RspClmContainerItemCnt with the passed value
	 *	@param number
	 */
	public void setDt1RspClmContainerItemCnt(long number)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().setDt1RspClmContainerItemCnt(number);
	}
	

	
	/**
	 * 	Update Dt1RspClmContainerItemCnt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1RspClmContainerItemCnt(char[] value)  throws CFException {
		dt1RspContainer.getDt1RspFixedArea().setDt1RspClmContainerItemCnt(value);
	}
	
	/**
	 * 	Update Dt1RspClmContainerItemCnt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1RspClmContainerItemCntString(char[] value)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().setDt1RspClmContainerItemCnt(value);
	}	

	/**
	 *	Returns the value of num39
	 *	@return num39
	 */
	public int getNum39() throws CFException {
   		return num3.getNum39();
	}


	/**
	 *	Returns String value of num39
	 *	@return num39
	 */
	public char[]  getNum39String() throws CFException {
	     return String.valueOf(num3.getNum39String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean num39IsNumeric()  throws CFException{
	    return num3.num39IsNumeric();
	}

	/**
	 * 	Update Num39 with the passed value
	 *	@param number
	 */
	public void setNum39(int number)  throws CFException{
		num3.setNum39(number);
	}
	

	public void setNum39(long number)  throws CFException{
	    num3.setNum39(number);
	}
	
	
	/**
	 * 	Update Num39 with the passed value
	 *	@param value (String or char[])
	 */
	public void setNum39(char[] value)  throws CFException {
		num3.setNum39(value);
	}
	
	/**
	 * 	Update Num39 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setNum39String(char[] value)  throws CFException{
		num3.setNum39(value);
	}	

	/**
	 *	Returns the value of dt1SrtDivNbr
	 *	@return dt1SrtDivNbr
	 */
   public char[] getDt1SrtDivNbr(int index) throws CFException  {              
   		return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtDivNbr();
   }

  
	/**
	*  set variable dt1SrtDivNbr
	*  @param value
	**/
   public void setDt1SrtDivNbr(int index,char[] value) throws CFException {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtDivNbr(value);
   } 

     /**
	 * 	Update Dt1SrtDivNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1SrtDivNbr(int index,char[] source, int sourceIndex) throws CFException {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtDivNbr(source, sourceIndex);
   	
   }
   
   public void setDt1SrtDivNbr(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtDivNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1SrtDivNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtDivNbr(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtDivNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1SrtDivNbr with another Field
	 *	@param value
	 */
   public void setDt1SrtDivNbr(int index,Field source) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtDivNbr(source);
   }  
   
     /**
	 * 	Update Dt1SrtDivNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1SrtDivNbr(int index,Field source, int sourceIndex,int sourceLen) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtDivNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1SrtDivNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtDivNbr(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtDivNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cicsresp
	 *	@return cicsresp
	 */
	public int getCicsresp() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp();
	}
	
	/**
	 * 	Update Cicsresp with the passed value
	 *	@param number
	 */
	public void setCicsresp(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp(number);
	}


	public void setCicsresp(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp((int)number);
	}


	/**
	 *	Test condition 998 for isDt1RspSeeViewForMoreInfo()
	 *	@return  Returns true if isDt1RspSeeViewForMoreInfo() is 998
	 */
   public boolean isDt1RspSeeViewForMoreInfo() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspSeeViewForMoreInfo();
   }

	/**
	*  set values 998
	*/
   	public void setDt1RspSeeViewForMoreInfoTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspSeeViewForMoreInfoTrue();
   	}
	/**
	 *	Returns the value of dt1ClmFln
	 *	@return dt1ClmFln
	 */
	public long getDt1ClmFln(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFln();
	}


	/**
	 *	Returns String value of dt1ClmFln
	 *	@return dt1ClmFln
	 */
	public char[]  getDt1ClmFlnString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmFlnString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmFlnIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmFlnIsNumeric();
	}

	/**
	 * 	Update Dt1ClmFln with the passed value
	 *	@param number
	 */
	public void setDt1ClmFln(int index,long number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(number);
	}
	

	
	/**
	 * 	Update Dt1ClmFln with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmFln(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(value);
	}
	
	/**
	 * 	Update Dt1ClmFln with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmFlnString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmFln(value);
	}	

	/**
	 *	Returns the value of dt1ClmClaimItem
	 *	@return dt1ClmClaimItem
	 */   
	 public Dt1ClmClaimItem getDt1ClmClaimItem(int index) {
   	return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index);
   }

    public List<Dt1ClmClaimItem> getDt1ClmClaimItem() {
        return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem();
    }
   /**
	* 	Update Dt1ClmClaimItem with the passed value
	*	@param value
	*/
   public void setDt1ClmClaimItem(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().setDt1ClmClaimItem((index),value);
   }   


	/**
	 *	Returns the value of dt1RspErrSection
	 *	@return dt1RspErrSection
	 */
   public char[] getDt1RspErrSection() throws CFException  {              
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspErrSection();
   }

  
	/**
	*  set variable dt1RspErrSection
	*  @param value
	**/
   public void setDt1RspErrSection(char[] value) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(value);
   } 

     /**
	 * 	Update Dt1RspErrSection 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1RspErrSection(char[] source, int sourceIndex) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex);
   	
   }
   
   public void setDt1RspErrSection(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspErrSection(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1RspErrSection with another Field
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source);
   }  
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source, int sourceIndex,int sourceLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmIcn
	 *	@return dt1ClmIcn
	 */
   public char[] getDt1ClmIcn(int index) throws CFException  {              
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmIcn();
   }

  
	/**
	*  set variable dt1ClmIcn
	*  @param value
	**/
   public void setDt1ClmIcn(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(value);
   } 

     /**
	 * 	Update Dt1ClmIcn 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,char[] source, int sourceIndex) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex);
   	
   }
   
   public void setDt1ClmIcn(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmIcn 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmIcn with another Field
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,Field source) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source);
   }  
   
     /**
	 * 	Update Dt1ClmIcn 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,Field source, int sourceIndex,int sourceLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1ClmIcn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmIcn(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmIcn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmHeaderCt
	 *	@return dt1ClmHeaderCt
	 */
	public int getDt1ClmHeaderCt(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmHeaderCt();
	}


	/**
	 *	Returns String value of dt1ClmHeaderCt
	 *	@return dt1ClmHeaderCt
	 */
	public char[]  getDt1ClmHeaderCtString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmHeaderCtString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmHeaderCtIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmHeaderCtIsNumeric();
	}

	/**
	 * 	Update Dt1ClmHeaderCt with the passed value
	 *	@param number
	 */
	public void setDt1ClmHeaderCt(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(number);
	}
	

	public void setDt1ClmHeaderCt(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(number);
	}
	
	
	/**
	 * 	Update Dt1ClmHeaderCt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmHeaderCt(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(value);
	}
	
	/**
	 * 	Update Dt1ClmHeaderCt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmHeaderCtString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmHeaderCt(value);
	}	

	/**
	 *	Returns the value of dt1SrtClsNbr
	 *	@return dt1SrtClsNbr
	 */
   public char[] getDt1SrtClsNbr(int index) throws CFException  {              
   		return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtClsNbr();
   }

  
	/**
	*  set variable dt1SrtClsNbr
	*  @param value
	**/
   public void setDt1SrtClsNbr(int index,char[] value) throws CFException {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtClsNbr(value);
   } 

     /**
	 * 	Update Dt1SrtClsNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1SrtClsNbr(int index,char[] source, int sourceIndex) throws CFException {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtClsNbr(source, sourceIndex);
   	
   }
   
   public void setDt1SrtClsNbr(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtClsNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1SrtClsNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtClsNbr(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtClsNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1SrtClsNbr with another Field
	 *	@param value
	 */
   public void setDt1SrtClsNbr(int index,Field source) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtClsNbr(source);
   }  
   
     /**
	 * 	Update Dt1SrtClsNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1SrtClsNbr(int index,Field source, int sourceIndex,int sourceLen) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtClsNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1SrtClsNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtClsNbr(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtClsNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of currentContainerLayout
	 *	@return currentContainerLayout
	 */
   public char[] getCurrentContainerLayout() throws CFException  {              
   		return standardVars.getCurrentVariables().getCurrentContainerLayout();
   }

  
	/**
	*  set variable currentContainerLayout
	*  @param value
	**/
   public void setCurrentContainerLayout(char[] value) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerLayout(value);
   } 

     /**
	 * 	Update CurrentContainerLayout 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCurrentContainerLayout(char[] source, int sourceIndex) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex);
   	
   }
   
   public void setCurrentContainerLayout(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CurrentContainerLayout 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerLayout(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CurrentContainerLayout with another Field
	 *	@param value
	 */
   public void setCurrentContainerLayout(Field source) {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source);
   }  
   
     /**
	 * 	Update CurrentContainerLayout 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCurrentContainerLayout(Field source, int sourceIndex,int sourceLen) {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CurrentContainerLayout 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerLayout(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "C" for isStsRespMessageCics()
	 *	@return  Returns true if isStsRespMessageCics() is "C"
	 */
   public boolean isStsRespMessageCics() throws CFException {
      return stsContainer.getStsFixedArea().getStsResponseVars().isStsRespMessageCics();
   }

	/**
	*  set values "C"
	*/
   	public void setStsRespMessageCicsTrue()  throws CFException{  			
    	stsContainer.getStsFixedArea().getStsResponseVars().setStsRespMessageCicsTrue();
   	}
	/**
	 *	Returns the value of dt1SrtPayeeCode
	 *	@return dt1SrtPayeeCode
	 */
   public char[] getDt1SrtPayeeCode(int index) throws CFException  {              
   		return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtPayeeCode();
   }

  
	/**
	*  set variable dt1SrtPayeeCode
	*  @param value
	**/
   public void setDt1SrtPayeeCode(int index,char[] value) throws CFException {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtPayeeCode(value);
   } 

     /**
	 * 	Update Dt1SrtPayeeCode 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1SrtPayeeCode(int index,char[] source, int sourceIndex) throws CFException {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtPayeeCode(source, sourceIndex);
   	
   }
   
   public void setDt1SrtPayeeCode(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtPayeeCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1SrtPayeeCode 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtPayeeCode(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtPayeeCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1SrtPayeeCode with another Field
	 *	@param value
	 */
   public void setDt1SrtPayeeCode(int index,Field source) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtPayeeCode(source);
   }  
   
     /**
	 * 	Update Dt1SrtPayeeCode 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1SrtPayeeCode(int index,Field source, int sourceIndex,int sourceLen) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtPayeeCode(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1SrtPayeeCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtPayeeCode(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtPayeeCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmSuffixCd
	 *	@return dt1ClmSuffixCd
	 */
	public int getDt1ClmSuffixCd(int index) throws CFException {
   		return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmSuffixCd();
	}


	/**
	 *	Returns String value of dt1ClmSuffixCd
	 *	@return dt1ClmSuffixCd
	 */
	public char[]  getDt1ClmSuffixCdString(int index) throws CFException {
	     return String.valueOf(dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmSuffixCdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1ClmSuffixCdIsNumeric(int index)  throws CFException{
	    return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index - 1).dt1ClmSuffixCdIsNumeric();
	}

	/**
	 * 	Update Dt1ClmSuffixCd with the passed value
	 *	@param number
	 */
	public void setDt1ClmSuffixCd(int index,int number)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(number);
	}
	

	public void setDt1ClmSuffixCd(int index,long number)  throws CFException{
	    dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(number);
	}
	
	
	/**
	 * 	Update Dt1ClmSuffixCd with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1ClmSuffixCd(int index,char[] value)  throws CFException {
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(value);
	}
	
	/**
	 * 	Update Dt1ClmSuffixCd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1ClmSuffixCdString(int index,char[] value)  throws CFException{
		dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmSuffixCd(value);
	}	

	/**
	 *	Returns the value of num3X
	 *	@return num3X
	 */
   public char[] getNum3X() throws CFException  {              
   		return num3.getNum3X();
   }

  
	/**
	*  set variable num3X
	*  @param value
	**/
   public void setNum3X(char[] value) throws CFException {
      num3.setNum3X(value);
   } 

     /**
	 * 	Update Num3X 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setNum3X(char[] source, int sourceIndex) throws CFException {
      num3.setNum3X(source, sourceIndex);
   	
   }
   
   public void setNum3X(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      num3.setNum3X(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Num3X 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setNum3X(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      num3.setNum3X(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Num3X with another Field
	 *	@param value
	 */
   public void setNum3X(Field source) {
      num3.setNum3X(source);
   }  
   
     /**
	 * 	Update Num3X 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setNum3X(Field source, int sourceIndex,int sourceLen) {
      num3.setNum3X(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Num3X 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setNum3X(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      num3.setNum3X(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "9006" for isStsRespCodePutError()
	 *	@return  Returns true if isStsRespCodePutError() is "9006"
	 */
   public boolean isStsRespCodePutError() throws CFException {
      return stsContainer.getStsFixedArea().isStsRespCodePutError();
   }

	/**
	*  set values "9006"
	*/
   	public void setStsRespCodePutErrorTrue()  throws CFException{  			
    	stsContainer.getStsFixedArea().setStsRespCodePutErrorTrue();
   	}
	/**
	 *	Returns the value of hvaPgmIdLstCharVal
	 *	@return hvaPgmIdLstCharVal
	 */
   public char[] getHvaPgmIdLstCharVal(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaPgmIdLstCharVal(index);
   }

  
	/**
	*  set variable hvaPgmIdLstCharVal
	*  @param value
	**/
   public void setHvaPgmIdLstCharVal(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaPgmIdLstCharVal((index),value);
   } 

	/**
	 *	Returns the value of dt1ClmContainerName
	 *	@return dt1ClmContainerName
	 */
   public char[] getDt1ClmContainerName() throws CFException  {              
   		return work.getDt1ClmContainerName();
   }

  
	/**
	*  set variable dt1ClmContainerName
	*  @param value
	**/
   public void setDt1ClmContainerName(char[] value) throws CFException {
      work.setDt1ClmContainerName(value);
   } 

	/**
	 *	Returns the value of stsResponseVars
	 *	@return stsResponseVars
	 */   
	 public StsResponseVars getStsResponseVars() {
   	return stsContainer.getStsFixedArea().getStsResponseVars();
   }

   /**
	* 	Update StsResponseVars with the passed value
	*	@param value
	*/
   public void setStsResponseVars(char[] value) throws CFException {
      stsContainer.getStsFixedArea().setStsResponseVars(value);
   }   

     /**
	 * 	Update StsResponseVars 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setStsResponseVars(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsResponseVars 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsResponseVars(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsResponseVars with another Field
	 *	@param value
	 */
   public void setStsResponseVars(Field source) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source);
   }  
   
     /**
	 * 	Update StsResponseVars 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setStsResponseVars(Field source, int sourceIndex,int sourceLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsResponseVars 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsResponseVars(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1ClmProviderId
	 *	@return dt1ClmProviderId
	 */   
	 public Dt1ClmProviderId getDt1ClmProviderId(int index) {
   	return dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).getDt1ClmProviderId();
   }

   /**
	* 	Update Dt1ClmProviderId with the passed value
	*	@param value
	*/
   public void setDt1ClmProviderId(int index,char[] value) throws CFException {
      dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(value);
   }   

     /**
	 * 	Update Dt1ClmProviderId 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProviderId 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1ClmProviderId with another Field
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,Field source) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source);
   }  
   
     /**
	 * 	Update Dt1ClmProviderId 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,Field source, int sourceIndex,int sourceLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1ClmProviderId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1ClmProviderId(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dt1ClmContainer.getDt1ClmVariableArea().getDt1ClmClaimItem(index).setDt1ClmProviderId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaRmrkCd
	 *	@return hvaRmrkCd
	 */
   public char[] getHvaRmrkCd(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaRmrkCd(index);
   }

  
	/**
	*  set variable hvaRmrkCd
	*  @param value
	**/
   public void setHvaRmrkCd(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaRmrkCd((index),value);
   } 

	/**
	 *	Returns the value of dt1SrtTranCode
	 *	@return dt1SrtTranCode
	 */
   public char[] getDt1SrtTranCode(int index) throws CFException  {              
   		return dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).getDt1SrtTranCode();
   }

  
	/**
	*  set variable dt1SrtTranCode
	*  @param value
	**/
   public void setDt1SrtTranCode(int index,char[] value) throws CFException {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtTranCode(value);
   } 

     /**
	 * 	Update Dt1SrtTranCode 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1SrtTranCode(int index,char[] source, int sourceIndex) throws CFException {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtTranCode(source, sourceIndex);
   	
   }
   
   public void setDt1SrtTranCode(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtTranCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1SrtTranCode 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtTranCode(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtTranCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1SrtTranCode with another Field
	 *	@param value
	 */
   public void setDt1SrtTranCode(int index,Field source) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtTranCode(source);
   }  
   
     /**
	 * 	Update Dt1SrtTranCode 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1SrtTranCode(int index,Field source, int sourceIndex,int sourceLen) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtTranCode(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1SrtTranCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1SrtTranCode(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1SrtContainer.getDt1SrtVariableArea().getDt1SrtArray().getDt1SrtItem(index).setDt1SrtTranCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of num15
	 *	@return num15
	 */   
	 public Num15 getNum15() {
   	return num15;
   }


	/**
	 *	Returns the value of dt1SrtItemCnt
	 *	@return dt1SrtItemCnt
	 */
	public int getDt1SrtItemCnt() throws CFException {
   		return dt1SrtContainer.getDt1SrtFixedArea().getDt1SrtItemCnt();
	}


	/**
	 *	Returns String value of dt1SrtItemCnt
	 *	@return dt1SrtItemCnt
	 */
	public char[]  getDt1SrtItemCntString() throws CFException {
	     return String.valueOf(dt1SrtContainer.getDt1SrtFixedArea().getDt1SrtItemCntString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1SrtItemCntIsNumeric()  throws CFException{
	    return dt1SrtContainer.getDt1SrtFixedArea().dt1SrtItemCntIsNumeric();
	}

	/**
	 * 	Update Dt1SrtItemCnt with the passed value
	 *	@param number
	 */
	public void setDt1SrtItemCnt(int number)  throws CFException{
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(number);
	}
	

	public void setDt1SrtItemCnt(long number)  throws CFException{
	    dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(number);
	}
	
	
	/**
	 * 	Update Dt1SrtItemCnt with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1SrtItemCnt(char[] value)  throws CFException {
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(value);
	}
	
	/**
	 * 	Update Dt1SrtItemCnt with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1SrtItemCntString(char[] value)  throws CFException{
		dt1SrtContainer.getDt1SrtFixedArea().setDt1SrtItemCnt(value);
	}	

	/**
	 *	Returns the value of dt1RspRespCode
	 *	@return dt1RspRespCode
	 */
	public int getDt1RspRespCode() throws CFException {
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspRespCode();
	}


	/**
	 *	Returns String value of dt1RspRespCode
	 *	@return dt1RspRespCode
	 */
	public char[]  getDt1RspRespCodeString() throws CFException {
	     return String.valueOf(dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspRespCodeString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1RspRespCodeIsNumeric()  throws CFException{
	    return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().dt1RspRespCodeIsNumeric();
	}

	/**
	 * 	Update Dt1RspRespCode with the passed value
	 *	@param number
	 */
	public void setDt1RspRespCode(int number)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(number);
	}
	

	public void setDt1RspRespCode(long number)  throws CFException{
	    dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(number);
	}
	
	
	/**
	 * 	Update Dt1RspRespCode with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1RspRespCode(char[] value)  throws CFException {
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(value);
	}
	
	/**
	 * 	Update Dt1RspRespCode with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1RspRespCodeString(char[] value)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(value);
	}	

	/**
	 *	Returns the value of hvaClsNbr
	 *	@return hvaClsNbr
	 */
   public char[] getHvaClsNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaClsNbr(index);
   }

  
	/**
	*  set variable hvaClsNbr
	*  @param value
	**/
   public void setHvaClsNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaClsNbr((index),value);
   } 

	/**
	 *	Returns the value of stsRespAdditionalInfo1
	 *	@return stsRespAdditionalInfo1
	 */
   public char[] getStsRespAdditionalInfo1() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsRespAdditionalInfo1();
   }

  
	/**
	*  set variable stsRespAdditionalInfo1
	*  @param value
	**/
   public void setStsRespAdditionalInfo1(char[] value) throws CFException {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(value);
   } 

     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex);
   	
   }
   
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsRespAdditionalInfo1 with another Field
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source);
   }  
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvaDivNbr
	 *	@return hvaDivNbr
	 */
   public char[] getHvaDivNbr(int index) throws CFException  {              
   		return hvaClmHistArray.getHvaDivNbr(index);
   }

  
	/**
	*  set variable hvaDivNbr
	*  @param value
	**/
   public void setHvaDivNbr(int index,char[] value) throws CFException {
      hvaClmHistArray.setHvaDivNbr((index),value);
   } 


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1ClmContainer.hashCode();
        str += lastBitXGroup.hashCode();
        str += timeXGroup.hashCode();
        str += dt1RspContainer.hashCode();
        str += standardVars.hashCode();
        str += stsContainer.hashCode();
        str += num3.hashCode();
        str += num15.hashCode();
        str += work.hashCode();
        str += dt1SrtContainer.hashCode();
        str += dateXGroup.hashCode();
        str += hvaClmHistArray.hashCode();
       return str.hashCode();
    }

    public PutD5427dt1ClmSectOutCtx clone() {
        PutD5427dt1ClmSectOutCtx cloneObj = new PutD5427dt1ClmSectOutCtx();
        cloneObj.dt1ClmContainer = new Dt1ClmContainer();
        cloneObj.dt1ClmContainer.set(dt1ClmContainer.getClonedField());
        cloneObj.lastBitXGroup = new LastBitXGroup();
        cloneObj.lastBitXGroup.set(lastBitXGroup.getClonedField());
        cloneObj.timeXGroup = new TimeXGroup();
        cloneObj.timeXGroup.set(timeXGroup.getClonedField());
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.num3 = new Num3();
        cloneObj.num3.set(num3.getClonedField());
        cloneObj.num15 = new Num15();
        cloneObj.num15.set(num15.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dt1SrtContainer = new Dt1SrtContainer();
        cloneObj.dt1SrtContainer.set(dt1SrtContainer.getClonedField());
        cloneObj.dateXGroup = new DateXGroup();
        cloneObj.dateXGroup.set(dateXGroup.getClonedField());
        cloneObj.hvaClmHistArray = new HvaClmHistArray();
        cloneObj.hvaClmHistArray.set(hvaClmHistArray.getClonedField());
        return cloneObj;
    }

    }

    public PutD5427dt1ClmSectOutCtx getPutD5427dt1ClmSectOutCtx() {
            return new PutD5427dt1ClmSectOutCtx();
    }
     public class PutD5427dt1RspSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     StsContainer stsContainer = D5427dt1Ctx.this.getStsContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Returns the value of dt1RspContainerName
	 *	@return dt1RspContainerName
	 */
   public char[] getDt1RspContainerName() throws CFException  {              
   		return work.getDt1RspContainerName();
   }

  
	/**
	*  set variable dt1RspContainerName
	*  @param value
	**/
   public void setDt1RspContainerName(char[] value) throws CFException {
      work.setDt1RspContainerName(value);
   } 

	/**
	 *	Test condition 0 for isDt1RspOk()
	 *	@return  Returns true if isDt1RspOk() is 0
	 */
   public boolean isDt1RspOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspOkTrue();
   	}
	/**
	 *	Returns the value of dt1RspContainer
	 *	@return dt1RspContainer
	 */   
	 public Dt1RspContainer getDt1RspContainer() {
   	return dt1RspContainer;
   }


	/**
	 *	Returns the value of cicsresp2
	 *	@return cicsresp2
	 */
	public int getCicsresp2() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp2();
	}
	
	/**
	 * 	Update Cicsresp2 with the passed value
	 *	@param number
	 */
	public void setCicsresp2(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2(number);
	}


	public void setCicsresp2(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2((int)number);
	}


	/**
	 *	Test condition 0 for isDt1RspGoodReturn()
	 *	@return  Returns true if isDt1RspGoodReturn() is 0
	 */
   public boolean isDt1RspGoodReturn() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspGoodReturn();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspGoodReturnTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspGoodReturnTrue();
   	}
	/**
	 *	Returns the value of dt1RspContainerLayout
	 *	@return dt1RspContainerLayout
	 */
   public char[] getDt1RspContainerLayout() throws CFException  {              
   		return work.getDt1RspContainerLayout();
   }

  
	/**
	*  set variable dt1RspContainerLayout
	*  @param value
	**/
   public void setDt1RspContainerLayout(char[] value) throws CFException {
      work.setDt1RspContainerLayout(value);
   } 

	/**
	 *	Returns the value of cicsresp
	 *	@return cicsresp
	 */
	public int getCicsresp() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp();
	}
	
	/**
	 * 	Update Cicsresp with the passed value
	 *	@param number
	 */
	public void setCicsresp(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp(number);
	}


	public void setCicsresp(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp((int)number);
	}


	/**
	 *	Test condition 0 for isDt1RspExplOk()
	 *	@return  Returns true if isDt1RspExplOk() is 0
	 */
   public boolean isDt1RspExplOk() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspExplOk();
   }

	/**
	*  set values 0
	*/
   	public void setDt1RspExplOkTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspExplOkTrue();
   	}
	/**
	 *	Returns the value of dt1RspRespCode
	 *	@return dt1RspRespCode
	 */
	public int getDt1RspRespCode() throws CFException {
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspRespCode();
	}


	/**
	 *	Returns String value of dt1RspRespCode
	 *	@return dt1RspRespCode
	 */
	public char[]  getDt1RspRespCodeString() throws CFException {
	     return String.valueOf(dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspRespCodeString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1RspRespCodeIsNumeric()  throws CFException{
	    return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().dt1RspRespCodeIsNumeric();
	}

	/**
	 * 	Update Dt1RspRespCode with the passed value
	 *	@param number
	 */
	public void setDt1RspRespCode(int number)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(number);
	}
	

	public void setDt1RspRespCode(long number)  throws CFException{
	    dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(number);
	}
	
	
	/**
	 * 	Update Dt1RspRespCode with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1RspRespCode(char[] value)  throws CFException {
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(value);
	}
	
	/**
	 * 	Update Dt1RspRespCode with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1RspRespCodeString(char[] value)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(value);
	}	


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public PutD5427dt1RspSectOutCtx getPutD5427dt1RspSectOutCtx() {
            return new PutD5427dt1RspSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += standardVars.hashCode();
        str += stsContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public PutD5427dt1RspSectInCtx clone() {
        PutD5427dt1RspSectInCtx cloneObj = new PutD5427dt1RspSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public PutD5427dt1RspSectInCtx getPutD5427dt1RspSectInCtx() {
            return new PutD5427dt1RspSectInCtx();
    }
     public class PutD5427dt1RspSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     StsContainer stsContainer = D5427dt1Ctx.this.getStsContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Returns the value of dt1RspContainerName
	 *	@return dt1RspContainerName
	 */
   public char[] getDt1RspContainerName() throws CFException  {              
   		return work.getDt1RspContainerName();
   }

  
	/**
	*  set variable dt1RspContainerName
	*  @param value
	**/
   public void setDt1RspContainerName(char[] value) throws CFException {
      work.setDt1RspContainerName(value);
   } 

	/**
	 *	Returns the value of dt1RspContainerLength
	 *	@return dt1RspContainerLength
	 */
	public int getDt1RspContainerLength() throws CFException {        
   		return work.getDt1RspContainerLength();
	}
	
	/**
	 * 	Update Dt1RspContainerLength with the passed value
	 *	@param number
	 */
	public void setDt1RspContainerLength(int number)  throws CFException{
		work.setDt1RspContainerLength(number);
	}


	public void setDt1RspContainerLength(long number)  throws CFException{
		work.setDt1RspContainerLength((int)number);
	}


	/**
	 *	Test condition "9006" for isStsRespCodePutError()
	 *	@return  Returns true if isStsRespCodePutError() is "9006"
	 */
   public boolean isStsRespCodePutError() throws CFException {
      return stsContainer.getStsFixedArea().isStsRespCodePutError();
   }

	/**
	*  set values "9006"
	*/
   	public void setStsRespCodePutErrorTrue()  throws CFException{  			
    	stsContainer.getStsFixedArea().setStsRespCodePutErrorTrue();
   	}
	/**
	 *	Returns the value of cicsresp2
	 *	@return cicsresp2
	 */
	public int getCicsresp2() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp2();
	}
	
	/**
	 * 	Update Cicsresp2 with the passed value
	 *	@param number
	 */
	public void setCicsresp2(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2(number);
	}


	public void setCicsresp2(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2((int)number);
	}


	/**
	 *	Returns the value of dt1RspContainerLayout
	 *	@return dt1RspContainerLayout
	 */
   public char[] getDt1RspContainerLayout() throws CFException  {              
   		return work.getDt1RspContainerLayout();
   }

  
	/**
	*  set variable dt1RspContainerLayout
	*  @param value
	**/
   public void setDt1RspContainerLayout(char[] value) throws CFException {
      work.setDt1RspContainerLayout(value);
   } 

	/**
	 *	Returns the value of cicsresp
	 *	@return cicsresp
	 */
	public int getCicsresp() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp();
	}
	
	/**
	 * 	Update Cicsresp with the passed value
	 *	@param number
	 */
	public void setCicsresp(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp(number);
	}


	public void setCicsresp(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp((int)number);
	}


	/**
	 *	Returns the value of stsRespCode
	 *	@return stsRespCode
	 */
   public char[] getStsRespCode() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsRespCode();
   }

  
	/**
	*  set variable stsRespCode
	*  @param value
	**/
   public void setStsRespCode(char[] value) throws CFException {
      stsContainer.getStsFixedArea().setStsRespCode(value);
   } 

     /**
	 * 	Update StsRespCode 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsRespCode(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex);
   	
   }
   
   public void setStsRespCode(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsRespCode 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsRespCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsRespCode with another Field
	 *	@param value
	 */
   public void setStsRespCode(Field source) {
      stsContainer.getStsFixedArea().setStsRespCode(source);
   }  
   
     /**
	 * 	Update StsRespCode 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsRespCode(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsRespCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsRespCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 998 for isDt1RspSeeViewForMoreInfo()
	 *	@return  Returns true if isDt1RspSeeViewForMoreInfo() is 998
	 */
   public boolean isDt1RspSeeViewForMoreInfo() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspSeeViewForMoreInfo();
   }

	/**
	*  set values 998
	*/
   	public void setDt1RspSeeViewForMoreInfoTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspSeeViewForMoreInfoTrue();
   	}
	/**
	 *	Returns the value of stsResponseVars
	 *	@return stsResponseVars
	 */   
	 public StsResponseVars getStsResponseVars() {
   	return stsContainer.getStsFixedArea().getStsResponseVars();
   }

   /**
	* 	Update StsResponseVars with the passed value
	*	@param value
	*/
   public void setStsResponseVars(char[] value) throws CFException {
      stsContainer.getStsFixedArea().setStsResponseVars(value);
   }   

     /**
	 * 	Update StsResponseVars 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setStsResponseVars(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsResponseVars 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsResponseVars(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsResponseVars with another Field
	 *	@param value
	 */
   public void setStsResponseVars(Field source) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source);
   }  
   
     /**
	 * 	Update StsResponseVars 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setStsResponseVars(Field source, int sourceIndex,int sourceLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsResponseVars 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsResponseVars(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1RspErrSection
	 *	@return dt1RspErrSection
	 */
   public char[] getDt1RspErrSection() throws CFException  {              
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspErrSection();
   }

  
	/**
	*  set variable dt1RspErrSection
	*  @param value
	**/
   public void setDt1RspErrSection(char[] value) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(value);
   } 

     /**
	 * 	Update Dt1RspErrSection 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1RspErrSection(char[] source, int sourceIndex) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex);
   	
   }
   
   public void setDt1RspErrSection(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspErrSection(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1RspErrSection with another Field
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source);
   }  
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source, int sourceIndex,int sourceLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of stsEibtaskn
	 *	@return stsEibtaskn
	 */
	public long getStsEibtaskn() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsEibtaskn();
	}


	/**
	 *	Returns String value of stsEibtaskn
	 *	@return stsEibtaskn
	 */
	public char[]  getStsEibtasknString() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsEibtasknString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsEibtasknIsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsEibtasknIsNumeric();
	}

	/**
	 * 	Update StsEibtaskn with the passed value
	 *	@param number
	 */
	public void setStsEibtaskn(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(number);
	}
	

	
	/**
	 * 	Update StsEibtaskn with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsEibtaskn(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(value);
	}
	
	/**
	 * 	Update StsEibtaskn with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsEibtasknString(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(value);
	}	

	/**
	 *	Returns the value of currentContainerLength
	 *	@return currentContainerLength
	 */
	public int getCurrentContainerLength() throws CFException {        
   		return standardVars.getCurrentVariables().getCurrentContainerLength();
	}
	
	/**
	 * 	Update CurrentContainerLength with the passed value
	 *	@param number
	 */
	public void setCurrentContainerLength(int number)  throws CFException{
		standardVars.getCurrentVariables().setCurrentContainerLength(number);
	}


	public void setCurrentContainerLength(long number)  throws CFException{
		standardVars.getCurrentVariables().setCurrentContainerLength((int)number);
	}


	/**
	 *	Returns the value of currentContainerLayout
	 *	@return currentContainerLayout
	 */
   public char[] getCurrentContainerLayout() throws CFException  {              
   		return standardVars.getCurrentVariables().getCurrentContainerLayout();
   }

  
	/**
	*  set variable currentContainerLayout
	*  @param value
	**/
   public void setCurrentContainerLayout(char[] value) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerLayout(value);
   } 

     /**
	 * 	Update CurrentContainerLayout 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCurrentContainerLayout(char[] source, int sourceIndex) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex);
   	
   }
   
   public void setCurrentContainerLayout(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CurrentContainerLayout 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerLayout(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CurrentContainerLayout with another Field
	 *	@param value
	 */
   public void setCurrentContainerLayout(Field source) {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source);
   }  
   
     /**
	 * 	Update CurrentContainerLayout 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCurrentContainerLayout(Field source, int sourceIndex,int sourceLen) {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CurrentContainerLayout 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerLayout(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 99 for isDt1RspFail()
	 *	@return  Returns true if isDt1RspFail() is 99
	 */
   public boolean isDt1RspFail() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspFail();
   }

	/**
	*  set values 99
	*/
   	public void setDt1RspFailTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspFailTrue();
   	}
	/**
	 *	Test condition "C" for isStsRespMessageCics()
	 *	@return  Returns true if isStsRespMessageCics() is "C"
	 */
   public boolean isStsRespMessageCics() throws CFException {
      return stsContainer.getStsFixedArea().getStsResponseVars().isStsRespMessageCics();
   }

	/**
	*  set values "C"
	*/
   	public void setStsRespMessageCicsTrue()  throws CFException{  			
    	stsContainer.getStsFixedArea().getStsResponseVars().setStsRespMessageCicsTrue();
   	}
	/**
	 *	Returns the value of currentContainerName
	 *	@return currentContainerName
	 */
   public char[] getCurrentContainerName() throws CFException  {              
   		return standardVars.getCurrentVariables().getCurrentContainerName();
   }

  
	/**
	*  set variable currentContainerName
	*  @param value
	**/
   public void setCurrentContainerName(char[] value) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerName(value);
   } 

     /**
	 * 	Update CurrentContainerName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCurrentContainerName(char[] source, int sourceIndex) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex);
   	
   }
   
   public void setCurrentContainerName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CurrentContainerName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CurrentContainerName with another Field
	 *	@param value
	 */
   public void setCurrentContainerName(Field source) {
      standardVars.getCurrentVariables().setCurrentContainerName(source);
   }  
   
     /**
	 * 	Update CurrentContainerName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCurrentContainerName(Field source, int sourceIndex,int sourceLen) {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CurrentContainerName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of stsCicsresp
	 *	@return stsCicsresp
	 */
	public long getStsCicsresp() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp();
	}


	/**
	 *	Returns String value of stsCicsresp
	 *	@return stsCicsresp
	 */
	public char[]  getStsCicsrespString() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsrespString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsCicsrespIsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsCicsrespIsNumeric();
	}

	/**
	 * 	Update StsCicsresp with the passed value
	 *	@param number
	 */
	public void setStsCicsresp(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(number);
	}
	

	
	/**
	 * 	Update StsCicsresp with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(value);
	}
	
	/**
	 * 	Update StsCicsresp with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsCicsrespString(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(value);
	}	

	/**
	 *	Returns the value of stsCicsresp2
	 *	@return stsCicsresp2
	 */
	public long getStsCicsresp2() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp2();
	}


	/**
	 *	Returns String value of stsCicsresp2
	 *	@return stsCicsresp2
	 */
	public char[]  getStsCicsresp2String() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp2String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsCicsresp2IsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsCicsresp2IsNumeric();
	}

	/**
	 * 	Update StsCicsresp2 with the passed value
	 *	@param number
	 */
	public void setStsCicsresp2(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(number);
	}
	

	
	/**
	 * 	Update StsCicsresp2 with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp2(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(value);
	}
	
	/**
	 * 	Update StsCicsresp2 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp2String(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(value);
	}	

	/**
	 *	Returns the value of dt1RspRespCode
	 *	@return dt1RspRespCode
	 */
	public int getDt1RspRespCode() throws CFException {
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspRespCode();
	}


	/**
	 *	Returns String value of dt1RspRespCode
	 *	@return dt1RspRespCode
	 */
	public char[]  getDt1RspRespCodeString() throws CFException {
	     return String.valueOf(dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspRespCodeString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1RspRespCodeIsNumeric()  throws CFException{
	    return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().dt1RspRespCodeIsNumeric();
	}

	/**
	 * 	Update Dt1RspRespCode with the passed value
	 *	@param number
	 */
	public void setDt1RspRespCode(int number)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(number);
	}
	

	public void setDt1RspRespCode(long number)  throws CFException{
	    dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(number);
	}
	
	
	/**
	 * 	Update Dt1RspRespCode with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1RspRespCode(char[] value)  throws CFException {
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(value);
	}
	
	/**
	 * 	Update Dt1RspRespCode with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1RspRespCodeString(char[] value)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(value);
	}	

	/**
	 *	Returns the value of stsRespAdditionalInfo1
	 *	@return stsRespAdditionalInfo1
	 */
   public char[] getStsRespAdditionalInfo1() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsRespAdditionalInfo1();
   }

  
	/**
	*  set variable stsRespAdditionalInfo1
	*  @param value
	**/
   public void setStsRespAdditionalInfo1(char[] value) throws CFException {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(value);
   } 

     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex);
   	
   }
   
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsRespAdditionalInfo1 with another Field
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source);
   }  
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += standardVars.hashCode();
        str += stsContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public PutD5427dt1RspSectOutCtx clone() {
        PutD5427dt1RspSectOutCtx cloneObj = new PutD5427dt1RspSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public PutD5427dt1RspSectOutCtx getPutD5427dt1RspSectOutCtx() {
            return new PutD5427dt1RspSectOutCtx();
    }
     public class PutD5427dt1StsSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     StsContainer stsContainer = D5427dt1Ctx.this.getStsContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Returns the value of stsContainerName
	 *	@return stsContainerName
	 */
   public char[] getStsContainerName() throws CFException  {              
   		return work.getStsContainerName();
   }

  
	/**
	*  set variable stsContainerName
	*  @param value
	**/
   public void setStsContainerName(char[] value) throws CFException {
      work.setStsContainerName(value);
   } 

	/**
	 *	Returns the value of stsContainerLayout
	 *	@return stsContainerLayout
	 */
   public char[] getStsContainerLayout() throws CFException  {              
   		return work.getStsContainerLayout();
   }

  
	/**
	*  set variable stsContainerLayout
	*  @param value
	**/
   public void setStsContainerLayout(char[] value) throws CFException {
      work.setStsContainerLayout(value);
   } 

	/**
	 *	Returns the value of cicsresp2
	 *	@return cicsresp2
	 */
	public int getCicsresp2() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp2();
	}
	
	/**
	 * 	Update Cicsresp2 with the passed value
	 *	@param number
	 */
	public void setCicsresp2(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2(number);
	}


	public void setCicsresp2(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2((int)number);
	}


	/**
	 *	Returns the value of stsContainer
	 *	@return stsContainer
	 */   
	 public StsContainer getStsContainer() {
   	return stsContainer;
   }


	/**
	 *	Returns the value of cicsresp
	 *	@return cicsresp
	 */
	public int getCicsresp() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp();
	}
	
	/**
	 * 	Update Cicsresp with the passed value
	 *	@param number
	 */
	public void setCicsresp(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp(number);
	}


	public void setCicsresp(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp((int)number);
	}



        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public PutD5427dt1StsSectOutCtx getPutD5427dt1StsSectOutCtx() {
            return new PutD5427dt1StsSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += standardVars.hashCode();
        str += stsContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public PutD5427dt1StsSectInCtx clone() {
        PutD5427dt1StsSectInCtx cloneObj = new PutD5427dt1StsSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public PutD5427dt1StsSectInCtx getPutD5427dt1StsSectInCtx() {
            return new PutD5427dt1StsSectInCtx();
    }
     public class PutD5427dt1StsSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     StsContainer stsContainer = D5427dt1Ctx.this.getStsContainer();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition "9006" for isStsRespCodePutError()
	 *	@return  Returns true if isStsRespCodePutError() is "9006"
	 */
   public boolean isStsRespCodePutError() throws CFException {
      return stsContainer.getStsFixedArea().isStsRespCodePutError();
   }

	/**
	*  set values "9006"
	*/
   	public void setStsRespCodePutErrorTrue()  throws CFException{  			
    	stsContainer.getStsFixedArea().setStsRespCodePutErrorTrue();
   	}
	/**
	 *	Returns the value of stsContainerLayout
	 *	@return stsContainerLayout
	 */
   public char[] getStsContainerLayout() throws CFException  {              
   		return work.getStsContainerLayout();
   }

  
	/**
	*  set variable stsContainerLayout
	*  @param value
	**/
   public void setStsContainerLayout(char[] value) throws CFException {
      work.setStsContainerLayout(value);
   } 

	/**
	 *	Returns the value of cicsresp2
	 *	@return cicsresp2
	 */
	public int getCicsresp2() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp2();
	}
	
	/**
	 * 	Update Cicsresp2 with the passed value
	 *	@param number
	 */
	public void setCicsresp2(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2(number);
	}


	public void setCicsresp2(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2((int)number);
	}


	/**
	 *	Returns the value of cicsresp
	 *	@return cicsresp
	 */
	public int getCicsresp() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp();
	}
	
	/**
	 * 	Update Cicsresp with the passed value
	 *	@param number
	 */
	public void setCicsresp(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp(number);
	}


	public void setCicsresp(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp((int)number);
	}


	/**
	 *	Returns the value of stsRespCode
	 *	@return stsRespCode
	 */
   public char[] getStsRespCode() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsRespCode();
   }

  
	/**
	*  set variable stsRespCode
	*  @param value
	**/
   public void setStsRespCode(char[] value) throws CFException {
      stsContainer.getStsFixedArea().setStsRespCode(value);
   } 

     /**
	 * 	Update StsRespCode 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsRespCode(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex);
   	
   }
   
   public void setStsRespCode(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsRespCode 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsRespCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsRespCode with another Field
	 *	@param value
	 */
   public void setStsRespCode(Field source) {
      stsContainer.getStsFixedArea().setStsRespCode(source);
   }  
   
     /**
	 * 	Update StsRespCode 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsRespCode(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsRespCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsRespCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 998 for isDt1RspSeeViewForMoreInfo()
	 *	@return  Returns true if isDt1RspSeeViewForMoreInfo() is 998
	 */
   public boolean isDt1RspSeeViewForMoreInfo() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspSeeViewForMoreInfo();
   }

	/**
	*  set values 998
	*/
   	public void setDt1RspSeeViewForMoreInfoTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspSeeViewForMoreInfoTrue();
   	}
	/**
	 *	Returns the value of stsResponseVars
	 *	@return stsResponseVars
	 */   
	 public StsResponseVars getStsResponseVars() {
   	return stsContainer.getStsFixedArea().getStsResponseVars();
   }

   /**
	* 	Update StsResponseVars with the passed value
	*	@param value
	*/
   public void setStsResponseVars(char[] value) throws CFException {
      stsContainer.getStsFixedArea().setStsResponseVars(value);
   }   

     /**
	 * 	Update StsResponseVars 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setStsResponseVars(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsResponseVars 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsResponseVars(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsResponseVars with another Field
	 *	@param value
	 */
   public void setStsResponseVars(Field source) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source);
   }  
   
     /**
	 * 	Update StsResponseVars 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setStsResponseVars(Field source, int sourceIndex,int sourceLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsResponseVars 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsResponseVars(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of stsContainerName
	 *	@return stsContainerName
	 */
   public char[] getStsContainerName() throws CFException  {              
   		return work.getStsContainerName();
   }

  
	/**
	*  set variable stsContainerName
	*  @param value
	**/
   public void setStsContainerName(char[] value) throws CFException {
      work.setStsContainerName(value);
   } 

	/**
	 *	Returns the value of dt1RspErrSection
	 *	@return dt1RspErrSection
	 */
   public char[] getDt1RspErrSection() throws CFException  {              
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspErrSection();
   }

  
	/**
	*  set variable dt1RspErrSection
	*  @param value
	**/
   public void setDt1RspErrSection(char[] value) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(value);
   } 

     /**
	 * 	Update Dt1RspErrSection 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1RspErrSection(char[] source, int sourceIndex) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex);
   	
   }
   
   public void setDt1RspErrSection(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspErrSection(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1RspErrSection with another Field
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source);
   }  
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source, int sourceIndex,int sourceLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of stsEibtaskn
	 *	@return stsEibtaskn
	 */
	public long getStsEibtaskn() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsEibtaskn();
	}


	/**
	 *	Returns String value of stsEibtaskn
	 *	@return stsEibtaskn
	 */
	public char[]  getStsEibtasknString() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsEibtasknString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsEibtasknIsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsEibtasknIsNumeric();
	}

	/**
	 * 	Update StsEibtaskn with the passed value
	 *	@param number
	 */
	public void setStsEibtaskn(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(number);
	}
	

	
	/**
	 * 	Update StsEibtaskn with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsEibtaskn(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(value);
	}
	
	/**
	 * 	Update StsEibtaskn with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsEibtasknString(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(value);
	}	

	/**
	 *	Returns the value of currentContainerLength
	 *	@return currentContainerLength
	 */
	public int getCurrentContainerLength() throws CFException {        
   		return standardVars.getCurrentVariables().getCurrentContainerLength();
	}
	
	/**
	 * 	Update CurrentContainerLength with the passed value
	 *	@param number
	 */
	public void setCurrentContainerLength(int number)  throws CFException{
		standardVars.getCurrentVariables().setCurrentContainerLength(number);
	}


	public void setCurrentContainerLength(long number)  throws CFException{
		standardVars.getCurrentVariables().setCurrentContainerLength((int)number);
	}


	/**
	 *	Returns the value of currentContainerLayout
	 *	@return currentContainerLayout
	 */
   public char[] getCurrentContainerLayout() throws CFException  {              
   		return standardVars.getCurrentVariables().getCurrentContainerLayout();
   }

  
	/**
	*  set variable currentContainerLayout
	*  @param value
	**/
   public void setCurrentContainerLayout(char[] value) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerLayout(value);
   } 

     /**
	 * 	Update CurrentContainerLayout 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCurrentContainerLayout(char[] source, int sourceIndex) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex);
   	
   }
   
   public void setCurrentContainerLayout(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CurrentContainerLayout 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerLayout(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CurrentContainerLayout with another Field
	 *	@param value
	 */
   public void setCurrentContainerLayout(Field source) {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source);
   }  
   
     /**
	 * 	Update CurrentContainerLayout 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCurrentContainerLayout(Field source, int sourceIndex,int sourceLen) {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CurrentContainerLayout 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerLayout(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerLayout(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 99 for isDt1RspFail()
	 *	@return  Returns true if isDt1RspFail() is 99
	 */
   public boolean isDt1RspFail() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspFail();
   }

	/**
	*  set values 99
	*/
   	public void setDt1RspFailTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspFailTrue();
   	}
	/**
	 *	Test condition "C" for isStsRespMessageCics()
	 *	@return  Returns true if isStsRespMessageCics() is "C"
	 */
   public boolean isStsRespMessageCics() throws CFException {
      return stsContainer.getStsFixedArea().getStsResponseVars().isStsRespMessageCics();
   }

	/**
	*  set values "C"
	*/
   	public void setStsRespMessageCicsTrue()  throws CFException{  			
    	stsContainer.getStsFixedArea().getStsResponseVars().setStsRespMessageCicsTrue();
   	}
	/**
	 *	Returns the value of currentContainerName
	 *	@return currentContainerName
	 */
   public char[] getCurrentContainerName() throws CFException  {              
   		return standardVars.getCurrentVariables().getCurrentContainerName();
   }

  
	/**
	*  set variable currentContainerName
	*  @param value
	**/
   public void setCurrentContainerName(char[] value) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerName(value);
   } 

     /**
	 * 	Update CurrentContainerName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCurrentContainerName(char[] source, int sourceIndex) throws CFException {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex);
   	
   }
   
   public void setCurrentContainerName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CurrentContainerName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CurrentContainerName with another Field
	 *	@param value
	 */
   public void setCurrentContainerName(Field source) {
      standardVars.getCurrentVariables().setCurrentContainerName(source);
   }  
   
     /**
	 * 	Update CurrentContainerName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCurrentContainerName(Field source, int sourceIndex,int sourceLen) {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CurrentContainerName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCurrentContainerName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getCurrentVariables().setCurrentContainerName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of stsContainerLength
	 *	@return stsContainerLength
	 */
	public int getStsContainerLength() throws CFException {        
   		return work.getStsContainerLength();
	}
	
	/**
	 * 	Update StsContainerLength with the passed value
	 *	@param number
	 */
	public void setStsContainerLength(int number)  throws CFException{
		work.setStsContainerLength(number);
	}


	public void setStsContainerLength(long number)  throws CFException{
		work.setStsContainerLength((int)number);
	}


	/**
	 *	Returns the value of stsCicsresp
	 *	@return stsCicsresp
	 */
	public long getStsCicsresp() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp();
	}


	/**
	 *	Returns String value of stsCicsresp
	 *	@return stsCicsresp
	 */
	public char[]  getStsCicsrespString() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsrespString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsCicsrespIsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsCicsrespIsNumeric();
	}

	/**
	 * 	Update StsCicsresp with the passed value
	 *	@param number
	 */
	public void setStsCicsresp(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(number);
	}
	

	
	/**
	 * 	Update StsCicsresp with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(value);
	}
	
	/**
	 * 	Update StsCicsresp with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsCicsrespString(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(value);
	}	

	/**
	 *	Returns the value of stsCicsresp2
	 *	@return stsCicsresp2
	 */
	public long getStsCicsresp2() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp2();
	}


	/**
	 *	Returns String value of stsCicsresp2
	 *	@return stsCicsresp2
	 */
	public char[]  getStsCicsresp2String() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp2String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsCicsresp2IsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsCicsresp2IsNumeric();
	}

	/**
	 * 	Update StsCicsresp2 with the passed value
	 *	@param number
	 */
	public void setStsCicsresp2(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(number);
	}
	

	
	/**
	 * 	Update StsCicsresp2 with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp2(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(value);
	}
	
	/**
	 * 	Update StsCicsresp2 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp2String(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(value);
	}	

	/**
	 *	Returns the value of dt1RspRespCode
	 *	@return dt1RspRespCode
	 */
	public int getDt1RspRespCode() throws CFException {
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspRespCode();
	}


	/**
	 *	Returns String value of dt1RspRespCode
	 *	@return dt1RspRespCode
	 */
	public char[]  getDt1RspRespCodeString() throws CFException {
	     return String.valueOf(dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspRespCodeString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1RspRespCodeIsNumeric()  throws CFException{
	    return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().dt1RspRespCodeIsNumeric();
	}

	/**
	 * 	Update Dt1RspRespCode with the passed value
	 *	@param number
	 */
	public void setDt1RspRespCode(int number)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(number);
	}
	

	public void setDt1RspRespCode(long number)  throws CFException{
	    dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(number);
	}
	
	
	/**
	 * 	Update Dt1RspRespCode with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1RspRespCode(char[] value)  throws CFException {
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(value);
	}
	
	/**
	 * 	Update Dt1RspRespCode with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1RspRespCodeString(char[] value)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(value);
	}	

	/**
	 *	Returns the value of stsRespAdditionalInfo1
	 *	@return stsRespAdditionalInfo1
	 */
   public char[] getStsRespAdditionalInfo1() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsRespAdditionalInfo1();
   }

  
	/**
	*  set variable stsRespAdditionalInfo1
	*  @param value
	**/
   public void setStsRespAdditionalInfo1(char[] value) throws CFException {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(value);
   } 

     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex);
   	
   }
   
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsRespAdditionalInfo1 with another Field
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source);
   }  
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += standardVars.hashCode();
        str += stsContainer.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public PutD5427dt1StsSectOutCtx clone() {
        PutD5427dt1StsSectOutCtx cloneObj = new PutD5427dt1StsSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public PutD5427dt1StsSectOutCtx getPutD5427dt1StsSectOutCtx() {
            return new PutD5427dt1StsSectOutCtx();
    }
     public class DatabaseErrorSectInCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     StsContainer stsContainer = D5427dt1Ctx.this.getStsContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     DsmCallArea dsmCallArea = D5427dt1Ctx.this.getDsmCallArea();
     Db2ErrMsg db2ErrMsg = D5427dt1Ctx.this.getDb2ErrMsg();

	/**
	 *	Returns the value of db2ErrMsgText
	 *	@return db2ErrMsgText
	 */
   public char[] getDb2ErrMsgText(int index) throws CFException  {              
   		return db2ErrMsg.getDb2ErrMsgText(index);
   }

  
	/**
	*  set variable db2ErrMsgText
	*  @param value
	**/
   public void setDb2ErrMsgText(int index,char[] value) throws CFException {
      db2ErrMsg.setDb2ErrMsgText((index),value);
   } 

	/**
	 *	Returns the value of cicsresp2
	 *	@return cicsresp2
	 */
	public int getCicsresp2() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp2();
	}
	
	/**
	 * 	Update Cicsresp2 with the passed value
	 *	@param number
	 */
	public void setCicsresp2(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2(number);
	}


	public void setCicsresp2(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2((int)number);
	}


	/**
	 *	Returns the value of thisProgram
	 *	@return thisProgram
	 */
   public char[] getThisProgram() throws CFException  {              
   		return work.getThisProgram();
   }

  
	/**
	*  set variable thisProgram
	*  @param value
	**/
   public void setThisProgram(char[] value) throws CFException {
      work.setThisProgram(value);
   } 

	/**
	 *	Returns the value of cicsresp
	 *	@return cicsresp
	 */
	public int getCicsresp() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp();
	}
	
	/**
	 * 	Update Cicsresp with the passed value
	 *	@param number
	 */
	public void setCicsresp(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp(number);
	}


	public void setCicsresp(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp((int)number);
	}


	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of iSub
	 *	@return iSub
	 */
	public short getISub() throws CFException {        
   		return db2ErrMsg.getISub();
	}
	
	/**
	 * 	Update ISub with the passed value
	 *	@param number
	 */
	public void setISub(short number)  throws CFException{
		db2ErrMsg.setISub(number);
	}

	public void setISub(int number)  throws CFException{
		db2ErrMsg.setISub((short)number);
	}

	public void setISub(long number)  throws CFException{
		db2ErrMsg.setISub((short)number);
	}



	/**
	 *	Returns the value of stsResponseVars
	 *	@return stsResponseVars
	 */   
	 public StsResponseVars getStsResponseVars() {
   	return stsContainer.getStsFixedArea().getStsResponseVars();
   }

   /**
	* 	Update StsResponseVars with the passed value
	*	@param value
	*/
   public void setStsResponseVars(char[] value) throws CFException {
      stsContainer.getStsFixedArea().setStsResponseVars(value);
   }   

     /**
	 * 	Update StsResponseVars 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setStsResponseVars(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsResponseVars 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsResponseVars(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsResponseVars with another Field
	 *	@param value
	 */
   public void setStsResponseVars(Field source) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source);
   }  
   
     /**
	 * 	Update StsResponseVars 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setStsResponseVars(Field source, int sourceIndex,int sourceLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsResponseVars 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsResponseVars(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2ErrMsg
	 *	@return db2ErrMsg
	 */   
	 public Db2ErrMsg getDb2ErrMsg() {
   	return db2ErrMsg;
   }


	/**
	 *	Returns the value of dsntiar01
	 *	@return dsntiar01
	 */
   public char[] getDsntiar01() throws CFException  {              
   		return standardVars.getDsntiar01();
   }

  
	/**
	*  set variable dsntiar01
	*  @param value
	**/
   public void setDsntiar01(char[] value) throws CFException {
      standardVars.setDsntiar01(value);
   } 

     /**
	 * 	Update Dsntiar01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsntiar01(char[] source, int sourceIndex) throws CFException {
      standardVars.setDsntiar01(source, sourceIndex);
   	
   }
   
   public void setDsntiar01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDsntiar01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dsntiar01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsntiar01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDsntiar01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dsntiar01 with another Field
	 *	@param value
	 */
   public void setDsntiar01(Field source) {
      standardVars.setDsntiar01(source);
   }  
   
     /**
	 * 	Update Dsntiar01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsntiar01(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDsntiar01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dsntiar01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsntiar01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDsntiar01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2ErrMsgTextLen
	 *	@return db2ErrMsgTextLen
	 */
	public int getDb2ErrMsgTextLen() throws CFException {        
   		return db2ErrMsg.getDb2ErrMsgTextLen();
	}
	
	/**
	 * 	Update Db2ErrMsgTextLen with the passed value
	 *	@param number
	 */
	public void setDb2ErrMsgTextLen(int number)  throws CFException{
		db2ErrMsg.setDb2ErrMsgTextLen(number);
	}


	public void setDb2ErrMsgTextLen(long number)  throws CFException{
		db2ErrMsg.setDb2ErrMsgTextLen((int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of asnInvokingprog
	 *	@return asnInvokingprog
	 */
   public char[] getAsnInvokingprog() throws CFException  {              
   		return standardVars.getAsnVariables().getAsnInvokingprog();
   }

  
	/**
	*  set variable asnInvokingprog
	*  @param value
	**/
   public void setAsnInvokingprog(char[] value) throws CFException {
      standardVars.getAsnVariables().setAsnInvokingprog(value);
   } 

     /**
	 * 	Update AsnInvokingprog 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setAsnInvokingprog(char[] source, int sourceIndex) throws CFException {
      standardVars.getAsnVariables().setAsnInvokingprog(source, sourceIndex);
   	
   }
   
   public void setAsnInvokingprog(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getAsnVariables().setAsnInvokingprog(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update AsnInvokingprog 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setAsnInvokingprog(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getAsnVariables().setAsnInvokingprog(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update AsnInvokingprog with another Field
	 *	@param value
	 */
   public void setAsnInvokingprog(Field source) {
      standardVars.getAsnVariables().setAsnInvokingprog(source);
   }  
   
     /**
	 * 	Update AsnInvokingprog 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setAsnInvokingprog(Field source, int sourceIndex,int sourceLen) {
      standardVars.getAsnVariables().setAsnInvokingprog(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update AsnInvokingprog 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setAsnInvokingprog(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getAsnVariables().setAsnInvokingprog(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public DatabaseErrorSectOutCtx getDatabaseErrorSectOutCtx() {
            return new DatabaseErrorSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += standardVars.hashCode();
        str += stsContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += dsmCallArea.hashCode();
        str += db2ErrMsg.hashCode();
       return str.hashCode();
    }

    public DatabaseErrorSectInCtx clone() {
        DatabaseErrorSectInCtx cloneObj = new DatabaseErrorSectInCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.db2ErrMsg = new Db2ErrMsg();
        cloneObj.db2ErrMsg.set(db2ErrMsg.getClonedField());
        return cloneObj;
    }

    }

    public DatabaseErrorSectInCtx getDatabaseErrorSectInCtx() {
            return new DatabaseErrorSectInCtx();
    }
     public class DatabaseErrorSectOutCtx implements Cloneable {
     Dt1RspContainer dt1RspContainer = D5427dt1Ctx.this.getDt1RspContainer();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     StsContainer stsContainer = D5427dt1Ctx.this.getStsContainer();
     Work work = D5427dt1Ctx.this.getWork();
     Sqlca sqlca = D5427dt1Ctx.this.getSqlca();
     DsmCallArea dsmCallArea = D5427dt1Ctx.this.getDsmCallArea();
     Db2ErrMsg db2ErrMsg = D5427dt1Ctx.this.getDb2ErrMsg();

	/**
	 *	Returns the value of stsDsmSqlErrorMessage
	 *	@return stsDsmSqlErrorMessage
	 */
   public char[] getStsDsmSqlErrorMessage() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMessage();
   }

  
	/**
	*  set variable stsDsmSqlErrorMessage
	*  @param value
	**/
   public void setStsDsmSqlErrorMessage(char[] value) throws CFException {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().setStsDsmSqlErrorMessage(value);
   } 

     /**
	 * 	Update StsDsmSqlErrorMessage 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsDsmSqlErrorMessage(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().setStsDsmSqlErrorMessage(source, sourceIndex);
   	
   }
   
   public void setStsDsmSqlErrorMessage(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().setStsDsmSqlErrorMessage(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsDsmSqlErrorMessage 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsDsmSqlErrorMessage(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().setStsDsmSqlErrorMessage(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsDsmSqlErrorMessage with another Field
	 *	@param value
	 */
   public void setStsDsmSqlErrorMessage(Field source) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().setStsDsmSqlErrorMessage(source);
   }  
   
     /**
	 * 	Update StsDsmSqlErrorMessage 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsDsmSqlErrorMessage(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().setStsDsmSqlErrorMessage(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsDsmSqlErrorMessage 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsDsmSqlErrorMessage(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().setStsDsmSqlErrorMessage(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of stsDsmFrmtdSqlErrMsg
	 *	@return stsDsmFrmtdSqlErrMsg
	 */
   public char[] getStsDsmFrmtdSqlErrMsg(int index) throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmFormattedSqlErrMsg().getStsDsmFrmtdSqlErrMsg(index);
   }

  
	/**
	*  set variable stsDsmFrmtdSqlErrMsg
	*  @param value
	**/
   public void setStsDsmFrmtdSqlErrMsg(int index,char[] value) throws CFException {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmFormattedSqlErrMsg().setStsDsmFrmtdSqlErrMsg((index),value);
   } 

	/**
	 *	Returns the value of cicsresp2
	 *	@return cicsresp2
	 */
	public int getCicsresp2() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp2();
	}
	
	/**
	 * 	Update Cicsresp2 with the passed value
	 *	@param number
	 */
	public void setCicsresp2(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2(number);
	}


	public void setCicsresp2(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp2((int)number);
	}


	/**
	 *	Returns the value of cicsresp
	 *	@return cicsresp
	 */
	public int getCicsresp() throws CFException {        
   		return standardVars.getCurrentVariables().getCicsresp();
	}
	
	/**
	 * 	Update Cicsresp with the passed value
	 *	@param number
	 */
	public void setCicsresp(int number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp(number);
	}


	public void setCicsresp(long number)  throws CFException{
		standardVars.getCurrentVariables().setCicsresp((int)number);
	}


	/**
	 *	Returns the value of stsRespCode
	 *	@return stsRespCode
	 */
   public char[] getStsRespCode() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsRespCode();
   }

  
	/**
	*  set variable stsRespCode
	*  @param value
	**/
   public void setStsRespCode(char[] value) throws CFException {
      stsContainer.getStsFixedArea().setStsRespCode(value);
   } 

     /**
	 * 	Update StsRespCode 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsRespCode(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex);
   	
   }
   
   public void setStsRespCode(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsRespCode 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsRespCode(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsRespCode with another Field
	 *	@param value
	 */
   public void setStsRespCode(Field source) {
      stsContainer.getStsFixedArea().setStsRespCode(source);
   }  
   
     /**
	 * 	Update StsRespCode 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsRespCode(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsRespCode 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsRespCode(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().setStsRespCode(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Resource
	 *	@return db2Resource
	 */
   public char[] getDb2Resource() throws CFException  {              
   		return standardVars.getDb2Resource();
   }

  
	/**
	*  set variable db2Resource
	*  @param value
	**/
   public void setDb2Resource(char[] value) throws CFException {
      standardVars.setDb2Resource(value);
   } 

     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Resource(source, sourceIndex);
   	
   }
   
   public void setDb2Resource(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Resource with another Field
	 *	@param value
	 */
   public void setDb2Resource(Field source) {
      standardVars.setDb2Resource(source);
   }  
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Resource 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Resource(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Resource(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 998 for isDt1RspSeeViewForMoreInfo()
	 *	@return  Returns true if isDt1RspSeeViewForMoreInfo() is 998
	 */
   public boolean isDt1RspSeeViewForMoreInfo() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspSeeViewForMoreInfo();
   }

	/**
	*  set values 998
	*/
   	public void setDt1RspSeeViewForMoreInfoTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspSeeViewForMoreInfoTrue();
   	}
	/**
	 *	Returns the value of iSub
	 *	@return iSub
	 */
	public short getISub() throws CFException {        
   		return db2ErrMsg.getISub();
	}
	
	/**
	 * 	Update ISub with the passed value
	 *	@param number
	 */
	public void setISub(short number)  throws CFException{
		db2ErrMsg.setISub(number);
	}

	public void setISub(int number)  throws CFException{
		db2ErrMsg.setISub((short)number);
	}

	public void setISub(long number)  throws CFException{
		db2ErrMsg.setISub((short)number);
	}



	/**
	 *	Returns the value of stsDsmErrTblAction
	 *	@return stsDsmErrTblAction
	 */
   public char[] getStsDsmErrTblAction() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().getStsDsmErrTblAction();
   }

  
	/**
	*  set variable stsDsmErrTblAction
	*  @param value
	**/
   public void setStsDsmErrTblAction(char[] value) throws CFException {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrTblAction(value);
   } 

     /**
	 * 	Update StsDsmErrTblAction 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsDsmErrTblAction(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrTblAction(source, sourceIndex);
   	
   }
   
   public void setStsDsmErrTblAction(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrTblAction(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsDsmErrTblAction 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsDsmErrTblAction(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrTblAction(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsDsmErrTblAction with another Field
	 *	@param value
	 */
   public void setStsDsmErrTblAction(Field source) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrTblAction(source);
   }  
   
     /**
	 * 	Update StsDsmErrTblAction 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsDsmErrTblAction(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrTblAction(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsDsmErrTblAction 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsDsmErrTblAction(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrTblAction(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1RspErrSection
	 *	@return dt1RspErrSection
	 */
   public char[] getDt1RspErrSection() throws CFException  {              
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspErrSection();
   }

  
	/**
	*  set variable dt1RspErrSection
	*  @param value
	**/
   public void setDt1RspErrSection(char[] value) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(value);
   } 

     /**
	 * 	Update Dt1RspErrSection 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDt1RspErrSection(char[] source, int sourceIndex) throws CFException {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex);
   	
   }
   
   public void setDt1RspErrSection(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspErrSection(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Dt1RspErrSection with another Field
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source);
   }  
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source, int sourceIndex,int sourceLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Dt1RspErrSection 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDt1RspErrSection(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspErrSection(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "9010" for isStsRespCodeDb2Error()
	 *	@return  Returns true if isStsRespCodeDb2Error() is "9010"
	 */
   public boolean isStsRespCodeDb2Error() throws CFException {
      return stsContainer.getStsFixedArea().isStsRespCodeDb2Error();
   }

	/**
	*  set values "9010"
	*/
   	public void setStsRespCodeDb2ErrorTrue()  throws CFException{  			
    	stsContainer.getStsFixedArea().setStsRespCodeDb2ErrorTrue();
   	}
	/**
	 *	Test condition 99 for isDt1RspFail()
	 *	@return  Returns true if isDt1RspFail() is 99
	 */
   public boolean isDt1RspFail() throws CFException {
      return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().isDt1RspFail();
   }

	/**
	*  set values 99
	*/
   	public void setDt1RspFailTrue()  throws CFException{  			
    	dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspFailTrue();
   	}
	/**
	 *	Returns the value of dsmErrClngPgmName
	 *	@return dsmErrClngPgmName
	 */
   public char[] getDsmErrClngPgmName() throws CFException  {              
   		return dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().getDsmErrClngPgmName();
   }

  
	/**
	*  set variable dsmErrClngPgmName
	*  @param value
	**/
   public void setDsmErrClngPgmName(char[] value) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrClngPgmName(value);
   } 

     /**
	 * 	Update DsmErrClngPgmName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmErrClngPgmName(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrClngPgmName(source, sourceIndex);
   	
   }
   
   public void setDsmErrClngPgmName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrClngPgmName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmErrClngPgmName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrClngPgmName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrClngPgmName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmErrClngPgmName with another Field
	 *	@param value
	 */
   public void setDsmErrClngPgmName(Field source) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrClngPgmName(source);
   }  
   
     /**
	 * 	Update DsmErrClngPgmName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmErrClngPgmName(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrClngPgmName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmErrClngPgmName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrClngPgmName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrClngPgmName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Paragraph
	 *	@return db2Paragraph
	 */
   public char[] getDb2Paragraph() throws CFException  {              
   		return standardVars.getDb2Paragraph();
   }

  
	/**
	*  set variable db2Paragraph
	*  @param value
	**/
   public void setDb2Paragraph(char[] value) throws CFException {
      standardVars.setDb2Paragraph(value);
   } 

     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Paragraph(source, sourceIndex);
   	
   }
   
   public void setDb2Paragraph(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Paragraph with another Field
	 *	@param value
	 */
   public void setDb2Paragraph(Field source) {
      standardVars.setDb2Paragraph(source);
   }  
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Paragraph 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Paragraph(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Paragraph(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2Action
	 *	@return db2Action
	 */
   public char[] getDb2Action() throws CFException  {              
   		return standardVars.getDb2Action();
   }

  
	/**
	*  set variable db2Action
	*  @param value
	**/
   public void setDb2Action(char[] value) throws CFException {
      standardVars.setDb2Action(value);
   } 

     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex) throws CFException {
      standardVars.setDb2Action(source, sourceIndex);
   	
   }
   
   public void setDb2Action(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Action 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Action with another Field
	 *	@param value
	 */
   public void setDb2Action(Field source) {
      standardVars.setDb2Action(source);
   }  
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Action 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Action(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.setDb2Action(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of stsCicsresp
	 *	@return stsCicsresp
	 */
	public long getStsCicsresp() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp();
	}


	/**
	 *	Returns String value of stsCicsresp
	 *	@return stsCicsresp
	 */
	public char[]  getStsCicsrespString() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsrespString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsCicsrespIsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsCicsrespIsNumeric();
	}

	/**
	 * 	Update StsCicsresp with the passed value
	 *	@param number
	 */
	public void setStsCicsresp(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(number);
	}
	

	
	/**
	 * 	Update StsCicsresp with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(value);
	}
	
	/**
	 * 	Update StsCicsresp with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsCicsrespString(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp(value);
	}	

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of stsCicsresp2
	 *	@return stsCicsresp2
	 */
	public long getStsCicsresp2() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp2();
	}


	/**
	 *	Returns String value of stsCicsresp2
	 *	@return stsCicsresp2
	 */
	public char[]  getStsCicsresp2String() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsCicsresp2String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsCicsresp2IsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsCicsresp2IsNumeric();
	}

	/**
	 * 	Update StsCicsresp2 with the passed value
	 *	@param number
	 */
	public void setStsCicsresp2(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(number);
	}
	

	
	/**
	 * 	Update StsCicsresp2 with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp2(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(value);
	}
	
	/**
	 * 	Update StsCicsresp2 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsCicsresp2String(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsCicsresp2(value);
	}	

	/**
	 *	Returns the value of asnInvokingprog
	 *	@return asnInvokingprog
	 */
   public char[] getAsnInvokingprog() throws CFException  {              
   		return standardVars.getAsnVariables().getAsnInvokingprog();
   }

  
	/**
	*  set variable asnInvokingprog
	*  @param value
	**/
   public void setAsnInvokingprog(char[] value) throws CFException {
      standardVars.getAsnVariables().setAsnInvokingprog(value);
   } 

     /**
	 * 	Update AsnInvokingprog 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setAsnInvokingprog(char[] source, int sourceIndex) throws CFException {
      standardVars.getAsnVariables().setAsnInvokingprog(source, sourceIndex);
   	
   }
   
   public void setAsnInvokingprog(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      standardVars.getAsnVariables().setAsnInvokingprog(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update AsnInvokingprog 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setAsnInvokingprog(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getAsnVariables().setAsnInvokingprog(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update AsnInvokingprog with another Field
	 *	@param value
	 */
   public void setAsnInvokingprog(Field source) {
      standardVars.getAsnVariables().setAsnInvokingprog(source);
   }  
   
     /**
	 * 	Update AsnInvokingprog 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setAsnInvokingprog(Field source, int sourceIndex,int sourceLen) {
      standardVars.getAsnVariables().setAsnInvokingprog(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update AsnInvokingprog 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setAsnInvokingprog(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      standardVars.getAsnVariables().setAsnInvokingprog(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2ErrMsgText
	 *	@return db2ErrMsgText
	 */
   public char[] getDb2ErrMsgText(int index) throws CFException  {              
   		return db2ErrMsg.getDb2ErrMsgText(index);
   }

  
	/**
	*  set variable db2ErrMsgText
	*  @param value
	**/
   public void setDb2ErrMsgText(int index,char[] value) throws CFException {
      db2ErrMsg.setDb2ErrMsgText((index),value);
   } 

	/**
	 *	Returns the value of stsSqlcode
	 *	@return stsSqlcode
	 */
	public long getStsSqlcode() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsSqlcode();
	}


	/**
	 *	Returns String value of stsSqlcode
	 *	@return stsSqlcode
	 */
	public char[]  getStsSqlcodeString() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsSqlcodeString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsSqlcodeIsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsSqlcodeIsNumeric();
	}

	/**
	 * 	Update StsSqlcode with the passed value
	 *	@param number
	 */
	public void setStsSqlcode(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsSqlcode(number);
	}
	

	
	/**
	 * 	Update StsSqlcode with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsSqlcode(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsSqlcode(value);
	}
	
	/**
	 * 	Update StsSqlcode with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsSqlcodeString(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsSqlcode(value);
	}	

	/**
	 *	Returns the value of thisProgram
	 *	@return thisProgram
	 */
   public char[] getThisProgram() throws CFException  {              
   		return work.getThisProgram();
   }

  
	/**
	*  set variable thisProgram
	*  @param value
	**/
   public void setThisProgram(char[] value) throws CFException {
      work.setThisProgram(value);
   } 

	/**
	 *	Returns the value of stsDsmErrSectnName
	 *	@return stsDsmErrSectnName
	 */
   public char[] getStsDsmErrSectnName() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().getStsDsmErrSectnName();
   }

  
	/**
	*  set variable stsDsmErrSectnName
	*  @param value
	**/
   public void setStsDsmErrSectnName(char[] value) throws CFException {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrSectnName(value);
   } 

     /**
	 * 	Update StsDsmErrSectnName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsDsmErrSectnName(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrSectnName(source, sourceIndex);
   	
   }
   
   public void setStsDsmErrSectnName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrSectnName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsDsmErrSectnName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsDsmErrSectnName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrSectnName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsDsmErrSectnName with another Field
	 *	@param value
	 */
   public void setStsDsmErrSectnName(Field source) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrSectnName(source);
   }  
   
     /**
	 * 	Update StsDsmErrSectnName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsDsmErrSectnName(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrSectnName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsDsmErrSectnName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsDsmErrSectnName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrSectnName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of stsResponseVars
	 *	@return stsResponseVars
	 */   
	 public StsResponseVars getStsResponseVars() {
   	return stsContainer.getStsFixedArea().getStsResponseVars();
   }

   /**
	* 	Update StsResponseVars with the passed value
	*	@param value
	*/
   public void setStsResponseVars(char[] value) throws CFException {
      stsContainer.getStsFixedArea().setStsResponseVars(value);
   }   

     /**
	 * 	Update StsResponseVars 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setStsResponseVars(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsResponseVars 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsResponseVars(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsResponseVars with another Field
	 *	@param value
	 */
   public void setStsResponseVars(Field source) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source);
   }  
   
     /**
	 * 	Update StsResponseVars 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setStsResponseVars(Field source, int sourceIndex,int sourceLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsResponseVars 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsResponseVars(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	stsContainer.getStsFixedArea().setStsResponseVars(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2ErrMsg
	 *	@return db2ErrMsg
	 */   
	 public Db2ErrMsg getDb2ErrMsg() {
   	return db2ErrMsg;
   }


	/**
	 *	Returns the value of stsDsmErrPgmName
	 *	@return stsDsmErrPgmName
	 */
   public char[] getStsDsmErrPgmName() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().getStsDsmErrPgmName();
   }

  
	/**
	*  set variable stsDsmErrPgmName
	*  @param value
	**/
   public void setStsDsmErrPgmName(char[] value) throws CFException {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrPgmName(value);
   } 

     /**
	 * 	Update StsDsmErrPgmName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsDsmErrPgmName(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrPgmName(source, sourceIndex);
   	
   }
   
   public void setStsDsmErrPgmName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrPgmName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsDsmErrPgmName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsDsmErrPgmName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrPgmName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsDsmErrPgmName with another Field
	 *	@param value
	 */
   public void setStsDsmErrPgmName(Field source) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrPgmName(source);
   }  
   
     /**
	 * 	Update StsDsmErrPgmName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsDsmErrPgmName(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrPgmName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsDsmErrPgmName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsDsmErrPgmName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrPgmName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of stsEibtaskn
	 *	@return stsEibtaskn
	 */
	public long getStsEibtaskn() throws CFException {
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsEibtaskn();
	}


	/**
	 *	Returns String value of stsEibtaskn
	 *	@return stsEibtaskn
	 */
	public char[]  getStsEibtasknString() throws CFException {
	     return String.valueOf(stsContainer.getStsFixedArea().getStsResponseVars().getStsEibtasknString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean stsEibtasknIsNumeric()  throws CFException{
	    return stsContainer.getStsFixedArea().getStsResponseVars().stsEibtasknIsNumeric();
	}

	/**
	 * 	Update StsEibtaskn with the passed value
	 *	@param number
	 */
	public void setStsEibtaskn(long number)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(number);
	}
	

	
	/**
	 * 	Update StsEibtaskn with the passed value
	 *	@param value (String or char[])
	 */
	public void setStsEibtaskn(char[] value)  throws CFException {
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(value);
	}
	
	/**
	 * 	Update StsEibtaskn with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setStsEibtasknString(char[] value)  throws CFException{
		stsContainer.getStsFixedArea().getStsResponseVars().setStsEibtaskn(value);
	}	

	/**
	 *	Returns the value of dt1RspSqlCode
	 *	@return dt1RspSqlCode
	 */
	public long getDt1RspSqlCode() throws CFException {
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspSqlCode();
	}


	/**
	 *	Returns String value of dt1RspSqlCode
	 *	@return dt1RspSqlCode
	 */
	public char[]  getDt1RspSqlCodeString() throws CFException {
	     return String.valueOf(dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspSqlCodeString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1RspSqlCodeIsNumeric()  throws CFException{
	    return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().dt1RspSqlCodeIsNumeric();
	}

	/**
	 * 	Update Dt1RspSqlCode with the passed value
	 *	@param number
	 */
	public void setDt1RspSqlCode(long number)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspSqlCode(number);
	}
	

	
	/**
	 * 	Update Dt1RspSqlCode with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1RspSqlCode(char[] value)  throws CFException {
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspSqlCode(value);
	}
	
	/**
	 * 	Update Dt1RspSqlCode with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1RspSqlCodeString(char[] value)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspSqlCode(value);
	}	

	/**
	 *	Test condition "D" for isStsRespMessageDb2()
	 *	@return  Returns true if isStsRespMessageDb2() is "D"
	 */
   public boolean isStsRespMessageDb2() throws CFException {
      return stsContainer.getStsFixedArea().getStsResponseVars().isStsRespMessageDb2();
   }

	/**
	*  set values "D"
	*/
   	public void setStsRespMessageDb2True()  throws CFException{  			
    	stsContainer.getStsFixedArea().getStsResponseVars().setStsRespMessageDb2True();
   	}
	/**
	 *	Returns the value of db2ErrMsgTextLen
	 *	@return db2ErrMsgTextLen
	 */
	public int getDb2ErrMsgTextLen() throws CFException {        
   		return db2ErrMsg.getDb2ErrMsgTextLen();
	}
	
	/**
	 * 	Update Db2ErrMsgTextLen with the passed value
	 *	@param number
	 */
	public void setDb2ErrMsgTextLen(int number)  throws CFException{
		db2ErrMsg.setDb2ErrMsgTextLen(number);
	}


	public void setDb2ErrMsgTextLen(long number)  throws CFException{
		db2ErrMsg.setDb2ErrMsgTextLen((int)number);
	}


	/**
	 *	Returns the value of stsDsmErrTblName
	 *	@return stsDsmErrTblName
	 */
   public char[] getStsDsmErrTblName() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().getStsDsmErrTblName();
   }

  
	/**
	*  set variable stsDsmErrTblName
	*  @param value
	**/
   public void setStsDsmErrTblName(char[] value) throws CFException {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrTblName(value);
   } 

     /**
	 * 	Update StsDsmErrTblName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsDsmErrTblName(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrTblName(source, sourceIndex);
   	
   }
   
   public void setStsDsmErrTblName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrTblName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsDsmErrTblName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsDsmErrTblName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrTblName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsDsmErrTblName with another Field
	 *	@param value
	 */
   public void setStsDsmErrTblName(Field source) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrTblName(source);
   }  
   
     /**
	 * 	Update StsDsmErrTblName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsDsmErrTblName(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrTblName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsDsmErrTblName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsDsmErrTblName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrTblName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dt1RspRespCode
	 *	@return dt1RspRespCode
	 */
	public int getDt1RspRespCode() throws CFException {
   		return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspRespCode();
	}


	/**
	 *	Returns String value of dt1RspRespCode
	 *	@return dt1RspRespCode
	 */
	public char[]  getDt1RspRespCodeString() throws CFException {
	     return String.valueOf(dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().getDt1RspRespCodeString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dt1RspRespCodeIsNumeric()  throws CFException{
	    return dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().dt1RspRespCodeIsNumeric();
	}

	/**
	 * 	Update Dt1RspRespCode with the passed value
	 *	@param number
	 */
	public void setDt1RspRespCode(int number)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(number);
	}
	

	public void setDt1RspRespCode(long number)  throws CFException{
	    dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(number);
	}
	
	
	/**
	 * 	Update Dt1RspRespCode with the passed value
	 *	@param value (String or char[])
	 */
	public void setDt1RspRespCode(char[] value)  throws CFException {
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(value);
	}
	
	/**
	 * 	Update Dt1RspRespCode with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDt1RspRespCodeString(char[] value)  throws CFException{
		dt1RspContainer.getDt1RspFixedArea().getDt1RspLegacyResponseData().setDt1RspRespCode(value);
	}	

	/**
	 *	Returns the value of stsDsmErrClngPgmName
	 *	@return stsDsmErrClngPgmName
	 */
   public char[] getStsDsmErrClngPgmName() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().getStsDsmErrClngPgmName();
   }

  
	/**
	*  set variable stsDsmErrClngPgmName
	*  @param value
	**/
   public void setStsDsmErrClngPgmName(char[] value) throws CFException {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrClngPgmName(value);
   } 

     /**
	 * 	Update StsDsmErrClngPgmName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsDsmErrClngPgmName(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrClngPgmName(source, sourceIndex);
   	
   }
   
   public void setStsDsmErrClngPgmName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrClngPgmName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsDsmErrClngPgmName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsDsmErrClngPgmName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrClngPgmName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsDsmErrClngPgmName with another Field
	 *	@param value
	 */
   public void setStsDsmErrClngPgmName(Field source) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrClngPgmName(source);
   }  
   
     /**
	 * 	Update StsDsmErrClngPgmName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsDsmErrClngPgmName(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrClngPgmName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsDsmErrClngPgmName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsDsmErrClngPgmName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsDsmCommonArea().getStsDsmSqlErrorMsgArea().setStsDsmErrClngPgmName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of stsRespAdditionalInfo1
	 *	@return stsRespAdditionalInfo1
	 */
   public char[] getStsRespAdditionalInfo1() throws CFException  {              
   		return stsContainer.getStsFixedArea().getStsResponseVars().getStsRespAdditionalInfo1();
   }

  
	/**
	*  set variable stsRespAdditionalInfo1
	*  @param value
	**/
   public void setStsRespAdditionalInfo1(char[] value) throws CFException {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(value);
   } 

     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex) throws CFException {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex);
   	
   }
   
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update StsRespAdditionalInfo1 with another Field
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source);
   }  
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source, int sourceIndex,int sourceLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update StsRespAdditionalInfo1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setStsRespAdditionalInfo1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      stsContainer.getStsFixedArea().getStsResponseVars().setStsRespAdditionalInfo1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dt1RspContainer.hashCode();
        str += standardVars.hashCode();
        str += stsContainer.hashCode();
        str += work.hashCode();
        str += sqlca.hashCode();
        str += dsmCallArea.hashCode();
        str += db2ErrMsg.hashCode();
       return str.hashCode();
    }

    public DatabaseErrorSectOutCtx clone() {
        DatabaseErrorSectOutCtx cloneObj = new DatabaseErrorSectOutCtx();
        cloneObj.dt1RspContainer = new Dt1RspContainer();
        cloneObj.dt1RspContainer.set(dt1RspContainer.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.stsContainer = new StsContainer();
        cloneObj.stsContainer.set(stsContainer.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.db2ErrMsg = new Db2ErrMsg();
        cloneObj.db2ErrMsg.set(db2ErrMsg.getClonedField());
        return cloneObj;
    }

    }

    public DatabaseErrorSectOutCtx getDatabaseErrorSectOutCtx() {
            return new DatabaseErrorSectOutCtx();
    }
     public class ConvertYyddd2IsoSectInCtx implements Cloneable {
     IPicstr iPicstr = D5427dt1Ctx.this.getIPicstr();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     OPicstr oPicstr = D5427dt1Ctx.this.getOPicstr();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Returns the value of fmtYyyyMmDd
	 *	@return fmtYyyyMmDd
	 */
   public char[] getFmtYyyyMmDd() throws CFException  {              
   		return work.getFmtYyyyMmDd();
   }

  
	/**
	*  set variable fmtYyyyMmDd
	*  @param value
	**/
   public void setFmtYyyyMmDd(char[] value) throws CFException {
      work.setFmtYyyyMmDd(value);
   } 

	/**
	 *	Returns the value of fmtYyddd
	 *	@return fmtYyddd
	 */
   public char[] getFmtYyddd() throws CFException  {              
   		return work.getFmtYyddd();
   }

  
	/**
	*  set variable fmtYyddd
	*  @param value
	**/
   public void setFmtYyddd(char[] value) throws CFException {
      work.setFmtYyddd(value);
   } 

	/**
	 *	Returns the value of defaultDateDb2
	 *	@return defaultDateDb2
	 */
   public char[] getDefaultDateDb2() throws CFException  {              
   		return work.getDefaultDateDb2();
   }

  
	/**
	*  set variable defaultDateDb2
	*  @param value
	**/
   public void setDefaultDateDb2(char[] value) throws CFException {
      work.setDefaultDateDb2(value);
   } 


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ConvertYyddd2IsoSectOutCtx getConvertYyddd2IsoSectOutCtx() {
            return new ConvertYyddd2IsoSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += iPicstr.hashCode();
        str += standardVars.hashCode();
        str += oPicstr.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ConvertYyddd2IsoSectInCtx clone() {
        ConvertYyddd2IsoSectInCtx cloneObj = new ConvertYyddd2IsoSectInCtx();
        cloneObj.iPicstr = new IPicstr();
        cloneObj.iPicstr.set(iPicstr.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.oPicstr = new OPicstr();
        cloneObj.oPicstr.set(oPicstr.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ConvertYyddd2IsoSectInCtx getConvertYyddd2IsoSectInCtx() {
            return new ConvertYyddd2IsoSectInCtx();
    }
     public class ConvertYyddd2IsoSectOutCtx implements Cloneable {
     IPicstr iPicstr = D5427dt1Ctx.this.getIPicstr();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     OPicstr oPicstr = D5427dt1Ctx.this.getOPicstr();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Returns the value of fmtYyyyMmDd
	 *	@return fmtYyyyMmDd
	 */
   public char[] getFmtYyyyMmDd() throws CFException  {              
   		return work.getFmtYyyyMmDd();
   }

  
	/**
	*  set variable fmtYyyyMmDd
	*  @param value
	**/
   public void setFmtYyyyMmDd(char[] value) throws CFException {
      work.setFmtYyyyMmDd(value);
   } 

	/**
	 *	Returns the value of oPicstrString
	 *	@return oPicstrString
	 */
   public char[] getOPicstrString() throws CFException  {              
   		return oPicstr.getOPicstrString();
   }

  
	/**
	*  set variable oPicstrString
	*  @param value
	**/
   public void setOPicstrString(char[] value) throws CFException {
      oPicstr.setOPicstrString(value);
   } 

     /**
	 * 	Update OPicstrString 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setOPicstrString(char[] source, int sourceIndex) throws CFException {
      oPicstr.setOPicstrString(source, sourceIndex);
   	
   }
   
   public void setOPicstrString(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      oPicstr.setOPicstrString(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update OPicstrString 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setOPicstrString(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      oPicstr.setOPicstrString(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update OPicstrString with another Field
	 *	@param value
	 */
   public void setOPicstrString(Field source) {
      oPicstr.setOPicstrString(source);
   }  
   
     /**
	 * 	Update OPicstrString 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setOPicstrString(Field source, int sourceIndex,int sourceLen) {
      oPicstr.setOPicstrString(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update OPicstrString 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setOPicstrString(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      oPicstr.setOPicstrString(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of iPicstrLength
	 *	@return iPicstrLength
	 */
	public short getIPicstrLength() throws CFException {        
   		return iPicstr.getIPicstrLength();
	}
	
	/**
	 * 	Update IPicstrLength with the passed value
	 *	@param number
	 */
	public void setIPicstrLength(short number)  throws CFException{
		iPicstr.setIPicstrLength(number);
	}

	public void setIPicstrLength(int number)  throws CFException{
		iPicstr.setIPicstrLength((short)number);
	}

	public void setIPicstrLength(long number)  throws CFException{
		iPicstr.setIPicstrLength((short)number);
	}



	/**
	 *	Returns the value of iPicstrString
	 *	@return iPicstrString
	 */
   public char[] getIPicstrString() throws CFException  {              
   		return iPicstr.getIPicstrString();
   }

  
	/**
	*  set variable iPicstrString
	*  @param value
	**/
   public void setIPicstrString(char[] value) throws CFException {
      iPicstr.setIPicstrString(value);
   } 

     /**
	 * 	Update IPicstrString 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setIPicstrString(char[] source, int sourceIndex) throws CFException {
      iPicstr.setIPicstrString(source, sourceIndex);
   	
   }
   
   public void setIPicstrString(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      iPicstr.setIPicstrString(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update IPicstrString 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setIPicstrString(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      iPicstr.setIPicstrString(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update IPicstrString with another Field
	 *	@param value
	 */
   public void setIPicstrString(Field source) {
      iPicstr.setIPicstrString(source);
   }  
   
     /**
	 * 	Update IPicstrString 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setIPicstrString(Field source, int sourceIndex,int sourceLen) {
      iPicstr.setIPicstrString(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update IPicstrString 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setIPicstrString(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      iPicstr.setIPicstrString(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fmtYyddd
	 *	@return fmtYyddd
	 */
   public char[] getFmtYyddd() throws CFException  {              
   		return work.getFmtYyddd();
   }

  
	/**
	*  set variable fmtYyddd
	*  @param value
	**/
   public void setFmtYyddd(char[] value) throws CFException {
      work.setFmtYyddd(value);
   } 

	/**
	 *	Returns the value of fc
	 *	@return fc
	 */   
	 public Fc getFc() {
   	return standardVars.getFc();
   }

   /**
	* 	Update Fc with the passed value
	*	@param value
	*/
   public void setFc(char[] value) throws CFException {
      standardVars.setFc(value);
   }   

     /**
	 * 	Update Fc 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setFc(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	standardVars.setFc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Fc 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	standardVars.setFc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Fc with another Field
	 *	@param value
	 */
   public void setFc(Field source) {
   	standardVars.setFc(source);
   }  
   
     /**
	 * 	Update Fc 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setFc(Field source, int sourceIndex,int sourceLen) {
   	standardVars.setFc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Fc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	standardVars.setFc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of oPicstrLength
	 *	@return oPicstrLength
	 */
	public short getOPicstrLength() throws CFException {        
   		return oPicstr.getOPicstrLength();
	}
	
	/**
	 * 	Update OPicstrLength with the passed value
	 *	@param number
	 */
	public void setOPicstrLength(short number)  throws CFException{
		oPicstr.setOPicstrLength(number);
	}

	public void setOPicstrLength(int number)  throws CFException{
		oPicstr.setOPicstrLength((short)number);
	}

	public void setOPicstrLength(long number)  throws CFException{
		oPicstr.setOPicstrLength((short)number);
	}



	/**
	 *	Returns the value of defaultDateDb2
	 *	@return defaultDateDb2
	 */
   public char[] getDefaultDateDb2() throws CFException  {              
   		return work.getDefaultDateDb2();
   }

  
	/**
	*  set variable defaultDateDb2
	*  @param value
	**/
   public void setDefaultDateDb2(char[] value) throws CFException {
      work.setDefaultDateDb2(value);
   } 

	/**
	 *	Returns the value of defaultDate
	 *	@return defaultDate
	 */
   public char[] getDefaultDate() throws CFException  {              
   		return work.getDefaultDate();
   }

  
	/**
	*  set variable defaultDate
	*  @param value
	**/
   public void setDefaultDate(char[] value) throws CFException {
      work.setDefaultDate(value);
   } 


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += iPicstr.hashCode();
        str += standardVars.hashCode();
        str += oPicstr.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ConvertYyddd2IsoSectOutCtx clone() {
        ConvertYyddd2IsoSectOutCtx cloneObj = new ConvertYyddd2IsoSectOutCtx();
        cloneObj.iPicstr = new IPicstr();
        cloneObj.iPicstr.set(iPicstr.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.oPicstr = new OPicstr();
        cloneObj.oPicstr.set(oPicstr.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ConvertYyddd2IsoSectOutCtx getConvertYyddd2IsoSectOutCtx() {
            return new ConvertYyddd2IsoSectOutCtx();
    }
     public class ConvertDateSectInCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     LilianGroup lilianGroup = D5427dt1Ctx.this.getLilianGroup();
     OPicstr oPicstr = D5427dt1Ctx.this.getOPicstr();
     FormattedDateGroup formattedDateGroup = D5427dt1Ctx.this.getFormattedDateGroup();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Test condition new byte[] {(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00} for isCee000()
	 *	@return  Returns true if isCee000() is new byte[] {(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00}
	 */
   public boolean isCee000() throws CFException {
      return standardVars.getFc().isCee000();
   }

	/**
	*  set values new byte[] {(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00}
	*/
   	public void setCee000True()  throws CFException{  			
    	standardVars.getFc().setCee000True();
   	}
	/**
	 *	Returns the value of ceedate
	 *	@return ceedate
	 */
   public char[] getCeedate() throws CFException  {              
   		return work.getCeedate();
   }

  
	/**
	*  set variable ceedate
	*  @param value
	**/
   public void setCeedate(char[] value) throws CFException {
      work.setCeedate(value);
   } 

	/**
	 *	Returns the value of lilianGroup
	 *	@return lilianGroup
	 */   
	 public LilianGroup getLilianGroup() {
   	return lilianGroup;
   }


	/**
	 *	Returns the value of oPicstr
	 *	@return oPicstr
	 */   
	 public OPicstr getOPicstr() {
   	return oPicstr;
   }


	/**
	 *	Returns the value of formattedDateGroup
	 *	@return formattedDateGroup
	 */   
	 public FormattedDateGroup getFormattedDateGroup() {
   	return formattedDateGroup;
   }


	/**
	 *	Returns the value of defaultDate
	 *	@return defaultDate
	 */
   public char[] getDefaultDate() throws CFException  {              
   		return work.getDefaultDate();
   }

  
	/**
	*  set variable defaultDate
	*  @param value
	**/
   public void setDefaultDate(char[] value) throws CFException {
      work.setDefaultDate(value);
   } 


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public ConvertDateSectOutCtx getConvertDateSectOutCtx() {
            return new ConvertDateSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += lilianGroup.hashCode();
        str += oPicstr.hashCode();
        str += formattedDateGroup.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ConvertDateSectInCtx clone() {
        ConvertDateSectInCtx cloneObj = new ConvertDateSectInCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.lilianGroup = new LilianGroup();
        cloneObj.lilianGroup.set(lilianGroup.getClonedField());
        cloneObj.oPicstr = new OPicstr();
        cloneObj.oPicstr.set(oPicstr.getClonedField());
        cloneObj.formattedDateGroup = new FormattedDateGroup();
        cloneObj.formattedDateGroup.set(formattedDateGroup.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ConvertDateSectInCtx getConvertDateSectInCtx() {
            return new ConvertDateSectInCtx();
    }
     public class ConvertDateSectOutCtx implements Cloneable {
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     LilianGroup lilianGroup = D5427dt1Ctx.this.getLilianGroup();
     OPicstr oPicstr = D5427dt1Ctx.this.getOPicstr();
     FormattedDateGroup formattedDateGroup = D5427dt1Ctx.this.getFormattedDateGroup();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Returns the value of lilianGroup
	 *	@return lilianGroup
	 */   
	 public LilianGroup getLilianGroup() {
   	return lilianGroup;
   }


	/**
	 *	Returns the value of oPicstr
	 *	@return oPicstr
	 */   
	 public OPicstr getOPicstr() {
   	return oPicstr;
   }


	/**
	 *	Returns the value of formattedDate
	 *	@return formattedDate
	 */
   public char[] getFormattedDate() throws CFException  {              
   		return formattedDateGroup.getFormattedDate();
   }

  
	/**
	*  set variable formattedDate
	*  @param value
	**/
   public void setFormattedDate(char[] value) throws CFException {
      formattedDateGroup.setFormattedDate(value);
   } 

     /**
	 * 	Update FormattedDate 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFormattedDate(char[] source, int sourceIndex) throws CFException {
      formattedDateGroup.setFormattedDate(source, sourceIndex);
   	
   }
   
   public void setFormattedDate(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      formattedDateGroup.setFormattedDate(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FormattedDate 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFormattedDate(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      formattedDateGroup.setFormattedDate(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FormattedDate with another Field
	 *	@param value
	 */
   public void setFormattedDate(Field source) {
      formattedDateGroup.setFormattedDate(source);
   }  
   
     /**
	 * 	Update FormattedDate 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFormattedDate(Field source, int sourceIndex,int sourceLen) {
      formattedDateGroup.setFormattedDate(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FormattedDate 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFormattedDate(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      formattedDateGroup.setFormattedDate(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of formattedDateGroup
	 *	@return formattedDateGroup
	 */   
	 public FormattedDateGroup getFormattedDateGroup() {
   	return formattedDateGroup;
   }


	/**
	 *	Returns the value of defaultDate
	 *	@return defaultDate
	 */
   public char[] getDefaultDate() throws CFException  {              
   		return work.getDefaultDate();
   }

  
	/**
	*  set variable defaultDate
	*  @param value
	**/
   public void setDefaultDate(char[] value) throws CFException {
      work.setDefaultDate(value);
   } 


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += standardVars.hashCode();
        str += lilianGroup.hashCode();
        str += oPicstr.hashCode();
        str += formattedDateGroup.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public ConvertDateSectOutCtx clone() {
        ConvertDateSectOutCtx cloneObj = new ConvertDateSectOutCtx();
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.lilianGroup = new LilianGroup();
        cloneObj.lilianGroup.set(lilianGroup.getClonedField());
        cloneObj.oPicstr = new OPicstr();
        cloneObj.oPicstr.set(oPicstr.getClonedField());
        cloneObj.formattedDateGroup = new FormattedDateGroup();
        cloneObj.formattedDateGroup.set(formattedDateGroup.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public ConvertDateSectOutCtx getConvertDateSectOutCtx() {
            return new ConvertDateSectOutCtx();
    }
     public class CallCeedaysSectInCtx implements Cloneable {
     IPicstr iPicstr = D5427dt1Ctx.this.getIPicstr();
     Chrdate chrdate = D5427dt1Ctx.this.getChrdate();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     LilianGroup lilianGroup = D5427dt1Ctx.this.getLilianGroup();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Returns the value of ceedays
	 *	@return ceedays
	 */
   public char[] getCeedays() throws CFException  {              
   		return work.getCeedays();
   }

  
	/**
	*  set variable ceedays
	*  @param value
	**/
   public void setCeedays(char[] value) throws CFException {
      work.setCeedays(value);
   } 

	/**
	 *	Returns the value of iPicstr
	 *	@return iPicstr
	 */   
	 public IPicstr getIPicstr() {
   	return iPicstr;
   }


	/**
	 *	Returns the value of chrdate
	 *	@return chrdate
	 */   
	 public Chrdate getChrdate() {
   	return chrdate;
   }


	/**
	 *	Returns the value of lilianGroup
	 *	@return lilianGroup
	 */   
	 public LilianGroup getLilianGroup() {
   	return lilianGroup;
   }


	/**
	 *	Returns the value of fc
	 *	@return fc
	 */   
	 public Fc getFc() {
   	return standardVars.getFc();
   }

   /**
	* 	Update Fc with the passed value
	*	@param value
	*/
   public void setFc(char[] value) throws CFException {
      standardVars.setFc(value);
   }   

     /**
	 * 	Update Fc 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setFc(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	standardVars.setFc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Fc 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	standardVars.setFc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Fc with another Field
	 *	@param value
	 */
   public void setFc(Field source) {
   	standardVars.setFc(source);
   }  
   
     /**
	 * 	Update Fc 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setFc(Field source, int sourceIndex,int sourceLen) {
   	standardVars.setFc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Fc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	standardVars.setFc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }

        public CallCeedaysSectOutCtx getCallCeedaysSectOutCtx() {
            return new CallCeedaysSectOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += iPicstr.hashCode();
        str += chrdate.hashCode();
        str += standardVars.hashCode();
        str += lilianGroup.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public CallCeedaysSectInCtx clone() {
        CallCeedaysSectInCtx cloneObj = new CallCeedaysSectInCtx();
        cloneObj.iPicstr = new IPicstr();
        cloneObj.iPicstr.set(iPicstr.getClonedField());
        cloneObj.chrdate = new Chrdate();
        cloneObj.chrdate.set(chrdate.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.lilianGroup = new LilianGroup();
        cloneObj.lilianGroup.set(lilianGroup.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public CallCeedaysSectInCtx getCallCeedaysSectInCtx() {
            return new CallCeedaysSectInCtx();
    }
     public class CallCeedaysSectOutCtx implements Cloneable {
     IPicstr iPicstr = D5427dt1Ctx.this.getIPicstr();
     Chrdate chrdate = D5427dt1Ctx.this.getChrdate();
     StandardVars standardVars = D5427dt1Ctx.this.getStandardVars();
     LilianGroup lilianGroup = D5427dt1Ctx.this.getLilianGroup();
     Work work = D5427dt1Ctx.this.getWork();

	/**
	 *	Returns the value of iPicstr
	 *	@return iPicstr
	 */   
	 public IPicstr getIPicstr() {
   	return iPicstr;
   }


	/**
	 *	Returns the value of chrdate
	 *	@return chrdate
	 */   
	 public Chrdate getChrdate() {
   	return chrdate;
   }


	/**
	 *	Returns the value of lilianGroup
	 *	@return lilianGroup
	 */   
	 public LilianGroup getLilianGroup() {
   	return lilianGroup;
   }


	/**
	 *	Returns the value of fc
	 *	@return fc
	 */   
	 public Fc getFc() {
   	return standardVars.getFc();
   }

   /**
	* 	Update Fc with the passed value
	*	@param value
	*/
   public void setFc(char[] value) throws CFException {
      standardVars.setFc(value);
   }   

     /**
	 * 	Update Fc 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setFc(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	standardVars.setFc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Fc 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	standardVars.setFc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Fc with another Field
	 *	@param value
	 */
   public void setFc(Field source) {
   	standardVars.setFc(source);
   }  
   
     /**
	 * 	Update Fc 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setFc(Field source, int sourceIndex,int sourceLen) {
   	standardVars.setFc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Fc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	standardVars.setFc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D5427dt1Ctx getD5427dt1Ctx() {
            return D5427dt1Ctx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += iPicstr.hashCode();
        str += chrdate.hashCode();
        str += standardVars.hashCode();
        str += lilianGroup.hashCode();
        str += work.hashCode();
       return str.hashCode();
    }

    public CallCeedaysSectOutCtx clone() {
        CallCeedaysSectOutCtx cloneObj = new CallCeedaysSectOutCtx();
        cloneObj.iPicstr = new IPicstr();
        cloneObj.iPicstr.set(iPicstr.getClonedField());
        cloneObj.chrdate = new Chrdate();
        cloneObj.chrdate.set(chrdate.getClonedField());
        cloneObj.standardVars = new StandardVars();
        cloneObj.standardVars.set(standardVars.getClonedField());
        cloneObj.lilianGroup = new LilianGroup();
        cloneObj.lilianGroup.set(lilianGroup.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        return cloneObj;
    }

    }

    public CallCeedaysSectOutCtx getCallCeedaysSectOutCtx() {
            return new CallCeedaysSectOutCtx();
    }
}
