package com.cloudframe.app.dto.d529351u;

import com.cloudframe.app.dto.GlobalExecutorCtx;
import com.cloudframe.app.dto.ProgramContext;
import com.cloudframe.app.dto.Context;
import com.cloudframe.app.data.Field;
import java.math.BigDecimal;
import java.util.List;
import com.cloudframe.app.exception.CFException;

 
 
 
 
 
 
 
import java.sql.ResultSet;
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 


@Context
public class D529351uCtx implements ProgramContext, Cloneable {
    GlobalExecutorCtx globalCtx;

    HvHostVariablesSvcmain hvHostVariablesSvcmain;
    HvHostVariablesCombcr hvHostVariablesCombcr;
    HvHostVariablesCsplnv hvHostVariablesCsplnv;
    DclfeSpiRuleFrCondPos dclfeSpiRuleFrCondPos;
    HvHostVariablesCsicdo hvHostVariablesCsicdo;
    HvHostVariablesCsfrto hvHostVariablesCsfrto;
    TestVariables testVariables;
    DsmCallArea dsmCallArea;
    DclfeSpiRuleIpa dclfeSpiRuleIpa;
    Sqlca sqlca;
    DclfeSpiRuleIcd dclfeSpiRuleIcd;
    DclfeSpiRuleCpeFlg dclfeSpiRuleCpeFlg;
    Work work;
    LstIcdKey lstIcdKey;
    WorkArea workArea;
    DclfeSpiRuleCaus dclfeSpiRuleCaus;
    Vyspi51uCallArea vyspi51uCallArea;
    DclfeSpiPlnVar dclfeSpiPlnVar;
    DclfeSpiRuleFrToSvc dclfeSpiRuleFrToSvc;
    DclfeSpiRuleProvTyp dclfeSpiRuleProvTyp;

    int hv2fIndex;
    int hv2tIndex;
    int hv2cIndex;
    int hv2mIndex;
    int hv3dIndex;
    int hv15Index;
    int hv3bIndex;
    int hv2dIndex;
    int hv05Index;
    int hv09Index;
    int hv2uIndex;
    int hv01Index;
    int hv10Index;
    int hv3aIndex;
    int hv2jIndex;
    int hv13Index;
    int hv08Index;
    int hv07Index;
    int hv2sIndex;
    int hv2qIndex;
    int hv2oIndex;
    int hv2bIndex;
    int hv2nIndex;
    int hv2eIndex;
    int hv2aIndex;
    int hv3fIndex;
    int hv2lIndex;
    int hv2hIndex;
    int hv3cIndex;
    int hv2pIndex;
    int hv06Index;
    int hv14Index;
    int hv2gIndex;
    int hv0aIndex;
    int hv2rIndex;
    int hv2kIndex;
    int hv12Index;
    int hv3eIndex;
    int hv04Index;
    int hv2iIndex;
    int hv11Index;

    private int rc;

    public GlobalExecutorCtx getGlobalCtx() {
            return globalCtx;
    }

    public void setGlobalCtx(GlobalExecutorCtx globalCtx) {
        this.globalCtx = globalCtx;
    }

    public int getRc() {
        return this.rc;
    }

    public void setRc(int rc) {
        this.rc = rc;
    }


    ResultSet csplnvResultSet;

    public ResultSet getCsplnvResultSet() {
        return this.csplnvResultSet;
    }

    public void setCsplnvResultSet(ResultSet csplnvResultSet) {
        this.csplnvResultSet = csplnvResultSet;
    }
    ResultSet csfrtoResultSet;

    public ResultSet getCsfrtoResultSet() {
        return this.csfrtoResultSet;
    }

    public void setCsfrtoResultSet(ResultSet csfrtoResultSet) {
        this.csfrtoResultSet = csfrtoResultSet;
    }
    ResultSet csptypResultSet;

    public ResultSet getCsptypResultSet() {
        return this.csptypResultSet;
    }

    public void setCsptypResultSet(ResultSet csptypResultSet) {
        this.csptypResultSet = csptypResultSet;
    }
    ResultSet csicdResultSet;

    public ResultSet getCsicdResultSet() {
        return this.csicdResultSet;
    }

    public void setCsicdResultSet(ResultSet csicdResultSet) {
        this.csicdResultSet = csicdResultSet;
    }
    ResultSet csfcndResultSet;

    public ResultSet getCsfcndResultSet() {
        return this.csfcndResultSet;
    }

    public void setCsfcndResultSet(ResultSet csfcndResultSet) {
        this.csfcndResultSet = csfcndResultSet;
    }
    ResultSet svcMainCsrResultSet;

    public ResultSet getSvcMainCsrResultSet() {
        return this.svcMainCsrResultSet;
    }

    public void setSvcMainCsrResultSet(ResultSet svcMainCsrResultSet) {
        this.svcMainCsrResultSet = svcMainCsrResultSet;
    }
    ResultSet combCurResultSet;

    public ResultSet getCombCurResultSet() {
        return this.combCurResultSet;
    }

    public void setCombCurResultSet(ResultSet combCurResultSet) {
        this.combCurResultSet = combCurResultSet;
    }
    ResultSet csicdFirst9999SpiResultSet;

    public ResultSet getCsicdFirst9999SpiResultSet() {
        return this.csicdFirst9999SpiResultSet;
    }

    public void setCsicdFirst9999SpiResultSet(ResultSet csicdFirst9999SpiResultSet) {
        this.csicdFirst9999SpiResultSet = csicdFirst9999SpiResultSet;
    }

    boolean programEnded = false;

    public boolean isProgramEnded() {
        return this.programEnded;
    }

    public void setProgramEnded(boolean programEnded) {
        this.programEnded = programEnded;
    }


    public HvHostVariablesSvcmain getHvHostVariablesSvcmain() {
        if (hvHostVariablesSvcmain == null) {
            hvHostVariablesSvcmain = new HvHostVariablesSvcmain();
        }

        return hvHostVariablesSvcmain;
    }

    public void setHvHostVariablesSvcmain(HvHostVariablesSvcmain hvHostVariablesSvcmain) {
        this.hvHostVariablesSvcmain = hvHostVariablesSvcmain;
    }
    public HvHostVariablesCombcr getHvHostVariablesCombcr() {
        if (hvHostVariablesCombcr == null) {
            hvHostVariablesCombcr = new HvHostVariablesCombcr();
        }

        return hvHostVariablesCombcr;
    }

    public void setHvHostVariablesCombcr(HvHostVariablesCombcr hvHostVariablesCombcr) {
        this.hvHostVariablesCombcr = hvHostVariablesCombcr;
    }
    public HvHostVariablesCsplnv getHvHostVariablesCsplnv() {
        if (hvHostVariablesCsplnv == null) {
            hvHostVariablesCsplnv = new HvHostVariablesCsplnv();
        }

        return hvHostVariablesCsplnv;
    }

    public void setHvHostVariablesCsplnv(HvHostVariablesCsplnv hvHostVariablesCsplnv) {
        this.hvHostVariablesCsplnv = hvHostVariablesCsplnv;
    }
    public DclfeSpiRuleFrCondPos getDclfeSpiRuleFrCondPos() {
        if (dclfeSpiRuleFrCondPos == null) {
            dclfeSpiRuleFrCondPos = new DclfeSpiRuleFrCondPos();
        }

        return dclfeSpiRuleFrCondPos;
    }

    public void setDclfeSpiRuleFrCondPos(DclfeSpiRuleFrCondPos dclfeSpiRuleFrCondPos) {
        this.dclfeSpiRuleFrCondPos = dclfeSpiRuleFrCondPos;
    }
    public HvHostVariablesCsicdo getHvHostVariablesCsicdo() {
        if (hvHostVariablesCsicdo == null) {
            hvHostVariablesCsicdo = new HvHostVariablesCsicdo();
        }

        return hvHostVariablesCsicdo;
    }

    public void setHvHostVariablesCsicdo(HvHostVariablesCsicdo hvHostVariablesCsicdo) {
        this.hvHostVariablesCsicdo = hvHostVariablesCsicdo;
    }
    public HvHostVariablesCsfrto getHvHostVariablesCsfrto() {
        if (hvHostVariablesCsfrto == null) {
            hvHostVariablesCsfrto = new HvHostVariablesCsfrto();
        }

        return hvHostVariablesCsfrto;
    }

    public void setHvHostVariablesCsfrto(HvHostVariablesCsfrto hvHostVariablesCsfrto) {
        this.hvHostVariablesCsfrto = hvHostVariablesCsfrto;
    }
    public TestVariables getTestVariables() {
        if (testVariables == null) {
            testVariables = new TestVariables();
        }

        return testVariables;
    }

    public void setTestVariables(TestVariables testVariables) {
        this.testVariables = testVariables;
    }
    public DsmCallArea getDsmCallArea() {
        if (dsmCallArea == null) {
            dsmCallArea = new DsmCallArea();
        }

        return dsmCallArea;
    }

    public void setDsmCallArea(DsmCallArea dsmCallArea) {
        this.dsmCallArea = dsmCallArea;
    }
    public DclfeSpiRuleIpa getDclfeSpiRuleIpa() {
        if (dclfeSpiRuleIpa == null) {
            dclfeSpiRuleIpa = new DclfeSpiRuleIpa();
        }

        return dclfeSpiRuleIpa;
    }

    public void setDclfeSpiRuleIpa(DclfeSpiRuleIpa dclfeSpiRuleIpa) {
        this.dclfeSpiRuleIpa = dclfeSpiRuleIpa;
    }
    public Sqlca getSqlca() {
        if (sqlca == null) {
            sqlca = new Sqlca();
        }

        return sqlca;
    }

    public void setSqlca(Sqlca sqlca) {
        this.sqlca = sqlca;
    }
    public DclfeSpiRuleIcd getDclfeSpiRuleIcd() {
        if (dclfeSpiRuleIcd == null) {
            dclfeSpiRuleIcd = new DclfeSpiRuleIcd();
        }

        return dclfeSpiRuleIcd;
    }

    public void setDclfeSpiRuleIcd(DclfeSpiRuleIcd dclfeSpiRuleIcd) {
        this.dclfeSpiRuleIcd = dclfeSpiRuleIcd;
    }
    public DclfeSpiRuleCpeFlg getDclfeSpiRuleCpeFlg() {
        if (dclfeSpiRuleCpeFlg == null) {
            dclfeSpiRuleCpeFlg = new DclfeSpiRuleCpeFlg();
        }

        return dclfeSpiRuleCpeFlg;
    }

    public void setDclfeSpiRuleCpeFlg(DclfeSpiRuleCpeFlg dclfeSpiRuleCpeFlg) {
        this.dclfeSpiRuleCpeFlg = dclfeSpiRuleCpeFlg;
    }
    public Work getWork() {
        if (work == null) {
            work = new Work();
        }

        return work;
    }

    public void setWork(Work work) {
        this.work = work;
    }
    public LstIcdKey getLstIcdKey() {
        if (lstIcdKey == null) {
            lstIcdKey = new LstIcdKey();
        }

        return lstIcdKey;
    }

    public void setLstIcdKey(LstIcdKey lstIcdKey) {
        this.lstIcdKey = lstIcdKey;
    }
    public WorkArea getWorkArea() {
        if (workArea == null) {
            workArea = new WorkArea();
        }

        return workArea;
    }

    public void setWorkArea(WorkArea workArea) {
        this.workArea = workArea;
    }
    public DclfeSpiRuleCaus getDclfeSpiRuleCaus() {
        if (dclfeSpiRuleCaus == null) {
            dclfeSpiRuleCaus = new DclfeSpiRuleCaus();
        }

        return dclfeSpiRuleCaus;
    }

    public void setDclfeSpiRuleCaus(DclfeSpiRuleCaus dclfeSpiRuleCaus) {
        this.dclfeSpiRuleCaus = dclfeSpiRuleCaus;
    }
    public Vyspi51uCallArea getVyspi51uCallArea() {
        if (vyspi51uCallArea == null) {
            vyspi51uCallArea = new Vyspi51uCallArea();
        }

        return vyspi51uCallArea;
    }

    public void setVyspi51uCallArea(Vyspi51uCallArea vyspi51uCallArea) {
        this.vyspi51uCallArea = vyspi51uCallArea;
    }
    public DclfeSpiPlnVar getDclfeSpiPlnVar() {
        if (dclfeSpiPlnVar == null) {
            dclfeSpiPlnVar = new DclfeSpiPlnVar();
        }

        return dclfeSpiPlnVar;
    }

    public void setDclfeSpiPlnVar(DclfeSpiPlnVar dclfeSpiPlnVar) {
        this.dclfeSpiPlnVar = dclfeSpiPlnVar;
    }
    public DclfeSpiRuleFrToSvc getDclfeSpiRuleFrToSvc() {
        if (dclfeSpiRuleFrToSvc == null) {
            dclfeSpiRuleFrToSvc = new DclfeSpiRuleFrToSvc();
        }

        return dclfeSpiRuleFrToSvc;
    }

    public void setDclfeSpiRuleFrToSvc(DclfeSpiRuleFrToSvc dclfeSpiRuleFrToSvc) {
        this.dclfeSpiRuleFrToSvc = dclfeSpiRuleFrToSvc;
    }
    public DclfeSpiRuleProvTyp getDclfeSpiRuleProvTyp() {
        if (dclfeSpiRuleProvTyp == null) {
            dclfeSpiRuleProvTyp = new DclfeSpiRuleProvTyp();
        }

        return dclfeSpiRuleProvTyp;
    }

    public void setDclfeSpiRuleProvTyp(DclfeSpiRuleProvTyp dclfeSpiRuleProvTyp) {
        this.dclfeSpiRuleProvTyp = dclfeSpiRuleProvTyp;
    }

    public int getHv2fIndex() {
        return hv2fIndex;
    }

    public void setHv2fIndex(int hv2fIndex) {
        this.hv2fIndex = hv2fIndex;
    }
    public int getHv2tIndex() {
        return hv2tIndex;
    }

    public void setHv2tIndex(int hv2tIndex) {
        this.hv2tIndex = hv2tIndex;
    }
    public int getHv2cIndex() {
        return hv2cIndex;
    }

    public void setHv2cIndex(int hv2cIndex) {
        this.hv2cIndex = hv2cIndex;
    }
    public int getHv2mIndex() {
        return hv2mIndex;
    }

    public void setHv2mIndex(int hv2mIndex) {
        this.hv2mIndex = hv2mIndex;
    }
    public int getHv3dIndex() {
        return hv3dIndex;
    }

    public void setHv3dIndex(int hv3dIndex) {
        this.hv3dIndex = hv3dIndex;
    }
    public int getHv15Index() {
        return hv15Index;
    }

    public void setHv15Index(int hv15Index) {
        this.hv15Index = hv15Index;
    }
    public int getHv3bIndex() {
        return hv3bIndex;
    }

    public void setHv3bIndex(int hv3bIndex) {
        this.hv3bIndex = hv3bIndex;
    }
    public int getHv2dIndex() {
        return hv2dIndex;
    }

    public void setHv2dIndex(int hv2dIndex) {
        this.hv2dIndex = hv2dIndex;
    }
    public int getHv05Index() {
        return hv05Index;
    }

    public void setHv05Index(int hv05Index) {
        this.hv05Index = hv05Index;
    }
    public int getHv09Index() {
        return hv09Index;
    }

    public void setHv09Index(int hv09Index) {
        this.hv09Index = hv09Index;
    }
    public int getHv2uIndex() {
        return hv2uIndex;
    }

    public void setHv2uIndex(int hv2uIndex) {
        this.hv2uIndex = hv2uIndex;
    }
    public int getHv01Index() {
        return hv01Index;
    }

    public void setHv01Index(int hv01Index) {
        this.hv01Index = hv01Index;
    }
    public int getHv10Index() {
        return hv10Index;
    }

    public void setHv10Index(int hv10Index) {
        this.hv10Index = hv10Index;
    }
    public int getHv3aIndex() {
        return hv3aIndex;
    }

    public void setHv3aIndex(int hv3aIndex) {
        this.hv3aIndex = hv3aIndex;
    }
    public int getHv2jIndex() {
        return hv2jIndex;
    }

    public void setHv2jIndex(int hv2jIndex) {
        this.hv2jIndex = hv2jIndex;
    }
    public int getHv13Index() {
        return hv13Index;
    }

    public void setHv13Index(int hv13Index) {
        this.hv13Index = hv13Index;
    }
    public int getHv08Index() {
        return hv08Index;
    }

    public void setHv08Index(int hv08Index) {
        this.hv08Index = hv08Index;
    }
    public int getHv07Index() {
        return hv07Index;
    }

    public void setHv07Index(int hv07Index) {
        this.hv07Index = hv07Index;
    }
    public int getHv2sIndex() {
        return hv2sIndex;
    }

    public void setHv2sIndex(int hv2sIndex) {
        this.hv2sIndex = hv2sIndex;
    }
    public int getHv2qIndex() {
        return hv2qIndex;
    }

    public void setHv2qIndex(int hv2qIndex) {
        this.hv2qIndex = hv2qIndex;
    }
    public int getHv2oIndex() {
        return hv2oIndex;
    }

    public void setHv2oIndex(int hv2oIndex) {
        this.hv2oIndex = hv2oIndex;
    }
    public int getHv2bIndex() {
        return hv2bIndex;
    }

    public void setHv2bIndex(int hv2bIndex) {
        this.hv2bIndex = hv2bIndex;
    }
    public int getHv2nIndex() {
        return hv2nIndex;
    }

    public void setHv2nIndex(int hv2nIndex) {
        this.hv2nIndex = hv2nIndex;
    }
    public int getHv2eIndex() {
        return hv2eIndex;
    }

    public void setHv2eIndex(int hv2eIndex) {
        this.hv2eIndex = hv2eIndex;
    }
    public int getHv2aIndex() {
        return hv2aIndex;
    }

    public void setHv2aIndex(int hv2aIndex) {
        this.hv2aIndex = hv2aIndex;
    }
    public int getHv3fIndex() {
        return hv3fIndex;
    }

    public void setHv3fIndex(int hv3fIndex) {
        this.hv3fIndex = hv3fIndex;
    }
    public int getHv2lIndex() {
        return hv2lIndex;
    }

    public void setHv2lIndex(int hv2lIndex) {
        this.hv2lIndex = hv2lIndex;
    }
    public int getHv2hIndex() {
        return hv2hIndex;
    }

    public void setHv2hIndex(int hv2hIndex) {
        this.hv2hIndex = hv2hIndex;
    }
    public int getHv3cIndex() {
        return hv3cIndex;
    }

    public void setHv3cIndex(int hv3cIndex) {
        this.hv3cIndex = hv3cIndex;
    }
    public int getHv2pIndex() {
        return hv2pIndex;
    }

    public void setHv2pIndex(int hv2pIndex) {
        this.hv2pIndex = hv2pIndex;
    }
    public int getHv06Index() {
        return hv06Index;
    }

    public void setHv06Index(int hv06Index) {
        this.hv06Index = hv06Index;
    }
    public int getHv14Index() {
        return hv14Index;
    }

    public void setHv14Index(int hv14Index) {
        this.hv14Index = hv14Index;
    }
    public int getHv2gIndex() {
        return hv2gIndex;
    }

    public void setHv2gIndex(int hv2gIndex) {
        this.hv2gIndex = hv2gIndex;
    }
    public int getHv0aIndex() {
        return hv0aIndex;
    }

    public void setHv0aIndex(int hv0aIndex) {
        this.hv0aIndex = hv0aIndex;
    }
    public int getHv2rIndex() {
        return hv2rIndex;
    }

    public void setHv2rIndex(int hv2rIndex) {
        this.hv2rIndex = hv2rIndex;
    }
    public int getHv2kIndex() {
        return hv2kIndex;
    }

    public void setHv2kIndex(int hv2kIndex) {
        this.hv2kIndex = hv2kIndex;
    }
    public int getHv12Index() {
        return hv12Index;
    }

    public void setHv12Index(int hv12Index) {
        this.hv12Index = hv12Index;
    }
    public int getHv3eIndex() {
        return hv3eIndex;
    }

    public void setHv3eIndex(int hv3eIndex) {
        this.hv3eIndex = hv3eIndex;
    }
    public int getHv04Index() {
        return hv04Index;
    }

    public void setHv04Index(int hv04Index) {
        this.hv04Index = hv04Index;
    }
    public int getHv2iIndex() {
        return hv2iIndex;
    }

    public void setHv2iIndex(int hv2iIndex) {
        this.hv2iIndex = hv2iIndex;
    }
    public int getHv11Index() {
        return hv11Index;
    }

    public void setHv11Index(int hv11Index) {
        this.hv11Index = hv11Index;
    }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += hvHostVariablesSvcmain.hashCode();
        str += hvHostVariablesCombcr.hashCode();
        str += hvHostVariablesCsplnv.hashCode();
        str += dclfeSpiRuleFrCondPos.hashCode();
        str += hvHostVariablesCsicdo.hashCode();
        str += hvHostVariablesCsfrto.hashCode();
        str += testVariables.hashCode();
        str += dsmCallArea.hashCode();
        str += dclfeSpiRuleIpa.hashCode();
        str += sqlca.hashCode();
        str += dclfeSpiRuleIcd.hashCode();
        str += dclfeSpiRuleCpeFlg.hashCode();
        str += work.hashCode();
        str += lstIcdKey.hashCode();
        str += workArea.hashCode();
        str += dclfeSpiRuleCaus.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dclfeSpiPlnVar.hashCode();
        str += dclfeSpiRuleFrToSvc.hashCode();
        str += dclfeSpiRuleProvTyp.hashCode();
       return str.hashCode();
    }

    public D529351uCtx clone() {
        D529351uCtx cloneObj = new D529351uCtx();
        cloneObj.hvHostVariablesSvcmain = new HvHostVariablesSvcmain();
        cloneObj.hvHostVariablesSvcmain.set(hvHostVariablesSvcmain.getClonedField());
        cloneObj.hvHostVariablesCombcr = new HvHostVariablesCombcr();
        cloneObj.hvHostVariablesCombcr.set(hvHostVariablesCombcr.getClonedField());
        cloneObj.hvHostVariablesCsplnv = new HvHostVariablesCsplnv();
        cloneObj.hvHostVariablesCsplnv.set(hvHostVariablesCsplnv.getClonedField());
        cloneObj.dclfeSpiRuleFrCondPos = new DclfeSpiRuleFrCondPos();
        cloneObj.dclfeSpiRuleFrCondPos.set(dclfeSpiRuleFrCondPos.getClonedField());
        cloneObj.hvHostVariablesCsicdo = new HvHostVariablesCsicdo();
        cloneObj.hvHostVariablesCsicdo.set(hvHostVariablesCsicdo.getClonedField());
        cloneObj.hvHostVariablesCsfrto = new HvHostVariablesCsfrto();
        cloneObj.hvHostVariablesCsfrto.set(hvHostVariablesCsfrto.getClonedField());
        cloneObj.testVariables = new TestVariables();
        cloneObj.testVariables.set(testVariables.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dclfeSpiRuleIpa = new DclfeSpiRuleIpa();
        cloneObj.dclfeSpiRuleIpa.set(dclfeSpiRuleIpa.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.dclfeSpiRuleIcd = new DclfeSpiRuleIcd();
        cloneObj.dclfeSpiRuleIcd.set(dclfeSpiRuleIcd.getClonedField());
        cloneObj.dclfeSpiRuleCpeFlg = new DclfeSpiRuleCpeFlg();
        cloneObj.dclfeSpiRuleCpeFlg.set(dclfeSpiRuleCpeFlg.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.lstIcdKey = new LstIcdKey();
        cloneObj.lstIcdKey.set(lstIcdKey.getClonedField());
        cloneObj.workArea = new WorkArea();
        cloneObj.workArea.set(workArea.getClonedField());
        cloneObj.dclfeSpiRuleCaus = new DclfeSpiRuleCaus();
        cloneObj.dclfeSpiRuleCaus.set(dclfeSpiRuleCaus.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dclfeSpiPlnVar = new DclfeSpiPlnVar();
        cloneObj.dclfeSpiPlnVar.set(dclfeSpiPlnVar.getClonedField());
        cloneObj.dclfeSpiRuleFrToSvc = new DclfeSpiRuleFrToSvc();
        cloneObj.dclfeSpiRuleFrToSvc.set(dclfeSpiRuleFrToSvc.getClonedField());
        cloneObj.dclfeSpiRuleProvTyp = new DclfeSpiRuleProvTyp();
        cloneObj.dclfeSpiRuleProvTyp.set(dclfeSpiRuleProvTyp.getClonedField());
        return cloneObj;
    }

/**
 * Program method contexts
 *
 */
     public class ProcessInCtx implements Cloneable {
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
       return str.hashCode();
    }

    public ProcessInCtx clone() {
        ProcessInCtx cloneObj = new ProcessInCtx();
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        return cloneObj;
    }

    }

    public ProcessInCtx getProcessInCtx() {
            return new ProcessInCtx();
    }
     public class InitializeInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     LstIcdKey lstIcdKey = D529351uCtx.this.getLstIcdKey();
     DclfeSpiRuleFrCondPos dclfeSpiRuleFrCondPos = D529351uCtx.this.getDclfeSpiRuleFrCondPos();
     DclfeSpiRuleCaus dclfeSpiRuleCaus = D529351uCtx.this.getDclfeSpiRuleCaus();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DclfeSpiPlnVar dclfeSpiPlnVar = D529351uCtx.this.getDclfeSpiPlnVar();
     DclfeSpiRuleIpa dclfeSpiRuleIpa = D529351uCtx.this.getDclfeSpiRuleIpa();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     DclfeSpiRuleFrToSvc dclfeSpiRuleFrToSvc = D529351uCtx.this.getDclfeSpiRuleFrToSvc();
     DclfeSpiRuleProvTyp dclfeSpiRuleProvTyp = D529351uCtx.this.getDclfeSpiRuleProvTyp();
     DclfeSpiRuleIcd dclfeSpiRuleIcd = D529351uCtx.this.getDclfeSpiRuleIcd();
     DclfeSpiRuleCpeFlg dclfeSpiRuleCpeFlg = D529351uCtx.this.getDclfeSpiRuleCpeFlg();

	/**
	 *	Returns the value of d51uKeyFeSpi
	 *	@return d51uKeyFeSpi
	 */
   public char[] getD51uKeyFeSpi() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyFeSpi();
   }

  
	/**
	*  set variable d51uKeyFeSpi
	*  @param value
	**/
   public void setD51uKeyFeSpi(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(value);
   } 

     /**
	 * 	Update D51uKeyFeSpi 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyFeSpi(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex);
   	
   }
   
   public void setD51uKeyFeSpi(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyFeSpi(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyFeSpi with another Field
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source);
   }  
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uKeyPolicy
	 *	@return d51uKeyPolicy
	 */
   public char[] getD51uKeyPolicy() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyPolicy();
   }

  
	/**
	*  set variable d51uKeyPolicy
	*  @param value
	**/
   public void setD51uKeyPolicy(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(value);
   } 

     /**
	 * 	Update D51uKeyPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyPolicy(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source, sourceIndex);
   	
   }
   
   public void setD51uKeyPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyPolicy with another Field
	 *	@param value
	 */
   public void setD51uKeyPolicy(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source);
   }  
   
     /**
	 * 	Update D51uKeyPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyPolicy(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uKeyStatus
	 *	@return d51uKeyStatus
	 */
   public char[] getD51uKeyStatus() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyStatus();
   }

  
	/**
	*  set variable d51uKeyStatus
	*  @param value
	**/
   public void setD51uKeyStatus(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(value);
   } 

     /**
	 * 	Update D51uKeyStatus 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyStatus(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex);
   	
   }
   
   public void setD51uKeyStatus(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyStatus 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyStatus(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyStatus with another Field
	 *	@param value
	 */
   public void setD51uKeyStatus(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source);
   }  
   
     /**
	 * 	Update D51uKeyStatus 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyStatus(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyStatus 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyStatus(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsmFuncCd01
	 *	@return dsmFuncCd01
	 */
	public int getDsmFuncCd01() throws CFException {
   		return dsmCallArea.getDsmCommonArea().getDsmFuncCd01();
	}


	/**
	 *	Returns String value of dsmFuncCd01
	 *	@return dsmFuncCd01
	 */
	public char[]  getDsmFuncCd01String() throws CFException {
	     return String.valueOf(dsmCallArea.getDsmCommonArea().getDsmFuncCd01String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dsmFuncCd01IsNumeric()  throws CFException{
	    return dsmCallArea.getDsmCommonArea().dsmFuncCd01IsNumeric();
	}

	/**
	 * 	Update DsmFuncCd01 with the passed value
	 *	@param number
	 */
	public void setDsmFuncCd01(int number)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmFuncCd01(number);
	}
	

	public void setDsmFuncCd01(long number)  throws CFException{
	    dsmCallArea.getDsmCommonArea().setDsmFuncCd01(number);
	}
	
	
	/**
	 * 	Update DsmFuncCd01 with the passed value
	 *	@param value (String or char[])
	 */
	public void setDsmFuncCd01(char[] value)  throws CFException {
		dsmCallArea.getDsmCommonArea().setDsmFuncCd01(value);
	}
	
	/**
	 * 	Update DsmFuncCd01 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDsmFuncCd01String(char[] value)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmFuncCd01(value);
	}	

	/**
	 *	Returns the value of d51uKeyPlan
	 *	@return d51uKeyPlan
	 */
   public char[] getD51uKeyPlan() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyPlan();
   }

  
	/**
	*  set variable d51uKeyPlan
	*  @param value
	**/
   public void setD51uKeyPlan(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(value);
   } 

     /**
	 * 	Update D51uKeyPlan 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyPlan(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source, sourceIndex);
   	
   }
   
   public void setD51uKeyPlan(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyPlan 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyPlan(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyPlan with another Field
	 *	@param value
	 */
   public void setD51uKeyPlan(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source);
   }  
   
     /**
	 * 	Update D51uKeyPlan 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyPlan(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyPlan 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyPlan(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public InitializeOutCtx getInitializeOutCtx() {
            return new InitializeOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += lstIcdKey.hashCode();
        str += dclfeSpiRuleFrCondPos.hashCode();
        str += dclfeSpiRuleCaus.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dclfeSpiPlnVar.hashCode();
        str += dclfeSpiRuleIpa.hashCode();
        str += dsmCallArea.hashCode();
        str += dclfeSpiRuleFrToSvc.hashCode();
        str += dclfeSpiRuleProvTyp.hashCode();
        str += dclfeSpiRuleIcd.hashCode();
        str += dclfeSpiRuleCpeFlg.hashCode();
       return str.hashCode();
    }

    public InitializeInCtx clone() {
        InitializeInCtx cloneObj = new InitializeInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.lstIcdKey = new LstIcdKey();
        cloneObj.lstIcdKey.set(lstIcdKey.getClonedField());
        cloneObj.dclfeSpiRuleFrCondPos = new DclfeSpiRuleFrCondPos();
        cloneObj.dclfeSpiRuleFrCondPos.set(dclfeSpiRuleFrCondPos.getClonedField());
        cloneObj.dclfeSpiRuleCaus = new DclfeSpiRuleCaus();
        cloneObj.dclfeSpiRuleCaus.set(dclfeSpiRuleCaus.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dclfeSpiPlnVar = new DclfeSpiPlnVar();
        cloneObj.dclfeSpiPlnVar.set(dclfeSpiPlnVar.getClonedField());
        cloneObj.dclfeSpiRuleIpa = new DclfeSpiRuleIpa();
        cloneObj.dclfeSpiRuleIpa.set(dclfeSpiRuleIpa.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dclfeSpiRuleFrToSvc = new DclfeSpiRuleFrToSvc();
        cloneObj.dclfeSpiRuleFrToSvc.set(dclfeSpiRuleFrToSvc.getClonedField());
        cloneObj.dclfeSpiRuleProvTyp = new DclfeSpiRuleProvTyp();
        cloneObj.dclfeSpiRuleProvTyp.set(dclfeSpiRuleProvTyp.getClonedField());
        cloneObj.dclfeSpiRuleIcd = new DclfeSpiRuleIcd();
        cloneObj.dclfeSpiRuleIcd.set(dclfeSpiRuleIcd.getClonedField());
        cloneObj.dclfeSpiRuleCpeFlg = new DclfeSpiRuleCpeFlg();
        cloneObj.dclfeSpiRuleCpeFlg.set(dclfeSpiRuleCpeFlg.getClonedField());
        return cloneObj;
    }

    }

    public InitializeInCtx getInitializeInCtx() {
            return new InitializeInCtx();
    }
     public class InitializeOutCtx implements Cloneable {
     DclfeSpiRuleFrCondPos dclfeSpiRuleFrCondPos = D529351uCtx.this.getDclfeSpiRuleFrCondPos();
     DclfeSpiRuleIpa dclfeSpiRuleIpa = D529351uCtx.this.getDclfeSpiRuleIpa();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();
     DclfeSpiRuleIcd dclfeSpiRuleIcd = D529351uCtx.this.getDclfeSpiRuleIcd();
     DclfeSpiRuleCpeFlg dclfeSpiRuleCpeFlg = D529351uCtx.this.getDclfeSpiRuleCpeFlg();
     Work work = D529351uCtx.this.getWork();
     LstIcdKey lstIcdKey = D529351uCtx.this.getLstIcdKey();
     DclfeSpiRuleCaus dclfeSpiRuleCaus = D529351uCtx.this.getDclfeSpiRuleCaus();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DclfeSpiPlnVar dclfeSpiPlnVar = D529351uCtx.this.getDclfeSpiPlnVar();
     DclfeSpiRuleFrToSvc dclfeSpiRuleFrToSvc = D529351uCtx.this.getDclfeSpiRuleFrToSvc();
     DclfeSpiRuleProvTyp dclfeSpiRuleProvTyp = D529351uCtx.this.getDclfeSpiRuleProvTyp();

	/**
	 *	Returns the value of plnvPlnNbr
	 *	@return plnvPlnNbr
	 */
   public char[] getPlnvPlnNbr() throws CFException  {              
   		return dclfeSpiPlnVar.getPlnvPlnNbr();
   }

  
	/**
	*  set variable plnvPlnNbr
	*  @param value
	**/
   public void setPlnvPlnNbr(char[] value) throws CFException {
      dclfeSpiPlnVar.setPlnvPlnNbr(value);
   } 

     /**
	 * 	Update PlnvPlnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPlnvPlnNbr(char[] source, int sourceIndex) throws CFException {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex);
   	
   }
   
   public void setPlnvPlnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PlnvPlnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPlnvPlnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PlnvPlnNbr with another Field
	 *	@param value
	 */
   public void setPlnvPlnNbr(Field source) {
      dclfeSpiPlnVar.setPlnvPlnNbr(source);
   }  
   
     /**
	 * 	Update PlnvPlnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPlnvPlnNbr(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PlnvPlnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPlnvPlnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaSpiTblId
	 *	@return ripaSpiTblId
	 */
   public char[] getRipaSpiTblId() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaSpiTblId();
   }

  
	/**
	*  set variable ripaSpiTblId
	*  @param value
	**/
   public void setRipaSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaSpiTblId(value);
   } 

     /**
	 * 	Update RipaSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex);
   	
   }
   
   public void setRipaSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaSpiTblId with another Field
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source);
   }  
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndStsCd
	 *	@return fcndStsCd
	 */
   public char[] getFcndStsCd() throws CFException  {              
   		return dclfeSpiRuleFrCondPos.getFcndStsCd();
   }

  
	/**
	*  set variable fcndStsCd
	*  @param value
	**/
   public void setFcndStsCd(char[] value) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndStsCd(value);
   } 

     /**
	 * 	Update FcndStsCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndStsCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndStsCd(source, sourceIndex);
   	
   }
   
   public void setFcndStsCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrCondPos.setFcndStsCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndStsCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndStsCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndStsCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndStsCd with another Field
	 *	@param value
	 */
   public void setFcndStsCd(Field source) {
      dclfeSpiRuleFrCondPos.setFcndStsCd(source);
   }  
   
     /**
	 * 	Update FcndStsCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndStsCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrCondPos.setFcndStsCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndStsCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndStsCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndStsCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cflgSub
	 *	@return cflgSub
	 */
	public int getCflgSub() throws CFException {        
   		return work.getCflgSub();
	}
	
	/**
	 * 	Update CflgSub with the passed value
	 *	@param number
	 */
	public void setCflgSub(int number)  throws CFException{
		work.setCflgSub(number);
	}


	public void setCflgSub(long number)  throws CFException{
		work.setCflgSub((int)number);
	}


	/**
	 *	Returns the value of frtoSpiTblId
	 *	@return frtoSpiTblId
	 */
   public char[] getFrtoSpiTblId() throws CFException  {              
   		return dclfeSpiRuleFrToSvc.getFrtoSpiTblId();
   }

  
	/**
	*  set variable frtoSpiTblId
	*  @param value
	**/
   public void setFrtoSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(value);
   } 

     /**
	 * 	Update FrtoSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source, sourceIndex);
   	
   }
   
   public void setFrtoSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoSpiTblId with another Field
	 *	@param value
	 */
   public void setFrtoSpiTblId(Field source) {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source);
   }  
   
     /**
	 * 	Update FrtoSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of ptypStsCd
	 *	@return ptypStsCd
	 */
   public char[] getPtypStsCd() throws CFException  {              
   		return dclfeSpiRuleProvTyp.getPtypStsCd();
   }

  
	/**
	*  set variable ptypStsCd
	*  @param value
	**/
   public void setPtypStsCd(char[] value) throws CFException {
      dclfeSpiRuleProvTyp.setPtypStsCd(value);
   } 

     /**
	 * 	Update PtypStsCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypStsCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleProvTyp.setPtypStsCd(source, sourceIndex);
   	
   }
   
   public void setPtypStsCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleProvTyp.setPtypStsCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypStsCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypStsCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypStsCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypStsCd with another Field
	 *	@param value
	 */
   public void setPtypStsCd(Field source) {
      dclfeSpiRuleProvTyp.setPtypStsCd(source);
   }  
   
     /**
	 * 	Update PtypStsCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypStsCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleProvTyp.setPtypStsCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypStsCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypStsCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypStsCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causSub
	 *	@return causSub
	 */
	public int getCausSub() throws CFException {        
   		return work.getCausSub();
	}
	
	/**
	 * 	Update CausSub with the passed value
	 *	@param number
	 */
	public void setCausSub(int number)  throws CFException{
		work.setCausSub(number);
	}


	public void setCausSub(long number)  throws CFException{
		work.setCausSub((int)number);
	}


	/**
	 *	Returns the value of ipaSub
	 *	@return ipaSub
	 */
	public int getIpaSub() throws CFException {        
   		return work.getIpaSub();
	}
	
	/**
	 * 	Update IpaSub with the passed value
	 *	@param number
	 */
	public void setIpaSub(int number)  throws CFException{
		work.setIpaSub(number);
	}


	public void setIpaSub(long number)  throws CFException{
		work.setIpaSub((int)number);
	}


	/**
	 *	Returns the value of cpeflStsCd
	 *	@return cpeflStsCd
	 */
   public char[] getCpeflStsCd() throws CFException  {              
   		return dclfeSpiRuleCpeFlg.getCpeflStsCd();
   }

  
	/**
	*  set variable cpeflStsCd
	*  @param value
	**/
   public void setCpeflStsCd(char[] value) throws CFException {
      dclfeSpiRuleCpeFlg.setCpeflStsCd(value);
   } 

     /**
	 * 	Update CpeflStsCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCpeflStsCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCpeFlg.setCpeflStsCd(source, sourceIndex);
   	
   }
   
   public void setCpeflStsCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCpeFlg.setCpeflStsCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CpeflStsCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCpeflStsCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCpeFlg.setCpeflStsCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CpeflStsCd with another Field
	 *	@param value
	 */
   public void setCpeflStsCd(Field source) {
      dclfeSpiRuleCpeFlg.setCpeflStsCd(source);
   }  
   
     /**
	 * 	Update CpeflStsCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCpeflStsCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCpeFlg.setCpeflStsCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CpeflStsCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCpeflStsCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCpeFlg.setCpeflStsCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsmFuncCd01
	 *	@return dsmFuncCd01
	 */
	public int getDsmFuncCd01() throws CFException {
   		return dsmCallArea.getDsmCommonArea().getDsmFuncCd01();
	}


	/**
	 *	Returns String value of dsmFuncCd01
	 *	@return dsmFuncCd01
	 */
	public char[]  getDsmFuncCd01String() throws CFException {
	     return String.valueOf(dsmCallArea.getDsmCommonArea().getDsmFuncCd01String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dsmFuncCd01IsNumeric()  throws CFException{
	    return dsmCallArea.getDsmCommonArea().dsmFuncCd01IsNumeric();
	}

	/**
	 * 	Update DsmFuncCd01 with the passed value
	 *	@param number
	 */
	public void setDsmFuncCd01(int number)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmFuncCd01(number);
	}
	

	public void setDsmFuncCd01(long number)  throws CFException{
	    dsmCallArea.getDsmCommonArea().setDsmFuncCd01(number);
	}
	
	
	/**
	 * 	Update DsmFuncCd01 with the passed value
	 *	@param value (String or char[])
	 */
	public void setDsmFuncCd01(char[] value)  throws CFException {
		dsmCallArea.getDsmCommonArea().setDsmFuncCd01(value);
	}
	
	/**
	 * 	Update DsmFuncCd01 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDsmFuncCd01String(char[] value)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmFuncCd01(value);
	}	

	/**
	 *	Returns the value of frtoStsCd
	 *	@return frtoStsCd
	 */
   public char[] getFrtoStsCd() throws CFException  {              
   		return dclfeSpiRuleFrToSvc.getFrtoStsCd();
   }

  
	/**
	*  set variable frtoStsCd
	*  @param value
	**/
   public void setFrtoStsCd(char[] value) throws CFException {
      dclfeSpiRuleFrToSvc.setFrtoStsCd(value);
   } 

     /**
	 * 	Update FrtoStsCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoStsCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrToSvc.setFrtoStsCd(source, sourceIndex);
   	
   }
   
   public void setFrtoStsCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrToSvc.setFrtoStsCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoStsCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoStsCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrToSvc.setFrtoStsCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoStsCd with another Field
	 *	@param value
	 */
   public void setFrtoStsCd(Field source) {
      dclfeSpiRuleFrToSvc.setFrtoStsCd(source);
   }  
   
     /**
	 * 	Update FrtoStsCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoStsCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrToSvc.setFrtoStsCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoStsCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoStsCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrToSvc.setFrtoStsCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleIcd
	 *	@return dclfeSpiRuleIcd
	 */   
	 public DclfeSpiRuleIcd getDclfeSpiRuleIcd() {
   	return dclfeSpiRuleIcd;
   }


	/**
	 *	Returns the value of dclfeSpiRuleCpeFlg
	 *	@return dclfeSpiRuleCpeFlg
	 */   
	 public DclfeSpiRuleCpeFlg getDclfeSpiRuleCpeFlg() {
   	return dclfeSpiRuleCpeFlg;
   }


	/**
	 *	Returns the value of lstIcdKey
	 *	@return lstIcdKey
	 */   
	 public LstIcdKey getLstIcdKey() {
   	return lstIcdKey;
   }


	/**
	 *	Returns the value of ptypSpiTblId
	 *	@return ptypSpiTblId
	 */
   public char[] getPtypSpiTblId() throws CFException  {              
   		return dclfeSpiRuleProvTyp.getPtypSpiTblId();
   }

  
	/**
	*  set variable ptypSpiTblId
	*  @param value
	**/
   public void setPtypSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(value);
   } 

     /**
	 * 	Update PtypSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source, sourceIndex);
   	
   }
   
   public void setPtypSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypSpiTblId with another Field
	 *	@param value
	 */
   public void setPtypSpiTblId(Field source) {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source);
   }  
   
     /**
	 * 	Update PtypSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cpeflSpiTblId
	 *	@return cpeflSpiTblId
	 */
   public char[] getCpeflSpiTblId() throws CFException  {              
   		return dclfeSpiRuleCpeFlg.getCpeflSpiTblId();
   }

  
	/**
	*  set variable cpeflSpiTblId
	*  @param value
	**/
   public void setCpeflSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleCpeFlg.setCpeflSpiTblId(value);
   } 

     /**
	 * 	Update CpeflSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCpeflSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCpeFlg.setCpeflSpiTblId(source, sourceIndex);
   	
   }
   
   public void setCpeflSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCpeFlg.setCpeflSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CpeflSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCpeflSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCpeFlg.setCpeflSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CpeflSpiTblId with another Field
	 *	@param value
	 */
   public void setCpeflSpiTblId(Field source) {
      dclfeSpiRuleCpeFlg.setCpeflSpiTblId(source);
   }  
   
     /**
	 * 	Update CpeflSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCpeflSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCpeFlg.setCpeflSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CpeflSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCpeflSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCpeFlg.setCpeflSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleCaus
	 *	@return dclfeSpiRuleCaus
	 */   
	 public DclfeSpiRuleCaus getDclfeSpiRuleCaus() {
   	return dclfeSpiRuleCaus;
   }


	/**
	 *	Returns the value of d51uKeyPolicy
	 *	@return d51uKeyPolicy
	 */
   public char[] getD51uKeyPolicy() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyPolicy();
   }

  
	/**
	*  set variable d51uKeyPolicy
	*  @param value
	**/
   public void setD51uKeyPolicy(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(value);
   } 

     /**
	 * 	Update D51uKeyPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyPolicy(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source, sourceIndex);
   	
   }
   
   public void setD51uKeyPolicy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyPolicy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyPolicy with another Field
	 *	@param value
	 */
   public void setD51uKeyPolicy(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source);
   }  
   
     /**
	 * 	Update D51uKeyPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyPolicy(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyPolicy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleFrToSvc
	 *	@return dclfeSpiRuleFrToSvc
	 */   
	 public DclfeSpiRuleFrToSvc getDclfeSpiRuleFrToSvc() {
   	return dclfeSpiRuleFrToSvc;
   }


	/**
	 *	Returns the value of dclfeSpiRuleProvTyp
	 *	@return dclfeSpiRuleProvTyp
	 */   
	 public DclfeSpiRuleProvTyp getDclfeSpiRuleProvTyp() {
   	return dclfeSpiRuleProvTyp;
   }


	/**
	 *	Returns the value of plnvPolNbr
	 *	@return plnvPolNbr
	 */
   public char[] getPlnvPolNbr() throws CFException  {              
   		return dclfeSpiPlnVar.getPlnvPolNbr();
   }

  
	/**
	*  set variable plnvPolNbr
	*  @param value
	**/
   public void setPlnvPolNbr(char[] value) throws CFException {
      dclfeSpiPlnVar.setPlnvPolNbr(value);
   } 

     /**
	 * 	Update PlnvPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPlnvPolNbr(char[] source, int sourceIndex) throws CFException {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex);
   	
   }
   
   public void setPlnvPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PlnvPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPlnvPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PlnvPolNbr with another Field
	 *	@param value
	 */
   public void setPlnvPolNbr(Field source) {
      dclfeSpiPlnVar.setPlnvPolNbr(source);
   }  
   
     /**
	 * 	Update PlnvPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPlnvPolNbr(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PlnvPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPlnvPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of icdSub
	 *	@return icdSub
	 */
	public int getIcdSub() throws CFException {        
   		return work.getIcdSub();
	}
	
	/**
	 * 	Update IcdSub with the passed value
	 *	@param number
	 */
	public void setIcdSub(int number)  throws CFException{
		work.setIcdSub(number);
	}


	public void setIcdSub(long number)  throws CFException{
		work.setIcdSub((int)number);
	}


	/**
	 *	Returns the value of ptypSub
	 *	@return ptypSub
	 */
	public int getPtypSub() throws CFException {        
   		return work.getPtypSub();
	}
	
	/**
	 * 	Update PtypSub with the passed value
	 *	@param number
	 */
	public void setPtypSub(int number)  throws CFException{
		work.setPtypSub(number);
	}


	public void setPtypSub(long number)  throws CFException{
		work.setPtypSub((int)number);
	}


	/**
	 *	Returns the value of dclfeSpiRuleFrCondPos
	 *	@return dclfeSpiRuleFrCondPos
	 */   
	 public DclfeSpiRuleFrCondPos getDclfeSpiRuleFrCondPos() {
   	return dclfeSpiRuleFrCondPos;
   }


	/**
	 *	Returns the value of d51uNbrOfEntries
	 *	@return d51uNbrOfEntries
	 */
	public long getD51uNbrOfEntries() throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uNbrOfEntries();
	}


	/**
	 *	Returns String value of d51uNbrOfEntries
	 *	@return d51uNbrOfEntries
	 */
	public char[]  getD51uNbrOfEntriesString() throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uNbrOfEntriesString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uNbrOfEntriesIsNumeric()  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().d51uNbrOfEntriesIsNumeric();
	}

	/**
	 * 	Update D51uNbrOfEntries with the passed value
	 *	@param number
	 */
	public void setD51uNbrOfEntries(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uNbrOfEntries(number);
	}
	

	
	/**
	 * 	Update D51uNbrOfEntries with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uNbrOfEntries(char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uNbrOfEntries(value);
	}
	
	/**
	 * 	Update D51uNbrOfEntries with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uNbrOfEntriesString(char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uNbrOfEntries(value);
	}	

	/**
	 *	Returns the value of d51uKeyFeSpi
	 *	@return d51uKeyFeSpi
	 */
   public char[] getD51uKeyFeSpi() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyFeSpi();
   }

  
	/**
	*  set variable d51uKeyFeSpi
	*  @param value
	**/
   public void setD51uKeyFeSpi(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(value);
   } 

     /**
	 * 	Update D51uKeyFeSpi 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyFeSpi(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex);
   	
   }
   
   public void setD51uKeyFeSpi(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyFeSpi(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyFeSpi with another Field
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source);
   }  
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleIpa
	 *	@return dclfeSpiRuleIpa
	 */   
	 public DclfeSpiRuleIpa getDclfeSpiRuleIpa() {
   	return dclfeSpiRuleIpa;
   }


	/**
	 *	Returns the value of ricdStsCd
	 *	@return ricdStsCd
	 */
   public char[] getRicdStsCd() throws CFException  {              
   		return dclfeSpiRuleIcd.getRicdStsCd();
   }

  
	/**
	*  set variable ricdStsCd
	*  @param value
	**/
   public void setRicdStsCd(char[] value) throws CFException {
      dclfeSpiRuleIcd.setRicdStsCd(value);
   } 

     /**
	 * 	Update RicdStsCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdStsCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIcd.setRicdStsCd(source, sourceIndex);
   	
   }
   
   public void setRicdStsCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIcd.setRicdStsCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdStsCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdStsCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdStsCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdStsCd with another Field
	 *	@param value
	 */
   public void setRicdStsCd(Field source) {
      dclfeSpiRuleIcd.setRicdStsCd(source);
   }  
   
     /**
	 * 	Update RicdStsCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdStsCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIcd.setRicdStsCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdStsCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdStsCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdStsCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uKeyStatus
	 *	@return d51uKeyStatus
	 */
   public char[] getD51uKeyStatus() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyStatus();
   }

  
	/**
	*  set variable d51uKeyStatus
	*  @param value
	**/
   public void setD51uKeyStatus(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(value);
   } 

     /**
	 * 	Update D51uKeyStatus 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyStatus(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex);
   	
   }
   
   public void setD51uKeyStatus(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyStatus 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyStatus(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyStatus with another Field
	 *	@param value
	 */
   public void setD51uKeyStatus(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source);
   }  
   
     /**
	 * 	Update D51uKeyStatus 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyStatus(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyStatus 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyStatus(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyStatus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causStsCd
	 *	@return causStsCd
	 */
   public char[] getCausStsCd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausStsCd();
   }

  
	/**
	*  set variable causStsCd
	*  @param value
	**/
   public void setCausStsCd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausStsCd(value);
   } 

     /**
	 * 	Update CausStsCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausStsCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausStsCd(source, sourceIndex);
   	
   }
   
   public void setCausStsCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausStsCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausStsCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausStsCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausStsCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausStsCd with another Field
	 *	@param value
	 */
   public void setCausStsCd(Field source) {
      dclfeSpiRuleCaus.setCausStsCd(source);
   }  
   
     /**
	 * 	Update CausStsCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausStsCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausStsCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausStsCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausStsCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausStsCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaStsCd
	 *	@return ripaStsCd
	 */
   public char[] getRipaStsCd() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaStsCd();
   }

  
	/**
	*  set variable ripaStsCd
	*  @param value
	**/
   public void setRipaStsCd(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaStsCd(value);
   } 

     /**
	 * 	Update RipaStsCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaStsCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaStsCd(source, sourceIndex);
   	
   }
   
   public void setRipaStsCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaStsCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaStsCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaStsCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaStsCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaStsCd with another Field
	 *	@param value
	 */
   public void setRipaStsCd(Field source) {
      dclfeSpiRuleIpa.setRipaStsCd(source);
   }  
   
     /**
	 * 	Update RipaStsCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaStsCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaStsCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaStsCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaStsCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaStsCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsmFuncCd
	 *	@return dsmFuncCd
	 */
	public short getDsmFuncCd() throws CFException {        
   		return work.getDsmFuncCd();
	}
	
	/**
	 * 	Update DsmFuncCd with the passed value
	 *	@param number
	 */
	public void setDsmFuncCd(short number)  throws CFException{
		work.setDsmFuncCd(number);
	}

	public void setDsmFuncCd(int number)  throws CFException{
		work.setDsmFuncCd((short)number);
	}

	public void setDsmFuncCd(long number)  throws CFException{
		work.setDsmFuncCd((short)number);
	}



	/**
	 *	Returns the value of fcndSpiTblId
	 *	@return fcndSpiTblId
	 */
   public char[] getFcndSpiTblId() throws CFException  {              
   		return dclfeSpiRuleFrCondPos.getFcndSpiTblId();
   }

  
	/**
	*  set variable fcndSpiTblId
	*  @param value
	**/
   public void setFcndSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(value);
   } 

     /**
	 * 	Update FcndSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source, sourceIndex);
   	
   }
   
   public void setFcndSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndSpiTblId with another Field
	 *	@param value
	 */
   public void setFcndSpiTblId(Field source) {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source);
   }  
   
     /**
	 * 	Update FcndSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdSpiTblId
	 *	@return ricdSpiTblId
	 */
   public char[] getRicdSpiTblId() throws CFException  {              
   		return dclfeSpiRuleIcd.getRicdSpiTblId();
   }

  
	/**
	*  set variable ricdSpiTblId
	*  @param value
	**/
   public void setRicdSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleIcd.setRicdSpiTblId(value);
   } 

     /**
	 * 	Update RicdSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex);
   	
   }
   
   public void setRicdSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdSpiTblId with another Field
	 *	@param value
	 */
   public void setRicdSpiTblId(Field source) {
      dclfeSpiRuleIcd.setRicdSpiTblId(source);
   }  
   
     /**
	 * 	Update RicdSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uKeyPlan
	 *	@return d51uKeyPlan
	 */
   public char[] getD51uKeyPlan() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyPlan();
   }

  
	/**
	*  set variable d51uKeyPlan
	*  @param value
	**/
   public void setD51uKeyPlan(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(value);
   } 

     /**
	 * 	Update D51uKeyPlan 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyPlan(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source, sourceIndex);
   	
   }
   
   public void setD51uKeyPlan(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyPlan 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyPlan(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyPlan with another Field
	 *	@param value
	 */
   public void setD51uKeyPlan(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source);
   }  
   
     /**
	 * 	Update D51uKeyPlan 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyPlan(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyPlan 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyPlan(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyPlan(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of plnvStsCd
	 *	@return plnvStsCd
	 */
   public char[] getPlnvStsCd() throws CFException  {              
   		return dclfeSpiPlnVar.getPlnvStsCd();
   }

  
	/**
	*  set variable plnvStsCd
	*  @param value
	**/
   public void setPlnvStsCd(char[] value) throws CFException {
      dclfeSpiPlnVar.setPlnvStsCd(value);
   } 

     /**
	 * 	Update PlnvStsCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPlnvStsCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiPlnVar.setPlnvStsCd(source, sourceIndex);
   	
   }
   
   public void setPlnvStsCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiPlnVar.setPlnvStsCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PlnvStsCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPlnvStsCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvStsCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PlnvStsCd with another Field
	 *	@param value
	 */
   public void setPlnvStsCd(Field source) {
      dclfeSpiPlnVar.setPlnvStsCd(source);
   }  
   
     /**
	 * 	Update PlnvStsCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPlnvStsCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiPlnVar.setPlnvStsCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PlnvStsCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPlnvStsCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvStsCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiPlnVar
	 *	@return dclfeSpiPlnVar
	 */   
	 public DclfeSpiPlnVar getDclfeSpiPlnVar() {
   	return dclfeSpiPlnVar;
   }


	/**
	 *	Returns the value of fcndSub
	 *	@return fcndSub
	 */
	public int getFcndSub() throws CFException {        
   		return work.getFcndSub();
	}
	
	/**
	 * 	Update FcndSub with the passed value
	 *	@param number
	 */
	public void setFcndSub(int number)  throws CFException{
		work.setFcndSub(number);
	}


	public void setFcndSub(long number)  throws CFException{
		work.setFcndSub((int)number);
	}


	/**
	 *	Returns the value of frtoSub
	 *	@return frtoSub
	 */
	public int getFrtoSub() throws CFException {        
   		return work.getFrtoSub();
	}
	
	/**
	 * 	Update FrtoSub with the passed value
	 *	@param number
	 */
	public void setFrtoSub(int number)  throws CFException{
		work.setFrtoSub(number);
	}


	public void setFrtoSub(long number)  throws CFException{
		work.setFrtoSub((int)number);
	}


	/**
	 *	Returns the value of causSpiTblId
	 *	@return causSpiTblId
	 */
   public char[] getCausSpiTblId() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausSpiTblId();
   }

  
	/**
	*  set variable causSpiTblId
	*  @param value
	**/
   public void setCausSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausSpiTblId(value);
   } 

     /**
	 * 	Update CausSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausSpiTblId(source, sourceIndex);
   	
   }
   
   public void setCausSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausSpiTblId with another Field
	 *	@param value
	 */
   public void setCausSpiTblId(Field source) {
      dclfeSpiRuleCaus.setCausSpiTblId(source);
   }  
   
     /**
	 * 	Update CausSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += dclfeSpiRuleFrCondPos.hashCode();
        str += dclfeSpiRuleIpa.hashCode();
        str += dsmCallArea.hashCode();
        str += sqlca.hashCode();
        str += dclfeSpiRuleIcd.hashCode();
        str += dclfeSpiRuleCpeFlg.hashCode();
        str += work.hashCode();
        str += lstIcdKey.hashCode();
        str += dclfeSpiRuleCaus.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dclfeSpiPlnVar.hashCode();
        str += dclfeSpiRuleFrToSvc.hashCode();
        str += dclfeSpiRuleProvTyp.hashCode();
       return str.hashCode();
    }

    public InitializeOutCtx clone() {
        InitializeOutCtx cloneObj = new InitializeOutCtx();
        cloneObj.dclfeSpiRuleFrCondPos = new DclfeSpiRuleFrCondPos();
        cloneObj.dclfeSpiRuleFrCondPos.set(dclfeSpiRuleFrCondPos.getClonedField());
        cloneObj.dclfeSpiRuleIpa = new DclfeSpiRuleIpa();
        cloneObj.dclfeSpiRuleIpa.set(dclfeSpiRuleIpa.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.dclfeSpiRuleIcd = new DclfeSpiRuleIcd();
        cloneObj.dclfeSpiRuleIcd.set(dclfeSpiRuleIcd.getClonedField());
        cloneObj.dclfeSpiRuleCpeFlg = new DclfeSpiRuleCpeFlg();
        cloneObj.dclfeSpiRuleCpeFlg.set(dclfeSpiRuleCpeFlg.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.lstIcdKey = new LstIcdKey();
        cloneObj.lstIcdKey.set(lstIcdKey.getClonedField());
        cloneObj.dclfeSpiRuleCaus = new DclfeSpiRuleCaus();
        cloneObj.dclfeSpiRuleCaus.set(dclfeSpiRuleCaus.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dclfeSpiPlnVar = new DclfeSpiPlnVar();
        cloneObj.dclfeSpiPlnVar.set(dclfeSpiPlnVar.getClonedField());
        cloneObj.dclfeSpiRuleFrToSvc = new DclfeSpiRuleFrToSvc();
        cloneObj.dclfeSpiRuleFrToSvc.set(dclfeSpiRuleFrToSvc.getClonedField());
        cloneObj.dclfeSpiRuleProvTyp = new DclfeSpiRuleProvTyp();
        cloneObj.dclfeSpiRuleProvTyp.set(dclfeSpiRuleProvTyp.getClonedField());
        return cloneObj;
    }

    }

    public InitializeOutCtx getInitializeOutCtx() {
            return new InitializeOutCtx();
    }
     public class ProcessingInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();

	/**
	 *	Test condition 2 for isFuncCd2()
	 *	@return  Returns true if isFuncCd2() is 2
	 */
   public boolean isFuncCd2() throws CFException {
      return work.isFuncCd2();
   }

	/**
	*  set values 2
	*/
   	public void setFuncCd2True()  throws CFException{  			
    	work.setFuncCd2True();
   	}
	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}


	/**
	 *	Test condition 1 for isFuncCd1()
	 *	@return  Returns true if isFuncCd1() is 1
	 */
   public boolean isFuncCd1() throws CFException {
      return work.isFuncCd1();
   }

	/**
	*  set values 1
	*/
   	public void setFuncCd1True()  throws CFException{  			
    	work.setFuncCd1True();
   	}
	/**
	 *	Test condition 3 for isFuncCd3()
	 *	@return  Returns true if isFuncCd3() is 3
	 */
   public boolean isFuncCd3() throws CFException {
      return work.isFuncCd3();
   }

	/**
	*  set values 3
	*/
   	public void setFuncCd3True()  throws CFException{  			
    	work.setFuncCd3True();
   	}
	/**
	 *	Returns the value of dsmFuncCd01
	 *	@return dsmFuncCd01
	 */
	public int getDsmFuncCd01() throws CFException {
   		return dsmCallArea.getDsmCommonArea().getDsmFuncCd01();
	}


	/**
	 *	Returns String value of dsmFuncCd01
	 *	@return dsmFuncCd01
	 */
	public char[]  getDsmFuncCd01String() throws CFException {
	     return String.valueOf(dsmCallArea.getDsmCommonArea().getDsmFuncCd01String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dsmFuncCd01IsNumeric()  throws CFException{
	    return dsmCallArea.getDsmCommonArea().dsmFuncCd01IsNumeric();
	}

	/**
	 * 	Update DsmFuncCd01 with the passed value
	 *	@param number
	 */
	public void setDsmFuncCd01(int number)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmFuncCd01(number);
	}
	

	public void setDsmFuncCd01(long number)  throws CFException{
	    dsmCallArea.getDsmCommonArea().setDsmFuncCd01(number);
	}
	
	
	/**
	 * 	Update DsmFuncCd01 with the passed value
	 *	@param value (String or char[])
	 */
	public void setDsmFuncCd01(char[] value)  throws CFException {
		dsmCallArea.getDsmCommonArea().setDsmFuncCd01(value);
	}
	
	/**
	 * 	Update DsmFuncCd01 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDsmFuncCd01String(char[] value)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmFuncCd01(value);
	}	


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public ProcessingOutCtx getProcessingOutCtx() {
            return new ProcessingOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
       return str.hashCode();
    }

    public ProcessingInCtx clone() {
        ProcessingInCtx cloneObj = new ProcessingInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        return cloneObj;
    }

    }

    public ProcessingInCtx getProcessingInCtx() {
            return new ProcessingInCtx();
    }
     public class ProcessingOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();

	/**
	 *	Test condition "N" for isNoMoreIcdRecords()
	 *	@return  Returns true if isNoMoreIcdRecords() is "N"
	 */
   public boolean isNoMoreIcdRecords() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isNoMoreIcdRecords();
   }

	/**
	*  set values "N"
	*/
   	public void setNoMoreIcdRecordsTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setNoMoreIcdRecordsTrue();
   	}
	/**
	 *	Returns the value of dsmEditErrorValueInt
	 *	@return dsmEditErrorValueInt
	 */
   public char[] getDsmEditErrorValueInt() throws CFException  {              
   		return dsmCallArea.getDsmCommonArea().getDsmEditErrorValueTxt().getDsmEditErrorValueInt();
   }

  
	/**
	*  set variable dsmEditErrorValueInt
	*  @param value
	**/
   public void setDsmEditErrorValueInt(char[] value) throws CFException {
      dsmCallArea.getDsmCommonArea().getDsmEditErrorValueTxt().setDsmEditErrorValueInt(value);
   } 

     /**
	 * 	Update DsmEditErrorValueInt 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmEditErrorValueInt(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmCommonArea().getDsmEditErrorValueTxt().setDsmEditErrorValueInt(source, sourceIndex);
   	
   }
   
   public void setDsmEditErrorValueInt(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmCommonArea().getDsmEditErrorValueTxt().setDsmEditErrorValueInt(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmEditErrorValueInt 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmEditErrorValueInt(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmCommonArea().getDsmEditErrorValueTxt().setDsmEditErrorValueInt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmEditErrorValueInt with another Field
	 *	@param value
	 */
   public void setDsmEditErrorValueInt(Field source) {
      dsmCallArea.getDsmCommonArea().getDsmEditErrorValueTxt().setDsmEditErrorValueInt(source);
   }  
   
     /**
	 * 	Update DsmEditErrorValueInt 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmEditErrorValueInt(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmCommonArea().getDsmEditErrorValueTxt().setDsmEditErrorValueInt(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmEditErrorValueInt 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmEditErrorValueInt(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmCommonArea().getDsmEditErrorValueTxt().setDsmEditErrorValueInt(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRetRuleKeys
	 *	@return d51uRetRuleKeys
	 */   
	 public D51uRetRuleKeys getD51uRetRuleKeys(int index) {
   	return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index);
   }

    public List<D51uRetRuleKeys> getD51uRetRuleKeys() {
        return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys();
    }
   /**
	* 	Update D51uRetRuleKeys with the passed value
	*	@param value
	*/
   public void setD51uRetRuleKeys(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().setD51uRetRuleKeys((index),value);
   }   


	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}


	/**
	 *	Test condition 1 for isD51uInvFuncCd()
	 *	@return  Returns true if isD51uInvFuncCd() is 1
	 */
   public boolean isD51uInvFuncCd() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uInvFuncCd();
   }

	/**
	*  set values 1
	*/
   	public void setD51uInvFuncCdTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uInvFuncCdTrue();
   	}
	/**
	 *	Returns the value of dsmErrSectnName
	 *	@return dsmErrSectnName
	 */
   public char[] getDsmErrSectnName() throws CFException  {              
   		return dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().getDsmErrSectnName();
   }

  
	/**
	*  set variable dsmErrSectnName
	*  @param value
	**/
   public void setDsmErrSectnName(char[] value) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(value);
   } 

     /**
	 * 	Update DsmErrSectnName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmErrSectnName(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex);
   	
   }
   
   public void setDsmErrSectnName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmErrSectnName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrSectnName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmErrSectnName with another Field
	 *	@param value
	 */
   public void setDsmErrSectnName(Field source) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source);
   }  
   
     /**
	 * 	Update DsmErrSectnName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmErrSectnName(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmErrSectnName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrSectnName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsmErrPgmName
	 *	@return dsmErrPgmName
	 */
   public char[] getDsmErrPgmName() throws CFException  {              
   		return dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().getDsmErrPgmName();
   }

  
	/**
	*  set variable dsmErrPgmName
	*  @param value
	**/
   public void setDsmErrPgmName(char[] value) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(value);
   } 

     /**
	 * 	Update DsmErrPgmName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmErrPgmName(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex);
   	
   }
   
   public void setDsmErrPgmName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmErrPgmName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrPgmName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmErrPgmName with another Field
	 *	@param value
	 */
   public void setDsmErrPgmName(Field source) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source);
   }  
   
     /**
	 * 	Update DsmErrPgmName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmErrPgmName(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmErrPgmName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrPgmName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsmFuncCd01
	 *	@return dsmFuncCd01
	 */
	public int getDsmFuncCd01() throws CFException {
   		return dsmCallArea.getDsmCommonArea().getDsmFuncCd01();
	}


	/**
	 *	Returns String value of dsmFuncCd01
	 *	@return dsmFuncCd01
	 */
	public char[]  getDsmFuncCd01String() throws CFException {
	     return String.valueOf(dsmCallArea.getDsmCommonArea().getDsmFuncCd01String()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dsmFuncCd01IsNumeric()  throws CFException{
	    return dsmCallArea.getDsmCommonArea().dsmFuncCd01IsNumeric();
	}

	/**
	 * 	Update DsmFuncCd01 with the passed value
	 *	@param number
	 */
	public void setDsmFuncCd01(int number)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmFuncCd01(number);
	}
	

	public void setDsmFuncCd01(long number)  throws CFException{
	    dsmCallArea.getDsmCommonArea().setDsmFuncCd01(number);
	}
	
	
	/**
	 * 	Update DsmFuncCd01 with the passed value
	 *	@param value (String or char[])
	 */
	public void setDsmFuncCd01(char[] value)  throws CFException {
		dsmCallArea.getDsmCommonArea().setDsmFuncCd01(value);
	}
	
	/**
	 * 	Update DsmFuncCd01 with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDsmFuncCd01String(char[] value)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmFuncCd01(value);
	}	

	/**
	 *	Returns the value of dsmEditErrorField
	 *	@return dsmEditErrorField
	 */
   public char[] getDsmEditErrorField() throws CFException  {              
   		return dsmCallArea.getDsmCommonArea().getDsmEditErrorField();
   }

  
	/**
	*  set variable dsmEditErrorField
	*  @param value
	**/
   public void setDsmEditErrorField(char[] value) throws CFException {
      dsmCallArea.getDsmCommonArea().setDsmEditErrorField(value);
   } 

     /**
	 * 	Update DsmEditErrorField 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmEditErrorField(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmCommonArea().setDsmEditErrorField(source, sourceIndex);
   	
   }
   
   public void setDsmEditErrorField(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmCommonArea().setDsmEditErrorField(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmEditErrorField 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmEditErrorField(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmCommonArea().setDsmEditErrorField(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmEditErrorField with another Field
	 *	@param value
	 */
   public void setDsmEditErrorField(Field source) {
      dsmCallArea.getDsmCommonArea().setDsmEditErrorField(source);
   }  
   
     /**
	 * 	Update DsmEditErrorField 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmEditErrorField(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmCommonArea().setDsmEditErrorField(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmEditErrorField 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmEditErrorField(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmCommonArea().setDsmEditErrorField(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
       return str.hashCode();
    }

    public ProcessingOutCtx clone() {
        ProcessingOutCtx cloneObj = new ProcessingOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        return cloneObj;
    }

    }

    public ProcessingOutCtx getProcessingOutCtx() {
            return new ProcessingOutCtx();
    }
     public class ProcessFuncCd1InCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     WorkArea workArea = D529351uCtx.this.getWorkArea();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();

	/**
	 *	Returns the value of workArea
	 *	@return workArea
	 */   
	 public WorkArea getWorkArea() {
   	return workArea;
   }


	/**
	 *	Returns the value of vyspi51uCallArea
	 *	@return vyspi51uCallArea
	 */   
	 public Vyspi51uCallArea getVyspi51uCallArea() {
   	return vyspi51uCallArea;
   }


	/**
	 *	Returns the value of d51uReqDosDate
	 *	@return d51uReqDosDate
	 */
   public char[] getD51uReqDosDate() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().getD51uReqDosDate();
   }

  
	/**
	*  set variable d51uReqDosDate
	*  @param value
	**/
   public void setD51uReqDosDate(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(value);
   } 

     /**
	 * 	Update D51uReqDosDate 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uReqDosDate(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source, sourceIndex);
   	
   }
   
   public void setD51uReqDosDate(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uReqDosDate 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uReqDosDate(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uReqDosDate with another Field
	 *	@param value
	 */
   public void setD51uReqDosDate(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source);
   }  
   
     /**
	 * 	Update D51uReqDosDate 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uReqDosDate(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uReqDosDate 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uReqDosDate(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public ProcessFuncCd1OutCtx getProcessFuncCd1OutCtx() {
            return new ProcessFuncCd1OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workArea.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public ProcessFuncCd1InCtx clone() {
        ProcessFuncCd1InCtx cloneObj = new ProcessFuncCd1InCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workArea = new WorkArea();
        cloneObj.workArea.set(workArea.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public ProcessFuncCd1InCtx getProcessFuncCd1InCtx() {
            return new ProcessFuncCd1InCtx();
    }
     public class ProcessFuncCd1OutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     WorkArea workArea = D529351uCtx.this.getWorkArea();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();

	/**
	 *	Returns the value of planMatch
	 *	@return planMatch
	 */
	public int getPlanMatch() throws CFException {        
   		return work.getPlanMatch();
	}
	
	/**
	 * 	Update PlanMatch with the passed value
	 *	@param number
	 */
	public void setPlanMatch(int number)  throws CFException{
		work.setPlanMatch(number);
	}


	public void setPlanMatch(long number)  throws CFException{
		work.setPlanMatch((int)number);
	}


	/**
	 *	Returns the value of db2DosDd
	 *	@return db2DosDd
	 */
   public char[] getDb2DosDd() throws CFException  {              
   		return workArea.getDb2ReqDosDateRedefined().getDb2DosDd();
   }

  
	/**
	*  set variable db2DosDd
	*  @param value
	**/
   public void setDb2DosDd(char[] value) throws CFException {
      workArea.getDb2ReqDosDateRedefined().setDb2DosDd(value);
   } 

     /**
	 * 	Update Db2DosDd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2DosDd(char[] source, int sourceIndex) throws CFException {
      workArea.getDb2ReqDosDateRedefined().setDb2DosDd(source, sourceIndex);
   	
   }
   
   public void setDb2DosDd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workArea.getDb2ReqDosDateRedefined().setDb2DosDd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2DosDd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2DosDd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workArea.getDb2ReqDosDateRedefined().setDb2DosDd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2DosDd with another Field
	 *	@param value
	 */
   public void setDb2DosDd(Field source) {
      workArea.getDb2ReqDosDateRedefined().setDb2DosDd(source);
   }  
   
     /**
	 * 	Update Db2DosDd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2DosDd(Field source, int sourceIndex,int sourceLen) {
      workArea.getDb2ReqDosDateRedefined().setDb2DosDd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2DosDd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2DosDd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workArea.getDb2ReqDosDateRedefined().setDb2DosDd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of planEffDate
	 *	@return planEffDate
	 */
	public long getPlanEffDate() throws CFException {
   		return work.getPlanEffDate();
	}


	/**
	 *	Returns String value of planEffDate
	 *	@return planEffDate
	 */
	public char[]  getPlanEffDateString() throws CFException {
	     return String.valueOf(work.getPlanEffDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planEffDateIsNumeric()  throws CFException{
	    return work.planEffDateIsNumeric();
	}

	/**
	 * 	Update PlanEffDate with the passed value
	 *	@param number
	 */
	public void setPlanEffDate(long number)  throws CFException{
		work.setPlanEffDate(number);
	}
	

	
	/**
	 * 	Update PlanEffDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanEffDate(char[] value)  throws CFException {
		work.setPlanEffDate(value);
	}
	
	/**
	 * 	Update PlanEffDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanEffDateString(char[] value)  throws CFException{
		work.setPlanEffDate(value);
	}	

	/**
	 *	Returns the value of db2DosMm
	 *	@return db2DosMm
	 */
   public char[] getDb2DosMm() throws CFException  {              
   		return workArea.getDb2ReqDosDateRedefined().getDb2DosMm();
   }

  
	/**
	*  set variable db2DosMm
	*  @param value
	**/
   public void setDb2DosMm(char[] value) throws CFException {
      workArea.getDb2ReqDosDateRedefined().setDb2DosMm(value);
   } 

     /**
	 * 	Update Db2DosMm 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2DosMm(char[] source, int sourceIndex) throws CFException {
      workArea.getDb2ReqDosDateRedefined().setDb2DosMm(source, sourceIndex);
   	
   }
   
   public void setDb2DosMm(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workArea.getDb2ReqDosDateRedefined().setDb2DosMm(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2DosMm 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2DosMm(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workArea.getDb2ReqDosDateRedefined().setDb2DosMm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2DosMm with another Field
	 *	@param value
	 */
   public void setDb2DosMm(Field source) {
      workArea.getDb2ReqDosDateRedefined().setDb2DosMm(source);
   }  
   
     /**
	 * 	Update Db2DosMm 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2DosMm(Field source, int sourceIndex,int sourceLen) {
      workArea.getDb2ReqDosDateRedefined().setDb2DosMm(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2DosMm 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2DosMm(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workArea.getDb2ReqDosDateRedefined().setDb2DosMm(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of planCanDate
	 *	@return planCanDate
	 */
	public long getPlanCanDate() throws CFException {
   		return work.getPlanCanDate();
	}


	/**
	 *	Returns String value of planCanDate
	 *	@return planCanDate
	 */
	public char[]  getPlanCanDateString() throws CFException {
	     return String.valueOf(work.getPlanCanDateString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean planCanDateIsNumeric()  throws CFException{
	    return work.planCanDateIsNumeric();
	}

	/**
	 * 	Update PlanCanDate with the passed value
	 *	@param number
	 */
	public void setPlanCanDate(long number)  throws CFException{
		work.setPlanCanDate(number);
	}
	

	
	/**
	 * 	Update PlanCanDate with the passed value
	 *	@param value (String or char[])
	 */
	public void setPlanCanDate(char[] value)  throws CFException {
		work.setPlanCanDate(value);
	}
	
	/**
	 * 	Update PlanCanDate with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setPlanCanDateString(char[] value)  throws CFException{
		work.setPlanCanDate(value);
	}	

	/**
	 *	Returns the value of db2Dash2
	 *	@return db2Dash2
	 */
   public char[] getDb2Dash2() throws CFException  {              
   		return workArea.getDb2ReqDosDateRedefined().getDb2Dash2();
   }

  
	/**
	*  set variable db2Dash2
	*  @param value
	**/
   public void setDb2Dash2(char[] value) throws CFException {
      workArea.getDb2ReqDosDateRedefined().setDb2Dash2(value);
   } 

     /**
	 * 	Update Db2Dash2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Dash2(char[] source, int sourceIndex) throws CFException {
      workArea.getDb2ReqDosDateRedefined().setDb2Dash2(source, sourceIndex);
   	
   }
   
   public void setDb2Dash2(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workArea.getDb2ReqDosDateRedefined().setDb2Dash2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Dash2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Dash2(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workArea.getDb2ReqDosDateRedefined().setDb2Dash2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Dash2 with another Field
	 *	@param value
	 */
   public void setDb2Dash2(Field source) {
      workArea.getDb2ReqDosDateRedefined().setDb2Dash2(source);
   }  
   
     /**
	 * 	Update Db2Dash2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Dash2(Field source, int sourceIndex,int sourceLen) {
      workArea.getDb2ReqDosDateRedefined().setDb2Dash2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Dash2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Dash2(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workArea.getDb2ReqDosDateRedefined().setDb2Dash2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition " " for isPlanNotFound()
	 *	@return  Returns true if isPlanNotFound() is " "
	 */
   public boolean isPlanNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isPlanNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setPlanNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setPlanNotFoundTrue();
   	}
	/**
	 *	Returns the value of csSub
	 *	@return csSub
	 */
	public int getCsSub() throws CFException {        
   		return work.getCsSub();
	}
	
	/**
	 * 	Update CsSub with the passed value
	 *	@param number
	 */
	public void setCsSub(int number)  throws CFException{
		work.setCsSub(number);
	}


	public void setCsSub(long number)  throws CFException{
		work.setCsSub((int)number);
	}


	/**
	 *	Returns the value of d51uReqDosDate
	 *	@return d51uReqDosDate
	 */
   public char[] getD51uReqDosDate() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().getD51uReqDosDate();
   }

  
	/**
	*  set variable d51uReqDosDate
	*  @param value
	**/
   public void setD51uReqDosDate(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(value);
   } 

     /**
	 * 	Update D51uReqDosDate 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uReqDosDate(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source, sourceIndex);
   	
   }
   
   public void setD51uReqDosDate(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uReqDosDate 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uReqDosDate(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uReqDosDate with another Field
	 *	@param value
	 */
   public void setD51uReqDosDate(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source);
   }  
   
     /**
	 * 	Update D51uReqDosDate 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uReqDosDate(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uReqDosDate 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uReqDosDate(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uOtherReq().setD51uReqDosDate(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2DosYyyy
	 *	@return db2DosYyyy
	 */
   public char[] getDb2DosYyyy() throws CFException  {              
   		return workArea.getDb2ReqDosDateRedefined().getDb2DosYyyy();
   }

  
	/**
	*  set variable db2DosYyyy
	*  @param value
	**/
   public void setDb2DosYyyy(char[] value) throws CFException {
      workArea.getDb2ReqDosDateRedefined().setDb2DosYyyy(value);
   } 

     /**
	 * 	Update Db2DosYyyy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2DosYyyy(char[] source, int sourceIndex) throws CFException {
      workArea.getDb2ReqDosDateRedefined().setDb2DosYyyy(source, sourceIndex);
   	
   }
   
   public void setDb2DosYyyy(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workArea.getDb2ReqDosDateRedefined().setDb2DosYyyy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2DosYyyy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2DosYyyy(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workArea.getDb2ReqDosDateRedefined().setDb2DosYyyy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2DosYyyy with another Field
	 *	@param value
	 */
   public void setDb2DosYyyy(Field source) {
      workArea.getDb2ReqDosDateRedefined().setDb2DosYyyy(source);
   }  
   
     /**
	 * 	Update Db2DosYyyy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2DosYyyy(Field source, int sourceIndex,int sourceLen) {
      workArea.getDb2ReqDosDateRedefined().setDb2DosYyyy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2DosYyyy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2DosYyyy(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workArea.getDb2ReqDosDateRedefined().setDb2DosYyyy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "N" for isNotEndOfFetch()
	 *	@return  Returns true if isNotEndOfFetch() is "N"
	 */
   public boolean isNotEndOfFetch() throws CFException {
      return work.isNotEndOfFetch();
   }

	/**
	*  set values "N"
	*/
   	public void setNotEndOfFetchTrue()  throws CFException{  			
    	work.setNotEndOfFetchTrue();
   	}
	/**
	 *	Returns the value of db2Dash1
	 *	@return db2Dash1
	 */
   public char[] getDb2Dash1() throws CFException  {              
   		return workArea.getDb2ReqDosDateRedefined().getDb2Dash1();
   }

  
	/**
	*  set variable db2Dash1
	*  @param value
	**/
   public void setDb2Dash1(char[] value) throws CFException {
      workArea.getDb2ReqDosDateRedefined().setDb2Dash1(value);
   } 

     /**
	 * 	Update Db2Dash1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2Dash1(char[] source, int sourceIndex) throws CFException {
      workArea.getDb2ReqDosDateRedefined().setDb2Dash1(source, sourceIndex);
   	
   }
   
   public void setDb2Dash1(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workArea.getDb2ReqDosDateRedefined().setDb2Dash1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2Dash1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2Dash1(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workArea.getDb2ReqDosDateRedefined().setDb2Dash1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2Dash1 with another Field
	 *	@param value
	 */
   public void setDb2Dash1(Field source) {
      workArea.getDb2ReqDosDateRedefined().setDb2Dash1(source);
   }  
   
     /**
	 * 	Update Db2Dash1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2Dash1(Field source, int sourceIndex,int sourceLen) {
      workArea.getDb2ReqDosDateRedefined().setDb2Dash1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2Dash1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2Dash1(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workArea.getDb2ReqDosDateRedefined().setDb2Dash1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workArea.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public ProcessFuncCd1OutCtx clone() {
        ProcessFuncCd1OutCtx cloneObj = new ProcessFuncCd1OutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workArea = new WorkArea();
        cloneObj.workArea.set(workArea.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public ProcessFuncCd1OutCtx getProcessFuncCd1OutCtx() {
            return new ProcessFuncCd1OutCtx();
    }
     public class OpenCsplnvCursorInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     WorkArea workArea = D529351uCtx.this.getWorkArea();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DclfeSpiPlnVar dclfeSpiPlnVar = D529351uCtx.this.getDclfeSpiPlnVar();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of plnvPlnNbr
	 *	@return plnvPlnNbr
	 */
   public char[] getPlnvPlnNbr() throws CFException  {              
   		return dclfeSpiPlnVar.getPlnvPlnNbr();
   }

  
	/**
	*  set variable plnvPlnNbr
	*  @param value
	**/
   public void setPlnvPlnNbr(char[] value) throws CFException {
      dclfeSpiPlnVar.setPlnvPlnNbr(value);
   } 

     /**
	 * 	Update PlnvPlnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPlnvPlnNbr(char[] source, int sourceIndex) throws CFException {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex);
   	
   }
   
   public void setPlnvPlnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PlnvPlnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPlnvPlnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PlnvPlnNbr with another Field
	 *	@param value
	 */
   public void setPlnvPlnNbr(Field source) {
      dclfeSpiPlnVar.setPlnvPlnNbr(source);
   }  
   
     /**
	 * 	Update PlnvPlnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPlnvPlnNbr(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PlnvPlnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPlnvPlnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of workArea
	 *	@return workArea
	 */   
	 public WorkArea getWorkArea() {
   	return workArea;
   }


	/**
	 *	Returns the value of dclfeSpiPlnVar
	 *	@return dclfeSpiPlnVar
	 */   
	 public DclfeSpiPlnVar getDclfeSpiPlnVar() {
   	return dclfeSpiPlnVar;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of db2ReqDosDate
	 *	@return db2ReqDosDate
	 */
   public char[] getDb2ReqDosDate() throws CFException  {              
   		return workArea.getDb2ReqDosDate();
   }

  
	/**
	*  set variable db2ReqDosDate
	*  @param value
	**/
   public void setDb2ReqDosDate(char[] value) throws CFException {
      workArea.setDb2ReqDosDate(value);
   } 

     /**
	 * 	Update Db2ReqDosDate 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDb2ReqDosDate(char[] source, int sourceIndex) throws CFException {
      workArea.setDb2ReqDosDate(source, sourceIndex);
   	
   }
   
   public void setDb2ReqDosDate(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      workArea.setDb2ReqDosDate(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Db2ReqDosDate 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDb2ReqDosDate(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workArea.setDb2ReqDosDate(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Db2ReqDosDate with another Field
	 *	@param value
	 */
   public void setDb2ReqDosDate(Field source) {
      workArea.setDb2ReqDosDate(source);
   }  
   
     /**
	 * 	Update Db2ReqDosDate 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDb2ReqDosDate(Field source, int sourceIndex,int sourceLen) {
      workArea.setDb2ReqDosDate(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Db2ReqDosDate 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDb2ReqDosDate(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      workArea.setDb2ReqDosDate(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isEndOfFetch()
	 *	@return  Returns true if isEndOfFetch() is "Y"
	 */
   public boolean isEndOfFetch() throws CFException {
      return work.isEndOfFetch();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfFetchTrue()  throws CFException{  			
    	work.setEndOfFetchTrue();
   	}
	/**
	 *	Returns the value of plnvPolNbr
	 *	@return plnvPolNbr
	 */
   public char[] getPlnvPolNbr() throws CFException  {              
   		return dclfeSpiPlnVar.getPlnvPolNbr();
   }

  
	/**
	*  set variable plnvPolNbr
	*  @param value
	**/
   public void setPlnvPolNbr(char[] value) throws CFException {
      dclfeSpiPlnVar.setPlnvPolNbr(value);
   } 

     /**
	 * 	Update PlnvPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPlnvPolNbr(char[] source, int sourceIndex) throws CFException {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex);
   	
   }
   
   public void setPlnvPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PlnvPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPlnvPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PlnvPolNbr with another Field
	 *	@param value
	 */
   public void setPlnvPolNbr(Field source) {
      dclfeSpiPlnVar.setPlnvPolNbr(source);
   }  
   
     /**
	 * 	Update PlnvPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPlnvPolNbr(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PlnvPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPlnvPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of csSub
	 *	@return csSub
	 */
	public int getCsSub() throws CFException {        
   		return work.getCsSub();
	}
	
	/**
	 * 	Update CsSub with the passed value
	 *	@param number
	 */
	public void setCsSub(int number)  throws CFException{
		work.setCsSub(number);
	}


	public void setCsSub(long number)  throws CFException{
		work.setCsSub((int)number);
	}


	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public OpenCsplnvCursorOutCtx getOpenCsplnvCursorOutCtx() {
            return new OpenCsplnvCursorOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workArea.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dclfeSpiPlnVar.hashCode();
        str += dsmCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public OpenCsplnvCursorInCtx clone() {
        OpenCsplnvCursorInCtx cloneObj = new OpenCsplnvCursorInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workArea = new WorkArea();
        cloneObj.workArea.set(workArea.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dclfeSpiPlnVar = new DclfeSpiPlnVar();
        cloneObj.dclfeSpiPlnVar.set(dclfeSpiPlnVar.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsplnvCursorInCtx getOpenCsplnvCursorInCtx() {
            return new OpenCsplnvCursorInCtx();
    }
     public class OpenCsplnvCursorOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     WorkArea workArea = D529351uCtx.this.getWorkArea();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     DclfeSpiPlnVar dclfeSpiPlnVar = D529351uCtx.this.getDclfeSpiPlnVar();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Test condition 42 for isD51uDb2OpenError()
	 *	@return  Returns true if isD51uDb2OpenError() is 42
	 */
   public boolean isD51uDb2OpenError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2OpenError();
   }

	/**
	*  set values 42
	*/
   	public void setD51uDb2OpenErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2OpenErrorTrue();
   	}
	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of d51uParagraphNum
	 *	@return d51uParagraphNum
	 */
   public char[] getD51uParagraphNum() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uParagraphNum();
   }

  
	/**
	*  set variable d51uParagraphNum
	*  @param value
	**/
   public void setD51uParagraphNum(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(value);
   } 

     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex);
   	
   }
   
   public void setD51uParagraphNum(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uParagraphNum with another Field
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source);
   }  
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uDebugTracer
	 *	@return d51uDebugTracer
	 */
   public char[] getD51uDebugTracer() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uDebugTracer();
   }

  
	/**
	*  set variable d51uDebugTracer
	*  @param value
	**/
   public void setD51uDebugTracer(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(value);
   } 

     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex);
   	
   }
   
   public void setD51uDebugTracer(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uDebugTracer with another Field
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source);
   }  
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of csSub
	 *	@return csSub
	 */
	public int getCsSub() throws CFException {        
   		return work.getCsSub();
	}
	
	/**
	 * 	Update CsSub with the passed value
	 *	@param number
	 */
	public void setCsSub(int number)  throws CFException{
		work.setCsSub(number);
	}


	public void setCsSub(long number)  throws CFException{
		work.setCsSub((int)number);
	}


	/**
	 *	Test condition 999 for isDsmDb2Error()
	 *	@return  Returns true if isDsmDb2Error() is 999
	 */
   public boolean isDsmDb2Error() throws CFException {
      return dsmCallArea.getDsmCommonArea().isDsmDb2Error();
   }

	/**
	*  set values 999
	*/
   	public void setDsmDb2ErrorTrue()  throws CFException{  			
    	dsmCallArea.getDsmCommonArea().setDsmDb2ErrorTrue();
   	}

        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += workArea.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
        str += dclfeSpiPlnVar.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public OpenCsplnvCursorOutCtx clone() {
        OpenCsplnvCursorOutCtx cloneObj = new OpenCsplnvCursorOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.workArea = new WorkArea();
        cloneObj.workArea.set(workArea.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dclfeSpiPlnVar = new DclfeSpiPlnVar();
        cloneObj.dclfeSpiPlnVar.set(dclfeSpiPlnVar.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsplnvCursorOutCtx getOpenCsplnvCursorOutCtx() {
            return new OpenCsplnvCursorOutCtx();
    }
     public class FetchCsplnvInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCsplnv hvHostVariablesCsplnv = D529351uCtx.this.getHvHostVariablesCsplnv();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DclfeSpiPlnVar dclfeSpiPlnVar = D529351uCtx.this.getDclfeSpiPlnVar();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of plnvPlnNbr
	 *	@return plnvPlnNbr
	 */
   public char[] getPlnvPlnNbr() throws CFException  {              
   		return dclfeSpiPlnVar.getPlnvPlnNbr();
   }

  
	/**
	*  set variable plnvPlnNbr
	*  @param value
	**/
   public void setPlnvPlnNbr(char[] value) throws CFException {
      dclfeSpiPlnVar.setPlnvPlnNbr(value);
   } 

     /**
	 * 	Update PlnvPlnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPlnvPlnNbr(char[] source, int sourceIndex) throws CFException {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex);
   	
   }
   
   public void setPlnvPlnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PlnvPlnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPlnvPlnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PlnvPlnNbr with another Field
	 *	@param value
	 */
   public void setPlnvPlnNbr(Field source) {
      dclfeSpiPlnVar.setPlnvPlnNbr(source);
   }  
   
     /**
	 * 	Update PlnvPlnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPlnvPlnNbr(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PlnvPlnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPlnvPlnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


public void setHv15Index(int hv15Index) { 
    D529351uCtx.this.hv15Index = hv15Index;
}

public int getHv15Index() { 
    return D529351uCtx.this.hv15Index;
}

public void setHv01Index(int hv01Index) { 
    D529351uCtx.this.hv01Index = hv01Index;
}

public int getHv01Index() { 
    return D529351uCtx.this.hv01Index;
}
	/**
	 *	Returns the value of hvHostVariablesCsplnv
	 *	@return hvHostVariablesCsplnv
	 */   
	 public HvHostVariablesCsplnv getHvHostVariablesCsplnv() {
   	return hvHostVariablesCsplnv;
   }


	/**
	 *	Returns the value of planMatch
	 *	@return planMatch
	 */
	public int getPlanMatch() throws CFException {        
   		return work.getPlanMatch();
	}
	
	/**
	 * 	Update PlanMatch with the passed value
	 *	@param number
	 */
	public void setPlanMatch(int number)  throws CFException{
		work.setPlanMatch(number);
	}


	public void setPlanMatch(long number)  throws CFException{
		work.setPlanMatch((int)number);
	}


	/**
	 *	Returns the value of hv15MjrDiagEligInd
	 *	@return hv15MjrDiagEligInd
	 */
   public char[] getHv15MjrDiagEligInd(int index) throws CFException  {              
   		return hvHostVariablesCsplnv.getHv15MjrDiagEligInd(index);
   }

  
	/**
	*  set variable hv15MjrDiagEligInd
	*  @param value
	**/
   public void setHv15MjrDiagEligInd(int index,char[] value) throws CFException {
      hvHostVariablesCsplnv.setHv15MjrDiagEligInd((index),value);
   } 

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hv0aPriDiagInd
	 *	@return hv0aPriDiagInd
	 */
   public char[] getHv0aPriDiagInd(int index) throws CFException  {              
   		return hvHostVariablesCsplnv.getHv0aPriDiagInd(index);
   }

  
	/**
	*  set variable hv0aPriDiagInd
	*  @param value
	**/
   public void setHv0aPriDiagInd(int index,char[] value) throws CFException {
      hvHostVariablesCsplnv.setHv0aPriDiagInd((index),value);
   } 

	/**
	 *	Returns the value of hv01SpiTblId
	 *	@return hv01SpiTblId
	 */
   public char[] getHv01SpiTblId(int index) throws CFException  {              
   		return hvHostVariablesCsplnv.getHv01SpiTblId(index);
   }

  
	/**
	*  set variable hv01SpiTblId
	*  @param value
	**/
   public void setHv01SpiTblId(int index,char[] value) throws CFException {
      hvHostVariablesCsplnv.setHv01SpiTblId((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}



public void setHv14Index(int hv14Index) { 
    D529351uCtx.this.hv14Index = hv14Index;
}

public int getHv14Index() { 
    return D529351uCtx.this.hv14Index;
}

public void setHv0aIndex(int hv0aIndex) { 
    D529351uCtx.this.hv0aIndex = hv0aIndex;
}

public int getHv0aIndex() { 
    return D529351uCtx.this.hv0aIndex;
}
	/**
	 *	Returns the value of hv14PosTierTypCd
	 *	@return hv14PosTierTypCd
	 */
   public char[] getHv14PosTierTypCd(int index) throws CFException  {              
   		return hvHostVariablesCsplnv.getHv14PosTierTypCd(index);
   }

  
	/**
	*  set variable hv14PosTierTypCd
	*  @param value
	**/
   public void setHv14PosTierTypCd(int index,char[] value) throws CFException {
      hvHostVariablesCsplnv.setHv14PosTierTypCd((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of plnvPolNbr
	 *	@return plnvPolNbr
	 */
   public char[] getPlnvPolNbr() throws CFException  {              
   		return dclfeSpiPlnVar.getPlnvPolNbr();
   }

  
	/**
	*  set variable plnvPolNbr
	*  @param value
	**/
   public void setPlnvPolNbr(char[] value) throws CFException {
      dclfeSpiPlnVar.setPlnvPolNbr(value);
   } 

     /**
	 * 	Update PlnvPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPlnvPolNbr(char[] source, int sourceIndex) throws CFException {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex);
   	
   }
   
   public void setPlnvPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PlnvPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPlnvPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PlnvPolNbr with another Field
	 *	@param value
	 */
   public void setPlnvPolNbr(Field source) {
      dclfeSpiPlnVar.setPlnvPolNbr(source);
   }  
   
     /**
	 * 	Update PlnvPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPlnvPolNbr(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PlnvPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPlnvPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of csSub
	 *	@return csSub
	 */
	public int getCsSub() throws CFException {        
   		return work.getCsSub();
	}
	
	/**
	 * 	Update CsSub with the passed value
	 *	@param number
	 */
	public void setCsSub(int number)  throws CFException{
		work.setCsSub(number);
	}


	public void setCsSub(long number)  throws CFException{
		work.setCsSub((int)number);
	}


	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public FetchCsplnvOutCtx getFetchCsplnvOutCtx() {
            return new FetchCsplnvOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCsplnv.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dclfeSpiPlnVar.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public FetchCsplnvInCtx clone() {
        FetchCsplnvInCtx cloneObj = new FetchCsplnvInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCsplnv = new HvHostVariablesCsplnv();
        cloneObj.hvHostVariablesCsplnv.set(hvHostVariablesCsplnv.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dclfeSpiPlnVar = new DclfeSpiPlnVar();
        cloneObj.dclfeSpiPlnVar.set(dclfeSpiPlnVar.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsplnvInCtx getFetchCsplnvInCtx() {
            return new FetchCsplnvInCtx();
    }
     public class FetchCsplnvOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCsplnv hvHostVariablesCsplnv = D529351uCtx.this.getHvHostVariablesCsplnv();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DclfeSpiPlnVar dclfeSpiPlnVar = D529351uCtx.this.getDclfeSpiPlnVar();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of plnvPlnNbr
	 *	@return plnvPlnNbr
	 */
   public char[] getPlnvPlnNbr() throws CFException  {              
   		return dclfeSpiPlnVar.getPlnvPlnNbr();
   }

  
	/**
	*  set variable plnvPlnNbr
	*  @param value
	**/
   public void setPlnvPlnNbr(char[] value) throws CFException {
      dclfeSpiPlnVar.setPlnvPlnNbr(value);
   } 

     /**
	 * 	Update PlnvPlnNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPlnvPlnNbr(char[] source, int sourceIndex) throws CFException {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex);
   	
   }
   
   public void setPlnvPlnNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PlnvPlnNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPlnvPlnNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PlnvPlnNbr with another Field
	 *	@param value
	 */
   public void setPlnvPlnNbr(Field source) {
      dclfeSpiPlnVar.setPlnvPlnNbr(source);
   }  
   
     /**
	 * 	Update PlnvPlnNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPlnvPlnNbr(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PlnvPlnNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPlnvPlnNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvPlnNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


public void setHv15Index(int hv15Index) { 
    D529351uCtx.this.hv15Index = hv15Index;
}

public int getHv15Index() { 
    return D529351uCtx.this.hv15Index;
}

public void setHv01Index(int hv01Index) { 
    D529351uCtx.this.hv01Index = hv01Index;
}

public int getHv01Index() { 
    return D529351uCtx.this.hv01Index;
}
	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of d51uRetDiagElgInd
	 *	@return d51uRetDiagElgInd
	 */
   public char[] getD51uRetDiagElgInd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetDiagElgInd();
   }

  
	/**
	*  set variable d51uRetDiagElgInd
	*  @param value
	**/
   public void setD51uRetDiagElgInd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(value);
   } 

     /**
	 * 	Update D51uRetDiagElgInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetDiagElgInd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source, sourceIndex);
   	
   }
   
   public void setD51uRetDiagElgInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetDiagElgInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDiagElgInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetDiagElgInd with another Field
	 *	@param value
	 */
   public void setD51uRetDiagElgInd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source);
   }  
   
     /**
	 * 	Update D51uRetDiagElgInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetDiagElgInd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetDiagElgInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDiagElgInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetDiagElgInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRetPlan
	 *	@return d51uRetPlan
	 */
	public int getD51uRetPlan(int index) throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetPlan();
	}


	/**
	 *	Returns String value of d51uRetPlan
	 *	@return d51uRetPlan
	 */
	public char[]  getD51uRetPlanString(int index) throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetPlanString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uRetPlanIsNumeric(int index)  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index - 1).d51uRetPlanIsNumeric();
	}

	/**
	 * 	Update D51uRetPlan with the passed value
	 *	@param number
	 */
	public void setD51uRetPlan(int index,int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPlan(number);
	}
	

	public void setD51uRetPlan(int index,long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPlan(number);
	}
	
	
	/**
	 * 	Update D51uRetPlan with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uRetPlan(int index,char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPlan(value);
	}
	
	/**
	 * 	Update D51uRetPlan with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uRetPlanString(int index,char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPlan(value);
	}	

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Test condition "Y" for isPlanFound()
	 *	@return  Returns true if isPlanFound() is "Y"
	 */
   public boolean isPlanFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isPlanFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setPlanFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setPlanFoundTrue();
   	}

public void setHv14Index(int hv14Index) { 
    D529351uCtx.this.hv14Index = hv14Index;
}

public int getHv14Index() { 
    return D529351uCtx.this.hv14Index;
}

public void setHv0aIndex(int hv0aIndex) { 
    D529351uCtx.this.hv0aIndex = hv0aIndex;
}

public int getHv0aIndex() { 
    return D529351uCtx.this.hv0aIndex;
}
	/**
	 *	Returns the value of d51uPlnvCnt
	 *	@return d51uPlnvCnt
	 */
	public int getD51uPlnvCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uPlnvCnt();
	}
	
	/**
	 * 	Update D51uPlnvCnt with the passed value
	 *	@param number
	 */
	public void setD51uPlnvCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uPlnvCnt(number);
	}


	public void setD51uPlnvCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uPlnvCnt((int)number);
	}


	/**
	 *	Returns the value of dsnnrows
	 *	@return dsnnrows
	 */
	public int getDsnnrows() throws CFException {        
   		return work.getDsnnrows();
	}
	
	/**
	 * 	Update Dsnnrows with the passed value
	 *	@param number
	 */
	public void setDsnnrows(int number)  throws CFException{
		work.setDsnnrows(number);
	}


	public void setDsnnrows(long number)  throws CFException{
		work.setDsnnrows((int)number);
	}


	/**
	 *	Returns the value of plnvPolNbr
	 *	@return plnvPolNbr
	 */
   public char[] getPlnvPolNbr() throws CFException  {              
   		return dclfeSpiPlnVar.getPlnvPolNbr();
   }

  
	/**
	*  set variable plnvPolNbr
	*  @param value
	**/
   public void setPlnvPolNbr(char[] value) throws CFException {
      dclfeSpiPlnVar.setPlnvPolNbr(value);
   } 

     /**
	 * 	Update PlnvPolNbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPlnvPolNbr(char[] source, int sourceIndex) throws CFException {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex);
   	
   }
   
   public void setPlnvPolNbr(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PlnvPolNbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPlnvPolNbr(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PlnvPolNbr with another Field
	 *	@param value
	 */
   public void setPlnvPolNbr(Field source) {
      dclfeSpiPlnVar.setPlnvPolNbr(source);
   }  
   
     /**
	 * 	Update PlnvPolNbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPlnvPolNbr(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PlnvPolNbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPlnvPolNbr(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiPlnVar.setPlnvPolNbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvHostVariablesCsplnv
	 *	@return hvHostVariablesCsplnv
	 */   
	 public HvHostVariablesCsplnv getHvHostVariablesCsplnv() {
   	return hvHostVariablesCsplnv;
   }


	/**
	 *	Returns the value of d51uNbrOfEntries
	 *	@return d51uNbrOfEntries
	 */
	public long getD51uNbrOfEntries() throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uNbrOfEntries();
	}


	/**
	 *	Returns String value of d51uNbrOfEntries
	 *	@return d51uNbrOfEntries
	 */
	public char[]  getD51uNbrOfEntriesString() throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uNbrOfEntriesString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uNbrOfEntriesIsNumeric()  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().d51uNbrOfEntriesIsNumeric();
	}

	/**
	 * 	Update D51uNbrOfEntries with the passed value
	 *	@param number
	 */
	public void setD51uNbrOfEntries(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uNbrOfEntries(number);
	}
	

	
	/**
	 * 	Update D51uNbrOfEntries with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uNbrOfEntries(char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uNbrOfEntries(value);
	}
	
	/**
	 * 	Update D51uNbrOfEntries with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uNbrOfEntriesString(char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uNbrOfEntries(value);
	}	

	/**
	 *	Returns the value of planMatch
	 *	@return planMatch
	 */
	public int getPlanMatch() throws CFException {        
   		return work.getPlanMatch();
	}
	
	/**
	 * 	Update PlanMatch with the passed value
	 *	@param number
	 */
	public void setPlanMatch(int number)  throws CFException{
		work.setPlanMatch(number);
	}


	public void setPlanMatch(long number)  throws CFException{
		work.setPlanMatch((int)number);
	}


	/**
	 *	Returns the value of hv15MjrDiagEligInd
	 *	@return hv15MjrDiagEligInd
	 */
   public char[] getHv15MjrDiagEligInd(int index) throws CFException  {              
   		return hvHostVariablesCsplnv.getHv15MjrDiagEligInd(index);
   }

  
	/**
	*  set variable hv15MjrDiagEligInd
	*  @param value
	**/
   public void setHv15MjrDiagEligInd(int index,char[] value) throws CFException {
      hvHostVariablesCsplnv.setHv15MjrDiagEligInd((index),value);
   } 

	/**
	 *	Returns the value of d51uRetPriDiagInd
	 *	@return d51uRetPriDiagInd
	 */
   public char[] getD51uRetPriDiagInd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetPriDiagInd();
   }

  
	/**
	*  set variable d51uRetPriDiagInd
	*  @param value
	**/
   public void setD51uRetPriDiagInd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(value);
   } 

     /**
	 * 	Update D51uRetPriDiagInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetPriDiagInd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source, sourceIndex);
   	
   }
   
   public void setD51uRetPriDiagInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetPriDiagInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPriDiagInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetPriDiagInd with another Field
	 *	@param value
	 */
   public void setD51uRetPriDiagInd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source);
   }  
   
     /**
	 * 	Update D51uRetPriDiagInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetPriDiagInd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetPriDiagInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPriDiagInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPriDiagInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isEndOfFetch()
	 *	@return  Returns true if isEndOfFetch() is "Y"
	 */
   public boolean isEndOfFetch() throws CFException {
      return work.isEndOfFetch();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfFetchTrue()  throws CFException{  			
    	work.setEndOfFetchTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hv0aPriDiagInd
	 *	@return hv0aPriDiagInd
	 */
   public char[] getHv0aPriDiagInd(int index) throws CFException  {              
   		return hvHostVariablesCsplnv.getHv0aPriDiagInd(index);
   }

  
	/**
	*  set variable hv0aPriDiagInd
	*  @param value
	**/
   public void setHv0aPriDiagInd(int index,char[] value) throws CFException {
      hvHostVariablesCsplnv.setHv0aPriDiagInd((index),value);
   } 

	/**
	 *	Returns the value of d51uRetFeSpi
	 *	@return d51uRetFeSpi
	 */
   public char[] getD51uRetFeSpi(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetFeSpi();
   }

  
	/**
	*  set variable d51uRetFeSpi
	*  @param value
	**/
   public void setD51uRetFeSpi(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(value);
   } 

     /**
	 * 	Update D51uRetFeSpi 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetFeSpi(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source, sourceIndex);
   	
   }
   
   public void setD51uRetFeSpi(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetFeSpi 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetFeSpi(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetFeSpi with another Field
	 *	@param value
	 */
   public void setD51uRetFeSpi(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source);
   }  
   
     /**
	 * 	Update D51uRetFeSpi 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetFeSpi(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetFeSpi 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetFeSpi(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition " " for isPlanNotFound()
	 *	@return  Returns true if isPlanNotFound() is " "
	 */
   public boolean isPlanNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isPlanNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setPlanNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setPlanNotFoundTrue();
   	}
	/**
	 *	Returns the value of hv01SpiTblId
	 *	@return hv01SpiTblId
	 */
   public char[] getHv01SpiTblId(int index) throws CFException  {              
   		return hvHostVariablesCsplnv.getHv01SpiTblId(index);
   }

  
	/**
	*  set variable hv01SpiTblId
	*  @param value
	**/
   public void setHv01SpiTblId(int index,char[] value) throws CFException {
      hvHostVariablesCsplnv.setHv01SpiTblId((index),value);
   } 

	/**
	 *	Returns the value of hv14PosTierTypCd
	 *	@return hv14PosTierTypCd
	 */
   public char[] getHv14PosTierTypCd(int index) throws CFException  {              
   		return hvHostVariablesCsplnv.getHv14PosTierTypCd(index);
   }

  
	/**
	*  set variable hv14PosTierTypCd
	*  @param value
	**/
   public void setHv14PosTierTypCd(int index,char[] value) throws CFException {
      hvHostVariablesCsplnv.setHv14PosTierTypCd((index),value);
   } 

	/**
	 *	Returns the value of d51uRetStatus
	 *	@return d51uRetStatus
	 */
   public char[] getD51uRetStatus(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetStatus();
   }

  
	/**
	*  set variable d51uRetStatus
	*  @param value
	**/
   public void setD51uRetStatus(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetStatus(value);
   } 

     /**
	 * 	Update D51uRetStatus 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetStatus(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetStatus(source, sourceIndex);
   	
   }
   
   public void setD51uRetStatus(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetStatus(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetStatus 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetStatus(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetStatus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetStatus with another Field
	 *	@param value
	 */
   public void setD51uRetStatus(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetStatus(source);
   }  
   
     /**
	 * 	Update D51uRetStatus 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetStatus(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetStatus(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetStatus 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetStatus(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetStatus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRetPosTierCd
	 *	@return d51uRetPosTierCd
	 */
   public char[] getD51uRetPosTierCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetPosTierCd();
   }

  
	/**
	*  set variable d51uRetPosTierCd
	*  @param value
	**/
   public void setD51uRetPosTierCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(value);
   } 

     /**
	 * 	Update D51uRetPosTierCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetPosTierCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source, sourceIndex);
   	
   }
   
   public void setD51uRetPosTierCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetPosTierCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPosTierCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetPosTierCd with another Field
	 *	@param value
	 */
   public void setD51uRetPosTierCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source);
   }  
   
     /**
	 * 	Update D51uRetPosTierCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetPosTierCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetPosTierCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPosTierCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPosTierCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of csSub
	 *	@return csSub
	 */
	public int getCsSub() throws CFException {        
   		return work.getCsSub();
	}
	
	/**
	 * 	Update CsSub with the passed value
	 *	@param number
	 */
	public void setCsSub(int number)  throws CFException{
		work.setCsSub(number);
	}


	public void setCsSub(long number)  throws CFException{
		work.setCsSub((int)number);
	}


	/**
	 *	Returns the value of d51uRetPolicy
	 *	@return d51uRetPolicy
	 */
   public char[] getD51uRetPolicy(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).getD51uRetPolicy();
   }

  
	/**
	*  set variable d51uRetPolicy
	*  @param value
	**/
   public void setD51uRetPolicy(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(value);
   } 

     /**
	 * 	Update D51uRetPolicy 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetPolicy(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source, sourceIndex);
   	
   }
   
   public void setD51uRetPolicy(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetPolicy 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPolicy(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetPolicy with another Field
	 *	@param value
	 */
   public void setD51uRetPolicy(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source);
   }  
   
     /**
	 * 	Update D51uRetPolicy 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetPolicy(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetPolicy 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetPolicy(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetData().getD51uReturnData(index).setD51uRetPolicy(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCsplnv.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dclfeSpiPlnVar.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public FetchCsplnvOutCtx clone() {
        FetchCsplnvOutCtx cloneObj = new FetchCsplnvOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCsplnv = new HvHostVariablesCsplnv();
        cloneObj.hvHostVariablesCsplnv.set(hvHostVariablesCsplnv.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dclfeSpiPlnVar = new DclfeSpiPlnVar();
        cloneObj.dclfeSpiPlnVar.set(dclfeSpiPlnVar.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsplnvOutCtx getFetchCsplnvOutCtx() {
            return new FetchCsplnvOutCtx();
    }
     public class CloseCsrInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public CloseCsrOutCtx getCloseCsrOutCtx() {
            return new CloseCsrOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrInCtx clone() {
        CloseCsrInCtx cloneObj = new CloseCsrInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrInCtx getCloseCsrInCtx() {
            return new CloseCsrInCtx();
    }
     public class CloseCsrOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Test condition 43 for isD51uDb2CloseError()
	 *	@return  Returns true if isD51uDb2CloseError() is 43
	 */
   public boolean isD51uDb2CloseError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2CloseError();
   }

	/**
	*  set values 43
	*/
   	public void setD51uDb2CloseErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2CloseErrorTrue();
   	}
	/**
	 *	Returns the value of d51uParagraphNum
	 *	@return d51uParagraphNum
	 */
   public char[] getD51uParagraphNum() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uParagraphNum();
   }

  
	/**
	*  set variable d51uParagraphNum
	*  @param value
	**/
   public void setD51uParagraphNum(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(value);
   } 

     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex);
   	
   }
   
   public void setD51uParagraphNum(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uParagraphNum with another Field
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source);
   }  
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "N" for isCloseCsrNg()
	 *	@return  Returns true if isCloseCsrNg() is "N"
	 */
   public boolean isCloseCsrNg() throws CFException {
      return work.isCloseCsrNg();
   }

	/**
	*  set values "N"
	*/
   	public void setCloseCsrNgTrue()  throws CFException{  			
    	work.setCloseCsrNgTrue();
   	}
	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uDebugTracer
	 *	@return d51uDebugTracer
	 */
   public char[] getD51uDebugTracer() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uDebugTracer();
   }

  
	/**
	*  set variable d51uDebugTracer
	*  @param value
	**/
   public void setD51uDebugTracer(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(value);
   } 

     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex);
   	
   }
   
   public void setD51uDebugTracer(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uDebugTracer with another Field
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source);
   }  
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Test condition "Y" for isCloseCsrOk()
	 *	@return  Returns true if isCloseCsrOk() is "Y"
	 */
   public boolean isCloseCsrOk() throws CFException {
      return work.isCloseCsrOk();
   }

	/**
	*  set values "Y"
	*/
   	public void setCloseCsrOkTrue()  throws CFException{  			
    	work.setCloseCsrOkTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsrOutCtx clone() {
        CloseCsrOutCtx cloneObj = new CloseCsrOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsrOutCtx getCloseCsrOutCtx() {
            return new CloseCsrOutCtx();
    }
     public class ProcessFuncCd2Split0InCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     TestVariables testVariables = D529351uCtx.this.getTestVariables();

	/**
	 *	Returns the value of d51uTestDiag21
	 *	@return d51uTestDiag21
	 */
   public char[] getD51uTestDiag21() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag21();
   }

  
	/**
	*  set variable d51uTestDiag21
	*  @param value
	**/
   public void setD51uTestDiag21(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(value);
   } 

     /**
	 * 	Update D51uTestDiag21 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag21(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag21(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag21 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag21(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag21 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag21(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source);
   }  
   
     /**
	 * 	Update D51uTestDiag21 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag21(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag21 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag21(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag22
	 *	@return d51uTestDiag22
	 */
   public char[] getD51uTestDiag22() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag22();
   }

  
	/**
	*  set variable d51uTestDiag22
	*  @param value
	**/
   public void setD51uTestDiag22(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(value);
   } 

     /**
	 * 	Update D51uTestDiag22 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag22(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag22(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag22 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag22(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag22 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag22(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source);
   }  
   
     /**
	 * 	Update D51uTestDiag22 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag22(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag22 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag22(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag04
	 *	@return d51uTestDiag04
	 */
   public char[] getD51uTestDiag04() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag04();
   }

  
	/**
	*  set variable d51uTestDiag04
	*  @param value
	**/
   public void setD51uTestDiag04(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(value);
   } 

     /**
	 * 	Update D51uTestDiag04 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag04(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag04(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag04 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag04(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag04 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag04(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source);
   }  
   
     /**
	 * 	Update D51uTestDiag04 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag04(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag04 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag04(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag18
	 *	@return d51uTestDiag18
	 */
   public char[] getD51uTestDiag18() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag18();
   }

  
	/**
	*  set variable d51uTestDiag18
	*  @param value
	**/
   public void setD51uTestDiag18(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(value);
   } 

     /**
	 * 	Update D51uTestDiag18 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag18(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag18(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag18 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag18(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag18 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag18(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source);
   }  
   
     /**
	 * 	Update D51uTestDiag18 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag18(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag18 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag18(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag03
	 *	@return d51uTestDiag03
	 */
   public char[] getD51uTestDiag03() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag03();
   }

  
	/**
	*  set variable d51uTestDiag03
	*  @param value
	**/
   public void setD51uTestDiag03(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(value);
   } 

     /**
	 * 	Update D51uTestDiag03 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag03(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag03(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag03 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag03(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag03 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag03(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source);
   }  
   
     /**
	 * 	Update D51uTestDiag03 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag03(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag03 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag03(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag15
	 *	@return d51uTestDiag15
	 */
   public char[] getD51uTestDiag15() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag15();
   }

  
	/**
	*  set variable d51uTestDiag15
	*  @param value
	**/
   public void setD51uTestDiag15(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(value);
   } 

     /**
	 * 	Update D51uTestDiag15 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag15(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag15(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag15 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag15(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag15 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag15(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source);
   }  
   
     /**
	 * 	Update D51uTestDiag15 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag15(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag15 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag15(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestProvTyp
	 *	@return d51uTestProvTyp
	 */
   public char[] getD51uTestProvTyp() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestProvTyp();
   }

  
	/**
	*  set variable d51uTestProvTyp
	*  @param value
	**/
   public void setD51uTestProvTyp(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(value);
   } 

     /**
	 * 	Update D51uTestProvTyp 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestProvTyp(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source, sourceIndex);
   	
   }
   
   public void setD51uTestProvTyp(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestProvTyp 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestProvTyp(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestProvTyp with another Field
	 *	@param value
	 */
   public void setD51uTestProvTyp(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source);
   }  
   
     /**
	 * 	Update D51uTestProvTyp 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestProvTyp(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestProvTyp 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestProvTyp(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag20
	 *	@return d51uTestDiag20
	 */
   public char[] getD51uTestDiag20() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag20();
   }

  
	/**
	*  set variable d51uTestDiag20
	*  @param value
	**/
   public void setD51uTestDiag20(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(value);
   } 

     /**
	 * 	Update D51uTestDiag20 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag20(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag20(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag20 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag20(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag20 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag20(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source);
   }  
   
     /**
	 * 	Update D51uTestDiag20 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag20(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag20 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag20(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestSvcCd
	 *	@return d51uTestSvcCd
	 */
   public char[] getD51uTestSvcCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestSvcCd();
   }

  
	/**
	*  set variable d51uTestSvcCd
	*  @param value
	**/
   public void setD51uTestSvcCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(value);
   } 

     /**
	 * 	Update D51uTestSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestSvcCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source, sourceIndex);
   	
   }
   
   public void setD51uTestSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestSvcCd with another Field
	 *	@param value
	 */
   public void setD51uTestSvcCd(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source);
   }  
   
     /**
	 * 	Update D51uTestSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestSvcCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestCpeDescCd
	 *	@return d51uTestCpeDescCd
	 */
   public char[] getD51uTestCpeDescCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestCpeDescCd();
   }

  
	/**
	*  set variable d51uTestCpeDescCd
	*  @param value
	**/
   public void setD51uTestCpeDescCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(value);
   } 

     /**
	 * 	Update D51uTestCpeDescCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestCpeDescCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source, sourceIndex);
   	
   }
   
   public void setD51uTestCpeDescCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestCpeDescCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestCpeDescCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestCpeDescCd with another Field
	 *	@param value
	 */
   public void setD51uTestCpeDescCd(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source);
   }  
   
     /**
	 * 	Update D51uTestCpeDescCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestCpeDescCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestCpeDescCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestCpeDescCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag10
	 *	@return d51uTestDiag10
	 */
   public char[] getD51uTestDiag10() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag10();
   }

  
	/**
	*  set variable d51uTestDiag10
	*  @param value
	**/
   public void setD51uTestDiag10(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(value);
   } 

     /**
	 * 	Update D51uTestDiag10 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag10(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag10(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag10 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag10(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag10 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag10(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source);
   }  
   
     /**
	 * 	Update D51uTestDiag10 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag10(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag10 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag10(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag05
	 *	@return d51uTestDiag05
	 */
   public char[] getD51uTestDiag05() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag05();
   }

  
	/**
	*  set variable d51uTestDiag05
	*  @param value
	**/
   public void setD51uTestDiag05(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(value);
   } 

     /**
	 * 	Update D51uTestDiag05 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag05(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag05(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag05 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag05(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag05 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag05(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source);
   }  
   
     /**
	 * 	Update D51uTestDiag05 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag05(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag05 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag05(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag06
	 *	@return d51uTestDiag06
	 */
   public char[] getD51uTestDiag06() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag06();
   }

  
	/**
	*  set variable d51uTestDiag06
	*  @param value
	**/
   public void setD51uTestDiag06(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(value);
   } 

     /**
	 * 	Update D51uTestDiag06 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag06(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag06(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag06 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag06(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag06 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag06(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source);
   }  
   
     /**
	 * 	Update D51uTestDiag06 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag06(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag06 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag06(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag14
	 *	@return d51uTestDiag14
	 */
   public char[] getD51uTestDiag14() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag14();
   }

  
	/**
	*  set variable d51uTestDiag14
	*  @param value
	**/
   public void setD51uTestDiag14(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(value);
   } 

     /**
	 * 	Update D51uTestDiag14 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag14(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag14(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag14 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag14(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag14 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag14(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source);
   }  
   
     /**
	 * 	Update D51uTestDiag14 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag14(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag14 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag14(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag08
	 *	@return d51uTestDiag08
	 */
   public char[] getD51uTestDiag08() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag08();
   }

  
	/**
	*  set variable d51uTestDiag08
	*  @param value
	**/
   public void setD51uTestDiag08(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(value);
   } 

     /**
	 * 	Update D51uTestDiag08 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag08(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag08(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag08 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag08(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag08 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag08(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source);
   }  
   
     /**
	 * 	Update D51uTestDiag08 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag08(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag08 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag08(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag25
	 *	@return d51uTestDiag25
	 */
   public char[] getD51uTestDiag25() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag25();
   }

  
	/**
	*  set variable d51uTestDiag25
	*  @param value
	**/
   public void setD51uTestDiag25(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(value);
   } 

     /**
	 * 	Update D51uTestDiag25 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag25(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag25(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag25 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag25(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag25 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag25(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source);
   }  
   
     /**
	 * 	Update D51uTestDiag25 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag25(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag25 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag25(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag09
	 *	@return d51uTestDiag09
	 */
   public char[] getD51uTestDiag09() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag09();
   }

  
	/**
	*  set variable d51uTestDiag09
	*  @param value
	**/
   public void setD51uTestDiag09(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(value);
   } 

     /**
	 * 	Update D51uTestDiag09 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag09(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag09(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag09 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag09(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag09 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag09(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source);
   }  
   
     /**
	 * 	Update D51uTestDiag09 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag09(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag09 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag09(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag16
	 *	@return d51uTestDiag16
	 */
   public char[] getD51uTestDiag16() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag16();
   }

  
	/**
	*  set variable d51uTestDiag16
	*  @param value
	**/
   public void setD51uTestDiag16(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(value);
   } 

     /**
	 * 	Update D51uTestDiag16 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag16(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag16(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag16 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag16(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag16 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag16(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source);
   }  
   
     /**
	 * 	Update D51uTestDiag16 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag16(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag16 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag16(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag12
	 *	@return d51uTestDiag12
	 */
   public char[] getD51uTestDiag12() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag12();
   }

  
	/**
	*  set variable d51uTestDiag12
	*  @param value
	**/
   public void setD51uTestDiag12(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(value);
   } 

     /**
	 * 	Update D51uTestDiag12 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag12(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag12(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag12 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag12(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag12 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag12(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source);
   }  
   
     /**
	 * 	Update D51uTestDiag12 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag12(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag12 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag12(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag01
	 *	@return d51uTestDiag01
	 */
   public char[] getD51uTestDiag01() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag01();
   }

  
	/**
	*  set variable d51uTestDiag01
	*  @param value
	**/
   public void setD51uTestDiag01(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(value);
   } 

     /**
	 * 	Update D51uTestDiag01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag01(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag01 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag01(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source);
   }  
   
     /**
	 * 	Update D51uTestDiag01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag01(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag07
	 *	@return d51uTestDiag07
	 */
   public char[] getD51uTestDiag07() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag07();
   }

  
	/**
	*  set variable d51uTestDiag07
	*  @param value
	**/
   public void setD51uTestDiag07(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(value);
   } 

     /**
	 * 	Update D51uTestDiag07 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag07(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag07(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag07 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag07(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag07 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag07(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source);
   }  
   
     /**
	 * 	Update D51uTestDiag07 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag07(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag07 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag07(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag13
	 *	@return d51uTestDiag13
	 */
   public char[] getD51uTestDiag13() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag13();
   }

  
	/**
	*  set variable d51uTestDiag13
	*  @param value
	**/
   public void setD51uTestDiag13(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(value);
   } 

     /**
	 * 	Update D51uTestDiag13 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag13(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag13(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag13 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag13(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag13 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag13(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source);
   }  
   
     /**
	 * 	Update D51uTestDiag13 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag13(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag13 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag13(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag11
	 *	@return d51uTestDiag11
	 */
   public char[] getD51uTestDiag11() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag11();
   }

  
	/**
	*  set variable d51uTestDiag11
	*  @param value
	**/
   public void setD51uTestDiag11(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(value);
   } 

     /**
	 * 	Update D51uTestDiag11 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag11(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag11(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag11 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag11(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag11 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag11(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source);
   }  
   
     /**
	 * 	Update D51uTestDiag11 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag11(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag11 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag11(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag17
	 *	@return d51uTestDiag17
	 */
   public char[] getD51uTestDiag17() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag17();
   }

  
	/**
	*  set variable d51uTestDiag17
	*  @param value
	**/
   public void setD51uTestDiag17(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(value);
   } 

     /**
	 * 	Update D51uTestDiag17 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag17(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag17(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag17 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag17(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag17 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag17(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source);
   }  
   
     /**
	 * 	Update D51uTestDiag17 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag17(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag17 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag17(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag19
	 *	@return d51uTestDiag19
	 */
   public char[] getD51uTestDiag19() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag19();
   }

  
	/**
	*  set variable d51uTestDiag19
	*  @param value
	**/
   public void setD51uTestDiag19(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(value);
   } 

     /**
	 * 	Update D51uTestDiag19 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag19(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag19(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag19 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag19(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag19 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag19(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source);
   }  
   
     /**
	 * 	Update D51uTestDiag19 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag19(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag19 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag19(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag24
	 *	@return d51uTestDiag24
	 */
   public char[] getD51uTestDiag24() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag24();
   }

  
	/**
	*  set variable d51uTestDiag24
	*  @param value
	**/
   public void setD51uTestDiag24(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(value);
   } 

     /**
	 * 	Update D51uTestDiag24 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag24(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag24(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag24 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag24(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag24 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag24(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source);
   }  
   
     /**
	 * 	Update D51uTestDiag24 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag24(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag24 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag24(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestCaus
	 *	@return d51uTestCaus
	 */
   public char[] getD51uTestCaus() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestCaus();
   }

  
	/**
	*  set variable d51uTestCaus
	*  @param value
	**/
   public void setD51uTestCaus(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(value);
   } 

     /**
	 * 	Update D51uTestCaus 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestCaus(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source, sourceIndex);
   	
   }
   
   public void setD51uTestCaus(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestCaus 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestCaus(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestCaus with another Field
	 *	@param value
	 */
   public void setD51uTestCaus(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source);
   }  
   
     /**
	 * 	Update D51uTestCaus 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestCaus(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestCaus 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestCaus(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag23
	 *	@return d51uTestDiag23
	 */
   public char[] getD51uTestDiag23() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag23();
   }

  
	/**
	*  set variable d51uTestDiag23
	*  @param value
	**/
   public void setD51uTestDiag23(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(value);
   } 

     /**
	 * 	Update D51uTestDiag23 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag23(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag23(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag23 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag23(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag23 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag23(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source);
   }  
   
     /**
	 * 	Update D51uTestDiag23 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag23(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag23 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag23(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestPos
	 *	@return d51uTestPos
	 */
   public char[] getD51uTestPos() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestPos();
   }

  
	/**
	*  set variable d51uTestPos
	*  @param value
	**/
   public void setD51uTestPos(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(value);
   } 

     /**
	 * 	Update D51uTestPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestPos(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source, sourceIndex);
   	
   }
   
   public void setD51uTestPos(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestPos(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestPos with another Field
	 *	@param value
	 */
   public void setD51uTestPos(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source);
   }  
   
     /**
	 * 	Update D51uTestPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestPos(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestPos(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag02
	 *	@return d51uTestDiag02
	 */
   public char[] getD51uTestDiag02() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag02();
   }

  
	/**
	*  set variable d51uTestDiag02
	*  @param value
	**/
   public void setD51uTestDiag02(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(value);
   } 

     /**
	 * 	Update D51uTestDiag02 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag02(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag02(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag02 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag02(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag02 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag02(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source);
   }  
   
     /**
	 * 	Update D51uTestDiag02 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag02(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag02 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag02(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public ProcessFuncCd2Split0OutCtx getProcessFuncCd2Split0OutCtx() {
            return new ProcessFuncCd2Split0OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += testVariables.hashCode();
       return str.hashCode();
    }

    public ProcessFuncCd2Split0InCtx clone() {
        ProcessFuncCd2Split0InCtx cloneObj = new ProcessFuncCd2Split0InCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.testVariables = new TestVariables();
        cloneObj.testVariables.set(testVariables.getClonedField());
        return cloneObj;
    }

    }

    public ProcessFuncCd2Split0InCtx getProcessFuncCd2Split0InCtx() {
            return new ProcessFuncCd2Split0InCtx();
    }
     public class ProcessFuncCd2Split0OutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     TestVariables testVariables = D529351uCtx.this.getTestVariables();

	/**
	 *	Returns the value of d51uTestDiag21
	 *	@return d51uTestDiag21
	 */
   public char[] getD51uTestDiag21() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag21();
   }

  
	/**
	*  set variable d51uTestDiag21
	*  @param value
	**/
   public void setD51uTestDiag21(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(value);
   } 

     /**
	 * 	Update D51uTestDiag21 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag21(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag21(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag21 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag21(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag21 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag21(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source);
   }  
   
     /**
	 * 	Update D51uTestDiag21 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag21(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag21 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag21(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag21(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cflgSub
	 *	@return cflgSub
	 */
	public int getCflgSub() throws CFException {        
   		return work.getCflgSub();
	}
	
	/**
	 * 	Update CflgSub with the passed value
	 *	@param number
	 */
	public void setCflgSub(int number)  throws CFException{
		work.setCflgSub(number);
	}


	public void setCflgSub(long number)  throws CFException{
		work.setCflgSub((int)number);
	}


	/**
	 *	Returns the value of testDiag19
	 *	@return testDiag19
	 */
   public char[] getTestDiag19() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag19();
   }

  
	/**
	*  set variable testDiag19
	*  @param value
	**/
   public void setTestDiag19(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag19(value);
   } 

     /**
	 * 	Update TestDiag19 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag19(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag19(source, sourceIndex);
   	
   }
   
   public void setTestDiag19(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag19(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag19 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag19(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag19(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag19 with another Field
	 *	@param value
	 */
   public void setTestDiag19(Field source) {
      testVariables.getTestDiagArea().setTestDiag19(source);
   }  
   
     /**
	 * 	Update TestDiag19 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag19(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag19(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag19 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag19(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag19(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "N" for isNotEndOfFetchComb()
	 *	@return  Returns true if isNotEndOfFetchComb() is "N"
	 */
   public boolean isNotEndOfFetchComb() throws CFException {
      return work.isNotEndOfFetchComb();
   }

	/**
	*  set values "N"
	*/
   	public void setNotEndOfFetchCombTrue()  throws CFException{  			
    	work.setNotEndOfFetchCombTrue();
   	}
	/**
	 *	Returns the value of testCaus
	 *	@return testCaus
	 */
   public char[] getTestCaus() throws CFException  {              
   		return testVariables.getTestCaus();
   }

  
	/**
	*  set variable testCaus
	*  @param value
	**/
   public void setTestCaus(char[] value) throws CFException {
      testVariables.setTestCaus(value);
   } 

     /**
	 * 	Update TestCaus 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestCaus(char[] source, int sourceIndex) throws CFException {
      testVariables.setTestCaus(source, sourceIndex);
   	
   }
   
   public void setTestCaus(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.setTestCaus(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestCaus 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestCaus(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestCaus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestCaus with another Field
	 *	@param value
	 */
   public void setTestCaus(Field source) {
      testVariables.setTestCaus(source);
   }  
   
     /**
	 * 	Update TestCaus 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestCaus(Field source, int sourceIndex,int sourceLen) {
      testVariables.setTestCaus(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestCaus 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestCaus(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestCaus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testSvcCd
	 *	@return testSvcCd
	 */
   public char[] getTestSvcCd() throws CFException  {              
   		return testVariables.getTestSvcCd();
   }

  
	/**
	*  set variable testSvcCd
	*  @param value
	**/
   public void setTestSvcCd(char[] value) throws CFException {
      testVariables.setTestSvcCd(value);
   } 

     /**
	 * 	Update TestSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestSvcCd(char[] source, int sourceIndex) throws CFException {
      testVariables.setTestSvcCd(source, sourceIndex);
   	
   }
   
   public void setTestSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.setTestSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestSvcCd with another Field
	 *	@param value
	 */
   public void setTestSvcCd(Field source) {
      testVariables.setTestSvcCd(source);
   }  
   
     /**
	 * 	Update TestSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestSvcCd(Field source, int sourceIndex,int sourceLen) {
      testVariables.setTestSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag12
	 *	@return testDiag12
	 */
   public char[] getTestDiag12() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag12();
   }

  
	/**
	*  set variable testDiag12
	*  @param value
	**/
   public void setTestDiag12(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag12(value);
   } 

     /**
	 * 	Update TestDiag12 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag12(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag12(source, sourceIndex);
   	
   }
   
   public void setTestDiag12(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag12(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag12 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag12(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag12(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag12 with another Field
	 *	@param value
	 */
   public void setTestDiag12(Field source) {
      testVariables.getTestDiagArea().setTestDiag12(source);
   }  
   
     /**
	 * 	Update TestDiag12 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag12(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag12(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag12 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag12(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag12(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag18
	 *	@return d51uTestDiag18
	 */
   public char[] getD51uTestDiag18() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag18();
   }

  
	/**
	*  set variable d51uTestDiag18
	*  @param value
	**/
   public void setD51uTestDiag18(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(value);
   } 

     /**
	 * 	Update D51uTestDiag18 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag18(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag18(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag18 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag18(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag18 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag18(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source);
   }  
   
     /**
	 * 	Update D51uTestDiag18 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag18(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag18 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag18(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag18(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ipaSub
	 *	@return ipaSub
	 */
	public int getIpaSub() throws CFException {        
   		return work.getIpaSub();
	}
	
	/**
	 * 	Update IpaSub with the passed value
	 *	@param number
	 */
	public void setIpaSub(int number)  throws CFException{
		work.setIpaSub(number);
	}


	public void setIpaSub(long number)  throws CFException{
		work.setIpaSub((int)number);
	}


	/**
	 *	Test condition "Y" for isCloseCsrOk()
	 *	@return  Returns true if isCloseCsrOk() is "Y"
	 */
   public boolean isCloseCsrOk() throws CFException {
      return work.isCloseCsrOk();
   }

	/**
	*  set values "Y"
	*/
   	public void setCloseCsrOkTrue()  throws CFException{  			
    	work.setCloseCsrOkTrue();
   	}
	/**
	 *	Returns the value of testDiag24
	 *	@return testDiag24
	 */
   public char[] getTestDiag24() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag24();
   }

  
	/**
	*  set variable testDiag24
	*  @param value
	**/
   public void setTestDiag24(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag24(value);
   } 

     /**
	 * 	Update TestDiag24 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag24(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag24(source, sourceIndex);
   	
   }
   
   public void setTestDiag24(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag24(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag24 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag24(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag24(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag24 with another Field
	 *	@param value
	 */
   public void setTestDiag24(Field source) {
      testVariables.getTestDiagArea().setTestDiag24(source);
   }  
   
     /**
	 * 	Update TestDiag24 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag24(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag24(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag24 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag24(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag24(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag20
	 *	@return d51uTestDiag20
	 */
   public char[] getD51uTestDiag20() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag20();
   }

  
	/**
	*  set variable d51uTestDiag20
	*  @param value
	**/
   public void setD51uTestDiag20(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(value);
   } 

     /**
	 * 	Update D51uTestDiag20 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag20(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag20(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag20 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag20(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag20 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag20(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source);
   }  
   
     /**
	 * 	Update D51uTestDiag20 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag20(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag20 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag20(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag20(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag10
	 *	@return d51uTestDiag10
	 */
   public char[] getD51uTestDiag10() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag10();
   }

  
	/**
	*  set variable d51uTestDiag10
	*  @param value
	**/
   public void setD51uTestDiag10(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(value);
   } 

     /**
	 * 	Update D51uTestDiag10 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag10(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag10(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag10 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag10(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag10 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag10(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source);
   }  
   
     /**
	 * 	Update D51uTestDiag10 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag10(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag10 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag10(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag10(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uIpaCnt
	 *	@return d51uIpaCnt
	 */
	public int getD51uIpaCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uIpaCnt();
	}
	
	/**
	 * 	Update D51uIpaCnt with the passed value
	 *	@param number
	 */
	public void setD51uIpaCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIpaCnt(number);
	}


	public void setD51uIpaCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIpaCnt((int)number);
	}


	/**
	 *	Test condition " " for isIpaNotFound()
	 *	@return  Returns true if isIpaNotFound() is " "
	 */
   public boolean isIpaNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isIpaNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setIpaNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setIpaNotFoundTrue();
   	}
	/**
	 *	Returns the value of testCpeDescCd
	 *	@return testCpeDescCd
	 */
   public char[] getTestCpeDescCd() throws CFException  {              
   		return testVariables.getTestCpeDescCd();
   }

  
	/**
	*  set variable testCpeDescCd
	*  @param value
	**/
   public void setTestCpeDescCd(char[] value) throws CFException {
      testVariables.setTestCpeDescCd(value);
   } 

     /**
	 * 	Update TestCpeDescCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestCpeDescCd(char[] source, int sourceIndex) throws CFException {
      testVariables.setTestCpeDescCd(source, sourceIndex);
   	
   }
   
   public void setTestCpeDescCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.setTestCpeDescCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestCpeDescCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestCpeDescCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestCpeDescCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestCpeDescCd with another Field
	 *	@param value
	 */
   public void setTestCpeDescCd(Field source) {
      testVariables.setTestCpeDescCd(source);
   }  
   
     /**
	 * 	Update TestCpeDescCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestCpeDescCd(Field source, int sourceIndex,int sourceLen) {
      testVariables.setTestCpeDescCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestCpeDescCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestCpeDescCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestCpeDescCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag05
	 *	@return d51uTestDiag05
	 */
   public char[] getD51uTestDiag05() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag05();
   }

  
	/**
	*  set variable d51uTestDiag05
	*  @param value
	**/
   public void setD51uTestDiag05(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(value);
   } 

     /**
	 * 	Update D51uTestDiag05 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag05(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag05(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag05 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag05(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag05 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag05(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source);
   }  
   
     /**
	 * 	Update D51uTestDiag05 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag05(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag05 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag05(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag05(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition " " for isProvtypNotFound()
	 *	@return  Returns true if isProvtypNotFound() is " "
	 */
   public boolean isProvtypNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isProvtypNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setProvtypNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setProvtypNotFoundTrue();
   	}
	/**
	 *	Returns the value of d51uFcndCnt
	 *	@return d51uFcndCnt
	 */
	public int getD51uFcndCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uFcndCnt();
	}
	
	/**
	 * 	Update D51uFcndCnt with the passed value
	 *	@param number
	 */
	public void setD51uFcndCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uFcndCnt(number);
	}


	public void setD51uFcndCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uFcndCnt((int)number);
	}


	/**
	 *	Returns the value of testDiag03
	 *	@return testDiag03
	 */
   public char[] getTestDiag03() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag03();
   }

  
	/**
	*  set variable testDiag03
	*  @param value
	**/
   public void setTestDiag03(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag03(value);
   } 

     /**
	 * 	Update TestDiag03 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag03(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag03(source, sourceIndex);
   	
   }
   
   public void setTestDiag03(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag03(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag03 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag03(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag03(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag03 with another Field
	 *	@param value
	 */
   public void setTestDiag03(Field source) {
      testVariables.getTestDiagArea().setTestDiag03(source);
   }  
   
     /**
	 * 	Update TestDiag03 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag03(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag03(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag03 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag03(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag03(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag06
	 *	@return d51uTestDiag06
	 */
   public char[] getD51uTestDiag06() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag06();
   }

  
	/**
	*  set variable d51uTestDiag06
	*  @param value
	**/
   public void setD51uTestDiag06(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(value);
   } 

     /**
	 * 	Update D51uTestDiag06 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag06(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag06(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag06 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag06(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag06 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag06(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source);
   }  
   
     /**
	 * 	Update D51uTestDiag06 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag06(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag06 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag06(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag06(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag08
	 *	@return d51uTestDiag08
	 */
   public char[] getD51uTestDiag08() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag08();
   }

  
	/**
	*  set variable d51uTestDiag08
	*  @param value
	**/
   public void setD51uTestDiag08(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(value);
   } 

     /**
	 * 	Update D51uTestDiag08 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag08(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag08(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag08 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag08(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag08 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag08(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source);
   }  
   
     /**
	 * 	Update D51uTestDiag08 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag08(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag08 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag08(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag08(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag25
	 *	@return d51uTestDiag25
	 */
   public char[] getD51uTestDiag25() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag25();
   }

  
	/**
	*  set variable d51uTestDiag25
	*  @param value
	**/
   public void setD51uTestDiag25(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(value);
   } 

     /**
	 * 	Update D51uTestDiag25 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag25(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag25(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag25 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag25(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag25 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag25(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source);
   }  
   
     /**
	 * 	Update D51uTestDiag25 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag25(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag25 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag25(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag25(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag09
	 *	@return testDiag09
	 */
   public char[] getTestDiag09() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag09();
   }

  
	/**
	*  set variable testDiag09
	*  @param value
	**/
   public void setTestDiag09(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag09(value);
   } 

     /**
	 * 	Update TestDiag09 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag09(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag09(source, sourceIndex);
   	
   }
   
   public void setTestDiag09(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag09(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag09 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag09(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag09(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag09 with another Field
	 *	@param value
	 */
   public void setTestDiag09(Field source) {
      testVariables.getTestDiagArea().setTestDiag09(source);
   }  
   
     /**
	 * 	Update TestDiag09 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag09(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag09(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag09 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag09(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag09(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag04
	 *	@return testDiag04
	 */
   public char[] getTestDiag04() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag04();
   }

  
	/**
	*  set variable testDiag04
	*  @param value
	**/
   public void setTestDiag04(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag04(value);
   } 

     /**
	 * 	Update TestDiag04 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag04(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag04(source, sourceIndex);
   	
   }
   
   public void setTestDiag04(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag04(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag04 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag04(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag04(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag04 with another Field
	 *	@param value
	 */
   public void setTestDiag04(Field source) {
      testVariables.getTestDiagArea().setTestDiag04(source);
   }  
   
     /**
	 * 	Update TestDiag04 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag04(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag04(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag04 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag04(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag04(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag12
	 *	@return d51uTestDiag12
	 */
   public char[] getD51uTestDiag12() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag12();
   }

  
	/**
	*  set variable d51uTestDiag12
	*  @param value
	**/
   public void setD51uTestDiag12(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(value);
   } 

     /**
	 * 	Update D51uTestDiag12 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag12(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag12(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag12 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag12(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag12 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag12(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source);
   }  
   
     /**
	 * 	Update D51uTestDiag12 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag12(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag12 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag12(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag12(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag01
	 *	@return d51uTestDiag01
	 */
   public char[] getD51uTestDiag01() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag01();
   }

  
	/**
	*  set variable d51uTestDiag01
	*  @param value
	**/
   public void setD51uTestDiag01(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(value);
   } 

     /**
	 * 	Update D51uTestDiag01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag01(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag01 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag01(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source);
   }  
   
     /**
	 * 	Update D51uTestDiag01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag01(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag02
	 *	@return testDiag02
	 */
   public char[] getTestDiag02() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag02();
   }

  
	/**
	*  set variable testDiag02
	*  @param value
	**/
   public void setTestDiag02(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag02(value);
   } 

     /**
	 * 	Update TestDiag02 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag02(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag02(source, sourceIndex);
   	
   }
   
   public void setTestDiag02(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag02(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag02 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag02(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag02(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag02 with another Field
	 *	@param value
	 */
   public void setTestDiag02(Field source) {
      testVariables.getTestDiagArea().setTestDiag02(source);
   }  
   
     /**
	 * 	Update TestDiag02 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag02(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag02(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag02 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag02(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag02(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag07
	 *	@return d51uTestDiag07
	 */
   public char[] getD51uTestDiag07() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag07();
   }

  
	/**
	*  set variable d51uTestDiag07
	*  @param value
	**/
   public void setD51uTestDiag07(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(value);
   } 

     /**
	 * 	Update D51uTestDiag07 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag07(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag07(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag07 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag07(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag07 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag07(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source);
   }  
   
     /**
	 * 	Update D51uTestDiag07 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag07(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag07 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag07(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag07(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag14
	 *	@return testDiag14
	 */
   public char[] getTestDiag14() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag14();
   }

  
	/**
	*  set variable testDiag14
	*  @param value
	**/
   public void setTestDiag14(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag14(value);
   } 

     /**
	 * 	Update TestDiag14 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag14(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag14(source, sourceIndex);
   	
   }
   
   public void setTestDiag14(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag14(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag14 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag14(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag14(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag14 with another Field
	 *	@param value
	 */
   public void setTestDiag14(Field source) {
      testVariables.getTestDiagArea().setTestDiag14(source);
   }  
   
     /**
	 * 	Update TestDiag14 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag14(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag14(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag14 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag14(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag14(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag16
	 *	@return testDiag16
	 */
   public char[] getTestDiag16() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag16();
   }

  
	/**
	*  set variable testDiag16
	*  @param value
	**/
   public void setTestDiag16(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag16(value);
   } 

     /**
	 * 	Update TestDiag16 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag16(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag16(source, sourceIndex);
   	
   }
   
   public void setTestDiag16(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag16(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag16 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag16(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag16(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag16 with another Field
	 *	@param value
	 */
   public void setTestDiag16(Field source) {
      testVariables.getTestDiagArea().setTestDiag16(source);
   }  
   
     /**
	 * 	Update TestDiag16 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag16(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag16(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag16 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag16(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag16(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag17
	 *	@return d51uTestDiag17
	 */
   public char[] getD51uTestDiag17() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag17();
   }

  
	/**
	*  set variable d51uTestDiag17
	*  @param value
	**/
   public void setD51uTestDiag17(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(value);
   } 

     /**
	 * 	Update D51uTestDiag17 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag17(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag17(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag17 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag17(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag17 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag17(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source);
   }  
   
     /**
	 * 	Update D51uTestDiag17 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag17(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag17 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag17(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag17(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag19
	 *	@return d51uTestDiag19
	 */
   public char[] getD51uTestDiag19() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag19();
   }

  
	/**
	*  set variable d51uTestDiag19
	*  @param value
	**/
   public void setD51uTestDiag19(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(value);
   } 

     /**
	 * 	Update D51uTestDiag19 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag19(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag19(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag19 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag19(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag19 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag19(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source);
   }  
   
     /**
	 * 	Update D51uTestDiag19 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag19(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag19 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag19(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag19(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag24
	 *	@return d51uTestDiag24
	 */
   public char[] getD51uTestDiag24() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag24();
   }

  
	/**
	*  set variable d51uTestDiag24
	*  @param value
	**/
   public void setD51uTestDiag24(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(value);
   } 

     /**
	 * 	Update D51uTestDiag24 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag24(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag24(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag24 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag24(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag24 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag24(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source);
   }  
   
     /**
	 * 	Update D51uTestDiag24 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag24(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag24 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag24(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag24(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition " " for isCausecdNotFound()
	 *	@return  Returns true if isCausecdNotFound() is " "
	 */
   public boolean isCausecdNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isCausecdNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setCausecdNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setCausecdNotFoundTrue();
   	}
	/**
	 *	Returns the value of d51uTestCaus
	 *	@return d51uTestCaus
	 */
   public char[] getD51uTestCaus() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestCaus();
   }

  
	/**
	*  set variable d51uTestCaus
	*  @param value
	**/
   public void setD51uTestCaus(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(value);
   } 

     /**
	 * 	Update D51uTestCaus 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestCaus(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source, sourceIndex);
   	
   }
   
   public void setD51uTestCaus(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestCaus 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestCaus(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestCaus with another Field
	 *	@param value
	 */
   public void setD51uTestCaus(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source);
   }  
   
     /**
	 * 	Update D51uTestCaus 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestCaus(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestCaus 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestCaus(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCaus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag18
	 *	@return testDiag18
	 */
   public char[] getTestDiag18() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag18();
   }

  
	/**
	*  set variable testDiag18
	*  @param value
	**/
   public void setTestDiag18(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag18(value);
   } 

     /**
	 * 	Update TestDiag18 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag18(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag18(source, sourceIndex);
   	
   }
   
   public void setTestDiag18(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag18(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag18 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag18(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag18(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag18 with another Field
	 *	@param value
	 */
   public void setTestDiag18(Field source) {
      testVariables.getTestDiagArea().setTestDiag18(source);
   }  
   
     /**
	 * 	Update TestDiag18 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag18(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag18(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag18 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag18(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag18(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag23
	 *	@return d51uTestDiag23
	 */
   public char[] getD51uTestDiag23() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag23();
   }

  
	/**
	*  set variable d51uTestDiag23
	*  @param value
	**/
   public void setD51uTestDiag23(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(value);
   } 

     /**
	 * 	Update D51uTestDiag23 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag23(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag23(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag23 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag23(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag23 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag23(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source);
   }  
   
     /**
	 * 	Update D51uTestDiag23 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag23(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag23 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag23(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag23(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag23
	 *	@return testDiag23
	 */
   public char[] getTestDiag23() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag23();
   }

  
	/**
	*  set variable testDiag23
	*  @param value
	**/
   public void setTestDiag23(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag23(value);
   } 

     /**
	 * 	Update TestDiag23 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag23(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag23(source, sourceIndex);
   	
   }
   
   public void setTestDiag23(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag23(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag23 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag23(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag23(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag23 with another Field
	 *	@param value
	 */
   public void setTestDiag23(Field source) {
      testVariables.getTestDiagArea().setTestDiag23(source);
   }  
   
     /**
	 * 	Update TestDiag23 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag23(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag23(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag23 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag23(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag23(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uPtypCnt
	 *	@return d51uPtypCnt
	 */
	public int getD51uPtypCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uPtypCnt();
	}
	
	/**
	 * 	Update D51uPtypCnt with the passed value
	 *	@param number
	 */
	public void setD51uPtypCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uPtypCnt(number);
	}


	public void setD51uPtypCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uPtypCnt((int)number);
	}


	/**
	 *	Test condition " " for isPosNotFound()
	 *	@return  Returns true if isPosNotFound() is " "
	 */
   public boolean isPosNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isPosNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setPosNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setPosNotFoundTrue();
   	}
	/**
	 *	Returns the value of testDiag08
	 *	@return testDiag08
	 */
   public char[] getTestDiag08() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag08();
   }

  
	/**
	*  set variable testDiag08
	*  @param value
	**/
   public void setTestDiag08(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag08(value);
   } 

     /**
	 * 	Update TestDiag08 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag08(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag08(source, sourceIndex);
   	
   }
   
   public void setTestDiag08(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag08(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag08 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag08(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag08(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag08 with another Field
	 *	@param value
	 */
   public void setTestDiag08(Field source) {
      testVariables.getTestDiagArea().setTestDiag08(source);
   }  
   
     /**
	 * 	Update TestDiag08 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag08(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag08(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag08 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag08(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag08(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausCnt
	 *	@return d51uCausCnt
	 */
	public int getD51uCausCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uCausCnt();
	}
	
	/**
	 * 	Update D51uCausCnt with the passed value
	 *	@param number
	 */
	public void setD51uCausCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uCausCnt(number);
	}


	public void setD51uCausCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uCausCnt((int)number);
	}


	/**
	 *	Returns the value of fcndSub
	 *	@return fcndSub
	 */
	public int getFcndSub() throws CFException {        
   		return work.getFcndSub();
	}
	
	/**
	 * 	Update FcndSub with the passed value
	 *	@param number
	 */
	public void setFcndSub(int number)  throws CFException{
		work.setFcndSub(number);
	}


	public void setFcndSub(long number)  throws CFException{
		work.setFcndSub((int)number);
	}


	/**
	 *	Returns the value of testDiag05
	 *	@return testDiag05
	 */
   public char[] getTestDiag05() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag05();
   }

  
	/**
	*  set variable testDiag05
	*  @param value
	**/
   public void setTestDiag05(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag05(value);
   } 

     /**
	 * 	Update TestDiag05 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag05(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag05(source, sourceIndex);
   	
   }
   
   public void setTestDiag05(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag05(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag05 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag05(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag05(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag05 with another Field
	 *	@param value
	 */
   public void setTestDiag05(Field source) {
      testVariables.getTestDiagArea().setTestDiag05(source);
   }  
   
     /**
	 * 	Update TestDiag05 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag05(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag05(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag05 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag05(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag05(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag17
	 *	@return testDiag17
	 */
   public char[] getTestDiag17() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag17();
   }

  
	/**
	*  set variable testDiag17
	*  @param value
	**/
   public void setTestDiag17(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag17(value);
   } 

     /**
	 * 	Update TestDiag17 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag17(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag17(source, sourceIndex);
   	
   }
   
   public void setTestDiag17(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag17(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag17 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag17(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag17(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag17 with another Field
	 *	@param value
	 */
   public void setTestDiag17(Field source) {
      testVariables.getTestDiagArea().setTestDiag17(source);
   }  
   
     /**
	 * 	Update TestDiag17 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag17(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag17(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag17 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag17(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag17(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag01
	 *	@return testDiag01
	 */
   public char[] getTestDiag01() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag01();
   }

  
	/**
	*  set variable testDiag01
	*  @param value
	**/
   public void setTestDiag01(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag01(value);
   } 

     /**
	 * 	Update TestDiag01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag01(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag01(source, sourceIndex);
   	
   }
   
   public void setTestDiag01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag01 with another Field
	 *	@param value
	 */
   public void setTestDiag01(Field source) {
      testVariables.getTestDiagArea().setTestDiag01(source);
   }  
   
     /**
	 * 	Update TestDiag01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag01(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag22
	 *	@return testDiag22
	 */
   public char[] getTestDiag22() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag22();
   }

  
	/**
	*  set variable testDiag22
	*  @param value
	**/
   public void setTestDiag22(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag22(value);
   } 

     /**
	 * 	Update TestDiag22 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag22(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag22(source, sourceIndex);
   	
   }
   
   public void setTestDiag22(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag22(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag22 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag22(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag22(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag22 with another Field
	 *	@param value
	 */
   public void setTestDiag22(Field source) {
      testVariables.getTestDiagArea().setTestDiag22(source);
   }  
   
     /**
	 * 	Update TestDiag22 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag22(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag22(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag22 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag22(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag22(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag22
	 *	@return d51uTestDiag22
	 */
   public char[] getD51uTestDiag22() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag22();
   }

  
	/**
	*  set variable d51uTestDiag22
	*  @param value
	**/
   public void setD51uTestDiag22(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(value);
   } 

     /**
	 * 	Update D51uTestDiag22 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag22(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag22(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag22 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag22(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag22 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag22(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source);
   }  
   
     /**
	 * 	Update D51uTestDiag22 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag22(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag22 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag22(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag22(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag04
	 *	@return d51uTestDiag04
	 */
   public char[] getD51uTestDiag04() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag04();
   }

  
	/**
	*  set variable d51uTestDiag04
	*  @param value
	**/
   public void setD51uTestDiag04(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(value);
   } 

     /**
	 * 	Update D51uTestDiag04 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag04(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag04(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag04 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag04(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag04 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag04(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source);
   }  
   
     /**
	 * 	Update D51uTestDiag04 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag04(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag04 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag04(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag04(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causSub
	 *	@return causSub
	 */
	public int getCausSub() throws CFException {        
   		return work.getCausSub();
	}
	
	/**
	 * 	Update CausSub with the passed value
	 *	@param number
	 */
	public void setCausSub(int number)  throws CFException{
		work.setCausSub(number);
	}


	public void setCausSub(long number)  throws CFException{
		work.setCausSub((int)number);
	}


	/**
	 *	Returns the value of d51uTestDiag03
	 *	@return d51uTestDiag03
	 */
   public char[] getD51uTestDiag03() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag03();
   }

  
	/**
	*  set variable d51uTestDiag03
	*  @param value
	**/
   public void setD51uTestDiag03(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(value);
   } 

     /**
	 * 	Update D51uTestDiag03 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag03(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag03(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag03 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag03(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag03 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag03(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source);
   }  
   
     /**
	 * 	Update D51uTestDiag03 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag03(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag03 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag03(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag03(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition " " for isCflgNotFound()
	 *	@return  Returns true if isCflgNotFound() is " "
	 */
   public boolean isCflgNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isCflgNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setCflgNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setCflgNotFoundTrue();
   	}
	/**
	 *	Returns the value of d51uTestDiag15
	 *	@return d51uTestDiag15
	 */
   public char[] getD51uTestDiag15() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag15();
   }

  
	/**
	*  set variable d51uTestDiag15
	*  @param value
	**/
   public void setD51uTestDiag15(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(value);
   } 

     /**
	 * 	Update D51uTestDiag15 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag15(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag15(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag15 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag15(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag15 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag15(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source);
   }  
   
     /**
	 * 	Update D51uTestDiag15 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag15(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag15 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag15(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag15
	 *	@return testDiag15
	 */
   public char[] getTestDiag15() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag15();
   }

  
	/**
	*  set variable testDiag15
	*  @param value
	**/
   public void setTestDiag15(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag15(value);
   } 

     /**
	 * 	Update TestDiag15 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag15(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag15(source, sourceIndex);
   	
   }
   
   public void setTestDiag15(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag15(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag15 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag15(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag15 with another Field
	 *	@param value
	 */
   public void setTestDiag15(Field source) {
      testVariables.getTestDiagArea().setTestDiag15(source);
   }  
   
     /**
	 * 	Update TestDiag15 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag15(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag15(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag15 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag15(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestProvTyp
	 *	@return d51uTestProvTyp
	 */
   public char[] getD51uTestProvTyp() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestProvTyp();
   }

  
	/**
	*  set variable d51uTestProvTyp
	*  @param value
	**/
   public void setD51uTestProvTyp(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(value);
   } 

     /**
	 * 	Update D51uTestProvTyp 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestProvTyp(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source, sourceIndex);
   	
   }
   
   public void setD51uTestProvTyp(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestProvTyp 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestProvTyp(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestProvTyp with another Field
	 *	@param value
	 */
   public void setD51uTestProvTyp(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source);
   }  
   
     /**
	 * 	Update D51uTestProvTyp 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestProvTyp(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestProvTyp 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestProvTyp(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag10
	 *	@return testDiag10
	 */
   public char[] getTestDiag10() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag10();
   }

  
	/**
	*  set variable testDiag10
	*  @param value
	**/
   public void setTestDiag10(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag10(value);
   } 

     /**
	 * 	Update TestDiag10 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag10(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag10(source, sourceIndex);
   	
   }
   
   public void setTestDiag10(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag10(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag10 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag10(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag10(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag10 with another Field
	 *	@param value
	 */
   public void setTestDiag10(Field source) {
      testVariables.getTestDiagArea().setTestDiag10(source);
   }  
   
     /**
	 * 	Update TestDiag10 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag10(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag10(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag10 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag10(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag10(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestSvcCd
	 *	@return d51uTestSvcCd
	 */
   public char[] getD51uTestSvcCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestSvcCd();
   }

  
	/**
	*  set variable d51uTestSvcCd
	*  @param value
	**/
   public void setD51uTestSvcCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(value);
   } 

     /**
	 * 	Update D51uTestSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestSvcCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source, sourceIndex);
   	
   }
   
   public void setD51uTestSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestSvcCd with another Field
	 *	@param value
	 */
   public void setD51uTestSvcCd(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source);
   }  
   
     /**
	 * 	Update D51uTestSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestSvcCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestCpeDescCd
	 *	@return d51uTestCpeDescCd
	 */
   public char[] getD51uTestCpeDescCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestCpeDescCd();
   }

  
	/**
	*  set variable d51uTestCpeDescCd
	*  @param value
	**/
   public void setD51uTestCpeDescCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(value);
   } 

     /**
	 * 	Update D51uTestCpeDescCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestCpeDescCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source, sourceIndex);
   	
   }
   
   public void setD51uTestCpeDescCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestCpeDescCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestCpeDescCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestCpeDescCd with another Field
	 *	@param value
	 */
   public void setD51uTestCpeDescCd(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source);
   }  
   
     /**
	 * 	Update D51uTestCpeDescCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestCpeDescCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestCpeDescCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestCpeDescCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestCpeDescCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag25
	 *	@return testDiag25
	 */
   public char[] getTestDiag25() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag25();
   }

  
	/**
	*  set variable testDiag25
	*  @param value
	**/
   public void setTestDiag25(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag25(value);
   } 

     /**
	 * 	Update TestDiag25 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag25(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag25(source, sourceIndex);
   	
   }
   
   public void setTestDiag25(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag25(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag25 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag25(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag25(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag25 with another Field
	 *	@param value
	 */
   public void setTestDiag25(Field source) {
      testVariables.getTestDiagArea().setTestDiag25(source);
   }  
   
     /**
	 * 	Update TestDiag25 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag25(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag25(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag25 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag25(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag25(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag11
	 *	@return testDiag11
	 */
   public char[] getTestDiag11() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag11();
   }

  
	/**
	*  set variable testDiag11
	*  @param value
	**/
   public void setTestDiag11(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag11(value);
   } 

     /**
	 * 	Update TestDiag11 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag11(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag11(source, sourceIndex);
   	
   }
   
   public void setTestDiag11(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag11(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag11 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag11(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag11(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag11 with another Field
	 *	@param value
	 */
   public void setTestDiag11(Field source) {
      testVariables.getTestDiagArea().setTestDiag11(source);
   }  
   
     /**
	 * 	Update TestDiag11 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag11(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag11(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag11 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag11(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag11(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag14
	 *	@return d51uTestDiag14
	 */
   public char[] getD51uTestDiag14() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag14();
   }

  
	/**
	*  set variable d51uTestDiag14
	*  @param value
	**/
   public void setD51uTestDiag14(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(value);
   } 

     /**
	 * 	Update D51uTestDiag14 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag14(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag14(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag14 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag14(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag14 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag14(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source);
   }  
   
     /**
	 * 	Update D51uTestDiag14 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag14(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag14 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag14(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag14(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypSub
	 *	@return ptypSub
	 */
	public int getPtypSub() throws CFException {        
   		return work.getPtypSub();
	}
	
	/**
	 * 	Update PtypSub with the passed value
	 *	@param number
	 */
	public void setPtypSub(int number)  throws CFException{
		work.setPtypSub(number);
	}


	public void setPtypSub(long number)  throws CFException{
		work.setPtypSub((int)number);
	}


	/**
	 *	Returns the value of testPos
	 *	@return testPos
	 */
   public char[] getTestPos() throws CFException  {              
   		return testVariables.getTestPos();
   }

  
	/**
	*  set variable testPos
	*  @param value
	**/
   public void setTestPos(char[] value) throws CFException {
      testVariables.setTestPos(value);
   } 

     /**
	 * 	Update TestPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestPos(char[] source, int sourceIndex) throws CFException {
      testVariables.setTestPos(source, sourceIndex);
   	
   }
   
   public void setTestPos(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.setTestPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestPos(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestPos with another Field
	 *	@param value
	 */
   public void setTestPos(Field source) {
      testVariables.setTestPos(source);
   }  
   
     /**
	 * 	Update TestPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestPos(Field source, int sourceIndex,int sourceLen) {
      testVariables.setTestPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestPos(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag07
	 *	@return testDiag07
	 */
   public char[] getTestDiag07() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag07();
   }

  
	/**
	*  set variable testDiag07
	*  @param value
	**/
   public void setTestDiag07(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag07(value);
   } 

     /**
	 * 	Update TestDiag07 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag07(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag07(source, sourceIndex);
   	
   }
   
   public void setTestDiag07(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag07(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag07 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag07(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag07(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag07 with another Field
	 *	@param value
	 */
   public void setTestDiag07(Field source) {
      testVariables.getTestDiagArea().setTestDiag07(source);
   }  
   
     /**
	 * 	Update TestDiag07 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag07(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag07(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag07 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag07(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag07(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag09
	 *	@return d51uTestDiag09
	 */
   public char[] getD51uTestDiag09() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag09();
   }

  
	/**
	*  set variable d51uTestDiag09
	*  @param value
	**/
   public void setD51uTestDiag09(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(value);
   } 

     /**
	 * 	Update D51uTestDiag09 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag09(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag09(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag09 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag09(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag09 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag09(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source);
   }  
   
     /**
	 * 	Update D51uTestDiag09 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag09(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag09 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag09(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag09(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag16
	 *	@return d51uTestDiag16
	 */
   public char[] getD51uTestDiag16() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag16();
   }

  
	/**
	*  set variable d51uTestDiag16
	*  @param value
	**/
   public void setD51uTestDiag16(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(value);
   } 

     /**
	 * 	Update D51uTestDiag16 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag16(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag16(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag16 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag16(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag16 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag16(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source);
   }  
   
     /**
	 * 	Update D51uTestDiag16 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag16(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag16 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag16(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag16(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag21
	 *	@return testDiag21
	 */
   public char[] getTestDiag21() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag21();
   }

  
	/**
	*  set variable testDiag21
	*  @param value
	**/
   public void setTestDiag21(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag21(value);
   } 

     /**
	 * 	Update TestDiag21 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag21(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag21(source, sourceIndex);
   	
   }
   
   public void setTestDiag21(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag21(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag21 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag21(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag21(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag21 with another Field
	 *	@param value
	 */
   public void setTestDiag21(Field source) {
      testVariables.getTestDiagArea().setTestDiag21(source);
   }  
   
     /**
	 * 	Update TestDiag21 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag21(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag21(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag21 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag21(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag21(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag06
	 *	@return testDiag06
	 */
   public char[] getTestDiag06() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag06();
   }

  
	/**
	*  set variable testDiag06
	*  @param value
	**/
   public void setTestDiag06(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag06(value);
   } 

     /**
	 * 	Update TestDiag06 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag06(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag06(source, sourceIndex);
   	
   }
   
   public void setTestDiag06(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag06(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag06 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag06(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag06(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag06 with another Field
	 *	@param value
	 */
   public void setTestDiag06(Field source) {
      testVariables.getTestDiagArea().setTestDiag06(source);
   }  
   
     /**
	 * 	Update TestDiag06 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag06(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag06(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag06 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag06(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag06(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag13
	 *	@return d51uTestDiag13
	 */
   public char[] getD51uTestDiag13() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag13();
   }

  
	/**
	*  set variable d51uTestDiag13
	*  @param value
	**/
   public void setD51uTestDiag13(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(value);
   } 

     /**
	 * 	Update D51uTestDiag13 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag13(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag13(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag13 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag13(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag13 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag13(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source);
   }  
   
     /**
	 * 	Update D51uTestDiag13 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag13(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag13 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag13(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag13(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag11
	 *	@return d51uTestDiag11
	 */
   public char[] getD51uTestDiag11() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag11();
   }

  
	/**
	*  set variable d51uTestDiag11
	*  @param value
	**/
   public void setD51uTestDiag11(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(value);
   } 

     /**
	 * 	Update D51uTestDiag11 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag11(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag11(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag11 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag11(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag11 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag11(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source);
   }  
   
     /**
	 * 	Update D51uTestDiag11 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag11(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag11 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag11(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag11(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCflgCnt
	 *	@return d51uCflgCnt
	 */
	public int getD51uCflgCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uCflgCnt();
	}
	
	/**
	 * 	Update D51uCflgCnt with the passed value
	 *	@param number
	 */
	public void setD51uCflgCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uCflgCnt(number);
	}


	public void setD51uCflgCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uCflgCnt((int)number);
	}


	/**
	 *	Returns the value of d51uTestPos
	 *	@return d51uTestPos
	 */
   public char[] getD51uTestPos() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestPos();
   }

  
	/**
	*  set variable d51uTestPos
	*  @param value
	**/
   public void setD51uTestPos(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(value);
   } 

     /**
	 * 	Update D51uTestPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestPos(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source, sourceIndex);
   	
   }
   
   public void setD51uTestPos(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestPos(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestPos with another Field
	 *	@param value
	 */
   public void setD51uTestPos(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source);
   }  
   
     /**
	 * 	Update D51uTestPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestPos(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestPos(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().setD51uTestPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag13
	 *	@return testDiag13
	 */
   public char[] getTestDiag13() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag13();
   }

  
	/**
	*  set variable testDiag13
	*  @param value
	**/
   public void setTestDiag13(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag13(value);
   } 

     /**
	 * 	Update TestDiag13 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag13(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag13(source, sourceIndex);
   	
   }
   
   public void setTestDiag13(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag13(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag13 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag13(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag13(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag13 with another Field
	 *	@param value
	 */
   public void setTestDiag13(Field source) {
      testVariables.getTestDiagArea().setTestDiag13(source);
   }  
   
     /**
	 * 	Update TestDiag13 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag13(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag13(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag13 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag13(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag13(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "N" for isNotEndOfFetchMain()
	 *	@return  Returns true if isNotEndOfFetchMain() is "N"
	 */
   public boolean isNotEndOfFetchMain() throws CFException {
      return work.isNotEndOfFetchMain();
   }

	/**
	*  set values "N"
	*/
   	public void setNotEndOfFetchMainTrue()  throws CFException{  			
    	work.setNotEndOfFetchMainTrue();
   	}
	/**
	 *	Returns the value of testProvTyp
	 *	@return testProvTyp
	 */
   public char[] getTestProvTyp() throws CFException  {              
   		return testVariables.getTestProvTyp();
   }

  
	/**
	*  set variable testProvTyp
	*  @param value
	**/
   public void setTestProvTyp(char[] value) throws CFException {
      testVariables.setTestProvTyp(value);
   } 

     /**
	 * 	Update TestProvTyp 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestProvTyp(char[] source, int sourceIndex) throws CFException {
      testVariables.setTestProvTyp(source, sourceIndex);
   	
   }
   
   public void setTestProvTyp(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.setTestProvTyp(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestProvTyp 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestProvTyp(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestProvTyp with another Field
	 *	@param value
	 */
   public void setTestProvTyp(Field source) {
      testVariables.setTestProvTyp(source);
   }  
   
     /**
	 * 	Update TestProvTyp 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestProvTyp(Field source, int sourceIndex,int sourceLen) {
      testVariables.setTestProvTyp(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestProvTyp 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestProvTyp(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag20
	 *	@return testDiag20
	 */
   public char[] getTestDiag20() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag20();
   }

  
	/**
	*  set variable testDiag20
	*  @param value
	**/
   public void setTestDiag20(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag20(value);
   } 

     /**
	 * 	Update TestDiag20 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag20(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag20(source, sourceIndex);
   	
   }
   
   public void setTestDiag20(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag20(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag20 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag20(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag20(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag20 with another Field
	 *	@param value
	 */
   public void setTestDiag20(Field source) {
      testVariables.getTestDiagArea().setTestDiag20(source);
   }  
   
     /**
	 * 	Update TestDiag20 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag20(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag20(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag20 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag20(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag20(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uTestDiag02
	 *	@return d51uTestDiag02
	 */
   public char[] getD51uTestDiag02() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().getD51uTestDiag02();
   }

  
	/**
	*  set variable d51uTestDiag02
	*  @param value
	**/
   public void setD51uTestDiag02(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(value);
   } 

     /**
	 * 	Update D51uTestDiag02 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uTestDiag02(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source, sourceIndex);
   	
   }
   
   public void setD51uTestDiag02(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uTestDiag02 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag02(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uTestDiag02 with another Field
	 *	@param value
	 */
   public void setD51uTestDiag02(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source);
   }  
   
     /**
	 * 	Update D51uTestDiag02 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uTestDiag02(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uTestDiag02 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uTestDiag02(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uTestValues().getD51uTestDiagArea().setD51uTestDiag02(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += testVariables.hashCode();
       return str.hashCode();
    }

    public ProcessFuncCd2Split0OutCtx clone() {
        ProcessFuncCd2Split0OutCtx cloneObj = new ProcessFuncCd2Split0OutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.testVariables = new TestVariables();
        cloneObj.testVariables.set(testVariables.getClonedField());
        return cloneObj;
    }

    }

    public ProcessFuncCd2Split0OutCtx getProcessFuncCd2Split0OutCtx() {
            return new ProcessFuncCd2Split0OutCtx();
    }
     public class ProcessFuncCd2Split1InCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     LstIcdKey lstIcdKey = D529351uCtx.this.getLstIcdKey();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();

	/**
	 *	Returns the value of d51uLstClmIcdInd
	 *	@return d51uLstClmIcdInd
	 */
   public char[] getD51uLstClmIcdInd() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().getD51uLstClmIcdInd();
   }

  
	/**
	*  set variable d51uLstClmIcdInd
	*  @param value
	**/
   public void setD51uLstClmIcdInd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(value);
   } 

     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex);
   	
   }
   
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uLstClmIcdInd with another Field
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source);
   }  
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public ProcessFuncCd2Split1OutCtx getProcessFuncCd2Split1OutCtx() {
            return new ProcessFuncCd2Split1OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += lstIcdKey.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public ProcessFuncCd2Split1InCtx clone() {
        ProcessFuncCd2Split1InCtx cloneObj = new ProcessFuncCd2Split1InCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.lstIcdKey = new LstIcdKey();
        cloneObj.lstIcdKey.set(lstIcdKey.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public ProcessFuncCd2Split1InCtx getProcessFuncCd2Split1InCtx() {
            return new ProcessFuncCd2Split1InCtx();
    }
     public class ProcessFuncCd2Split1OutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     LstIcdKey lstIcdKey = D529351uCtx.this.getLstIcdKey();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();

	/**
	 *	Test condition " " for isSvcdNotFound()
	 *	@return  Returns true if isSvcdNotFound() is " "
	 */
   public boolean isSvcdNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isSvcdNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setSvcdNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setSvcdNotFoundTrue();
   	}
	/**
	 *	Returns the value of d51uFrtoCnt
	 *	@return d51uFrtoCnt
	 */
	public int getD51uFrtoCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uFrtoCnt();
	}
	
	/**
	 * 	Update D51uFrtoCnt with the passed value
	 *	@param number
	 */
	public void setD51uFrtoCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uFrtoCnt(number);
	}


	public void setD51uFrtoCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uFrtoCnt((int)number);
	}


	/**
	 *	Test condition " " for isIcdNotFound()
	 *	@return  Returns true if isIcdNotFound() is " "
	 */
   public boolean isIcdNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isIcdNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setIcdNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setIcdNotFoundTrue();
   	}
	/**
	 *	Returns the value of lstClmIcdInd
	 *	@return lstClmIcdInd
	 */
   public char[] getLstClmIcdInd() throws CFException  {              
   		return lstIcdKey.getLstClmIcdInd();
   }

  
	/**
	*  set variable lstClmIcdInd
	*  @param value
	**/
   public void setLstClmIcdInd(char[] value) throws CFException {
      lstIcdKey.setLstClmIcdInd(value);
   } 

     /**
	 * 	Update LstClmIcdInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setLstClmIcdInd(char[] source, int sourceIndex) throws CFException {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex);
   	
   }
   
   public void setLstClmIcdInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update LstClmIcdInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setLstClmIcdInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update LstClmIcdInd with another Field
	 *	@param value
	 */
   public void setLstClmIcdInd(Field source) {
      lstIcdKey.setLstClmIcdInd(source);
   }  
   
     /**
	 * 	Update LstClmIcdInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setLstClmIcdInd(Field source, int sourceIndex,int sourceLen) {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update LstClmIcdInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setLstClmIcdInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uLstClmIcdInd
	 *	@return d51uLstClmIcdInd
	 */
   public char[] getD51uLstClmIcdInd() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().getD51uLstClmIcdInd();
   }

  
	/**
	*  set variable d51uLstClmIcdInd
	*  @param value
	**/
   public void setD51uLstClmIcdInd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(value);
   } 

     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex);
   	
   }
   
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uLstClmIcdInd with another Field
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source);
   }  
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "N" for isNotEndOfFetchIcd()
	 *	@return  Returns true if isNotEndOfFetchIcd() is "N"
	 */
   public boolean isNotEndOfFetchIcd() throws CFException {
      return work.isNotEndOfFetchIcd();
   }

	/**
	*  set values "N"
	*/
   	public void setNotEndOfFetchIcdTrue()  throws CFException{  			
    	work.setNotEndOfFetchIcdTrue();
   	}
	/**
	 *	Test condition "Y" for isCloseCsrOk()
	 *	@return  Returns true if isCloseCsrOk() is "Y"
	 */
   public boolean isCloseCsrOk() throws CFException {
      return work.isCloseCsrOk();
   }

	/**
	*  set values "Y"
	*/
   	public void setCloseCsrOkTrue()  throws CFException{  			
    	work.setCloseCsrOkTrue();
   	}
	/**
	 *	Test condition "N" for isNotEndOfFetchFrto()
	 *	@return  Returns true if isNotEndOfFetchFrto() is "N"
	 */
   public boolean isNotEndOfFetchFrto() throws CFException {
      return work.isNotEndOfFetchFrto();
   }

	/**
	*  set values "N"
	*/
   	public void setNotEndOfFetchFrtoTrue()  throws CFException{  			
    	work.setNotEndOfFetchFrtoTrue();
   	}
	/**
	 *	Returns the value of frtoSub
	 *	@return frtoSub
	 */
	public int getFrtoSub() throws CFException {        
   		return work.getFrtoSub();
	}
	
	/**
	 * 	Update FrtoSub with the passed value
	 *	@param number
	 */
	public void setFrtoSub(int number)  throws CFException{
		work.setFrtoSub(number);
	}


	public void setFrtoSub(long number)  throws CFException{
		work.setFrtoSub((int)number);
	}


	/**
	 *	Returns the value of d51uIcdCnt
	 *	@return d51uIcdCnt
	 */
	public int getD51uIcdCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uIcdCnt();
	}
	
	/**
	 * 	Update D51uIcdCnt with the passed value
	 *	@param number
	 */
	public void setD51uIcdCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIcdCnt(number);
	}


	public void setD51uIcdCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIcdCnt((int)number);
	}


	/**
	 *	Returns the value of icdSub
	 *	@return icdSub
	 */
	public int getIcdSub() throws CFException {        
   		return work.getIcdSub();
	}
	
	/**
	 * 	Update IcdSub with the passed value
	 *	@param number
	 */
	public void setIcdSub(int number)  throws CFException{
		work.setIcdSub(number);
	}


	public void setIcdSub(long number)  throws CFException{
		work.setIcdSub((int)number);
	}



        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += lstIcdKey.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public ProcessFuncCd2Split1OutCtx clone() {
        ProcessFuncCd2Split1OutCtx cloneObj = new ProcessFuncCd2Split1OutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.lstIcdKey = new LstIcdKey();
        cloneObj.lstIcdKey.set(lstIcdKey.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public ProcessFuncCd2Split1OutCtx getProcessFuncCd2Split1OutCtx() {
            return new ProcessFuncCd2Split1OutCtx();
    }
     public class OpenCsfrtoCursorInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     DclfeSpiRuleFrToSvc dclfeSpiRuleFrToSvc = D529351uCtx.this.getDclfeSpiRuleFrToSvc();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of frtoSpiTblId
	 *	@return frtoSpiTblId
	 */
   public char[] getFrtoSpiTblId() throws CFException  {              
   		return dclfeSpiRuleFrToSvc.getFrtoSpiTblId();
   }

  
	/**
	*  set variable frtoSpiTblId
	*  @param value
	**/
   public void setFrtoSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(value);
   } 

     /**
	 * 	Update FrtoSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source, sourceIndex);
   	
   }
   
   public void setFrtoSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoSpiTblId with another Field
	 *	@param value
	 */
   public void setFrtoSpiTblId(Field source) {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source);
   }  
   
     /**
	 * 	Update FrtoSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isEndOfFetchFrto()
	 *	@return  Returns true if isEndOfFetchFrto() is "Y"
	 */
   public boolean isEndOfFetchFrto() throws CFException {
      return work.isEndOfFetchFrto();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfFetchFrtoTrue()  throws CFException{  			
    	work.setEndOfFetchFrtoTrue();
   	}
	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleFrToSvc
	 *	@return dclfeSpiRuleFrToSvc
	 */   
	 public DclfeSpiRuleFrToSvc getDclfeSpiRuleFrToSvc() {
   	return dclfeSpiRuleFrToSvc;
   }


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public OpenCsfrtoCursorOutCtx getOpenCsfrtoCursorOutCtx() {
            return new OpenCsfrtoCursorOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
        str += dclfeSpiRuleFrToSvc.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public OpenCsfrtoCursorInCtx clone() {
        OpenCsfrtoCursorInCtx cloneObj = new OpenCsfrtoCursorInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dclfeSpiRuleFrToSvc = new DclfeSpiRuleFrToSvc();
        cloneObj.dclfeSpiRuleFrToSvc.set(dclfeSpiRuleFrToSvc.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsfrtoCursorInCtx getOpenCsfrtoCursorInCtx() {
            return new OpenCsfrtoCursorInCtx();
    }
     public class OpenCsfrtoCursorOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     DclfeSpiRuleFrToSvc dclfeSpiRuleFrToSvc = D529351uCtx.this.getDclfeSpiRuleFrToSvc();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Test condition 42 for isD51uDb2OpenError()
	 *	@return  Returns true if isD51uDb2OpenError() is 42
	 */
   public boolean isD51uDb2OpenError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2OpenError();
   }

	/**
	*  set values 42
	*/
   	public void setD51uDb2OpenErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2OpenErrorTrue();
   	}
	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of d51uParagraphNum
	 *	@return d51uParagraphNum
	 */
   public char[] getD51uParagraphNum() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uParagraphNum();
   }

  
	/**
	*  set variable d51uParagraphNum
	*  @param value
	**/
   public void setD51uParagraphNum(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(value);
   } 

     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex);
   	
   }
   
   public void setD51uParagraphNum(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uParagraphNum with another Field
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source);
   }  
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uDebugTracer
	 *	@return d51uDebugTracer
	 */
   public char[] getD51uDebugTracer() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uDebugTracer();
   }

  
	/**
	*  set variable d51uDebugTracer
	*  @param value
	**/
   public void setD51uDebugTracer(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(value);
   } 

     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex);
   	
   }
   
   public void setD51uDebugTracer(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uDebugTracer with another Field
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source);
   }  
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 999 for isDsmDb2Error()
	 *	@return  Returns true if isDsmDb2Error() is 999
	 */
   public boolean isDsmDb2Error() throws CFException {
      return dsmCallArea.getDsmCommonArea().isDsmDb2Error();
   }

	/**
	*  set values 999
	*/
   	public void setDsmDb2ErrorTrue()  throws CFException{  			
    	dsmCallArea.getDsmCommonArea().setDsmDb2ErrorTrue();
   	}

        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
        str += dclfeSpiRuleFrToSvc.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public OpenCsfrtoCursorOutCtx clone() {
        OpenCsfrtoCursorOutCtx cloneObj = new OpenCsfrtoCursorOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dclfeSpiRuleFrToSvc = new DclfeSpiRuleFrToSvc();
        cloneObj.dclfeSpiRuleFrToSvc.set(dclfeSpiRuleFrToSvc.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsfrtoCursorOutCtx getOpenCsfrtoCursorOutCtx() {
            return new OpenCsfrtoCursorOutCtx();
    }
     public class FetchCsfrtoInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCsfrto hvHostVariablesCsfrto = D529351uCtx.this.getHvHostVariablesCsfrto();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of hv13SvcTypCd
	 *	@return hv13SvcTypCd
	 */
   public char[] getHv13SvcTypCd(int index) throws CFException  {              
   		return hvHostVariablesCsfrto.getHv13SvcTypCd(index);
   }

  
	/**
	*  set variable hv13SvcTypCd
	*  @param value
	**/
   public void setHv13SvcTypCd(int index,char[] value) throws CFException {
      hvHostVariablesCsfrto.setHv13SvcTypCd((index),value);
   } 


public void setHv10Index(int hv10Index) { 
    D529351uCtx.this.hv10Index = hv10Index;
}

public int getHv10Index() { 
    return D529351uCtx.this.hv10Index;
}

public void setHv11Index(int hv11Index) { 
    D529351uCtx.this.hv11Index = hv11Index;
}

public int getHv11Index() { 
    return D529351uCtx.this.hv11Index;
}
	/**
	 *	Returns the value of hvHostVariablesCsfrto
	 *	@return hvHostVariablesCsfrto
	 */   
	 public HvHostVariablesCsfrto getHvHostVariablesCsfrto() {
   	return hvHostVariablesCsfrto;
   }



public void setHv09Index(int hv09Index) { 
    D529351uCtx.this.hv09Index = hv09Index;
}

public int getHv09Index() { 
    return D529351uCtx.this.hv09Index;
}
	/**
	 *	Returns the value of hv11ClmFrmSvcCd
	 *	@return hv11ClmFrmSvcCd
	 */
   public char[] getHv11ClmFrmSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCsfrto.getHv11ClmFrmSvcCd(index);
   }

  
	/**
	*  set variable hv11ClmFrmSvcCd
	*  @param value
	**/
   public void setHv11ClmFrmSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCsfrto.setHv11ClmFrmSvcCd((index),value);
   } 

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hv08SvcDrvPos
	 *	@return hv08SvcDrvPos
	 */
   public char[] getHv08SvcDrvPos(int index) throws CFException  {              
   		return hvHostVariablesCsfrto.getHv08SvcDrvPos(index);
   }

  
	/**
	*  set variable hv08SvcDrvPos
	*  @param value
	**/
   public void setHv08SvcDrvPos(int index,char[] value) throws CFException {
      hvHostVariablesCsfrto.setHv08SvcDrvPos((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}



public void setHv13Index(int hv13Index) { 
    D529351uCtx.this.hv13Index = hv13Index;
}

public int getHv13Index() { 
    return D529351uCtx.this.hv13Index;
}
	/**
	 *	Returns the value of hv09SvcDrvSvc
	 *	@return hv09SvcDrvSvc
	 */
   public char[] getHv09SvcDrvSvc(int index) throws CFException  {              
   		return hvHostVariablesCsfrto.getHv09SvcDrvSvc(index);
   }

  
	/**
	*  set variable hv09SvcDrvSvc
	*  @param value
	**/
   public void setHv09SvcDrvSvc(int index,char[] value) throws CFException {
      hvHostVariablesCsfrto.setHv09SvcDrvSvc((index),value);
   } 

	/**
	 *	Returns the value of hv10SvcDrvCau
	 *	@return hv10SvcDrvCau
	 */
   public char[] getHv10SvcDrvCau(int index) throws CFException  {              
   		return hvHostVariablesCsfrto.getHv10SvcDrvCau(index);
   }

  
	/**
	*  set variable hv10SvcDrvCau
	*  @param value
	**/
   public void setHv10SvcDrvCau(int index,char[] value) throws CFException {
      hvHostVariablesCsfrto.setHv10SvcDrvCau((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


public void setHv12Index(int hv12Index) { 
    D529351uCtx.this.hv12Index = hv12Index;
}

public int getHv12Index() { 
    return D529351uCtx.this.hv12Index;
}
	/**
	 *	Returns the value of hv12ClmToSvcCd
	 *	@return hv12ClmToSvcCd
	 */
   public char[] getHv12ClmToSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCsfrto.getHv12ClmToSvcCd(index);
   }

  
	/**
	*  set variable hv12ClmToSvcCd
	*  @param value
	**/
   public void setHv12ClmToSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCsfrto.setHv12ClmToSvcCd((index),value);
   } 

	/**
	 *	Returns the value of frtoSub
	 *	@return frtoSub
	 */
	public int getFrtoSub() throws CFException {        
   		return work.getFrtoSub();
	}
	
	/**
	 * 	Update FrtoSub with the passed value
	 *	@param number
	 */
	public void setFrtoSub(int number)  throws CFException{
		work.setFrtoSub(number);
	}


	public void setFrtoSub(long number)  throws CFException{
		work.setFrtoSub((int)number);
	}


	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


public void setHv08Index(int hv08Index) { 
    D529351uCtx.this.hv08Index = hv08Index;
}

public int getHv08Index() { 
    return D529351uCtx.this.hv08Index;
}

        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public FetchCsfrtoOutCtx getFetchCsfrtoOutCtx() {
            return new FetchCsfrtoOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCsfrto.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public FetchCsfrtoInCtx clone() {
        FetchCsfrtoInCtx cloneObj = new FetchCsfrtoInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCsfrto = new HvHostVariablesCsfrto();
        cloneObj.hvHostVariablesCsfrto.set(hvHostVariablesCsfrto.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsfrtoInCtx getFetchCsfrtoInCtx() {
            return new FetchCsfrtoInCtx();
    }
     public class FetchCsfrtoOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCsfrto hvHostVariablesCsfrto = D529351uCtx.this.getHvHostVariablesCsfrto();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of hv13SvcTypCd
	 *	@return hv13SvcTypCd
	 */
   public char[] getHv13SvcTypCd(int index) throws CFException  {              
   		return hvHostVariablesCsfrto.getHv13SvcTypCd(index);
   }

  
	/**
	*  set variable hv13SvcTypCd
	*  @param value
	**/
   public void setHv13SvcTypCd(int index,char[] value) throws CFException {
      hvHostVariablesCsfrto.setHv13SvcTypCd((index),value);
   } 


public void setHv10Index(int hv10Index) { 
    D529351uCtx.this.hv10Index = hv10Index;
}

public int getHv10Index() { 
    return D529351uCtx.this.hv10Index;
}
	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of hvHostVariablesCsfrto
	 *	@return hvHostVariablesCsfrto
	 */   
	 public HvHostVariablesCsfrto getHvHostVariablesCsfrto() {
   	return hvHostVariablesCsfrto;
   }


	/**
	 *	Test condition "Y" for isEndOfFetchFrto()
	 *	@return  Returns true if isEndOfFetchFrto() is "Y"
	 */
   public boolean isEndOfFetchFrto() throws CFException {
      return work.isEndOfFetchFrto();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfFetchFrtoTrue()  throws CFException{  			
    	work.setEndOfFetchFrtoTrue();
   	}
	/**
	 *	Returns the value of d51uFrtoCnt
	 *	@return d51uFrtoCnt
	 */
	public int getD51uFrtoCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uFrtoCnt();
	}
	
	/**
	 * 	Update D51uFrtoCnt with the passed value
	 *	@param number
	 */
	public void setD51uFrtoCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uFrtoCnt(number);
	}


	public void setD51uFrtoCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uFrtoCnt((int)number);
	}


	/**
	 *	Test condition " " for isSvcdNotFound()
	 *	@return  Returns true if isSvcdNotFound() is " "
	 */
   public boolean isSvcdNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isSvcdNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setSvcdNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setSvcdNotFoundTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hv09SvcDrvSvc
	 *	@return hv09SvcDrvSvc
	 */
   public char[] getHv09SvcDrvSvc(int index) throws CFException  {              
   		return hvHostVariablesCsfrto.getHv09SvcDrvSvc(index);
   }

  
	/**
	*  set variable hv09SvcDrvSvc
	*  @param value
	**/
   public void setHv09SvcDrvSvc(int index,char[] value) throws CFException {
      hvHostVariablesCsfrto.setHv09SvcDrvSvc((index),value);
   } 

	/**
	 *	Returns the value of d51uFrtoClmToSvcCd
	 *	@return d51uFrtoClmToSvcCd
	 */
   public char[] getD51uFrtoClmToSvcCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoClmToSvcCd();
   }

  
	/**
	*  set variable d51uFrtoClmToSvcCd
	*  @param value
	**/
   public void setD51uFrtoClmToSvcCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(value);
   } 

     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoClmToSvcCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoClmToSvcCd with another Field
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source);
   }  
   
     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoClmToSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmToSvcCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmToSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsnnrows
	 *	@return dsnnrows
	 */
	public int getDsnnrows() throws CFException {        
   		return work.getDsnnrows();
	}
	
	/**
	 * 	Update Dsnnrows with the passed value
	 *	@param number
	 */
	public void setDsnnrows(int number)  throws CFException{
		work.setDsnnrows(number);
	}


	public void setDsnnrows(long number)  throws CFException{
		work.setDsnnrows((int)number);
	}


	/**
	 *	Returns the value of hv12ClmToSvcCd
	 *	@return hv12ClmToSvcCd
	 */
   public char[] getHv12ClmToSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCsfrto.getHv12ClmToSvcCd(index);
   }

  
	/**
	*  set variable hv12ClmToSvcCd
	*  @param value
	**/
   public void setHv12ClmToSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCsfrto.setHv12ClmToSvcCd((index),value);
   } 

	/**
	 *	Returns the value of d51uFrtoDrvCau
	 *	@return d51uFrtoDrvCau
	 */
   public char[] getD51uFrtoDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoDrvCau();
   }

  
	/**
	*  set variable d51uFrtoDrvCau
	*  @param value
	**/
   public void setD51uFrtoDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(value);
   } 

     /**
	 * 	Update D51uFrtoDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoDrvCau with another Field
	 *	@param value
	 */
   public void setD51uFrtoDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source);
   }  
   
     /**
	 * 	Update D51uFrtoDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


public void setHv11Index(int hv11Index) { 
    D529351uCtx.this.hv11Index = hv11Index;
}

public int getHv11Index() { 
    return D529351uCtx.this.hv11Index;
}
	/**
	 *	Returns the value of d51uFrtoClmFrmSvcCd
	 *	@return d51uFrtoClmFrmSvcCd
	 */
   public char[] getD51uFrtoClmFrmSvcCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoClmFrmSvcCd();
   }

  
	/**
	*  set variable d51uFrtoClmFrmSvcCd
	*  @param value
	**/
   public void setD51uFrtoClmFrmSvcCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(value);
   } 

     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoClmFrmSvcCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoClmFrmSvcCd with another Field
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source);
   }  
   
     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoClmFrmSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoClmFrmSvcCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoClmFrmSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


public void setHv09Index(int hv09Index) { 
    D529351uCtx.this.hv09Index = hv09Index;
}

public int getHv09Index() { 
    return D529351uCtx.this.hv09Index;
}
	/**
	 *	Returns the value of hv11ClmFrmSvcCd
	 *	@return hv11ClmFrmSvcCd
	 */
   public char[] getHv11ClmFrmSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCsfrto.getHv11ClmFrmSvcCd(index);
   }

  
	/**
	*  set variable hv11ClmFrmSvcCd
	*  @param value
	**/
   public void setHv11ClmFrmSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCsfrto.setHv11ClmFrmSvcCd((index),value);
   } 

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hv08SvcDrvPos
	 *	@return hv08SvcDrvPos
	 */
   public char[] getHv08SvcDrvPos(int index) throws CFException  {              
   		return hvHostVariablesCsfrto.getHv08SvcDrvPos(index);
   }

  
	/**
	*  set variable hv08SvcDrvPos
	*  @param value
	**/
   public void setHv08SvcDrvPos(int index,char[] value) throws CFException {
      hvHostVariablesCsfrto.setHv08SvcDrvPos((index),value);
   } 

	/**
	 *	Returns the value of d51uFrtoDrvSvc
	 *	@return d51uFrtoDrvSvc
	 */
   public char[] getD51uFrtoDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoDrvSvc();
   }

  
	/**
	*  set variable d51uFrtoDrvSvc
	*  @param value
	**/
   public void setD51uFrtoDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(value);
   } 

     /**
	 * 	Update D51uFrtoDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uFrtoDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uFrtoDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


public void setHv13Index(int hv13Index) { 
    D529351uCtx.this.hv13Index = hv13Index;
}

public int getHv13Index() { 
    return D529351uCtx.this.hv13Index;
}
	/**
	 *	Returns the value of hv10SvcDrvCau
	 *	@return hv10SvcDrvCau
	 */
   public char[] getHv10SvcDrvCau(int index) throws CFException  {              
   		return hvHostVariablesCsfrto.getHv10SvcDrvCau(index);
   }

  
	/**
	*  set variable hv10SvcDrvCau
	*  @param value
	**/
   public void setHv10SvcDrvCau(int index,char[] value) throws CFException {
      hvHostVariablesCsfrto.setHv10SvcDrvCau((index),value);
   } 

	/**
	 *	Returns the value of d51uFrtoSvcTypCd
	 *	@return d51uFrtoSvcTypCd
	 */
   public char[] getD51uFrtoSvcTypCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoSvcTypCd();
   }

  
	/**
	*  set variable d51uFrtoSvcTypCd
	*  @param value
	**/
   public void setD51uFrtoSvcTypCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoSvcTypCd(value);
   } 

     /**
	 * 	Update D51uFrtoSvcTypCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoSvcTypCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoSvcTypCd(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoSvcTypCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoSvcTypCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoSvcTypCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoSvcTypCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoSvcTypCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoSvcTypCd with another Field
	 *	@param value
	 */
   public void setD51uFrtoSvcTypCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoSvcTypCd(source);
   }  
   
     /**
	 * 	Update D51uFrtoSvcTypCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoSvcTypCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoSvcTypCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoSvcTypCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoSvcTypCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoSvcTypCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


public void setHv12Index(int hv12Index) { 
    D529351uCtx.this.hv12Index = hv12Index;
}

public int getHv12Index() { 
    return D529351uCtx.this.hv12Index;
}
	/**
	 *	Test condition "Y" for isSvcdFound()
	 *	@return  Returns true if isSvcdFound() is "Y"
	 */
   public boolean isSvcdFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isSvcdFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setSvcdFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setSvcdFoundTrue();
   	}
	/**
	 *	Returns the value of d51uFrtoDrvPos
	 *	@return d51uFrtoDrvPos
	 */
   public char[] getD51uFrtoDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).getD51uFrtoDrvPos();
   }

  
	/**
	*  set variable d51uFrtoDrvPos
	*  @param value
	**/
   public void setD51uFrtoDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(value);
   } 

     /**
	 * 	Update D51uFrtoDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFrtoDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uFrtoDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFrtoDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFrtoDrvPos with another Field
	 *	@param value
	 */
   public void setD51uFrtoDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source);
   }  
   
     /**
	 * 	Update D51uFrtoDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFrtoDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFrtoDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFrtoDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrToSvc().getD51uRetRuleFromtoSvc(index).setD51uFrtoDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of frtoSub
	 *	@return frtoSub
	 */
	public int getFrtoSub() throws CFException {        
   		return work.getFrtoSub();
	}
	
	/**
	 * 	Update FrtoSub with the passed value
	 *	@param number
	 */
	public void setFrtoSub(int number)  throws CFException{
		work.setFrtoSub(number);
	}


	public void setFrtoSub(long number)  throws CFException{
		work.setFrtoSub((int)number);
	}



public void setHv08Index(int hv08Index) { 
    D529351uCtx.this.hv08Index = hv08Index;
}

public int getHv08Index() { 
    return D529351uCtx.this.hv08Index;
}

        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCsfrto.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public FetchCsfrtoOutCtx clone() {
        FetchCsfrtoOutCtx cloneObj = new FetchCsfrtoOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCsfrto = new HvHostVariablesCsfrto();
        cloneObj.hvHostVariablesCsfrto.set(hvHostVariablesCsfrto.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsfrtoOutCtx getFetchCsfrtoOutCtx() {
            return new FetchCsfrtoOutCtx();
    }
     public class CloseCsr2285InCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public CloseCsr2285OutCtx getCloseCsr2285OutCtx() {
            return new CloseCsr2285OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsr2285InCtx clone() {
        CloseCsr2285InCtx cloneObj = new CloseCsr2285InCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsr2285InCtx getCloseCsr2285InCtx() {
            return new CloseCsr2285InCtx();
    }
     public class CloseCsr2285OutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Test condition 43 for isD51uDb2CloseError()
	 *	@return  Returns true if isD51uDb2CloseError() is 43
	 */
   public boolean isD51uDb2CloseError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2CloseError();
   }

	/**
	*  set values 43
	*/
   	public void setD51uDb2CloseErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2CloseErrorTrue();
   	}
	/**
	 *	Returns the value of d51uParagraphNum
	 *	@return d51uParagraphNum
	 */
   public char[] getD51uParagraphNum() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uParagraphNum();
   }

  
	/**
	*  set variable d51uParagraphNum
	*  @param value
	**/
   public void setD51uParagraphNum(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(value);
   } 

     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex);
   	
   }
   
   public void setD51uParagraphNum(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uParagraphNum with another Field
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source);
   }  
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "N" for isCloseCsrNg()
	 *	@return  Returns true if isCloseCsrNg() is "N"
	 */
   public boolean isCloseCsrNg() throws CFException {
      return work.isCloseCsrNg();
   }

	/**
	*  set values "N"
	*/
   	public void setCloseCsrNgTrue()  throws CFException{  			
    	work.setCloseCsrNgTrue();
   	}
	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uDebugTracer
	 *	@return d51uDebugTracer
	 */
   public char[] getD51uDebugTracer() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uDebugTracer();
   }

  
	/**
	*  set variable d51uDebugTracer
	*  @param value
	**/
   public void setD51uDebugTracer(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(value);
   } 

     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex);
   	
   }
   
   public void setD51uDebugTracer(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uDebugTracer with another Field
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source);
   }  
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Test condition "Y" for isCloseCsrOk()
	 *	@return  Returns true if isCloseCsrOk() is "Y"
	 */
   public boolean isCloseCsrOk() throws CFException {
      return work.isCloseCsrOk();
   }

	/**
	*  set values "Y"
	*/
   	public void setCloseCsrOkTrue()  throws CFException{  			
    	work.setCloseCsrOkTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsr2285OutCtx clone() {
        CloseCsr2285OutCtx cloneObj = new CloseCsr2285OutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsr2285OutCtx getCloseCsr2285OutCtx() {
            return new CloseCsr2285OutCtx();
    }
     public class OpenCsptypCursorInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     DclfeSpiRuleProvTyp dclfeSpiRuleProvTyp = D529351uCtx.this.getDclfeSpiRuleProvTyp();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of ptypSub
	 *	@return ptypSub
	 */
	public int getPtypSub() throws CFException {        
   		return work.getPtypSub();
	}
	
	/**
	 * 	Update PtypSub with the passed value
	 *	@param number
	 */
	public void setPtypSub(int number)  throws CFException{
		work.setPtypSub(number);
	}


	public void setPtypSub(long number)  throws CFException{
		work.setPtypSub((int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Test condition "Y" for isEndOfFetchPtyp()
	 *	@return  Returns true if isEndOfFetchPtyp() is "Y"
	 */
   public boolean isEndOfFetchPtyp() throws CFException {
      return work.isEndOfFetchPtyp();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfFetchPtypTrue()  throws CFException{  			
    	work.setEndOfFetchPtypTrue();
   	}
	/**
	 *	Returns the value of ptypSpiTblId
	 *	@return ptypSpiTblId
	 */
   public char[] getPtypSpiTblId() throws CFException  {              
   		return dclfeSpiRuleProvTyp.getPtypSpiTblId();
   }

  
	/**
	*  set variable ptypSpiTblId
	*  @param value
	**/
   public void setPtypSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(value);
   } 

     /**
	 * 	Update PtypSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source, sourceIndex);
   	
   }
   
   public void setPtypSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypSpiTblId with another Field
	 *	@param value
	 */
   public void setPtypSpiTblId(Field source) {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source);
   }  
   
     /**
	 * 	Update PtypSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypDerivSvcCd
	 *	@return ptypDerivSvcCd
	 */
   public char[] getPtypDerivSvcCd() throws CFException  {              
   		return dclfeSpiRuleProvTyp.getPtypDerivSvcCd();
   }

  
	/**
	*  set variable ptypDerivSvcCd
	*  @param value
	**/
   public void setPtypDerivSvcCd(char[] value) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(value);
   } 

     /**
	 * 	Update PtypDerivSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypDerivSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source, sourceIndex);
   	
   }
   
   public void setPtypDerivSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypDerivSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypDerivSvcCd with another Field
	 *	@param value
	 */
   public void setPtypDerivSvcCd(Field source) {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source);
   }  
   
     /**
	 * 	Update PtypDerivSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypDerivSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypDerivSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypDerivPlOfSvcCd
	 *	@return ptypDerivPlOfSvcCd
	 */
   public char[] getPtypDerivPlOfSvcCd() throws CFException  {              
   		return dclfeSpiRuleProvTyp.getPtypDerivPlOfSvcCd();
   }

  
	/**
	*  set variable ptypDerivPlOfSvcCd
	*  @param value
	**/
   public void setPtypDerivPlOfSvcCd(char[] value) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(value);
   } 

     /**
	 * 	Update PtypDerivPlOfSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypDerivPlOfSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source, sourceIndex);
   	
   }
   
   public void setPtypDerivPlOfSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypDerivPlOfSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivPlOfSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypDerivPlOfSvcCd with another Field
	 *	@param value
	 */
   public void setPtypDerivPlOfSvcCd(Field source) {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source);
   }  
   
     /**
	 * 	Update PtypDerivPlOfSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypDerivPlOfSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleProvTyp
	 *	@return dclfeSpiRuleProvTyp
	 */   
	 public DclfeSpiRuleProvTyp getDclfeSpiRuleProvTyp() {
   	return dclfeSpiRuleProvTyp;
   }


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of ptypDerivCausCd
	 *	@return ptypDerivCausCd
	 */
   public char[] getPtypDerivCausCd() throws CFException  {              
   		return dclfeSpiRuleProvTyp.getPtypDerivCausCd();
   }

  
	/**
	*  set variable ptypDerivCausCd
	*  @param value
	**/
   public void setPtypDerivCausCd(char[] value) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(value);
   } 

     /**
	 * 	Update PtypDerivCausCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypDerivCausCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source, sourceIndex);
   	
   }
   
   public void setPtypDerivCausCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypDerivCausCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivCausCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypDerivCausCd with another Field
	 *	@param value
	 */
   public void setPtypDerivCausCd(Field source) {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source);
   }  
   
     /**
	 * 	Update PtypDerivCausCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypDerivCausCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypDerivCausCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivCausCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public OpenCsptypCursorOutCtx getOpenCsptypCursorOutCtx() {
            return new OpenCsptypCursorOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
        str += dclfeSpiRuleProvTyp.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public OpenCsptypCursorInCtx clone() {
        OpenCsptypCursorInCtx cloneObj = new OpenCsptypCursorInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dclfeSpiRuleProvTyp = new DclfeSpiRuleProvTyp();
        cloneObj.dclfeSpiRuleProvTyp.set(dclfeSpiRuleProvTyp.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsptypCursorInCtx getOpenCsptypCursorInCtx() {
            return new OpenCsptypCursorInCtx();
    }
     public class OpenCsptypCursorOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     DclfeSpiRuleProvTyp dclfeSpiRuleProvTyp = D529351uCtx.this.getDclfeSpiRuleProvTyp();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Test condition 42 for isD51uDb2OpenError()
	 *	@return  Returns true if isD51uDb2OpenError() is 42
	 */
   public boolean isD51uDb2OpenError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2OpenError();
   }

	/**
	*  set values 42
	*/
   	public void setD51uDb2OpenErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2OpenErrorTrue();
   	}
	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of d51uParagraphNum
	 *	@return d51uParagraphNum
	 */
   public char[] getD51uParagraphNum() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uParagraphNum();
   }

  
	/**
	*  set variable d51uParagraphNum
	*  @param value
	**/
   public void setD51uParagraphNum(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(value);
   } 

     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex);
   	
   }
   
   public void setD51uParagraphNum(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uParagraphNum with another Field
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source);
   }  
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uDebugTracer
	 *	@return d51uDebugTracer
	 */
   public char[] getD51uDebugTracer() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uDebugTracer();
   }

  
	/**
	*  set variable d51uDebugTracer
	*  @param value
	**/
   public void setD51uDebugTracer(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(value);
   } 

     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex);
   	
   }
   
   public void setD51uDebugTracer(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uDebugTracer with another Field
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source);
   }  
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 999 for isDsmDb2Error()
	 *	@return  Returns true if isDsmDb2Error() is 999
	 */
   public boolean isDsmDb2Error() throws CFException {
      return dsmCallArea.getDsmCommonArea().isDsmDb2Error();
   }

	/**
	*  set values 999
	*/
   	public void setDsmDb2ErrorTrue()  throws CFException{  			
    	dsmCallArea.getDsmCommonArea().setDsmDb2ErrorTrue();
   	}

        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
        str += dclfeSpiRuleProvTyp.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public OpenCsptypCursorOutCtx clone() {
        OpenCsptypCursorOutCtx cloneObj = new OpenCsptypCursorOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dclfeSpiRuleProvTyp = new DclfeSpiRuleProvTyp();
        cloneObj.dclfeSpiRuleProvTyp.set(dclfeSpiRuleProvTyp.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsptypCursorOutCtx getOpenCsptypCursorOutCtx() {
            return new OpenCsptypCursorOutCtx();
    }
     public class FetchCsptypInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DclfeSpiRuleProvTyp dclfeSpiRuleProvTyp = D529351uCtx.this.getDclfeSpiRuleProvTyp();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of ptypSub
	 *	@return ptypSub
	 */
	public int getPtypSub() throws CFException {        
   		return work.getPtypSub();
	}
	
	/**
	 * 	Update PtypSub with the passed value
	 *	@param number
	 */
	public void setPtypSub(int number)  throws CFException{
		work.setPtypSub(number);
	}


	public void setPtypSub(long number)  throws CFException{
		work.setPtypSub((int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of ptypDerivSvcCd
	 *	@return ptypDerivSvcCd
	 */
   public char[] getPtypDerivSvcCd() throws CFException  {              
   		return dclfeSpiRuleProvTyp.getPtypDerivSvcCd();
   }

  
	/**
	*  set variable ptypDerivSvcCd
	*  @param value
	**/
   public void setPtypDerivSvcCd(char[] value) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(value);
   } 

     /**
	 * 	Update PtypDerivSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypDerivSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source, sourceIndex);
   	
   }
   
   public void setPtypDerivSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypDerivSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypDerivSvcCd with another Field
	 *	@param value
	 */
   public void setPtypDerivSvcCd(Field source) {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source);
   }  
   
     /**
	 * 	Update PtypDerivSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypDerivSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypDerivSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypProvTyp
	 *	@return ptypProvTyp
	 */
   public char[] getPtypProvTyp() throws CFException  {              
   		return dclfeSpiRuleProvTyp.getPtypProvTyp();
   }

  
	/**
	*  set variable ptypProvTyp
	*  @param value
	**/
   public void setPtypProvTyp(char[] value) throws CFException {
      dclfeSpiRuleProvTyp.setPtypProvTyp(value);
   } 

     /**
	 * 	Update PtypProvTyp 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypProvTyp(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleProvTyp.setPtypProvTyp(source, sourceIndex);
   	
   }
   
   public void setPtypProvTyp(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleProvTyp.setPtypProvTyp(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypProvTyp 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypProvTyp(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypProvTyp with another Field
	 *	@param value
	 */
   public void setPtypProvTyp(Field source) {
      dclfeSpiRuleProvTyp.setPtypProvTyp(source);
   }  
   
     /**
	 * 	Update PtypProvTyp 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypProvTyp(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleProvTyp.setPtypProvTyp(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypProvTyp 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypProvTyp(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypDerivPlOfSvcCd
	 *	@return ptypDerivPlOfSvcCd
	 */
   public char[] getPtypDerivPlOfSvcCd() throws CFException  {              
   		return dclfeSpiRuleProvTyp.getPtypDerivPlOfSvcCd();
   }

  
	/**
	*  set variable ptypDerivPlOfSvcCd
	*  @param value
	**/
   public void setPtypDerivPlOfSvcCd(char[] value) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(value);
   } 

     /**
	 * 	Update PtypDerivPlOfSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypDerivPlOfSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source, sourceIndex);
   	
   }
   
   public void setPtypDerivPlOfSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypDerivPlOfSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivPlOfSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypDerivPlOfSvcCd with another Field
	 *	@param value
	 */
   public void setPtypDerivPlOfSvcCd(Field source) {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source);
   }  
   
     /**
	 * 	Update PtypDerivPlOfSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypDerivPlOfSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleProvTyp
	 *	@return dclfeSpiRuleProvTyp
	 */   
	 public DclfeSpiRuleProvTyp getDclfeSpiRuleProvTyp() {
   	return dclfeSpiRuleProvTyp;
   }


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypDerivCausCd
	 *	@return ptypDerivCausCd
	 */
   public char[] getPtypDerivCausCd() throws CFException  {              
   		return dclfeSpiRuleProvTyp.getPtypDerivCausCd();
   }

  
	/**
	*  set variable ptypDerivCausCd
	*  @param value
	**/
   public void setPtypDerivCausCd(char[] value) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(value);
   } 

     /**
	 * 	Update PtypDerivCausCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypDerivCausCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source, sourceIndex);
   	
   }
   
   public void setPtypDerivCausCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypDerivCausCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivCausCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypDerivCausCd with another Field
	 *	@param value
	 */
   public void setPtypDerivCausCd(Field source) {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source);
   }  
   
     /**
	 * 	Update PtypDerivCausCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypDerivCausCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypDerivCausCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivCausCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public FetchCsptypOutCtx getFetchCsptypOutCtx() {
            return new FetchCsptypOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dclfeSpiRuleProvTyp.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public FetchCsptypInCtx clone() {
        FetchCsptypInCtx cloneObj = new FetchCsptypInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dclfeSpiRuleProvTyp = new DclfeSpiRuleProvTyp();
        cloneObj.dclfeSpiRuleProvTyp.set(dclfeSpiRuleProvTyp.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsptypInCtx getFetchCsptypInCtx() {
            return new FetchCsptypInCtx();
    }
     public class FetchCsptypOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DclfeSpiRuleProvTyp dclfeSpiRuleProvTyp = D529351uCtx.this.getDclfeSpiRuleProvTyp();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of d51uPtypDrvPos
	 *	@return d51uPtypDrvPos
	 */
   public char[] getD51uPtypDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).getD51uPtypDrvPos();
   }

  
	/**
	*  set variable d51uPtypDrvPos
	*  @param value
	**/
   public void setD51uPtypDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(value);
   } 

     /**
	 * 	Update D51uPtypDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uPtypDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uPtypDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uPtypDrvPos with another Field
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source);
   }  
   
     /**
	 * 	Update D51uPtypDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uPtypDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypSub
	 *	@return ptypSub
	 */
	public int getPtypSub() throws CFException {        
   		return work.getPtypSub();
	}
	
	/**
	 * 	Update PtypSub with the passed value
	 *	@param number
	 */
	public void setPtypSub(int number)  throws CFException{
		work.setPtypSub(number);
	}


	public void setPtypSub(long number)  throws CFException{
		work.setPtypSub((int)number);
	}


	/**
	 *	Test condition "Y" for isEndOfFetchPtyp()
	 *	@return  Returns true if isEndOfFetchPtyp() is "Y"
	 */
   public boolean isEndOfFetchPtyp() throws CFException {
      return work.isEndOfFetchPtyp();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfFetchPtypTrue()  throws CFException{  			
    	work.setEndOfFetchPtypTrue();
   	}
	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of ptypDerivSvcCd
	 *	@return ptypDerivSvcCd
	 */
   public char[] getPtypDerivSvcCd() throws CFException  {              
   		return dclfeSpiRuleProvTyp.getPtypDerivSvcCd();
   }

  
	/**
	*  set variable ptypDerivSvcCd
	*  @param value
	**/
   public void setPtypDerivSvcCd(char[] value) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(value);
   } 

     /**
	 * 	Update PtypDerivSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypDerivSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source, sourceIndex);
   	
   }
   
   public void setPtypDerivSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypDerivSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypDerivSvcCd with another Field
	 *	@param value
	 */
   public void setPtypDerivSvcCd(Field source) {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source);
   }  
   
     /**
	 * 	Update PtypDerivSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypDerivSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypDerivSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypProvTyp
	 *	@return ptypProvTyp
	 */
   public char[] getPtypProvTyp() throws CFException  {              
   		return dclfeSpiRuleProvTyp.getPtypProvTyp();
   }

  
	/**
	*  set variable ptypProvTyp
	*  @param value
	**/
   public void setPtypProvTyp(char[] value) throws CFException {
      dclfeSpiRuleProvTyp.setPtypProvTyp(value);
   } 

     /**
	 * 	Update PtypProvTyp 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypProvTyp(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleProvTyp.setPtypProvTyp(source, sourceIndex);
   	
   }
   
   public void setPtypProvTyp(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleProvTyp.setPtypProvTyp(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypProvTyp 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypProvTyp(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypProvTyp with another Field
	 *	@param value
	 */
   public void setPtypProvTyp(Field source) {
      dclfeSpiRuleProvTyp.setPtypProvTyp(source);
   }  
   
     /**
	 * 	Update PtypProvTyp 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypProvTyp(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleProvTyp.setPtypProvTyp(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypProvTyp 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypProvTyp(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uPtypProvTyp
	 *	@return d51uPtypProvTyp
	 */
   public char[] getD51uPtypProvTyp(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).getD51uPtypProvTyp();
   }

  
	/**
	*  set variable d51uPtypProvTyp
	*  @param value
	**/
   public void setD51uPtypProvTyp(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(value);
   } 

     /**
	 * 	Update D51uPtypProvTyp 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uPtypProvTyp(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source, sourceIndex);
   	
   }
   
   public void setD51uPtypProvTyp(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uPtypProvTyp 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypProvTyp(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uPtypProvTyp with another Field
	 *	@param value
	 */
   public void setD51uPtypProvTyp(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source);
   }  
   
     /**
	 * 	Update D51uPtypProvTyp 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uPtypProvTyp(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uPtypProvTyp 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypProvTyp(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of ptypDerivCausCd
	 *	@return ptypDerivCausCd
	 */
   public char[] getPtypDerivCausCd() throws CFException  {              
   		return dclfeSpiRuleProvTyp.getPtypDerivCausCd();
   }

  
	/**
	*  set variable ptypDerivCausCd
	*  @param value
	**/
   public void setPtypDerivCausCd(char[] value) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(value);
   } 

     /**
	 * 	Update PtypDerivCausCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypDerivCausCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source, sourceIndex);
   	
   }
   
   public void setPtypDerivCausCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypDerivCausCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivCausCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypDerivCausCd with another Field
	 *	@param value
	 */
   public void setPtypDerivCausCd(Field source) {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source);
   }  
   
     /**
	 * 	Update PtypDerivCausCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypDerivCausCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypDerivCausCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivCausCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of d51uPtypDrvCau
	 *	@return d51uPtypDrvCau
	 */
   public char[] getD51uPtypDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).getD51uPtypDrvCau();
   }

  
	/**
	*  set variable d51uPtypDrvCau
	*  @param value
	**/
   public void setD51uPtypDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(value);
   } 

     /**
	 * 	Update D51uPtypDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uPtypDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uPtypDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uPtypDrvCau with another Field
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source);
   }  
   
     /**
	 * 	Update D51uPtypDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uPtypDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isProvtypFound()
	 *	@return  Returns true if isProvtypFound() is "Y"
	 */
   public boolean isProvtypFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isProvtypFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setProvtypFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setProvtypFoundTrue();
   	}
	/**
	 *	Returns the value of d51uPtypCnt
	 *	@return d51uPtypCnt
	 */
	public int getD51uPtypCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uPtypCnt();
	}
	
	/**
	 * 	Update D51uPtypCnt with the passed value
	 *	@param number
	 */
	public void setD51uPtypCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uPtypCnt(number);
	}


	public void setD51uPtypCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uPtypCnt((int)number);
	}


	/**
	 *	Returns the value of ptypDerivPlOfSvcCd
	 *	@return ptypDerivPlOfSvcCd
	 */
   public char[] getPtypDerivPlOfSvcCd() throws CFException  {              
   		return dclfeSpiRuleProvTyp.getPtypDerivPlOfSvcCd();
   }

  
	/**
	*  set variable ptypDerivPlOfSvcCd
	*  @param value
	**/
   public void setPtypDerivPlOfSvcCd(char[] value) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(value);
   } 

     /**
	 * 	Update PtypDerivPlOfSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypDerivPlOfSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source, sourceIndex);
   	
   }
   
   public void setPtypDerivPlOfSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypDerivPlOfSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivPlOfSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypDerivPlOfSvcCd with another Field
	 *	@param value
	 */
   public void setPtypDerivPlOfSvcCd(Field source) {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source);
   }  
   
     /**
	 * 	Update PtypDerivPlOfSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypDerivPlOfSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleProvTyp
	 *	@return dclfeSpiRuleProvTyp
	 */   
	 public DclfeSpiRuleProvTyp getDclfeSpiRuleProvTyp() {
   	return dclfeSpiRuleProvTyp;
   }


	/**
	 *	Test condition " " for isProvtypNotFound()
	 *	@return  Returns true if isProvtypNotFound() is " "
	 */
   public boolean isProvtypNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isProvtypNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setProvtypNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setProvtypNotFoundTrue();
   	}
	/**
	 *	Returns the value of d51uPtypDrvSvc
	 *	@return d51uPtypDrvSvc
	 */
   public char[] getD51uPtypDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).getD51uPtypDrvSvc();
   }

  
	/**
	*  set variable d51uPtypDrvSvc
	*  @param value
	**/
   public void setD51uPtypDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(value);
   } 

     /**
	 * 	Update D51uPtypDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uPtypDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uPtypDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uPtypDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uPtypDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uPtypDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dclfeSpiRuleProvTyp.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public FetchCsptypOutCtx clone() {
        FetchCsptypOutCtx cloneObj = new FetchCsptypOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dclfeSpiRuleProvTyp = new DclfeSpiRuleProvTyp();
        cloneObj.dclfeSpiRuleProvTyp.set(dclfeSpiRuleProvTyp.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsptypOutCtx getFetchCsptypOutCtx() {
            return new FetchCsptypOutCtx();
    }
     public class CloseCsr2385InCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public CloseCsr2385OutCtx getCloseCsr2385OutCtx() {
            return new CloseCsr2385OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsr2385InCtx clone() {
        CloseCsr2385InCtx cloneObj = new CloseCsr2385InCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsr2385InCtx getCloseCsr2385InCtx() {
            return new CloseCsr2385InCtx();
    }
     public class CloseCsr2385OutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Test condition 43 for isD51uDb2CloseError()
	 *	@return  Returns true if isD51uDb2CloseError() is 43
	 */
   public boolean isD51uDb2CloseError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2CloseError();
   }

	/**
	*  set values 43
	*/
   	public void setD51uDb2CloseErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2CloseErrorTrue();
   	}
	/**
	 *	Returns the value of d51uParagraphNum
	 *	@return d51uParagraphNum
	 */
   public char[] getD51uParagraphNum() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uParagraphNum();
   }

  
	/**
	*  set variable d51uParagraphNum
	*  @param value
	**/
   public void setD51uParagraphNum(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(value);
   } 

     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex);
   	
   }
   
   public void setD51uParagraphNum(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uParagraphNum with another Field
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source);
   }  
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "N" for isCloseCsrNg()
	 *	@return  Returns true if isCloseCsrNg() is "N"
	 */
   public boolean isCloseCsrNg() throws CFException {
      return work.isCloseCsrNg();
   }

	/**
	*  set values "N"
	*/
   	public void setCloseCsrNgTrue()  throws CFException{  			
    	work.setCloseCsrNgTrue();
   	}
	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uDebugTracer
	 *	@return d51uDebugTracer
	 */
   public char[] getD51uDebugTracer() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uDebugTracer();
   }

  
	/**
	*  set variable d51uDebugTracer
	*  @param value
	**/
   public void setD51uDebugTracer(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(value);
   } 

     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex);
   	
   }
   
   public void setD51uDebugTracer(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uDebugTracer with another Field
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source);
   }  
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Test condition "Y" for isCloseCsrOk()
	 *	@return  Returns true if isCloseCsrOk() is "Y"
	 */
   public boolean isCloseCsrOk() throws CFException {
      return work.isCloseCsrOk();
   }

	/**
	*  set values "Y"
	*/
   	public void setCloseCsrOkTrue()  throws CFException{  			
    	work.setCloseCsrOkTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsr2385OutCtx clone() {
        CloseCsr2385OutCtx cloneObj = new CloseCsr2385OutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsr2385OutCtx getCloseCsr2385OutCtx() {
            return new CloseCsr2385OutCtx();
    }
     public class OpenCsicdCursorInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     LstIcdKey lstIcdKey = D529351uCtx.this.getLstIcdKey();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     TestVariables testVariables = D529351uCtx.this.getTestVariables();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();
     DclfeSpiRuleIcd dclfeSpiRuleIcd = D529351uCtx.this.getDclfeSpiRuleIcd();

	/**
	 *	Returns the value of testDiag17
	 *	@return testDiag17
	 */
   public char[] getTestDiag17() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag17();
   }

  
	/**
	*  set variable testDiag17
	*  @param value
	**/
   public void setTestDiag17(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag17(value);
   } 

     /**
	 * 	Update TestDiag17 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag17(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag17(source, sourceIndex);
   	
   }
   
   public void setTestDiag17(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag17(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag17 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag17(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag17(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag17 with another Field
	 *	@param value
	 */
   public void setTestDiag17(Field source) {
      testVariables.getTestDiagArea().setTestDiag17(source);
   }  
   
     /**
	 * 	Update TestDiag17 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag17(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag17(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag17 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag17(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag17(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag01
	 *	@return testDiag01
	 */
   public char[] getTestDiag01() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag01();
   }

  
	/**
	*  set variable testDiag01
	*  @param value
	**/
   public void setTestDiag01(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag01(value);
   } 

     /**
	 * 	Update TestDiag01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag01(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag01(source, sourceIndex);
   	
   }
   
   public void setTestDiag01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag01 with another Field
	 *	@param value
	 */
   public void setTestDiag01(Field source) {
      testVariables.getTestDiagArea().setTestDiag01(source);
   }  
   
     /**
	 * 	Update TestDiag01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag01(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag19
	 *	@return testDiag19
	 */
   public char[] getTestDiag19() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag19();
   }

  
	/**
	*  set variable testDiag19
	*  @param value
	**/
   public void setTestDiag19(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag19(value);
   } 

     /**
	 * 	Update TestDiag19 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag19(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag19(source, sourceIndex);
   	
   }
   
   public void setTestDiag19(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag19(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag19 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag19(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag19(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag19 with another Field
	 *	@param value
	 */
   public void setTestDiag19(Field source) {
      testVariables.getTestDiagArea().setTestDiag19(source);
   }  
   
     /**
	 * 	Update TestDiag19 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag19(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag19(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag19 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag19(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag19(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag22
	 *	@return testDiag22
	 */
   public char[] getTestDiag22() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag22();
   }

  
	/**
	*  set variable testDiag22
	*  @param value
	**/
   public void setTestDiag22(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag22(value);
   } 

     /**
	 * 	Update TestDiag22 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag22(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag22(source, sourceIndex);
   	
   }
   
   public void setTestDiag22(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag22(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag22 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag22(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag22(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag22 with another Field
	 *	@param value
	 */
   public void setTestDiag22(Field source) {
      testVariables.getTestDiagArea().setTestDiag22(source);
   }  
   
     /**
	 * 	Update TestDiag22 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag22(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag22(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag22 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag22(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag22(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag12
	 *	@return testDiag12
	 */
   public char[] getTestDiag12() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag12();
   }

  
	/**
	*  set variable testDiag12
	*  @param value
	**/
   public void setTestDiag12(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag12(value);
   } 

     /**
	 * 	Update TestDiag12 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag12(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag12(source, sourceIndex);
   	
   }
   
   public void setTestDiag12(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag12(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag12 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag12(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag12(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag12 with another Field
	 *	@param value
	 */
   public void setTestDiag12(Field source) {
      testVariables.getTestDiagArea().setTestDiag12(source);
   }  
   
     /**
	 * 	Update TestDiag12 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag12(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag12(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag12 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag12(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag12(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag15
	 *	@return testDiag15
	 */
   public char[] getTestDiag15() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag15();
   }

  
	/**
	*  set variable testDiag15
	*  @param value
	**/
   public void setTestDiag15(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag15(value);
   } 

     /**
	 * 	Update TestDiag15 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag15(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag15(source, sourceIndex);
   	
   }
   
   public void setTestDiag15(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag15(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag15 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag15(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag15 with another Field
	 *	@param value
	 */
   public void setTestDiag15(Field source) {
      testVariables.getTestDiagArea().setTestDiag15(source);
   }  
   
     /**
	 * 	Update TestDiag15 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag15(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag15(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag15 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag15(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag10
	 *	@return testDiag10
	 */
   public char[] getTestDiag10() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag10();
   }

  
	/**
	*  set variable testDiag10
	*  @param value
	**/
   public void setTestDiag10(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag10(value);
   } 

     /**
	 * 	Update TestDiag10 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag10(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag10(source, sourceIndex);
   	
   }
   
   public void setTestDiag10(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag10(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag10 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag10(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag10(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag10 with another Field
	 *	@param value
	 */
   public void setTestDiag10(Field source) {
      testVariables.getTestDiagArea().setTestDiag10(source);
   }  
   
     /**
	 * 	Update TestDiag10 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag10(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag10(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag10 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag10(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag10(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag24
	 *	@return testDiag24
	 */
   public char[] getTestDiag24() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag24();
   }

  
	/**
	*  set variable testDiag24
	*  @param value
	**/
   public void setTestDiag24(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag24(value);
   } 

     /**
	 * 	Update TestDiag24 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag24(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag24(source, sourceIndex);
   	
   }
   
   public void setTestDiag24(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag24(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag24 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag24(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag24(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag24 with another Field
	 *	@param value
	 */
   public void setTestDiag24(Field source) {
      testVariables.getTestDiagArea().setTestDiag24(source);
   }  
   
     /**
	 * 	Update TestDiag24 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag24(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag24(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag24 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag24(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag24(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleIcd
	 *	@return dclfeSpiRuleIcd
	 */   
	 public DclfeSpiRuleIcd getDclfeSpiRuleIcd() {
   	return dclfeSpiRuleIcd;
   }


	/**
	 *	Returns the value of lstIcdKey
	 *	@return lstIcdKey
	 */   
	 public LstIcdKey getLstIcdKey() {
   	return lstIcdKey;
   }


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of testDiag25
	 *	@return testDiag25
	 */
   public char[] getTestDiag25() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag25();
   }

  
	/**
	*  set variable testDiag25
	*  @param value
	**/
   public void setTestDiag25(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag25(value);
   } 

     /**
	 * 	Update TestDiag25 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag25(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag25(source, sourceIndex);
   	
   }
   
   public void setTestDiag25(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag25(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag25 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag25(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag25(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag25 with another Field
	 *	@param value
	 */
   public void setTestDiag25(Field source) {
      testVariables.getTestDiagArea().setTestDiag25(source);
   }  
   
     /**
	 * 	Update TestDiag25 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag25(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag25(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag25 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag25(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag25(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdDerivSvcCd
	 *	@return ricdDerivSvcCd
	 */
   public char[] getRicdDerivSvcCd() throws CFException  {              
   		return dclfeSpiRuleIcd.getRicdDerivSvcCd();
   }

  
	/**
	*  set variable ricdDerivSvcCd
	*  @param value
	**/
   public void setRicdDerivSvcCd(char[] value) throws CFException {
      dclfeSpiRuleIcd.setRicdDerivSvcCd(value);
   } 

     /**
	 * 	Update RicdDerivSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdDerivSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIcd.setRicdDerivSvcCd(source, sourceIndex);
   	
   }
   
   public void setRicdDerivSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIcd.setRicdDerivSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdDerivSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdDerivSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdDerivSvcCd with another Field
	 *	@param value
	 */
   public void setRicdDerivSvcCd(Field source) {
      dclfeSpiRuleIcd.setRicdDerivSvcCd(source);
   }  
   
     /**
	 * 	Update RicdDerivSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdDerivSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIcd.setRicdDerivSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdDerivSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdDerivSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag03
	 *	@return testDiag03
	 */
   public char[] getTestDiag03() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag03();
   }

  
	/**
	*  set variable testDiag03
	*  @param value
	**/
   public void setTestDiag03(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag03(value);
   } 

     /**
	 * 	Update TestDiag03 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag03(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag03(source, sourceIndex);
   	
   }
   
   public void setTestDiag03(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag03(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag03 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag03(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag03(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag03 with another Field
	 *	@param value
	 */
   public void setTestDiag03(Field source) {
      testVariables.getTestDiagArea().setTestDiag03(source);
   }  
   
     /**
	 * 	Update TestDiag03 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag03(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag03(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag03 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag03(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag03(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag11
	 *	@return testDiag11
	 */
   public char[] getTestDiag11() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag11();
   }

  
	/**
	*  set variable testDiag11
	*  @param value
	**/
   public void setTestDiag11(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag11(value);
   } 

     /**
	 * 	Update TestDiag11 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag11(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag11(source, sourceIndex);
   	
   }
   
   public void setTestDiag11(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag11(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag11 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag11(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag11(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag11 with another Field
	 *	@param value
	 */
   public void setTestDiag11(Field source) {
      testVariables.getTestDiagArea().setTestDiag11(source);
   }  
   
     /**
	 * 	Update TestDiag11 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag11(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag11(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag11 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag11(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag11(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag09
	 *	@return testDiag09
	 */
   public char[] getTestDiag09() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag09();
   }

  
	/**
	*  set variable testDiag09
	*  @param value
	**/
   public void setTestDiag09(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag09(value);
   } 

     /**
	 * 	Update TestDiag09 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag09(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag09(source, sourceIndex);
   	
   }
   
   public void setTestDiag09(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag09(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag09 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag09(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag09(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag09 with another Field
	 *	@param value
	 */
   public void setTestDiag09(Field source) {
      testVariables.getTestDiagArea().setTestDiag09(source);
   }  
   
     /**
	 * 	Update TestDiag09 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag09(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag09(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag09 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag09(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag09(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdDerivPlOfSvcCd
	 *	@return ricdDerivPlOfSvcCd
	 */
   public char[] getRicdDerivPlOfSvcCd() throws CFException  {              
   		return dclfeSpiRuleIcd.getRicdDerivPlOfSvcCd();
   }

  
	/**
	*  set variable ricdDerivPlOfSvcCd
	*  @param value
	**/
   public void setRicdDerivPlOfSvcCd(char[] value) throws CFException {
      dclfeSpiRuleIcd.setRicdDerivPlOfSvcCd(value);
   } 

     /**
	 * 	Update RicdDerivPlOfSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdDerivPlOfSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIcd.setRicdDerivPlOfSvcCd(source, sourceIndex);
   	
   }
   
   public void setRicdDerivPlOfSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIcd.setRicdDerivPlOfSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdDerivPlOfSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdDerivPlOfSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdDerivPlOfSvcCd with another Field
	 *	@param value
	 */
   public void setRicdDerivPlOfSvcCd(Field source) {
      dclfeSpiRuleIcd.setRicdDerivPlOfSvcCd(source);
   }  
   
     /**
	 * 	Update RicdDerivPlOfSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIcd.setRicdDerivPlOfSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdDerivPlOfSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag04
	 *	@return testDiag04
	 */
   public char[] getTestDiag04() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag04();
   }

  
	/**
	*  set variable testDiag04
	*  @param value
	**/
   public void setTestDiag04(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag04(value);
   } 

     /**
	 * 	Update TestDiag04 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag04(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag04(source, sourceIndex);
   	
   }
   
   public void setTestDiag04(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag04(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag04 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag04(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag04(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag04 with another Field
	 *	@param value
	 */
   public void setTestDiag04(Field source) {
      testVariables.getTestDiagArea().setTestDiag04(source);
   }  
   
     /**
	 * 	Update TestDiag04 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag04(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag04(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag04 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag04(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag04(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag07
	 *	@return testDiag07
	 */
   public char[] getTestDiag07() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag07();
   }

  
	/**
	*  set variable testDiag07
	*  @param value
	**/
   public void setTestDiag07(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag07(value);
   } 

     /**
	 * 	Update TestDiag07 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag07(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag07(source, sourceIndex);
   	
   }
   
   public void setTestDiag07(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag07(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag07 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag07(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag07(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag07 with another Field
	 *	@param value
	 */
   public void setTestDiag07(Field source) {
      testVariables.getTestDiagArea().setTestDiag07(source);
   }  
   
     /**
	 * 	Update TestDiag07 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag07(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag07(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag07 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag07(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag07(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testVariables
	 *	@return testVariables
	 */   
	 public TestVariables getTestVariables() {
   	return testVariables;
   }


	/**
	 *	Returns the value of testDiag21
	 *	@return testDiag21
	 */
   public char[] getTestDiag21() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag21();
   }

  
	/**
	*  set variable testDiag21
	*  @param value
	**/
   public void setTestDiag21(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag21(value);
   } 

     /**
	 * 	Update TestDiag21 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag21(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag21(source, sourceIndex);
   	
   }
   
   public void setTestDiag21(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag21(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag21 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag21(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag21(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag21 with another Field
	 *	@param value
	 */
   public void setTestDiag21(Field source) {
      testVariables.getTestDiagArea().setTestDiag21(source);
   }  
   
     /**
	 * 	Update TestDiag21 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag21(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag21(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag21 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag21(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag21(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag02
	 *	@return testDiag02
	 */
   public char[] getTestDiag02() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag02();
   }

  
	/**
	*  set variable testDiag02
	*  @param value
	**/
   public void setTestDiag02(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag02(value);
   } 

     /**
	 * 	Update TestDiag02 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag02(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag02(source, sourceIndex);
   	
   }
   
   public void setTestDiag02(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag02(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag02 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag02(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag02(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag02 with another Field
	 *	@param value
	 */
   public void setTestDiag02(Field source) {
      testVariables.getTestDiagArea().setTestDiag02(source);
   }  
   
     /**
	 * 	Update TestDiag02 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag02(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag02(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag02 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag02(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag02(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag06
	 *	@return testDiag06
	 */
   public char[] getTestDiag06() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag06();
   }

  
	/**
	*  set variable testDiag06
	*  @param value
	**/
   public void setTestDiag06(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag06(value);
   } 

     /**
	 * 	Update TestDiag06 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag06(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag06(source, sourceIndex);
   	
   }
   
   public void setTestDiag06(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag06(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag06 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag06(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag06(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag06 with another Field
	 *	@param value
	 */
   public void setTestDiag06(Field source) {
      testVariables.getTestDiagArea().setTestDiag06(source);
   }  
   
     /**
	 * 	Update TestDiag06 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag06(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag06(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag06 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag06(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag06(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of testDiag14
	 *	@return testDiag14
	 */
   public char[] getTestDiag14() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag14();
   }

  
	/**
	*  set variable testDiag14
	*  @param value
	**/
   public void setTestDiag14(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag14(value);
   } 

     /**
	 * 	Update TestDiag14 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag14(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag14(source, sourceIndex);
   	
   }
   
   public void setTestDiag14(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag14(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag14 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag14(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag14(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag14 with another Field
	 *	@param value
	 */
   public void setTestDiag14(Field source) {
      testVariables.getTestDiagArea().setTestDiag14(source);
   }  
   
     /**
	 * 	Update TestDiag14 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag14(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag14(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag14 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag14(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag14(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdSpiTblId
	 *	@return ricdSpiTblId
	 */
   public char[] getRicdSpiTblId() throws CFException  {              
   		return dclfeSpiRuleIcd.getRicdSpiTblId();
   }

  
	/**
	*  set variable ricdSpiTblId
	*  @param value
	**/
   public void setRicdSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleIcd.setRicdSpiTblId(value);
   } 

     /**
	 * 	Update RicdSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex);
   	
   }
   
   public void setRicdSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdSpiTblId with another Field
	 *	@param value
	 */
   public void setRicdSpiTblId(Field source) {
      dclfeSpiRuleIcd.setRicdSpiTblId(source);
   }  
   
     /**
	 * 	Update RicdSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag16
	 *	@return testDiag16
	 */
   public char[] getTestDiag16() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag16();
   }

  
	/**
	*  set variable testDiag16
	*  @param value
	**/
   public void setTestDiag16(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag16(value);
   } 

     /**
	 * 	Update TestDiag16 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag16(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag16(source, sourceIndex);
   	
   }
   
   public void setTestDiag16(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag16(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag16 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag16(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag16(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag16 with another Field
	 *	@param value
	 */
   public void setTestDiag16(Field source) {
      testVariables.getTestDiagArea().setTestDiag16(source);
   }  
   
     /**
	 * 	Update TestDiag16 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag16(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag16(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag16 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag16(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag16(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of testDiag18
	 *	@return testDiag18
	 */
   public char[] getTestDiag18() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag18();
   }

  
	/**
	*  set variable testDiag18
	*  @param value
	**/
   public void setTestDiag18(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag18(value);
   } 

     /**
	 * 	Update TestDiag18 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag18(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag18(source, sourceIndex);
   	
   }
   
   public void setTestDiag18(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag18(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag18 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag18(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag18(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag18 with another Field
	 *	@param value
	 */
   public void setTestDiag18(Field source) {
      testVariables.getTestDiagArea().setTestDiag18(source);
   }  
   
     /**
	 * 	Update TestDiag18 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag18(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag18(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag18 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag18(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag18(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag13
	 *	@return testDiag13
	 */
   public char[] getTestDiag13() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag13();
   }

  
	/**
	*  set variable testDiag13
	*  @param value
	**/
   public void setTestDiag13(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag13(value);
   } 

     /**
	 * 	Update TestDiag13 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag13(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag13(source, sourceIndex);
   	
   }
   
   public void setTestDiag13(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag13(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag13 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag13(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag13(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag13 with another Field
	 *	@param value
	 */
   public void setTestDiag13(Field source) {
      testVariables.getTestDiagArea().setTestDiag13(source);
   }  
   
     /**
	 * 	Update TestDiag13 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag13(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag13(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag13 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag13(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag13(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag23
	 *	@return testDiag23
	 */
   public char[] getTestDiag23() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag23();
   }

  
	/**
	*  set variable testDiag23
	*  @param value
	**/
   public void setTestDiag23(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag23(value);
   } 

     /**
	 * 	Update TestDiag23 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag23(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag23(source, sourceIndex);
   	
   }
   
   public void setTestDiag23(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag23(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag23 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag23(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag23(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag23 with another Field
	 *	@param value
	 */
   public void setTestDiag23(Field source) {
      testVariables.getTestDiagArea().setTestDiag23(source);
   }  
   
     /**
	 * 	Update TestDiag23 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag23(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag23(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag23 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag23(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag23(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of lstClmIcdInd
	 *	@return lstClmIcdInd
	 */
   public char[] getLstClmIcdInd() throws CFException  {              
   		return lstIcdKey.getLstClmIcdInd();
   }

  
	/**
	*  set variable lstClmIcdInd
	*  @param value
	**/
   public void setLstClmIcdInd(char[] value) throws CFException {
      lstIcdKey.setLstClmIcdInd(value);
   } 

     /**
	 * 	Update LstClmIcdInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setLstClmIcdInd(char[] source, int sourceIndex) throws CFException {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex);
   	
   }
   
   public void setLstClmIcdInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update LstClmIcdInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setLstClmIcdInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update LstClmIcdInd with another Field
	 *	@param value
	 */
   public void setLstClmIcdInd(Field source) {
      lstIcdKey.setLstClmIcdInd(source);
   }  
   
     /**
	 * 	Update LstClmIcdInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setLstClmIcdInd(Field source, int sourceIndex,int sourceLen) {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update LstClmIcdInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setLstClmIcdInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag08
	 *	@return testDiag08
	 */
   public char[] getTestDiag08() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag08();
   }

  
	/**
	*  set variable testDiag08
	*  @param value
	**/
   public void setTestDiag08(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag08(value);
   } 

     /**
	 * 	Update TestDiag08 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag08(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag08(source, sourceIndex);
   	
   }
   
   public void setTestDiag08(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag08(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag08 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag08(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag08(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag08 with another Field
	 *	@param value
	 */
   public void setTestDiag08(Field source) {
      testVariables.getTestDiagArea().setTestDiag08(source);
   }  
   
     /**
	 * 	Update TestDiag08 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag08(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag08(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag08 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag08(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag08(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag20
	 *	@return testDiag20
	 */
   public char[] getTestDiag20() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag20();
   }

  
	/**
	*  set variable testDiag20
	*  @param value
	**/
   public void setTestDiag20(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag20(value);
   } 

     /**
	 * 	Update TestDiag20 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag20(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag20(source, sourceIndex);
   	
   }
   
   public void setTestDiag20(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag20(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag20 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag20(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag20(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag20 with another Field
	 *	@param value
	 */
   public void setTestDiag20(Field source) {
      testVariables.getTestDiagArea().setTestDiag20(source);
   }  
   
     /**
	 * 	Update TestDiag20 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag20(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag20(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag20 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag20(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag20(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdDerivCausCd
	 *	@return ricdDerivCausCd
	 */
   public char[] getRicdDerivCausCd() throws CFException  {              
   		return dclfeSpiRuleIcd.getRicdDerivCausCd();
   }

  
	/**
	*  set variable ricdDerivCausCd
	*  @param value
	**/
   public void setRicdDerivCausCd(char[] value) throws CFException {
      dclfeSpiRuleIcd.setRicdDerivCausCd(value);
   } 

     /**
	 * 	Update RicdDerivCausCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdDerivCausCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIcd.setRicdDerivCausCd(source, sourceIndex);
   	
   }
   
   public void setRicdDerivCausCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIcd.setRicdDerivCausCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdDerivCausCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdDerivCausCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdDerivCausCd with another Field
	 *	@param value
	 */
   public void setRicdDerivCausCd(Field source) {
      dclfeSpiRuleIcd.setRicdDerivCausCd(source);
   }  
   
     /**
	 * 	Update RicdDerivCausCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdDerivCausCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIcd.setRicdDerivCausCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdDerivCausCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdDerivCausCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag05
	 *	@return testDiag05
	 */
   public char[] getTestDiag05() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag05();
   }

  
	/**
	*  set variable testDiag05
	*  @param value
	**/
   public void setTestDiag05(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag05(value);
   } 

     /**
	 * 	Update TestDiag05 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag05(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag05(source, sourceIndex);
   	
   }
   
   public void setTestDiag05(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag05(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag05 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag05(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag05(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag05 with another Field
	 *	@param value
	 */
   public void setTestDiag05(Field source) {
      testVariables.getTestDiagArea().setTestDiag05(source);
   }  
   
     /**
	 * 	Update TestDiag05 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag05(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag05(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag05 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag05(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag05(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public OpenCsicdCursorOutCtx getOpenCsicdCursorOutCtx() {
            return new OpenCsicdCursorOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += lstIcdKey.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += testVariables.hashCode();
        str += dsmCallArea.hashCode();
        str += sqlca.hashCode();
        str += dclfeSpiRuleIcd.hashCode();
       return str.hashCode();
    }

    public OpenCsicdCursorInCtx clone() {
        OpenCsicdCursorInCtx cloneObj = new OpenCsicdCursorInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.lstIcdKey = new LstIcdKey();
        cloneObj.lstIcdKey.set(lstIcdKey.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.testVariables = new TestVariables();
        cloneObj.testVariables.set(testVariables.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.dclfeSpiRuleIcd = new DclfeSpiRuleIcd();
        cloneObj.dclfeSpiRuleIcd.set(dclfeSpiRuleIcd.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsicdCursorInCtx getOpenCsicdCursorInCtx() {
            return new OpenCsicdCursorInCtx();
    }
     public class OpenCsicdCursorOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     LstIcdKey lstIcdKey = D529351uCtx.this.getLstIcdKey();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     TestVariables testVariables = D529351uCtx.this.getTestVariables();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();
     DclfeSpiRuleIcd dclfeSpiRuleIcd = D529351uCtx.this.getDclfeSpiRuleIcd();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Test condition 42 for isD51uDb2OpenError()
	 *	@return  Returns true if isD51uDb2OpenError() is 42
	 */
   public boolean isD51uDb2OpenError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2OpenError();
   }

	/**
	*  set values 42
	*/
   	public void setD51uDb2OpenErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2OpenErrorTrue();
   	}
	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of d51uParagraphNum
	 *	@return d51uParagraphNum
	 */
   public char[] getD51uParagraphNum() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uParagraphNum();
   }

  
	/**
	*  set variable d51uParagraphNum
	*  @param value
	**/
   public void setD51uParagraphNum(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(value);
   } 

     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex);
   	
   }
   
   public void setD51uParagraphNum(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uParagraphNum with another Field
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source);
   }  
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uDebugTracer
	 *	@return d51uDebugTracer
	 */
   public char[] getD51uDebugTracer() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uDebugTracer();
   }

  
	/**
	*  set variable d51uDebugTracer
	*  @param value
	**/
   public void setD51uDebugTracer(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(value);
   } 

     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex);
   	
   }
   
   public void setD51uDebugTracer(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uDebugTracer with another Field
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source);
   }  
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 999 for isDsmDb2Error()
	 *	@return  Returns true if isDsmDb2Error() is 999
	 */
   public boolean isDsmDb2Error() throws CFException {
      return dsmCallArea.getDsmCommonArea().isDsmDb2Error();
   }

	/**
	*  set values 999
	*/
   	public void setDsmDb2ErrorTrue()  throws CFException{  			
    	dsmCallArea.getDsmCommonArea().setDsmDb2ErrorTrue();
   	}

        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += lstIcdKey.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += testVariables.hashCode();
        str += dsmCallArea.hashCode();
        str += sqlca.hashCode();
        str += dclfeSpiRuleIcd.hashCode();
       return str.hashCode();
    }

    public OpenCsicdCursorOutCtx clone() {
        OpenCsicdCursorOutCtx cloneObj = new OpenCsicdCursorOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.lstIcdKey = new LstIcdKey();
        cloneObj.lstIcdKey.set(lstIcdKey.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.testVariables = new TestVariables();
        cloneObj.testVariables.set(testVariables.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.dclfeSpiRuleIcd = new DclfeSpiRuleIcd();
        cloneObj.dclfeSpiRuleIcd.set(dclfeSpiRuleIcd.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsicdCursorOutCtx getOpenCsicdCursorOutCtx() {
            return new OpenCsicdCursorOutCtx();
    }
     public class FetchCsicdInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCsicdo hvHostVariablesCsicdo = D529351uCtx.this.getHvHostVariablesCsicdo();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of hv3eClmFrmIcdCd
	 *	@return hv3eClmFrmIcdCd
	 */
   public char[] getHv3eClmFrmIcdCd(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3eClmFrmIcdCd(index);
   }

  
	/**
	*  set variable hv3eClmFrmIcdCd
	*  @param value
	**/
   public void setHv3eClmFrmIcdCd(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3eClmFrmIcdCd((index),value);
   } 

	/**
	 *	Returns the value of hv3cIcdDrvCau
	 *	@return hv3cIcdDrvCau
	 */
   public char[] getHv3cIcdDrvCau(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3cIcdDrvCau(index);
   }

  
	/**
	*  set variable hv3cIcdDrvCau
	*  @param value
	**/
   public void setHv3cIcdDrvCau(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3cIcdDrvCau((index),value);
   } 


public void setHv3aIndex(int hv3aIndex) { 
    D529351uCtx.this.hv3aIndex = hv3aIndex;
}

public int getHv3aIndex() { 
    return D529351uCtx.this.hv3aIndex;
}
	/**
	 *	Returns the value of hvHostVariablesCsicdo
	 *	@return hvHostVariablesCsicdo
	 */   
	 public HvHostVariablesCsicdo getHvHostVariablesCsicdo() {
   	return hvHostVariablesCsicdo;
   }



public void setHv3bIndex(int hv3bIndex) { 
    D529351uCtx.this.hv3bIndex = hv3bIndex;
}

public int getHv3bIndex() { 
    return D529351uCtx.this.hv3bIndex;
}

public void setHv3fIndex(int hv3fIndex) { 
    D529351uCtx.this.hv3fIndex = hv3fIndex;
}

public int getHv3fIndex() { 
    return D529351uCtx.this.hv3fIndex;
}
	/**
	 *	Returns the value of hv3dIcdTypCd
	 *	@return hv3dIcdTypCd
	 */
   public char[] getHv3dIcdTypCd(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3dIcdTypCd(index);
   }

  
	/**
	*  set variable hv3dIcdTypCd
	*  @param value
	**/
   public void setHv3dIcdTypCd(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3dIcdTypCd((index),value);
   } 

	/**
	 *	Returns the value of hv3fClmToIcdCd
	 *	@return hv3fClmToIcdCd
	 */
   public char[] getHv3fClmToIcdCd(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3fClmToIcdCd(index);
   }

  
	/**
	*  set variable hv3fClmToIcdCd
	*  @param value
	**/
   public void setHv3fClmToIcdCd(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3fClmToIcdCd((index),value);
   } 

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



public void setHv3dIndex(int hv3dIndex) { 
    D529351uCtx.this.hv3dIndex = hv3dIndex;
}

public int getHv3dIndex() { 
    return D529351uCtx.this.hv3dIndex;
}

public void setHv3eIndex(int hv3eIndex) { 
    D529351uCtx.this.hv3eIndex = hv3eIndex;
}

public int getHv3eIndex() { 
    return D529351uCtx.this.hv3eIndex;
}
	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}



public void setHv3cIndex(int hv3cIndex) { 
    D529351uCtx.this.hv3cIndex = hv3cIndex;
}

public int getHv3cIndex() { 
    return D529351uCtx.this.hv3cIndex;
}
	/**
	 *	Returns the value of hv3bIcdDrvSvc
	 *	@return hv3bIcdDrvSvc
	 */
   public char[] getHv3bIcdDrvSvc(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3bIcdDrvSvc(index);
   }

  
	/**
	*  set variable hv3bIcdDrvSvc
	*  @param value
	**/
   public void setHv3bIcdDrvSvc(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3bIcdDrvSvc((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv3aIcdDrvPos
	 *	@return hv3aIcdDrvPos
	 */
   public char[] getHv3aIcdDrvPos(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3aIcdDrvPos(index);
   }

  
	/**
	*  set variable hv3aIcdDrvPos
	*  @param value
	**/
   public void setHv3aIcdDrvPos(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3aIcdDrvPos((index),value);
   } 

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of icdSub
	 *	@return icdSub
	 */
	public int getIcdSub() throws CFException {        
   		return work.getIcdSub();
	}
	
	/**
	 * 	Update IcdSub with the passed value
	 *	@param number
	 */
	public void setIcdSub(int number)  throws CFException{
		work.setIcdSub(number);
	}


	public void setIcdSub(long number)  throws CFException{
		work.setIcdSub((int)number);
	}



        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public FetchCsicdOutCtx getFetchCsicdOutCtx() {
            return new FetchCsicdOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCsicdo.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public FetchCsicdInCtx clone() {
        FetchCsicdInCtx cloneObj = new FetchCsicdInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCsicdo = new HvHostVariablesCsicdo();
        cloneObj.hvHostVariablesCsicdo.set(hvHostVariablesCsicdo.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsicdInCtx getFetchCsicdInCtx() {
            return new FetchCsicdInCtx();
    }
     public class FetchCsicdOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCsicdo hvHostVariablesCsicdo = D529351uCtx.this.getHvHostVariablesCsicdo();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of hv3eClmFrmIcdCd
	 *	@return hv3eClmFrmIcdCd
	 */
   public char[] getHv3eClmFrmIcdCd(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3eClmFrmIcdCd(index);
   }

  
	/**
	*  set variable hv3eClmFrmIcdCd
	*  @param value
	**/
   public void setHv3eClmFrmIcdCd(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3eClmFrmIcdCd((index),value);
   } 

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}



public void setHv3bIndex(int hv3bIndex) { 
    D529351uCtx.this.hv3bIndex = hv3bIndex;
}

public int getHv3bIndex() { 
    return D529351uCtx.this.hv3bIndex;
}

public void setHv3fIndex(int hv3fIndex) { 
    D529351uCtx.this.hv3fIndex = hv3fIndex;
}

public int getHv3fIndex() { 
    return D529351uCtx.this.hv3fIndex;
}
	/**
	 *	Returns the value of d51uRicdDrvCau
	 *	@return d51uRicdDrvCau
	 */
   public char[] getD51uRicdDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdDrvCau();
   }

  
	/**
	*  set variable d51uRicdDrvCau
	*  @param value
	**/
   public void setD51uRicdDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(value);
   } 

     /**
	 * 	Update D51uRicdDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uRicdDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdDrvCau with another Field
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source);
   }  
   
     /**
	 * 	Update D51uRicdDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition " " for isMoreIcdNotFound()
	 *	@return  Returns true if isMoreIcdNotFound() is " "
	 */
   public boolean isMoreIcdNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isMoreIcdNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setMoreIcdNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setMoreIcdNotFoundTrue();
   	}
	/**
	 *	Returns the value of hv3dIcdTypCd
	 *	@return hv3dIcdTypCd
	 */
   public char[] getHv3dIcdTypCd(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3dIcdTypCd(index);
   }

  
	/**
	*  set variable hv3dIcdTypCd
	*  @param value
	**/
   public void setHv3dIcdTypCd(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3dIcdTypCd((index),value);
   } 

	/**
	 *	Returns the value of hv3fClmToIcdCd
	 *	@return hv3fClmToIcdCd
	 */
   public char[] getHv3fClmToIcdCd(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3fClmToIcdCd(index);
   }

  
	/**
	*  set variable hv3fClmToIcdCd
	*  @param value
	**/
   public void setHv3fClmToIcdCd(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3fClmToIcdCd((index),value);
   } 

	/**
	 *	Returns the value of d51uRicdClmIcdInd
	 *	@return d51uRicdClmIcdInd
	 */
   public char[] getD51uRicdClmIcdInd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdClmIcdInd();
   }

  
	/**
	*  set variable d51uRicdClmIcdInd
	*  @param value
	**/
   public void setD51uRicdClmIcdInd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(value);
   } 

     /**
	 * 	Update D51uRicdClmIcdInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex);
   	
   }
   
   public void setD51uRicdClmIcdInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdClmIcdInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdClmIcdInd with another Field
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source);
   }  
   
     /**
	 * 	Update D51uRicdClmIcdInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdClmIcdInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRicdClmIcdFromCd
	 *	@return d51uRicdClmIcdFromCd
	 */
   public char[] getD51uRicdClmIcdFromCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdClmIcdFromCd();
   }

  
	/**
	*  set variable d51uRicdClmIcdFromCd
	*  @param value
	**/
   public void setD51uRicdClmIcdFromCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(value);
   } 

     /**
	 * 	Update D51uRicdClmIcdFromCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdClmIcdFromCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source, sourceIndex);
   	
   }
   
   public void setD51uRicdClmIcdFromCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdClmIcdFromCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdFromCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdClmIcdFromCd with another Field
	 *	@param value
	 */
   public void setD51uRicdClmIcdFromCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source);
   }  
   
     /**
	 * 	Update D51uRicdClmIcdFromCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdClmIcdFromCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdClmIcdFromCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdFromCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


public void setHv3eIndex(int hv3eIndex) { 
    D529351uCtx.this.hv3eIndex = hv3eIndex;
}

public int getHv3eIndex() { 
    return D529351uCtx.this.hv3eIndex;
}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Test condition "Y" for isMoreIcdFound()
	 *	@return  Returns true if isMoreIcdFound() is "Y"
	 */
   public boolean isMoreIcdFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isMoreIcdFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setMoreIcdFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setMoreIcdFoundTrue();
   	}
	/**
	 *	Returns the value of d51uRicdDrvSvc
	 *	@return d51uRicdDrvSvc
	 */
   public char[] getD51uRicdDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdDrvSvc();
   }

  
	/**
	*  set variable d51uRicdDrvSvc
	*  @param value
	**/
   public void setD51uRicdDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(value);
   } 

     /**
	 * 	Update D51uRicdDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uRicdDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uRicdDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRicdClmIcdToCd
	 *	@return d51uRicdClmIcdToCd
	 */
   public char[] getD51uRicdClmIcdToCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdClmIcdToCd();
   }

  
	/**
	*  set variable d51uRicdClmIcdToCd
	*  @param value
	**/
   public void setD51uRicdClmIcdToCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(value);
   } 

     /**
	 * 	Update D51uRicdClmIcdToCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdClmIcdToCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source, sourceIndex);
   	
   }
   
   public void setD51uRicdClmIcdToCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdClmIcdToCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdToCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdClmIcdToCd with another Field
	 *	@param value
	 */
   public void setD51uRicdClmIcdToCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source);
   }  
   
     /**
	 * 	Update D51uRicdClmIcdToCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdClmIcdToCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdClmIcdToCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdToCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsnnrows
	 *	@return dsnnrows
	 */
	public int getDsnnrows() throws CFException {        
   		return work.getDsnnrows();
	}
	
	/**
	 * 	Update Dsnnrows with the passed value
	 *	@param number
	 */
	public void setDsnnrows(int number)  throws CFException{
		work.setDsnnrows(number);
	}


	public void setDsnnrows(long number)  throws CFException{
		work.setDsnnrows((int)number);
	}


	/**
	 *	Returns the value of hv3aIcdDrvPos
	 *	@return hv3aIcdDrvPos
	 */
   public char[] getHv3aIcdDrvPos(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3aIcdDrvPos(index);
   }

  
	/**
	*  set variable hv3aIcdDrvPos
	*  @param value
	**/
   public void setHv3aIcdDrvPos(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3aIcdDrvPos((index),value);
   } 

	/**
	 *	Test condition "Y" for isEndOfFetchIcd()
	 *	@return  Returns true if isEndOfFetchIcd() is "Y"
	 */
   public boolean isEndOfFetchIcd() throws CFException {
      return work.isEndOfFetchIcd();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfFetchIcdTrue()  throws CFException{  			
    	work.setEndOfFetchIcdTrue();
   	}
	/**
	 *	Returns the value of icdSub
	 *	@return icdSub
	 */
	public int getIcdSub() throws CFException {        
   		return work.getIcdSub();
	}
	
	/**
	 * 	Update IcdSub with the passed value
	 *	@param number
	 */
	public void setIcdSub(int number)  throws CFException{
		work.setIcdSub(number);
	}


	public void setIcdSub(long number)  throws CFException{
		work.setIcdSub((int)number);
	}


	/**
	 *	Returns the value of hv3cIcdDrvCau
	 *	@return hv3cIcdDrvCau
	 */
   public char[] getHv3cIcdDrvCau(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3cIcdDrvCau(index);
   }

  
	/**
	*  set variable hv3cIcdDrvCau
	*  @param value
	**/
   public void setHv3cIcdDrvCau(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3cIcdDrvCau((index),value);
   } 


public void setHv3aIndex(int hv3aIndex) { 
    D529351uCtx.this.hv3aIndex = hv3aIndex;
}

public int getHv3aIndex() { 
    return D529351uCtx.this.hv3aIndex;
}
	/**
	 *	Returns the value of d51uRicdDrvPos
	 *	@return d51uRicdDrvPos
	 */
   public char[] getD51uRicdDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdDrvPos();
   }

  
	/**
	*  set variable d51uRicdDrvPos
	*  @param value
	**/
   public void setD51uRicdDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(value);
   } 

     /**
	 * 	Update D51uRicdDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uRicdDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdDrvPos with another Field
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source);
   }  
   
     /**
	 * 	Update D51uRicdDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvHostVariablesCsicdo
	 *	@return hvHostVariablesCsicdo
	 */   
	 public HvHostVariablesCsicdo getHvHostVariablesCsicdo() {
   	return hvHostVariablesCsicdo;
   }


	/**
	 *	Test condition " " for isIcdNotFound()
	 *	@return  Returns true if isIcdNotFound() is " "
	 */
   public boolean isIcdNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isIcdNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setIcdNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setIcdNotFoundTrue();
   	}
	/**
	 *	Returns the value of d51uMoreIcdCnt
	 *	@return d51uMoreIcdCnt
	 */
	public int getD51uMoreIcdCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uMoreIcdCnt();
	}
	
	/**
	 * 	Update D51uMoreIcdCnt with the passed value
	 *	@param number
	 */
	public void setD51uMoreIcdCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uMoreIcdCnt(number);
	}


	public void setD51uMoreIcdCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uMoreIcdCnt((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



public void setHv3dIndex(int hv3dIndex) { 
    D529351uCtx.this.hv3dIndex = hv3dIndex;
}

public int getHv3dIndex() { 
    return D529351uCtx.this.hv3dIndex;
}

public void setHv3cIndex(int hv3cIndex) { 
    D529351uCtx.this.hv3cIndex = hv3cIndex;
}

public int getHv3cIndex() { 
    return D529351uCtx.this.hv3cIndex;
}
	/**
	 *	Returns the value of hv3bIcdDrvSvc
	 *	@return hv3bIcdDrvSvc
	 */
   public char[] getHv3bIcdDrvSvc(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3bIcdDrvSvc(index);
   }

  
	/**
	*  set variable hv3bIcdDrvSvc
	*  @param value
	**/
   public void setHv3bIcdDrvSvc(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3bIcdDrvSvc((index),value);
   } 


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCsicdo.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public FetchCsicdOutCtx clone() {
        FetchCsicdOutCtx cloneObj = new FetchCsicdOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCsicdo = new HvHostVariablesCsicdo();
        cloneObj.hvHostVariablesCsicdo.set(hvHostVariablesCsicdo.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsicdOutCtx getFetchCsicdOutCtx() {
            return new FetchCsicdOutCtx();
    }
     public class CloseCsr2485InCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public CloseCsr2485OutCtx getCloseCsr2485OutCtx() {
            return new CloseCsr2485OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsr2485InCtx clone() {
        CloseCsr2485InCtx cloneObj = new CloseCsr2485InCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsr2485InCtx getCloseCsr2485InCtx() {
            return new CloseCsr2485InCtx();
    }
     public class CloseCsr2485OutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Test condition 43 for isD51uDb2CloseError()
	 *	@return  Returns true if isD51uDb2CloseError() is 43
	 */
   public boolean isD51uDb2CloseError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2CloseError();
   }

	/**
	*  set values 43
	*/
   	public void setD51uDb2CloseErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2CloseErrorTrue();
   	}
	/**
	 *	Returns the value of d51uParagraphNum
	 *	@return d51uParagraphNum
	 */
   public char[] getD51uParagraphNum() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uParagraphNum();
   }

  
	/**
	*  set variable d51uParagraphNum
	*  @param value
	**/
   public void setD51uParagraphNum(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(value);
   } 

     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex);
   	
   }
   
   public void setD51uParagraphNum(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uParagraphNum with another Field
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source);
   }  
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "N" for isCloseCsrNg()
	 *	@return  Returns true if isCloseCsrNg() is "N"
	 */
   public boolean isCloseCsrNg() throws CFException {
      return work.isCloseCsrNg();
   }

	/**
	*  set values "N"
	*/
   	public void setCloseCsrNgTrue()  throws CFException{  			
    	work.setCloseCsrNgTrue();
   	}
	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uDebugTracer
	 *	@return d51uDebugTracer
	 */
   public char[] getD51uDebugTracer() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uDebugTracer();
   }

  
	/**
	*  set variable d51uDebugTracer
	*  @param value
	**/
   public void setD51uDebugTracer(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(value);
   } 

     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex);
   	
   }
   
   public void setD51uDebugTracer(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uDebugTracer with another Field
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source);
   }  
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Test condition "Y" for isCloseCsrOk()
	 *	@return  Returns true if isCloseCsrOk() is "Y"
	 */
   public boolean isCloseCsrOk() throws CFException {
      return work.isCloseCsrOk();
   }

	/**
	*  set values "Y"
	*/
   	public void setCloseCsrOkTrue()  throws CFException{  			
    	work.setCloseCsrOkTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsr2485OutCtx clone() {
        CloseCsr2485OutCtx cloneObj = new CloseCsr2485OutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsr2485OutCtx getCloseCsr2485OutCtx() {
            return new CloseCsr2485OutCtx();
    }
     public class OpenCsfcndCursorInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     DclfeSpiRuleFrCondPos dclfeSpiRuleFrCondPos = D529351uCtx.this.getDclfeSpiRuleFrCondPos();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dclfeSpiRuleFrCondPos
	 *	@return dclfeSpiRuleFrCondPos
	 */   
	 public DclfeSpiRuleFrCondPos getDclfeSpiRuleFrCondPos() {
   	return dclfeSpiRuleFrCondPos;
   }


	/**
	 *	Returns the value of fcndDerivCausCd
	 *	@return fcndDerivCausCd
	 */
   public char[] getFcndDerivCausCd() throws CFException  {              
   		return dclfeSpiRuleFrCondPos.getFcndDerivCausCd();
   }

  
	/**
	*  set variable fcndDerivCausCd
	*  @param value
	**/
   public void setFcndDerivCausCd(char[] value) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(value);
   } 

     /**
	 * 	Update FcndDerivCausCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndDerivCausCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source, sourceIndex);
   	
   }
   
   public void setFcndDerivCausCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndDerivCausCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivCausCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndDerivCausCd with another Field
	 *	@param value
	 */
   public void setFcndDerivCausCd(Field source) {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source);
   }  
   
     /**
	 * 	Update FcndDerivCausCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndDerivCausCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndDerivCausCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivCausCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndDerivPlOfSvcCd
	 *	@return fcndDerivPlOfSvcCd
	 */
   public char[] getFcndDerivPlOfSvcCd() throws CFException  {              
   		return dclfeSpiRuleFrCondPos.getFcndDerivPlOfSvcCd();
   }

  
	/**
	*  set variable fcndDerivPlOfSvcCd
	*  @param value
	**/
   public void setFcndDerivPlOfSvcCd(char[] value) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(value);
   } 

     /**
	 * 	Update FcndDerivPlOfSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndDerivPlOfSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source, sourceIndex);
   	
   }
   
   public void setFcndDerivPlOfSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndDerivPlOfSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivPlOfSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndDerivPlOfSvcCd with another Field
	 *	@param value
	 */
   public void setFcndDerivPlOfSvcCd(Field source) {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source);
   }  
   
     /**
	 * 	Update FcndDerivPlOfSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndDerivPlOfSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isEndOfFetchFcnd()
	 *	@return  Returns true if isEndOfFetchFcnd() is "Y"
	 */
   public boolean isEndOfFetchFcnd() throws CFException {
      return work.isEndOfFetchFcnd();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfFetchFcndTrue()  throws CFException{  			
    	work.setEndOfFetchFcndTrue();
   	}
	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndSub
	 *	@return fcndSub
	 */
	public int getFcndSub() throws CFException {        
   		return work.getFcndSub();
	}
	
	/**
	 * 	Update FcndSub with the passed value
	 *	@param number
	 */
	public void setFcndSub(int number)  throws CFException{
		work.setFcndSub(number);
	}


	public void setFcndSub(long number)  throws CFException{
		work.setFcndSub((int)number);
	}


	/**
	 *	Returns the value of fcndDerivSvcCd
	 *	@return fcndDerivSvcCd
	 */
   public char[] getFcndDerivSvcCd() throws CFException  {              
   		return dclfeSpiRuleFrCondPos.getFcndDerivSvcCd();
   }

  
	/**
	*  set variable fcndDerivSvcCd
	*  @param value
	**/
   public void setFcndDerivSvcCd(char[] value) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(value);
   } 

     /**
	 * 	Update FcndDerivSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndDerivSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source, sourceIndex);
   	
   }
   
   public void setFcndDerivSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndDerivSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndDerivSvcCd with another Field
	 *	@param value
	 */
   public void setFcndDerivSvcCd(Field source) {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source);
   }  
   
     /**
	 * 	Update FcndDerivSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndDerivSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndDerivSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of fcndSpiTblId
	 *	@return fcndSpiTblId
	 */
   public char[] getFcndSpiTblId() throws CFException  {              
   		return dclfeSpiRuleFrCondPos.getFcndSpiTblId();
   }

  
	/**
	*  set variable fcndSpiTblId
	*  @param value
	**/
   public void setFcndSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(value);
   } 

     /**
	 * 	Update FcndSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source, sourceIndex);
   	
   }
   
   public void setFcndSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndSpiTblId with another Field
	 *	@param value
	 */
   public void setFcndSpiTblId(Field source) {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source);
   }  
   
     /**
	 * 	Update FcndSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public OpenCsfcndCursorOutCtx getOpenCsfcndCursorOutCtx() {
            return new OpenCsfcndCursorOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += dclfeSpiRuleFrCondPos.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public OpenCsfcndCursorInCtx clone() {
        OpenCsfcndCursorInCtx cloneObj = new OpenCsfcndCursorInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dclfeSpiRuleFrCondPos = new DclfeSpiRuleFrCondPos();
        cloneObj.dclfeSpiRuleFrCondPos.set(dclfeSpiRuleFrCondPos.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsfcndCursorInCtx getOpenCsfcndCursorInCtx() {
            return new OpenCsfcndCursorInCtx();
    }
     public class OpenCsfcndCursorOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     DclfeSpiRuleFrCondPos dclfeSpiRuleFrCondPos = D529351uCtx.this.getDclfeSpiRuleFrCondPos();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Test condition 42 for isD51uDb2OpenError()
	 *	@return  Returns true if isD51uDb2OpenError() is 42
	 */
   public boolean isD51uDb2OpenError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2OpenError();
   }

	/**
	*  set values 42
	*/
   	public void setD51uDb2OpenErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2OpenErrorTrue();
   	}
	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of d51uParagraphNum
	 *	@return d51uParagraphNum
	 */
   public char[] getD51uParagraphNum() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uParagraphNum();
   }

  
	/**
	*  set variable d51uParagraphNum
	*  @param value
	**/
   public void setD51uParagraphNum(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(value);
   } 

     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex);
   	
   }
   
   public void setD51uParagraphNum(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uParagraphNum with another Field
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source);
   }  
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uDebugTracer
	 *	@return d51uDebugTracer
	 */
   public char[] getD51uDebugTracer() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uDebugTracer();
   }

  
	/**
	*  set variable d51uDebugTracer
	*  @param value
	**/
   public void setD51uDebugTracer(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(value);
   } 

     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex);
   	
   }
   
   public void setD51uDebugTracer(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uDebugTracer with another Field
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source);
   }  
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 999 for isDsmDb2Error()
	 *	@return  Returns true if isDsmDb2Error() is 999
	 */
   public boolean isDsmDb2Error() throws CFException {
      return dsmCallArea.getDsmCommonArea().isDsmDb2Error();
   }

	/**
	*  set values 999
	*/
   	public void setDsmDb2ErrorTrue()  throws CFException{  			
    	dsmCallArea.getDsmCommonArea().setDsmDb2ErrorTrue();
   	}

        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += dclfeSpiRuleFrCondPos.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public OpenCsfcndCursorOutCtx clone() {
        OpenCsfcndCursorOutCtx cloneObj = new OpenCsfcndCursorOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dclfeSpiRuleFrCondPos = new DclfeSpiRuleFrCondPos();
        cloneObj.dclfeSpiRuleFrCondPos.set(dclfeSpiRuleFrCondPos.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsfcndCursorOutCtx getOpenCsfcndCursorOutCtx() {
            return new OpenCsfcndCursorOutCtx();
    }
     public class FetchCsfcndInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     DclfeSpiRuleFrCondPos dclfeSpiRuleFrCondPos = D529351uCtx.this.getDclfeSpiRuleFrCondPos();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of fcndFromCondPos
	 *	@return fcndFromCondPos
	 */
   public char[] getFcndFromCondPos() throws CFException  {              
   		return dclfeSpiRuleFrCondPos.getFcndFromCondPos();
   }

  
	/**
	*  set variable fcndFromCondPos
	*  @param value
	**/
   public void setFcndFromCondPos(char[] value) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndFromCondPos(value);
   } 

     /**
	 * 	Update FcndFromCondPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndFromCondPos(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndFromCondPos(source, sourceIndex);
   	
   }
   
   public void setFcndFromCondPos(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrCondPos.setFcndFromCondPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndFromCondPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndFromCondPos(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndFromCondPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndFromCondPos with another Field
	 *	@param value
	 */
   public void setFcndFromCondPos(Field source) {
      dclfeSpiRuleFrCondPos.setFcndFromCondPos(source);
   }  
   
     /**
	 * 	Update FcndFromCondPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndFromCondPos(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrCondPos.setFcndFromCondPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndFromCondPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndFromCondPos(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndFromCondPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dclfeSpiRuleFrCondPos
	 *	@return dclfeSpiRuleFrCondPos
	 */   
	 public DclfeSpiRuleFrCondPos getDclfeSpiRuleFrCondPos() {
   	return dclfeSpiRuleFrCondPos;
   }


	/**
	 *	Returns the value of fcndDerivCausCd
	 *	@return fcndDerivCausCd
	 */
   public char[] getFcndDerivCausCd() throws CFException  {              
   		return dclfeSpiRuleFrCondPos.getFcndDerivCausCd();
   }

  
	/**
	*  set variable fcndDerivCausCd
	*  @param value
	**/
   public void setFcndDerivCausCd(char[] value) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(value);
   } 

     /**
	 * 	Update FcndDerivCausCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndDerivCausCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source, sourceIndex);
   	
   }
   
   public void setFcndDerivCausCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndDerivCausCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivCausCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndDerivCausCd with another Field
	 *	@param value
	 */
   public void setFcndDerivCausCd(Field source) {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source);
   }  
   
     /**
	 * 	Update FcndDerivCausCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndDerivCausCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndDerivCausCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivCausCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndDerivPlOfSvcCd
	 *	@return fcndDerivPlOfSvcCd
	 */
   public char[] getFcndDerivPlOfSvcCd() throws CFException  {              
   		return dclfeSpiRuleFrCondPos.getFcndDerivPlOfSvcCd();
   }

  
	/**
	*  set variable fcndDerivPlOfSvcCd
	*  @param value
	**/
   public void setFcndDerivPlOfSvcCd(char[] value) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(value);
   } 

     /**
	 * 	Update FcndDerivPlOfSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndDerivPlOfSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source, sourceIndex);
   	
   }
   
   public void setFcndDerivPlOfSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndDerivPlOfSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivPlOfSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndDerivPlOfSvcCd with another Field
	 *	@param value
	 */
   public void setFcndDerivPlOfSvcCd(Field source) {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source);
   }  
   
     /**
	 * 	Update FcndDerivPlOfSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndDerivPlOfSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndSub
	 *	@return fcndSub
	 */
	public int getFcndSub() throws CFException {        
   		return work.getFcndSub();
	}
	
	/**
	 * 	Update FcndSub with the passed value
	 *	@param number
	 */
	public void setFcndSub(int number)  throws CFException{
		work.setFcndSub(number);
	}


	public void setFcndSub(long number)  throws CFException{
		work.setFcndSub((int)number);
	}


	/**
	 *	Returns the value of fcndDerivSvcCd
	 *	@return fcndDerivSvcCd
	 */
   public char[] getFcndDerivSvcCd() throws CFException  {              
   		return dclfeSpiRuleFrCondPos.getFcndDerivSvcCd();
   }

  
	/**
	*  set variable fcndDerivSvcCd
	*  @param value
	**/
   public void setFcndDerivSvcCd(char[] value) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(value);
   } 

     /**
	 * 	Update FcndDerivSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndDerivSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source, sourceIndex);
   	
   }
   
   public void setFcndDerivSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndDerivSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndDerivSvcCd with another Field
	 *	@param value
	 */
   public void setFcndDerivSvcCd(Field source) {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source);
   }  
   
     /**
	 * 	Update FcndDerivSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndDerivSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndDerivSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of csSub
	 *	@return csSub
	 */
	public int getCsSub() throws CFException {        
   		return work.getCsSub();
	}
	
	/**
	 * 	Update CsSub with the passed value
	 *	@param number
	 */
	public void setCsSub(int number)  throws CFException{
		work.setCsSub(number);
	}


	public void setCsSub(long number)  throws CFException{
		work.setCsSub((int)number);
	}


	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public FetchCsfcndOutCtx getFetchCsfcndOutCtx() {
            return new FetchCsfcndOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += dclfeSpiRuleFrCondPos.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public FetchCsfcndInCtx clone() {
        FetchCsfcndInCtx cloneObj = new FetchCsfcndInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dclfeSpiRuleFrCondPos = new DclfeSpiRuleFrCondPos();
        cloneObj.dclfeSpiRuleFrCondPos.set(dclfeSpiRuleFrCondPos.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsfcndInCtx getFetchCsfcndInCtx() {
            return new FetchCsfcndInCtx();
    }
     public class FetchCsfcndOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     DclfeSpiRuleFrCondPos dclfeSpiRuleFrCondPos = D529351uCtx.this.getDclfeSpiRuleFrCondPos();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of fcndFromCondPos
	 *	@return fcndFromCondPos
	 */
   public char[] getFcndFromCondPos() throws CFException  {              
   		return dclfeSpiRuleFrCondPos.getFcndFromCondPos();
   }

  
	/**
	*  set variable fcndFromCondPos
	*  @param value
	**/
   public void setFcndFromCondPos(char[] value) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndFromCondPos(value);
   } 

     /**
	 * 	Update FcndFromCondPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndFromCondPos(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndFromCondPos(source, sourceIndex);
   	
   }
   
   public void setFcndFromCondPos(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrCondPos.setFcndFromCondPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndFromCondPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndFromCondPos(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndFromCondPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndFromCondPos with another Field
	 *	@param value
	 */
   public void setFcndFromCondPos(Field source) {
      dclfeSpiRuleFrCondPos.setFcndFromCondPos(source);
   }  
   
     /**
	 * 	Update FcndFromCondPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndFromCondPos(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrCondPos.setFcndFromCondPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndFromCondPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndFromCondPos(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndFromCondPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleFrCondPos
	 *	@return dclfeSpiRuleFrCondPos
	 */   
	 public DclfeSpiRuleFrCondPos getDclfeSpiRuleFrCondPos() {
   	return dclfeSpiRuleFrCondPos;
   }


	/**
	 *	Returns the value of fcndDerivCausCd
	 *	@return fcndDerivCausCd
	 */
   public char[] getFcndDerivCausCd() throws CFException  {              
   		return dclfeSpiRuleFrCondPos.getFcndDerivCausCd();
   }

  
	/**
	*  set variable fcndDerivCausCd
	*  @param value
	**/
   public void setFcndDerivCausCd(char[] value) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(value);
   } 

     /**
	 * 	Update FcndDerivCausCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndDerivCausCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source, sourceIndex);
   	
   }
   
   public void setFcndDerivCausCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndDerivCausCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivCausCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndDerivCausCd with another Field
	 *	@param value
	 */
   public void setFcndDerivCausCd(Field source) {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source);
   }  
   
     /**
	 * 	Update FcndDerivCausCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndDerivCausCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndDerivCausCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivCausCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of d51uFcndFromCondPos
	 *	@return d51uFcndFromCondPos
	 */
   public char[] getD51uFcndFromCondPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).getD51uFcndFromCondPos();
   }

  
	/**
	*  set variable d51uFcndFromCondPos
	*  @param value
	**/
   public void setD51uFcndFromCondPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(value);
   } 

     /**
	 * 	Update D51uFcndFromCondPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFcndFromCondPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source, sourceIndex);
   	
   }
   
   public void setD51uFcndFromCondPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFcndFromCondPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndFromCondPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFcndFromCondPos with another Field
	 *	@param value
	 */
   public void setD51uFcndFromCondPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source);
   }  
   
     /**
	 * 	Update D51uFcndFromCondPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFcndFromCondPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFcndFromCondPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndFromCondPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndDerivPlOfSvcCd
	 *	@return fcndDerivPlOfSvcCd
	 */
   public char[] getFcndDerivPlOfSvcCd() throws CFException  {              
   		return dclfeSpiRuleFrCondPos.getFcndDerivPlOfSvcCd();
   }

  
	/**
	*  set variable fcndDerivPlOfSvcCd
	*  @param value
	**/
   public void setFcndDerivPlOfSvcCd(char[] value) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(value);
   } 

     /**
	 * 	Update FcndDerivPlOfSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndDerivPlOfSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source, sourceIndex);
   	
   }
   
   public void setFcndDerivPlOfSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndDerivPlOfSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivPlOfSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndDerivPlOfSvcCd with another Field
	 *	@param value
	 */
   public void setFcndDerivPlOfSvcCd(Field source) {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source);
   }  
   
     /**
	 * 	Update FcndDerivPlOfSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndDerivPlOfSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndDerivSvcCd
	 *	@return fcndDerivSvcCd
	 */
   public char[] getFcndDerivSvcCd() throws CFException  {              
   		return dclfeSpiRuleFrCondPos.getFcndDerivSvcCd();
   }

  
	/**
	*  set variable fcndDerivSvcCd
	*  @param value
	**/
   public void setFcndDerivSvcCd(char[] value) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(value);
   } 

     /**
	 * 	Update FcndDerivSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndDerivSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source, sourceIndex);
   	
   }
   
   public void setFcndDerivSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndDerivSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndDerivSvcCd with another Field
	 *	@param value
	 */
   public void setFcndDerivSvcCd(Field source) {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source);
   }  
   
     /**
	 * 	Update FcndDerivSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndDerivSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndDerivSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndDerivSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition "Y" for isPosFound()
	 *	@return  Returns true if isPosFound() is "Y"
	 */
   public boolean isPosFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isPosFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setPosFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setPosFoundTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Test condition " " for isPosNotFound()
	 *	@return  Returns true if isPosNotFound() is " "
	 */
   public boolean isPosNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isPosNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setPosNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setPosNotFoundTrue();
   	}
	/**
	 *	Returns the value of d51uFcndDrvPos
	 *	@return d51uFcndDrvPos
	 */
   public char[] getD51uFcndDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).getD51uFcndDrvPos();
   }

  
	/**
	*  set variable d51uFcndDrvPos
	*  @param value
	**/
   public void setD51uFcndDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(value);
   } 

     /**
	 * 	Update D51uFcndDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uFcndDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFcndDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFcndDrvPos with another Field
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source);
   }  
   
     /**
	 * 	Update D51uFcndDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFcndDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isEndOfFetchFcnd()
	 *	@return  Returns true if isEndOfFetchFcnd() is "Y"
	 */
   public boolean isEndOfFetchFcnd() throws CFException {
      return work.isEndOfFetchFcnd();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfFetchFcndTrue()  throws CFException{  			
    	work.setEndOfFetchFcndTrue();
   	}
	/**
	 *	Returns the value of fcndSub
	 *	@return fcndSub
	 */
	public int getFcndSub() throws CFException {        
   		return work.getFcndSub();
	}
	
	/**
	 * 	Update FcndSub with the passed value
	 *	@param number
	 */
	public void setFcndSub(int number)  throws CFException{
		work.setFcndSub(number);
	}


	public void setFcndSub(long number)  throws CFException{
		work.setFcndSub((int)number);
	}


	/**
	 *	Returns the value of d51uFcndDrvSvc
	 *	@return d51uFcndDrvSvc
	 */
   public char[] getD51uFcndDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).getD51uFcndDrvSvc();
   }

  
	/**
	*  set variable d51uFcndDrvSvc
	*  @param value
	**/
   public void setD51uFcndDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(value);
   } 

     /**
	 * 	Update D51uFcndDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uFcndDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFcndDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFcndDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uFcndDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFcndDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFcndDrvCau
	 *	@return d51uFcndDrvCau
	 */
   public char[] getD51uFcndDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).getD51uFcndDrvCau();
   }

  
	/**
	*  set variable d51uFcndDrvCau
	*  @param value
	**/
   public void setD51uFcndDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(value);
   } 

     /**
	 * 	Update D51uFcndDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uFcndDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFcndDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFcndDrvCau with another Field
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source);
   }  
   
     /**
	 * 	Update D51uFcndDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFcndDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFcndCnt
	 *	@return d51uFcndCnt
	 */
	public int getD51uFcndCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uFcndCnt();
	}
	
	/**
	 * 	Update D51uFcndCnt with the passed value
	 *	@param number
	 */
	public void setD51uFcndCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uFcndCnt(number);
	}


	public void setD51uFcndCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uFcndCnt((int)number);
	}



        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += dclfeSpiRuleFrCondPos.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public FetchCsfcndOutCtx clone() {
        FetchCsfcndOutCtx cloneObj = new FetchCsfcndOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dclfeSpiRuleFrCondPos = new DclfeSpiRuleFrCondPos();
        cloneObj.dclfeSpiRuleFrCondPos.set(dclfeSpiRuleFrCondPos.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsfcndOutCtx getFetchCsfcndOutCtx() {
            return new FetchCsfcndOutCtx();
    }
     public class CloseCsr2585InCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public CloseCsr2585OutCtx getCloseCsr2585OutCtx() {
            return new CloseCsr2585OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsr2585InCtx clone() {
        CloseCsr2585InCtx cloneObj = new CloseCsr2585InCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsr2585InCtx getCloseCsr2585InCtx() {
            return new CloseCsr2585InCtx();
    }
     public class CloseCsr2585OutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Test condition 43 for isD51uDb2CloseError()
	 *	@return  Returns true if isD51uDb2CloseError() is 43
	 */
   public boolean isD51uDb2CloseError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2CloseError();
   }

	/**
	*  set values 43
	*/
   	public void setD51uDb2CloseErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2CloseErrorTrue();
   	}
	/**
	 *	Returns the value of d51uParagraphNum
	 *	@return d51uParagraphNum
	 */
   public char[] getD51uParagraphNum() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uParagraphNum();
   }

  
	/**
	*  set variable d51uParagraphNum
	*  @param value
	**/
   public void setD51uParagraphNum(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(value);
   } 

     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex);
   	
   }
   
   public void setD51uParagraphNum(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uParagraphNum with another Field
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source);
   }  
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "N" for isCloseCsrNg()
	 *	@return  Returns true if isCloseCsrNg() is "N"
	 */
   public boolean isCloseCsrNg() throws CFException {
      return work.isCloseCsrNg();
   }

	/**
	*  set values "N"
	*/
   	public void setCloseCsrNgTrue()  throws CFException{  			
    	work.setCloseCsrNgTrue();
   	}
	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uDebugTracer
	 *	@return d51uDebugTracer
	 */
   public char[] getD51uDebugTracer() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uDebugTracer();
   }

  
	/**
	*  set variable d51uDebugTracer
	*  @param value
	**/
   public void setD51uDebugTracer(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(value);
   } 

     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex);
   	
   }
   
   public void setD51uDebugTracer(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uDebugTracer with another Field
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source);
   }  
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Test condition "Y" for isCloseCsrOk()
	 *	@return  Returns true if isCloseCsrOk() is "Y"
	 */
   public boolean isCloseCsrOk() throws CFException {
      return work.isCloseCsrOk();
   }

	/**
	*  set values "Y"
	*/
   	public void setCloseCsrOkTrue()  throws CFException{  			
    	work.setCloseCsrOkTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsr2585OutCtx clone() {
        CloseCsr2585OutCtx cloneObj = new CloseCsr2585OutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsr2585OutCtx getCloseCsr2585OutCtx() {
            return new CloseCsr2585OutCtx();
    }
     public class SelectCauseTableInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     DclfeSpiRuleCaus dclfeSpiRuleCaus = D529351uCtx.this.getDclfeSpiRuleCaus();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of causDerivCausCd
	 *	@return causDerivCausCd
	 */
   public char[] getCausDerivCausCd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausDerivCausCd();
   }

  
	/**
	*  set variable causDerivCausCd
	*  @param value
	**/
   public void setCausDerivCausCd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausDerivCausCd(value);
   } 

     /**
	 * 	Update CausDerivCausCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausDerivCausCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausDerivCausCd(source, sourceIndex);
   	
   }
   
   public void setCausDerivCausCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausDerivCausCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausDerivCausCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausDerivCausCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausDerivCausCd with another Field
	 *	@param value
	 */
   public void setCausDerivCausCd(Field source) {
      dclfeSpiRuleCaus.setCausDerivCausCd(source);
   }  
   
     /**
	 * 	Update CausDerivCausCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausDerivCausCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausDerivCausCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausDerivCausCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausDerivCausCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causClmCaus2Cd
	 *	@return causClmCaus2Cd
	 */
   public char[] getCausClmCaus2Cd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausClmCaus2Cd();
   }

  
	/**
	*  set variable causClmCaus2Cd
	*  @param value
	**/
   public void setCausClmCaus2Cd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus2Cd(value);
   } 

     /**
	 * 	Update CausClmCaus2Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausClmCaus2Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus2Cd(source, sourceIndex);
   	
   }
   
   public void setCausClmCaus2Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausClmCaus2Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausClmCaus2Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus2Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus2Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausClmCaus2Cd with another Field
	 *	@param value
	 */
   public void setCausClmCaus2Cd(Field source) {
      dclfeSpiRuleCaus.setCausClmCaus2Cd(source);
   }  
   
     /**
	 * 	Update CausClmCaus2Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausClmCaus2Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausClmCaus2Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausClmCaus2Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus2Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus2Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causSub
	 *	@return causSub
	 */
	public int getCausSub() throws CFException {        
   		return work.getCausSub();
	}
	
	/**
	 * 	Update CausSub with the passed value
	 *	@param number
	 */
	public void setCausSub(int number)  throws CFException{
		work.setCausSub(number);
	}


	public void setCausSub(long number)  throws CFException{
		work.setCausSub((int)number);
	}


	/**
	 *	Returns the value of causClmCaus6Cd
	 *	@return causClmCaus6Cd
	 */
   public char[] getCausClmCaus6Cd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausClmCaus6Cd();
   }

  
	/**
	*  set variable causClmCaus6Cd
	*  @param value
	**/
   public void setCausClmCaus6Cd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus6Cd(value);
   } 

     /**
	 * 	Update CausClmCaus6Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausClmCaus6Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus6Cd(source, sourceIndex);
   	
   }
   
   public void setCausClmCaus6Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausClmCaus6Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausClmCaus6Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus6Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus6Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausClmCaus6Cd with another Field
	 *	@param value
	 */
   public void setCausClmCaus6Cd(Field source) {
      dclfeSpiRuleCaus.setCausClmCaus6Cd(source);
   }  
   
     /**
	 * 	Update CausClmCaus6Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausClmCaus6Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausClmCaus6Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausClmCaus6Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus6Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus6Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causDerivPlOfSvcCd
	 *	@return causDerivPlOfSvcCd
	 */
   public char[] getCausDerivPlOfSvcCd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausDerivPlOfSvcCd();
   }

  
	/**
	*  set variable causDerivPlOfSvcCd
	*  @param value
	**/
   public void setCausDerivPlOfSvcCd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausDerivPlOfSvcCd(value);
   } 

     /**
	 * 	Update CausDerivPlOfSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausDerivPlOfSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausDerivPlOfSvcCd(source, sourceIndex);
   	
   }
   
   public void setCausDerivPlOfSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausDerivPlOfSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausDerivPlOfSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausDerivPlOfSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausDerivPlOfSvcCd with another Field
	 *	@param value
	 */
   public void setCausDerivPlOfSvcCd(Field source) {
      dclfeSpiRuleCaus.setCausDerivPlOfSvcCd(source);
   }  
   
     /**
	 * 	Update CausDerivPlOfSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausDerivPlOfSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausDerivPlOfSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of causClmCaus3Cd
	 *	@return causClmCaus3Cd
	 */
   public char[] getCausClmCaus3Cd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausClmCaus3Cd();
   }

  
	/**
	*  set variable causClmCaus3Cd
	*  @param value
	**/
   public void setCausClmCaus3Cd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus3Cd(value);
   } 

     /**
	 * 	Update CausClmCaus3Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausClmCaus3Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus3Cd(source, sourceIndex);
   	
   }
   
   public void setCausClmCaus3Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausClmCaus3Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausClmCaus3Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus3Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus3Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausClmCaus3Cd with another Field
	 *	@param value
	 */
   public void setCausClmCaus3Cd(Field source) {
      dclfeSpiRuleCaus.setCausClmCaus3Cd(source);
   }  
   
     /**
	 * 	Update CausClmCaus3Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausClmCaus3Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausClmCaus3Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausClmCaus3Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus3Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus3Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causDerivSvcCd
	 *	@return causDerivSvcCd
	 */
   public char[] getCausDerivSvcCd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausDerivSvcCd();
   }

  
	/**
	*  set variable causDerivSvcCd
	*  @param value
	**/
   public void setCausDerivSvcCd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausDerivSvcCd(value);
   } 

     /**
	 * 	Update CausDerivSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausDerivSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausDerivSvcCd(source, sourceIndex);
   	
   }
   
   public void setCausDerivSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausDerivSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausDerivSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausDerivSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausDerivSvcCd with another Field
	 *	@param value
	 */
   public void setCausDerivSvcCd(Field source) {
      dclfeSpiRuleCaus.setCausDerivSvcCd(source);
   }  
   
     /**
	 * 	Update CausDerivSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausDerivSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausDerivSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausDerivSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausDerivSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causClmCaus7Cd
	 *	@return causClmCaus7Cd
	 */
   public char[] getCausClmCaus7Cd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausClmCaus7Cd();
   }

  
	/**
	*  set variable causClmCaus7Cd
	*  @param value
	**/
   public void setCausClmCaus7Cd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus7Cd(value);
   } 

     /**
	 * 	Update CausClmCaus7Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausClmCaus7Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus7Cd(source, sourceIndex);
   	
   }
   
   public void setCausClmCaus7Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausClmCaus7Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausClmCaus7Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus7Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus7Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausClmCaus7Cd with another Field
	 *	@param value
	 */
   public void setCausClmCaus7Cd(Field source) {
      dclfeSpiRuleCaus.setCausClmCaus7Cd(source);
   }  
   
     /**
	 * 	Update CausClmCaus7Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausClmCaus7Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausClmCaus7Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausClmCaus7Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus7Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus7Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causClmCaus1Cd
	 *	@return causClmCaus1Cd
	 */
   public char[] getCausClmCaus1Cd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausClmCaus1Cd();
   }

  
	/**
	*  set variable causClmCaus1Cd
	*  @param value
	**/
   public void setCausClmCaus1Cd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus1Cd(value);
   } 

     /**
	 * 	Update CausClmCaus1Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausClmCaus1Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus1Cd(source, sourceIndex);
   	
   }
   
   public void setCausClmCaus1Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausClmCaus1Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausClmCaus1Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus1Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus1Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausClmCaus1Cd with another Field
	 *	@param value
	 */
   public void setCausClmCaus1Cd(Field source) {
      dclfeSpiRuleCaus.setCausClmCaus1Cd(source);
   }  
   
     /**
	 * 	Update CausClmCaus1Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausClmCaus1Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausClmCaus1Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausClmCaus1Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus1Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus1Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of causClmCaus8Cd
	 *	@return causClmCaus8Cd
	 */
   public char[] getCausClmCaus8Cd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausClmCaus8Cd();
   }

  
	/**
	*  set variable causClmCaus8Cd
	*  @param value
	**/
   public void setCausClmCaus8Cd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus8Cd(value);
   } 

     /**
	 * 	Update CausClmCaus8Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausClmCaus8Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus8Cd(source, sourceIndex);
   	
   }
   
   public void setCausClmCaus8Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausClmCaus8Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausClmCaus8Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus8Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus8Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausClmCaus8Cd with another Field
	 *	@param value
	 */
   public void setCausClmCaus8Cd(Field source) {
      dclfeSpiRuleCaus.setCausClmCaus8Cd(source);
   }  
   
     /**
	 * 	Update CausClmCaus8Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausClmCaus8Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausClmCaus8Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausClmCaus8Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus8Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus8Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dclfeSpiRuleCaus
	 *	@return dclfeSpiRuleCaus
	 */   
	 public DclfeSpiRuleCaus getDclfeSpiRuleCaus() {
   	return dclfeSpiRuleCaus;
   }


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causClmCaus4Cd
	 *	@return causClmCaus4Cd
	 */
   public char[] getCausClmCaus4Cd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausClmCaus4Cd();
   }

  
	/**
	*  set variable causClmCaus4Cd
	*  @param value
	**/
   public void setCausClmCaus4Cd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus4Cd(value);
   } 

     /**
	 * 	Update CausClmCaus4Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausClmCaus4Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus4Cd(source, sourceIndex);
   	
   }
   
   public void setCausClmCaus4Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausClmCaus4Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausClmCaus4Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus4Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus4Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausClmCaus4Cd with another Field
	 *	@param value
	 */
   public void setCausClmCaus4Cd(Field source) {
      dclfeSpiRuleCaus.setCausClmCaus4Cd(source);
   }  
   
     /**
	 * 	Update CausClmCaus4Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausClmCaus4Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausClmCaus4Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausClmCaus4Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus4Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus4Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causClmCaus5Cd
	 *	@return causClmCaus5Cd
	 */
   public char[] getCausClmCaus5Cd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausClmCaus5Cd();
   }

  
	/**
	*  set variable causClmCaus5Cd
	*  @param value
	**/
   public void setCausClmCaus5Cd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus5Cd(value);
   } 

     /**
	 * 	Update CausClmCaus5Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausClmCaus5Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus5Cd(source, sourceIndex);
   	
   }
   
   public void setCausClmCaus5Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausClmCaus5Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausClmCaus5Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus5Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus5Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausClmCaus5Cd with another Field
	 *	@param value
	 */
   public void setCausClmCaus5Cd(Field source) {
      dclfeSpiRuleCaus.setCausClmCaus5Cd(source);
   }  
   
     /**
	 * 	Update CausClmCaus5Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausClmCaus5Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausClmCaus5Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausClmCaus5Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus5Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus5Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causSpiTblId
	 *	@return causSpiTblId
	 */
   public char[] getCausSpiTblId() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausSpiTblId();
   }

  
	/**
	*  set variable causSpiTblId
	*  @param value
	**/
   public void setCausSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausSpiTblId(value);
   } 

     /**
	 * 	Update CausSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausSpiTblId(source, sourceIndex);
   	
   }
   
   public void setCausSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausSpiTblId with another Field
	 *	@param value
	 */
   public void setCausSpiTblId(Field source) {
      dclfeSpiRuleCaus.setCausSpiTblId(source);
   }  
   
     /**
	 * 	Update CausSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public SelectCauseTableOutCtx getSelectCauseTableOutCtx() {
            return new SelectCauseTableOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += dclfeSpiRuleCaus.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public SelectCauseTableInCtx clone() {
        SelectCauseTableInCtx cloneObj = new SelectCauseTableInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dclfeSpiRuleCaus = new DclfeSpiRuleCaus();
        cloneObj.dclfeSpiRuleCaus.set(dclfeSpiRuleCaus.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public SelectCauseTableInCtx getSelectCauseTableInCtx() {
            return new SelectCauseTableInCtx();
    }
     public class SelectCauseTableOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     DclfeSpiRuleCaus dclfeSpiRuleCaus = D529351uCtx.this.getDclfeSpiRuleCaus();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Test condition "Y" for isCausecdFound()
	 *	@return  Returns true if isCausecdFound() is "Y"
	 */
   public boolean isCausecdFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isCausecdFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setCausecdFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setCausecdFoundTrue();
   	}
	/**
	 *	Returns the value of causDerivCausCd
	 *	@return causDerivCausCd
	 */
   public char[] getCausDerivCausCd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausDerivCausCd();
   }

  
	/**
	*  set variable causDerivCausCd
	*  @param value
	**/
   public void setCausDerivCausCd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausDerivCausCd(value);
   } 

     /**
	 * 	Update CausDerivCausCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausDerivCausCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausDerivCausCd(source, sourceIndex);
   	
   }
   
   public void setCausDerivCausCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausDerivCausCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausDerivCausCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausDerivCausCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausDerivCausCd with another Field
	 *	@param value
	 */
   public void setCausDerivCausCd(Field source) {
      dclfeSpiRuleCaus.setCausDerivCausCd(source);
   }  
   
     /**
	 * 	Update CausDerivCausCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausDerivCausCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausDerivCausCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausDerivCausCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausDerivCausCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causClmCaus2Cd
	 *	@return causClmCaus2Cd
	 */
   public char[] getCausClmCaus2Cd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausClmCaus2Cd();
   }

  
	/**
	*  set variable causClmCaus2Cd
	*  @param value
	**/
   public void setCausClmCaus2Cd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus2Cd(value);
   } 

     /**
	 * 	Update CausClmCaus2Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausClmCaus2Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus2Cd(source, sourceIndex);
   	
   }
   
   public void setCausClmCaus2Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausClmCaus2Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausClmCaus2Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus2Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus2Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausClmCaus2Cd with another Field
	 *	@param value
	 */
   public void setCausClmCaus2Cd(Field source) {
      dclfeSpiRuleCaus.setCausClmCaus2Cd(source);
   }  
   
     /**
	 * 	Update CausClmCaus2Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausClmCaus2Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausClmCaus2Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausClmCaus2Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus2Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus2Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of d51uCausDrvCau
	 *	@return d51uCausDrvCau
	 */
   public char[] getD51uCausDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausDrvCau();
   }

  
	/**
	*  set variable d51uCausDrvCau
	*  @param value
	**/
   public void setD51uCausDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(value);
   } 

     /**
	 * 	Update D51uCausDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uCausDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausDrvCau with another Field
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source);
   }  
   
     /**
	 * 	Update D51uCausDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causSub
	 *	@return causSub
	 */
	public int getCausSub() throws CFException {        
   		return work.getCausSub();
	}
	
	/**
	 * 	Update CausSub with the passed value
	 *	@param number
	 */
	public void setCausSub(int number)  throws CFException{
		work.setCausSub(number);
	}


	public void setCausSub(long number)  throws CFException{
		work.setCausSub((int)number);
	}


	/**
	 *	Returns the value of d51uCausClmCauseCd6
	 *	@return d51uCausClmCauseCd6
	 */
   public char[] getD51uCausClmCauseCd6(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd6();
   }

  
	/**
	*  set variable d51uCausClmCauseCd6
	*  @param value
	**/
   public void setD51uCausClmCauseCd6(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd6 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd6(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd6(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd6 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd6(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd6 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd6(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd6 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd6(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd6 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd6(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd7
	 *	@return d51uCausClmCauseCd7
	 */
   public char[] getD51uCausClmCauseCd7(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd7();
   }

  
	/**
	*  set variable d51uCausClmCauseCd7
	*  @param value
	**/
   public void setD51uCausClmCauseCd7(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd7 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd7(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd7(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd7 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd7(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd7 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd7(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd7 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd7(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd7 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd7(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causClmCaus6Cd
	 *	@return causClmCaus6Cd
	 */
   public char[] getCausClmCaus6Cd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausClmCaus6Cd();
   }

  
	/**
	*  set variable causClmCaus6Cd
	*  @param value
	**/
   public void setCausClmCaus6Cd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus6Cd(value);
   } 

     /**
	 * 	Update CausClmCaus6Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausClmCaus6Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus6Cd(source, sourceIndex);
   	
   }
   
   public void setCausClmCaus6Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausClmCaus6Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausClmCaus6Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus6Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus6Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausClmCaus6Cd with another Field
	 *	@param value
	 */
   public void setCausClmCaus6Cd(Field source) {
      dclfeSpiRuleCaus.setCausClmCaus6Cd(source);
   }  
   
     /**
	 * 	Update CausClmCaus6Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausClmCaus6Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausClmCaus6Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausClmCaus6Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus6Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus6Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causDerivPlOfSvcCd
	 *	@return causDerivPlOfSvcCd
	 */
   public char[] getCausDerivPlOfSvcCd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausDerivPlOfSvcCd();
   }

  
	/**
	*  set variable causDerivPlOfSvcCd
	*  @param value
	**/
   public void setCausDerivPlOfSvcCd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausDerivPlOfSvcCd(value);
   } 

     /**
	 * 	Update CausDerivPlOfSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausDerivPlOfSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausDerivPlOfSvcCd(source, sourceIndex);
   	
   }
   
   public void setCausDerivPlOfSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausDerivPlOfSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausDerivPlOfSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausDerivPlOfSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausDerivPlOfSvcCd with another Field
	 *	@param value
	 */
   public void setCausDerivPlOfSvcCd(Field source) {
      dclfeSpiRuleCaus.setCausDerivPlOfSvcCd(source);
   }  
   
     /**
	 * 	Update CausDerivPlOfSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausDerivPlOfSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausDerivPlOfSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causClmCaus3Cd
	 *	@return causClmCaus3Cd
	 */
   public char[] getCausClmCaus3Cd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausClmCaus3Cd();
   }

  
	/**
	*  set variable causClmCaus3Cd
	*  @param value
	**/
   public void setCausClmCaus3Cd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus3Cd(value);
   } 

     /**
	 * 	Update CausClmCaus3Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausClmCaus3Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus3Cd(source, sourceIndex);
   	
   }
   
   public void setCausClmCaus3Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausClmCaus3Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausClmCaus3Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus3Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus3Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausClmCaus3Cd with another Field
	 *	@param value
	 */
   public void setCausClmCaus3Cd(Field source) {
      dclfeSpiRuleCaus.setCausClmCaus3Cd(source);
   }  
   
     /**
	 * 	Update CausClmCaus3Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausClmCaus3Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausClmCaus3Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausClmCaus3Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus3Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus3Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causDerivSvcCd
	 *	@return causDerivSvcCd
	 */
   public char[] getCausDerivSvcCd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausDerivSvcCd();
   }

  
	/**
	*  set variable causDerivSvcCd
	*  @param value
	**/
   public void setCausDerivSvcCd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausDerivSvcCd(value);
   } 

     /**
	 * 	Update CausDerivSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausDerivSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausDerivSvcCd(source, sourceIndex);
   	
   }
   
   public void setCausDerivSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausDerivSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausDerivSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausDerivSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausDerivSvcCd with another Field
	 *	@param value
	 */
   public void setCausDerivSvcCd(Field source) {
      dclfeSpiRuleCaus.setCausDerivSvcCd(source);
   }  
   
     /**
	 * 	Update CausDerivSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausDerivSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausDerivSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausDerivSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausDerivSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd4
	 *	@return d51uCausClmCauseCd4
	 */
   public char[] getD51uCausClmCauseCd4(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd4();
   }

  
	/**
	*  set variable d51uCausClmCauseCd4
	*  @param value
	**/
   public void setD51uCausClmCauseCd4(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd4 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd4(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd4(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd4 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd4(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd4 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd4(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd4 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd4(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd4 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd4(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causClmCaus1Cd
	 *	@return causClmCaus1Cd
	 */
   public char[] getCausClmCaus1Cd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausClmCaus1Cd();
   }

  
	/**
	*  set variable causClmCaus1Cd
	*  @param value
	**/
   public void setCausClmCaus1Cd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus1Cd(value);
   } 

     /**
	 * 	Update CausClmCaus1Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausClmCaus1Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus1Cd(source, sourceIndex);
   	
   }
   
   public void setCausClmCaus1Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausClmCaus1Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausClmCaus1Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus1Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus1Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausClmCaus1Cd with another Field
	 *	@param value
	 */
   public void setCausClmCaus1Cd(Field source) {
      dclfeSpiRuleCaus.setCausClmCaus1Cd(source);
   }  
   
     /**
	 * 	Update CausClmCaus1Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausClmCaus1Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausClmCaus1Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausClmCaus1Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus1Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus1Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causClmCaus8Cd
	 *	@return causClmCaus8Cd
	 */
   public char[] getCausClmCaus8Cd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausClmCaus8Cd();
   }

  
	/**
	*  set variable causClmCaus8Cd
	*  @param value
	**/
   public void setCausClmCaus8Cd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus8Cd(value);
   } 

     /**
	 * 	Update CausClmCaus8Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausClmCaus8Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus8Cd(source, sourceIndex);
   	
   }
   
   public void setCausClmCaus8Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausClmCaus8Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausClmCaus8Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus8Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus8Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausClmCaus8Cd with another Field
	 *	@param value
	 */
   public void setCausClmCaus8Cd(Field source) {
      dclfeSpiRuleCaus.setCausClmCaus8Cd(source);
   }  
   
     /**
	 * 	Update CausClmCaus8Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausClmCaus8Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausClmCaus8Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausClmCaus8Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus8Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus8Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of d51uCausDrvSvc
	 *	@return d51uCausDrvSvc
	 */
   public char[] getD51uCausDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausDrvSvc();
   }

  
	/**
	*  set variable d51uCausDrvSvc
	*  @param value
	**/
   public void setD51uCausDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(value);
   } 

     /**
	 * 	Update D51uCausDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uCausDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uCausDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleCaus
	 *	@return dclfeSpiRuleCaus
	 */   
	 public DclfeSpiRuleCaus getDclfeSpiRuleCaus() {
   	return dclfeSpiRuleCaus;
   }


	/**
	 *	Returns the value of d51uCausClmCauseCd2
	 *	@return d51uCausClmCauseCd2
	 */
   public char[] getD51uCausClmCauseCd2(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd2();
   }

  
	/**
	*  set variable d51uCausClmCauseCd2
	*  @param value
	**/
   public void setD51uCausClmCauseCd2(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd2(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd2(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd2(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd2 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd2(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd2(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd2(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd5
	 *	@return d51uCausClmCauseCd5
	 */
   public char[] getD51uCausClmCauseCd5(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd5();
   }

  
	/**
	*  set variable d51uCausClmCauseCd5
	*  @param value
	**/
   public void setD51uCausClmCauseCd5(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd5 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd5(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd5(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd5 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd5(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd5 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd5(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd5 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd5(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd5 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd5(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausDrvPos
	 *	@return d51uCausDrvPos
	 */
   public char[] getD51uCausDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausDrvPos();
   }

  
	/**
	*  set variable d51uCausDrvPos
	*  @param value
	**/
   public void setD51uCausDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(value);
   } 

     /**
	 * 	Update D51uCausDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uCausDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausDrvPos with another Field
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source);
   }  
   
     /**
	 * 	Update D51uCausDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd3
	 *	@return d51uCausClmCauseCd3
	 */
   public char[] getD51uCausClmCauseCd3(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd3();
   }

  
	/**
	*  set variable d51uCausClmCauseCd3
	*  @param value
	**/
   public void setD51uCausClmCauseCd3(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd3 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd3(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd3(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd3 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd3(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd3 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd3(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd3 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd3(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd3 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd3(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd8
	 *	@return d51uCausClmCauseCd8
	 */
   public char[] getD51uCausClmCauseCd8(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd8();
   }

  
	/**
	*  set variable d51uCausClmCauseCd8
	*  @param value
	**/
   public void setD51uCausClmCauseCd8(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd8 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd8(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd8(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd8 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd8(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd8 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd8(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd8 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd8(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd8 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd8(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uParagraphNum
	 *	@return d51uParagraphNum
	 */
   public char[] getD51uParagraphNum() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uParagraphNum();
   }

  
	/**
	*  set variable d51uParagraphNum
	*  @param value
	**/
   public void setD51uParagraphNum(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(value);
   } 

     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex);
   	
   }
   
   public void setD51uParagraphNum(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uParagraphNum with another Field
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source);
   }  
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd1
	 *	@return d51uCausClmCauseCd1
	 */
   public char[] getD51uCausClmCauseCd1(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd1();
   }

  
	/**
	*  set variable d51uCausClmCauseCd1
	*  @param value
	**/
   public void setD51uCausClmCauseCd1(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd1(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd1(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd1(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd1 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd1(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd1(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd1(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uDebugTracer
	 *	@return d51uDebugTracer
	 */
   public char[] getD51uDebugTracer() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uDebugTracer();
   }

  
	/**
	*  set variable d51uDebugTracer
	*  @param value
	**/
   public void setD51uDebugTracer(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(value);
   } 

     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex);
   	
   }
   
   public void setD51uDebugTracer(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uDebugTracer with another Field
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source);
   }  
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of causClmCaus7Cd
	 *	@return causClmCaus7Cd
	 */
   public char[] getCausClmCaus7Cd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausClmCaus7Cd();
   }

  
	/**
	*  set variable causClmCaus7Cd
	*  @param value
	**/
   public void setCausClmCaus7Cd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus7Cd(value);
   } 

     /**
	 * 	Update CausClmCaus7Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausClmCaus7Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus7Cd(source, sourceIndex);
   	
   }
   
   public void setCausClmCaus7Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausClmCaus7Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausClmCaus7Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus7Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus7Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausClmCaus7Cd with another Field
	 *	@param value
	 */
   public void setCausClmCaus7Cd(Field source) {
      dclfeSpiRuleCaus.setCausClmCaus7Cd(source);
   }  
   
     /**
	 * 	Update CausClmCaus7Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausClmCaus7Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausClmCaus7Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausClmCaus7Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus7Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus7Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition " " for isCausecdNotFound()
	 *	@return  Returns true if isCausecdNotFound() is " "
	 */
   public boolean isCausecdNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isCausecdNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setCausecdNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setCausecdNotFoundTrue();
   	}
	/**
	 *	Returns the value of d51uCausCnt
	 *	@return d51uCausCnt
	 */
	public int getD51uCausCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uCausCnt();
	}
	
	/**
	 * 	Update D51uCausCnt with the passed value
	 *	@param number
	 */
	public void setD51uCausCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uCausCnt(number);
	}


	public void setD51uCausCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uCausCnt((int)number);
	}


	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Returns the value of causClmCaus4Cd
	 *	@return causClmCaus4Cd
	 */
   public char[] getCausClmCaus4Cd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausClmCaus4Cd();
   }

  
	/**
	*  set variable causClmCaus4Cd
	*  @param value
	**/
   public void setCausClmCaus4Cd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus4Cd(value);
   } 

     /**
	 * 	Update CausClmCaus4Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausClmCaus4Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus4Cd(source, sourceIndex);
   	
   }
   
   public void setCausClmCaus4Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausClmCaus4Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausClmCaus4Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus4Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus4Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausClmCaus4Cd with another Field
	 *	@param value
	 */
   public void setCausClmCaus4Cd(Field source) {
      dclfeSpiRuleCaus.setCausClmCaus4Cd(source);
   }  
   
     /**
	 * 	Update CausClmCaus4Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausClmCaus4Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausClmCaus4Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausClmCaus4Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus4Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus4Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 41 for isD51uDb2SelectError()
	 *	@return  Returns true if isD51uDb2SelectError() is 41
	 */
   public boolean isD51uDb2SelectError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2SelectError();
   }

	/**
	*  set values 41
	*/
   	public void setD51uDb2SelectErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2SelectErrorTrue();
   	}
	/**
	 *	Returns the value of causClmCaus5Cd
	 *	@return causClmCaus5Cd
	 */
   public char[] getCausClmCaus5Cd() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausClmCaus5Cd();
   }

  
	/**
	*  set variable causClmCaus5Cd
	*  @param value
	**/
   public void setCausClmCaus5Cd(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus5Cd(value);
   } 

     /**
	 * 	Update CausClmCaus5Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausClmCaus5Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausClmCaus5Cd(source, sourceIndex);
   	
   }
   
   public void setCausClmCaus5Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausClmCaus5Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausClmCaus5Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus5Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus5Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausClmCaus5Cd with another Field
	 *	@param value
	 */
   public void setCausClmCaus5Cd(Field source) {
      dclfeSpiRuleCaus.setCausClmCaus5Cd(source);
   }  
   
     /**
	 * 	Update CausClmCaus5Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausClmCaus5Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausClmCaus5Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausClmCaus5Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausClmCaus5Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausClmCaus5Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += dclfeSpiRuleCaus.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public SelectCauseTableOutCtx clone() {
        SelectCauseTableOutCtx cloneObj = new SelectCauseTableOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dclfeSpiRuleCaus = new DclfeSpiRuleCaus();
        cloneObj.dclfeSpiRuleCaus.set(dclfeSpiRuleCaus.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public SelectCauseTableOutCtx getSelectCauseTableOutCtx() {
            return new SelectCauseTableOutCtx();
    }
     public class SelectIpaTableInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DclfeSpiRuleIpa dclfeSpiRuleIpa = D529351uCtx.this.getDclfeSpiRuleIpa();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of ripaClmIpa3Cd
	 *	@return ripaClmIpa3Cd
	 */
   public char[] getRipaClmIpa3Cd() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaClmIpa3Cd();
   }

  
	/**
	*  set variable ripaClmIpa3Cd
	*  @param value
	**/
   public void setRipaClmIpa3Cd(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaClmIpa3Cd(value);
   } 

     /**
	 * 	Update RipaClmIpa3Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaClmIpa3Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaClmIpa3Cd(source, sourceIndex);
   	
   }
   
   public void setRipaClmIpa3Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaClmIpa3Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaClmIpa3Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaClmIpa3Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaClmIpa3Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaClmIpa3Cd with another Field
	 *	@param value
	 */
   public void setRipaClmIpa3Cd(Field source) {
      dclfeSpiRuleIpa.setRipaClmIpa3Cd(source);
   }  
   
     /**
	 * 	Update RipaClmIpa3Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaClmIpa3Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaClmIpa3Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaClmIpa3Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaClmIpa3Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaClmIpa3Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaSpiTblId
	 *	@return ripaSpiTblId
	 */
   public char[] getRipaSpiTblId() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaSpiTblId();
   }

  
	/**
	*  set variable ripaSpiTblId
	*  @param value
	**/
   public void setRipaSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaSpiTblId(value);
   } 

     /**
	 * 	Update RipaSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex);
   	
   }
   
   public void setRipaSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaSpiTblId with another Field
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source);
   }  
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaDerivPlOfSvcCd
	 *	@return ripaDerivPlOfSvcCd
	 */
   public char[] getRipaDerivPlOfSvcCd() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaDerivPlOfSvcCd();
   }

  
	/**
	*  set variable ripaDerivPlOfSvcCd
	*  @param value
	**/
   public void setRipaDerivPlOfSvcCd(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaDerivPlOfSvcCd(value);
   } 

     /**
	 * 	Update RipaDerivPlOfSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaDerivPlOfSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaDerivPlOfSvcCd(source, sourceIndex);
   	
   }
   
   public void setRipaDerivPlOfSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaDerivPlOfSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaDerivPlOfSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaDerivPlOfSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaDerivPlOfSvcCd with another Field
	 *	@param value
	 */
   public void setRipaDerivPlOfSvcCd(Field source) {
      dclfeSpiRuleIpa.setRipaDerivPlOfSvcCd(source);
   }  
   
     /**
	 * 	Update RipaDerivPlOfSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaDerivPlOfSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaDerivPlOfSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleIpa
	 *	@return dclfeSpiRuleIpa
	 */   
	 public DclfeSpiRuleIpa getDclfeSpiRuleIpa() {
   	return dclfeSpiRuleIpa;
   }


	/**
	 *	Returns the value of ipaSub
	 *	@return ipaSub
	 */
	public int getIpaSub() throws CFException {        
   		return work.getIpaSub();
	}
	
	/**
	 * 	Update IpaSub with the passed value
	 *	@param number
	 */
	public void setIpaSub(int number)  throws CFException{
		work.setIpaSub(number);
	}


	public void setIpaSub(long number)  throws CFException{
		work.setIpaSub((int)number);
	}


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of ripaDerivSvcCd
	 *	@return ripaDerivSvcCd
	 */
   public char[] getRipaDerivSvcCd() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaDerivSvcCd();
   }

  
	/**
	*  set variable ripaDerivSvcCd
	*  @param value
	**/
   public void setRipaDerivSvcCd(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaDerivSvcCd(value);
   } 

     /**
	 * 	Update RipaDerivSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaDerivSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaDerivSvcCd(source, sourceIndex);
   	
   }
   
   public void setRipaDerivSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaDerivSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaDerivSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaDerivSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaDerivSvcCd with another Field
	 *	@param value
	 */
   public void setRipaDerivSvcCd(Field source) {
      dclfeSpiRuleIpa.setRipaDerivSvcCd(source);
   }  
   
     /**
	 * 	Update RipaDerivSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaDerivSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaDerivSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaDerivSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaDerivSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of ripaClmIpa1Cd
	 *	@return ripaClmIpa1Cd
	 */
   public char[] getRipaClmIpa1Cd() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaClmIpa1Cd();
   }

  
	/**
	*  set variable ripaClmIpa1Cd
	*  @param value
	**/
   public void setRipaClmIpa1Cd(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaClmIpa1Cd(value);
   } 

     /**
	 * 	Update RipaClmIpa1Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaClmIpa1Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaClmIpa1Cd(source, sourceIndex);
   	
   }
   
   public void setRipaClmIpa1Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaClmIpa1Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaClmIpa1Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaClmIpa1Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaClmIpa1Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaClmIpa1Cd with another Field
	 *	@param value
	 */
   public void setRipaClmIpa1Cd(Field source) {
      dclfeSpiRuleIpa.setRipaClmIpa1Cd(source);
   }  
   
     /**
	 * 	Update RipaClmIpa1Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaClmIpa1Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaClmIpa1Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaClmIpa1Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaClmIpa1Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaClmIpa1Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaDerivCausCd
	 *	@return ripaDerivCausCd
	 */
   public char[] getRipaDerivCausCd() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaDerivCausCd();
   }

  
	/**
	*  set variable ripaDerivCausCd
	*  @param value
	**/
   public void setRipaDerivCausCd(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaDerivCausCd(value);
   } 

     /**
	 * 	Update RipaDerivCausCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaDerivCausCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaDerivCausCd(source, sourceIndex);
   	
   }
   
   public void setRipaDerivCausCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaDerivCausCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaDerivCausCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaDerivCausCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaDerivCausCd with another Field
	 *	@param value
	 */
   public void setRipaDerivCausCd(Field source) {
      dclfeSpiRuleIpa.setRipaDerivCausCd(source);
   }  
   
     /**
	 * 	Update RipaDerivCausCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaDerivCausCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaDerivCausCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaDerivCausCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaDerivCausCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uIpaCnt
	 *	@return d51uIpaCnt
	 */
	public int getD51uIpaCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uIpaCnt();
	}
	
	/**
	 * 	Update D51uIpaCnt with the passed value
	 *	@param number
	 */
	public void setD51uIpaCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIpaCnt(number);
	}


	public void setD51uIpaCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIpaCnt((int)number);
	}


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaClmIpa2Cd
	 *	@return ripaClmIpa2Cd
	 */
   public char[] getRipaClmIpa2Cd() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaClmIpa2Cd();
   }

  
	/**
	*  set variable ripaClmIpa2Cd
	*  @param value
	**/
   public void setRipaClmIpa2Cd(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaClmIpa2Cd(value);
   } 

     /**
	 * 	Update RipaClmIpa2Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaClmIpa2Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaClmIpa2Cd(source, sourceIndex);
   	
   }
   
   public void setRipaClmIpa2Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaClmIpa2Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaClmIpa2Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaClmIpa2Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaClmIpa2Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaClmIpa2Cd with another Field
	 *	@param value
	 */
   public void setRipaClmIpa2Cd(Field source) {
      dclfeSpiRuleIpa.setRipaClmIpa2Cd(source);
   }  
   
     /**
	 * 	Update RipaClmIpa2Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaClmIpa2Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaClmIpa2Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaClmIpa2Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaClmIpa2Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaClmIpa2Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public SelectIpaTableOutCtx getSelectIpaTableOutCtx() {
            return new SelectIpaTableOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dclfeSpiRuleIpa.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public SelectIpaTableInCtx clone() {
        SelectIpaTableInCtx cloneObj = new SelectIpaTableInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dclfeSpiRuleIpa = new DclfeSpiRuleIpa();
        cloneObj.dclfeSpiRuleIpa.set(dclfeSpiRuleIpa.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public SelectIpaTableInCtx getSelectIpaTableInCtx() {
            return new SelectIpaTableInCtx();
    }
     public class SelectIpaTableOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DclfeSpiRuleIpa dclfeSpiRuleIpa = D529351uCtx.this.getDclfeSpiRuleIpa();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of ripaSpiTblId
	 *	@return ripaSpiTblId
	 */
   public char[] getRipaSpiTblId() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaSpiTblId();
   }

  
	/**
	*  set variable ripaSpiTblId
	*  @param value
	**/
   public void setRipaSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaSpiTblId(value);
   } 

     /**
	 * 	Update RipaSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex);
   	
   }
   
   public void setRipaSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaSpiTblId with another Field
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source);
   }  
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isIpaFound()
	 *	@return  Returns true if isIpaFound() is "Y"
	 */
   public boolean isIpaFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isIpaFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setIpaFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setIpaFoundTrue();
   	}
	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of d51uRipaClmIpa2Cd
	 *	@return d51uRipaClmIpa2Cd
	 */
	public int getD51uRipaClmIpa2Cd(int index) throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa2Cd();
	}


	/**
	 *	Returns String value of d51uRipaClmIpa2Cd
	 *	@return d51uRipaClmIpa2Cd
	 */
	public char[]  getD51uRipaClmIpa2CdString(int index) throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa2CdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uRipaClmIpa2CdIsNumeric(int index)  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index - 1).d51uRipaClmIpa2CdIsNumeric();
	}

	/**
	 * 	Update D51uRipaClmIpa2Cd with the passed value
	 *	@param number
	 */
	public void setD51uRipaClmIpa2Cd(int index,int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa2Cd(number);
	}
	

	public void setD51uRipaClmIpa2Cd(int index,long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa2Cd(number);
	}
	
	
	/**
	 * 	Update D51uRipaClmIpa2Cd with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa2Cd(int index,char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa2Cd(value);
	}
	
	/**
	 * 	Update D51uRipaClmIpa2Cd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa2CdString(int index,char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa2Cd(value);
	}	

	/**
	 *	Returns the value of ipaSub
	 *	@return ipaSub
	 */
	public int getIpaSub() throws CFException {        
   		return work.getIpaSub();
	}
	
	/**
	 * 	Update IpaSub with the passed value
	 *	@param number
	 */
	public void setIpaSub(int number)  throws CFException{
		work.setIpaSub(number);
	}


	public void setIpaSub(long number)  throws CFException{
		work.setIpaSub((int)number);
	}


	/**
	 *	Returns the value of ripaDerivSvcCd
	 *	@return ripaDerivSvcCd
	 */
   public char[] getRipaDerivSvcCd() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaDerivSvcCd();
   }

  
	/**
	*  set variable ripaDerivSvcCd
	*  @param value
	**/
   public void setRipaDerivSvcCd(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaDerivSvcCd(value);
   } 

     /**
	 * 	Update RipaDerivSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaDerivSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaDerivSvcCd(source, sourceIndex);
   	
   }
   
   public void setRipaDerivSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaDerivSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaDerivSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaDerivSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaDerivSvcCd with another Field
	 *	@param value
	 */
   public void setRipaDerivSvcCd(Field source) {
      dclfeSpiRuleIpa.setRipaDerivSvcCd(source);
   }  
   
     /**
	 * 	Update RipaDerivSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaDerivSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaDerivSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaDerivSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaDerivSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of d51uIpaCnt
	 *	@return d51uIpaCnt
	 */
	public int getD51uIpaCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uIpaCnt();
	}
	
	/**
	 * 	Update D51uIpaCnt with the passed value
	 *	@param number
	 */
	public void setD51uIpaCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIpaCnt(number);
	}


	public void setD51uIpaCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIpaCnt((int)number);
	}


	/**
	 *	Test condition " " for isIpaNotFound()
	 *	@return  Returns true if isIpaNotFound() is " "
	 */
   public boolean isIpaNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isIpaNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setIpaNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setIpaNotFoundTrue();
   	}
	/**
	 *	Returns the value of d51uRipaDrvSvc
	 *	@return d51uRipaDrvSvc
	 */
   public char[] getD51uRipaDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaDrvSvc();
   }

  
	/**
	*  set variable d51uRipaDrvSvc
	*  @param value
	**/
   public void setD51uRipaDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(value);
   } 

     /**
	 * 	Update D51uRipaDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uRipaDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uRipaDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRipaDrvCau
	 *	@return d51uRipaDrvCau
	 */
   public char[] getD51uRipaDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaDrvCau();
   }

  
	/**
	*  set variable d51uRipaDrvCau
	*  @param value
	**/
   public void setD51uRipaDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(value);
   } 

     /**
	 * 	Update D51uRipaDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uRipaDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaDrvCau with another Field
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source);
   }  
   
     /**
	 * 	Update D51uRipaDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaClmIpa3Cd
	 *	@return ripaClmIpa3Cd
	 */
   public char[] getRipaClmIpa3Cd() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaClmIpa3Cd();
   }

  
	/**
	*  set variable ripaClmIpa3Cd
	*  @param value
	**/
   public void setRipaClmIpa3Cd(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaClmIpa3Cd(value);
   } 

     /**
	 * 	Update RipaClmIpa3Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaClmIpa3Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaClmIpa3Cd(source, sourceIndex);
   	
   }
   
   public void setRipaClmIpa3Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaClmIpa3Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaClmIpa3Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaClmIpa3Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaClmIpa3Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaClmIpa3Cd with another Field
	 *	@param value
	 */
   public void setRipaClmIpa3Cd(Field source) {
      dclfeSpiRuleIpa.setRipaClmIpa3Cd(source);
   }  
   
     /**
	 * 	Update RipaClmIpa3Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaClmIpa3Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaClmIpa3Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaClmIpa3Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaClmIpa3Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaClmIpa3Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaDerivPlOfSvcCd
	 *	@return ripaDerivPlOfSvcCd
	 */
   public char[] getRipaDerivPlOfSvcCd() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaDerivPlOfSvcCd();
   }

  
	/**
	*  set variable ripaDerivPlOfSvcCd
	*  @param value
	**/
   public void setRipaDerivPlOfSvcCd(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaDerivPlOfSvcCd(value);
   } 

     /**
	 * 	Update RipaDerivPlOfSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaDerivPlOfSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaDerivPlOfSvcCd(source, sourceIndex);
   	
   }
   
   public void setRipaDerivPlOfSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaDerivPlOfSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaDerivPlOfSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaDerivPlOfSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaDerivPlOfSvcCd with another Field
	 *	@param value
	 */
   public void setRipaDerivPlOfSvcCd(Field source) {
      dclfeSpiRuleIpa.setRipaDerivPlOfSvcCd(source);
   }  
   
     /**
	 * 	Update RipaDerivPlOfSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaDerivPlOfSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaDerivPlOfSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uParagraphNum
	 *	@return d51uParagraphNum
	 */
   public char[] getD51uParagraphNum() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uParagraphNum();
   }

  
	/**
	*  set variable d51uParagraphNum
	*  @param value
	**/
   public void setD51uParagraphNum(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(value);
   } 

     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex);
   	
   }
   
   public void setD51uParagraphNum(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uParagraphNum with another Field
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source);
   }  
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleIpa
	 *	@return dclfeSpiRuleIpa
	 */   
	 public DclfeSpiRuleIpa getDclfeSpiRuleIpa() {
   	return dclfeSpiRuleIpa;
   }


	/**
	 *	Returns the value of d51uRipaClmIpa1Cd
	 *	@return d51uRipaClmIpa1Cd
	 */
	public int getD51uRipaClmIpa1Cd(int index) throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa1Cd();
	}


	/**
	 *	Returns String value of d51uRipaClmIpa1Cd
	 *	@return d51uRipaClmIpa1Cd
	 */
	public char[]  getD51uRipaClmIpa1CdString(int index) throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa1CdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uRipaClmIpa1CdIsNumeric(int index)  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index - 1).d51uRipaClmIpa1CdIsNumeric();
	}

	/**
	 * 	Update D51uRipaClmIpa1Cd with the passed value
	 *	@param number
	 */
	public void setD51uRipaClmIpa1Cd(int index,int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa1Cd(number);
	}
	

	public void setD51uRipaClmIpa1Cd(int index,long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa1Cd(number);
	}
	
	
	/**
	 * 	Update D51uRipaClmIpa1Cd with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa1Cd(int index,char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa1Cd(value);
	}
	
	/**
	 * 	Update D51uRipaClmIpa1Cd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa1CdString(int index,char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa1Cd(value);
	}	

	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uDebugTracer
	 *	@return d51uDebugTracer
	 */
   public char[] getD51uDebugTracer() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uDebugTracer();
   }

  
	/**
	*  set variable d51uDebugTracer
	*  @param value
	**/
   public void setD51uDebugTracer(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(value);
   } 

     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex);
   	
   }
   
   public void setD51uDebugTracer(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uDebugTracer with another Field
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source);
   }  
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRipaDrvPos
	 *	@return d51uRipaDrvPos
	 */
   public char[] getD51uRipaDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaDrvPos();
   }

  
	/**
	*  set variable d51uRipaDrvPos
	*  @param value
	**/
   public void setD51uRipaDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(value);
   } 

     /**
	 * 	Update D51uRipaDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uRipaDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaDrvPos with another Field
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source);
   }  
   
     /**
	 * 	Update D51uRipaDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of d51uRipaSpiTblId
	 *	@return d51uRipaSpiTblId
	 */
   public char[] getD51uRipaSpiTblId(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaSpiTblId();
   }

  
	/**
	*  set variable d51uRipaSpiTblId
	*  @param value
	**/
   public void setD51uRipaSpiTblId(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaSpiTblId(value);
   } 

     /**
	 * 	Update D51uRipaSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaSpiTblId(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaSpiTblId(source, sourceIndex);
   	
   }
   
   public void setD51uRipaSpiTblId(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaSpiTblId(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaSpiTblId with another Field
	 *	@param value
	 */
   public void setD51uRipaSpiTblId(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaSpiTblId(source);
   }  
   
     /**
	 * 	Update D51uRipaSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaSpiTblId(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaSpiTblId(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaClmIpa1Cd
	 *	@return ripaClmIpa1Cd
	 */
   public char[] getRipaClmIpa1Cd() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaClmIpa1Cd();
   }

  
	/**
	*  set variable ripaClmIpa1Cd
	*  @param value
	**/
   public void setRipaClmIpa1Cd(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaClmIpa1Cd(value);
   } 

     /**
	 * 	Update RipaClmIpa1Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaClmIpa1Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaClmIpa1Cd(source, sourceIndex);
   	
   }
   
   public void setRipaClmIpa1Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaClmIpa1Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaClmIpa1Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaClmIpa1Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaClmIpa1Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaClmIpa1Cd with another Field
	 *	@param value
	 */
   public void setRipaClmIpa1Cd(Field source) {
      dclfeSpiRuleIpa.setRipaClmIpa1Cd(source);
   }  
   
     /**
	 * 	Update RipaClmIpa1Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaClmIpa1Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaClmIpa1Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaClmIpa1Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaClmIpa1Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaClmIpa1Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ripaDerivCausCd
	 *	@return ripaDerivCausCd
	 */
   public char[] getRipaDerivCausCd() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaDerivCausCd();
   }

  
	/**
	*  set variable ripaDerivCausCd
	*  @param value
	**/
   public void setRipaDerivCausCd(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaDerivCausCd(value);
   } 

     /**
	 * 	Update RipaDerivCausCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaDerivCausCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaDerivCausCd(source, sourceIndex);
   	
   }
   
   public void setRipaDerivCausCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaDerivCausCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaDerivCausCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaDerivCausCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaDerivCausCd with another Field
	 *	@param value
	 */
   public void setRipaDerivCausCd(Field source) {
      dclfeSpiRuleIpa.setRipaDerivCausCd(source);
   }  
   
     /**
	 * 	Update RipaDerivCausCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaDerivCausCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaDerivCausCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaDerivCausCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaDerivCausCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRipaClmIpa3Cd
	 *	@return d51uRipaClmIpa3Cd
	 */
	public int getD51uRipaClmIpa3Cd(int index) throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa3Cd();
	}


	/**
	 *	Returns String value of d51uRipaClmIpa3Cd
	 *	@return d51uRipaClmIpa3Cd
	 */
	public char[]  getD51uRipaClmIpa3CdString(int index) throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa3CdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uRipaClmIpa3CdIsNumeric(int index)  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index - 1).d51uRipaClmIpa3CdIsNumeric();
	}

	/**
	 * 	Update D51uRipaClmIpa3Cd with the passed value
	 *	@param number
	 */
	public void setD51uRipaClmIpa3Cd(int index,int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa3Cd(number);
	}
	

	public void setD51uRipaClmIpa3Cd(int index,long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa3Cd(number);
	}
	
	
	/**
	 * 	Update D51uRipaClmIpa3Cd with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa3Cd(int index,char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa3Cd(value);
	}
	
	/**
	 * 	Update D51uRipaClmIpa3Cd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa3CdString(int index,char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa3Cd(value);
	}	

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Test condition 41 for isD51uDb2SelectError()
	 *	@return  Returns true if isD51uDb2SelectError() is 41
	 */
   public boolean isD51uDb2SelectError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2SelectError();
   }

	/**
	*  set values 41
	*/
   	public void setD51uDb2SelectErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2SelectErrorTrue();
   	}
	/**
	 *	Returns the value of ripaClmIpa2Cd
	 *	@return ripaClmIpa2Cd
	 */
   public char[] getRipaClmIpa2Cd() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaClmIpa2Cd();
   }

  
	/**
	*  set variable ripaClmIpa2Cd
	*  @param value
	**/
   public void setRipaClmIpa2Cd(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaClmIpa2Cd(value);
   } 

     /**
	 * 	Update RipaClmIpa2Cd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaClmIpa2Cd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaClmIpa2Cd(source, sourceIndex);
   	
   }
   
   public void setRipaClmIpa2Cd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaClmIpa2Cd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaClmIpa2Cd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaClmIpa2Cd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaClmIpa2Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaClmIpa2Cd with another Field
	 *	@param value
	 */
   public void setRipaClmIpa2Cd(Field source) {
      dclfeSpiRuleIpa.setRipaClmIpa2Cd(source);
   }  
   
     /**
	 * 	Update RipaClmIpa2Cd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaClmIpa2Cd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaClmIpa2Cd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaClmIpa2Cd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaClmIpa2Cd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaClmIpa2Cd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dclfeSpiRuleIpa.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public SelectIpaTableOutCtx clone() {
        SelectIpaTableOutCtx cloneObj = new SelectIpaTableOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dclfeSpiRuleIpa = new DclfeSpiRuleIpa();
        cloneObj.dclfeSpiRuleIpa.set(dclfeSpiRuleIpa.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public SelectIpaTableOutCtx getSelectIpaTableOutCtx() {
            return new SelectIpaTableOutCtx();
    }
     public class OpenSvcMainCsrInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     DclfeSpiRuleFrToSvc dclfeSpiRuleFrToSvc = D529351uCtx.this.getDclfeSpiRuleFrToSvc();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of frtoSpiTblId
	 *	@return frtoSpiTblId
	 */
   public char[] getFrtoSpiTblId() throws CFException  {              
   		return dclfeSpiRuleFrToSvc.getFrtoSpiTblId();
   }

  
	/**
	*  set variable frtoSpiTblId
	*  @param value
	**/
   public void setFrtoSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(value);
   } 

     /**
	 * 	Update FrtoSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFrtoSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source, sourceIndex);
   	
   }
   
   public void setFrtoSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FrtoSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FrtoSpiTblId with another Field
	 *	@param value
	 */
   public void setFrtoSpiTblId(Field source) {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source);
   }  
   
     /**
	 * 	Update FrtoSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFrtoSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FrtoSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFrtoSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrToSvc.setFrtoSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of mainCtr
	 *	@return mainCtr
	 */
	public int getMainCtr() throws CFException {        
   		return work.getMainCtr();
	}
	
	/**
	 * 	Update MainCtr with the passed value
	 *	@param number
	 */
	public void setMainCtr(int number)  throws CFException{
		work.setMainCtr(number);
	}


	public void setMainCtr(long number)  throws CFException{
		work.setMainCtr((int)number);
	}


	/**
	 *	Test condition "Y" for isEndOfFetchMain()
	 *	@return  Returns true if isEndOfFetchMain() is "Y"
	 */
   public boolean isEndOfFetchMain() throws CFException {
      return work.isEndOfFetchMain();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfFetchMainTrue()  throws CFException{  			
    	work.setEndOfFetchMainTrue();
   	}
	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleFrToSvc
	 *	@return dclfeSpiRuleFrToSvc
	 */   
	 public DclfeSpiRuleFrToSvc getDclfeSpiRuleFrToSvc() {
   	return dclfeSpiRuleFrToSvc;
   }


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public OpenSvcMainCsrOutCtx getOpenSvcMainCsrOutCtx() {
            return new OpenSvcMainCsrOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += dsmCallArea.hashCode();
        str += dclfeSpiRuleFrToSvc.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public OpenSvcMainCsrInCtx clone() {
        OpenSvcMainCsrInCtx cloneObj = new OpenSvcMainCsrInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dclfeSpiRuleFrToSvc = new DclfeSpiRuleFrToSvc();
        cloneObj.dclfeSpiRuleFrToSvc.set(dclfeSpiRuleFrToSvc.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public OpenSvcMainCsrInCtx getOpenSvcMainCsrInCtx() {
            return new OpenSvcMainCsrInCtx();
    }
     public class OpenSvcMainCsrOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     DclfeSpiRuleFrToSvc dclfeSpiRuleFrToSvc = D529351uCtx.this.getDclfeSpiRuleFrToSvc();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dsmSqlcode
	 *	@return dsmSqlcode
	 */
	public short getDsmSqlcode() throws CFException {
   		return dsmCallArea.getDsmCommonArea().getDsmSqlcode();
	}

    /**
	 *	Returns the String value of dsmSqlcode
	 *	@return dsmSqlcode
	 */
	public char[]  getDsmSqlcodeActualString() {
		return dsmCallArea.getDsmCommonArea().getDsmSqlcodeActualString();
	}

	/**
	 *	Returns String value of dsmSqlcode
	 *	@return dsmSqlcode
	 */
	public char[]  getDsmSqlcodeString() throws CFException {
	     return String.valueOf(dsmCallArea.getDsmCommonArea().getDsmSqlcodeString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dsmSqlcodeIsNumeric()  throws CFException{
	    return dsmCallArea.getDsmCommonArea().dsmSqlcodeIsNumeric();
	}

	/**
	 * 	Update DsmSqlcode with the passed value
	 *	@param number
	 */
	public void setDsmSqlcode(short number)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmSqlcode(number);
	}
	
	public void setDsmSqlcode(int number)  throws CFException{
	    dsmCallArea.getDsmCommonArea().setDsmSqlcode(number);
	}
	public void setDsmSqlcode(long number)  throws CFException{
	    dsmCallArea.getDsmCommonArea().setDsmSqlcode(number);
	}
	

	
	/**
	 * 	Update DsmSqlcode with the passed value
	 *	@param value (String or char[])
	 */
	public void setDsmSqlcode(char[] value)  throws CFException {
		dsmCallArea.getDsmCommonArea().setDsmSqlcode(value);
	}
	
	/**
	 * 	Update DsmSqlcode with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDsmSqlcodeString(char[] value)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmSqlcode(value);
	}	

	/**
	 *	Returns the value of mainCtr
	 *	@return mainCtr
	 */
	public int getMainCtr() throws CFException {        
   		return work.getMainCtr();
	}
	
	/**
	 * 	Update MainCtr with the passed value
	 *	@param number
	 */
	public void setMainCtr(int number)  throws CFException{
		work.setMainCtr(number);
	}


	public void setMainCtr(long number)  throws CFException{
		work.setMainCtr((int)number);
	}


	/**
	 *	Returns the value of dsmLogArea
	 *	@return dsmLogArea
	 */   
	 public DsmLogArea getDsmLogArea() {
   	return dsmCallArea.getDsmLogArea();
   }

   /**
	* 	Update DsmLogArea with the passed value
	*	@param value
	*/
   public void setDsmLogArea(char[] value) throws CFException {
      dsmCallArea.setDsmLogArea(value);
   }   

     /**
	 * 	Update DsmLogArea 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDsmLogArea(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dsmCallArea.setDsmLogArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmLogArea 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmLogArea(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dsmCallArea.setDsmLogArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmLogArea with another Field
	 *	@param value
	 */
   public void setDsmLogArea(Field source) {
   	dsmCallArea.setDsmLogArea(source);
   }  
   
     /**
	 * 	Update DsmLogArea 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDsmLogArea(Field source, int sourceIndex,int sourceLen) {
   	dsmCallArea.setDsmLogArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmLogArea 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmLogArea(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dsmCallArea.setDsmLogArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of dsmErrTblAction
	 *	@return dsmErrTblAction
	 */
   public char[] getDsmErrTblAction() throws CFException  {              
   		return dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().getDsmErrTblAction();
   }

  
	/**
	*  set variable dsmErrTblAction
	*  @param value
	**/
   public void setDsmErrTblAction(char[] value) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(value);
   } 

     /**
	 * 	Update DsmErrTblAction 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmErrTblAction(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source, sourceIndex);
   	
   }
   
   public void setDsmErrTblAction(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmErrTblAction 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrTblAction(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmErrTblAction with another Field
	 *	@param value
	 */
   public void setDsmErrTblAction(Field source) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source);
   }  
   
     /**
	 * 	Update DsmErrTblAction 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmErrTblAction(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmErrTblAction 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrTblAction(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsmErrSectnName
	 *	@return dsmErrSectnName
	 */
   public char[] getDsmErrSectnName() throws CFException  {              
   		return dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().getDsmErrSectnName();
   }

  
	/**
	*  set variable dsmErrSectnName
	*  @param value
	**/
   public void setDsmErrSectnName(char[] value) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(value);
   } 

     /**
	 * 	Update DsmErrSectnName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmErrSectnName(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex);
   	
   }
   
   public void setDsmErrSectnName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmErrSectnName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrSectnName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmErrSectnName with another Field
	 *	@param value
	 */
   public void setDsmErrSectnName(Field source) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source);
   }  
   
     /**
	 * 	Update DsmErrSectnName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmErrSectnName(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmErrSectnName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrSectnName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsmErrPgmName
	 *	@return dsmErrPgmName
	 */
   public char[] getDsmErrPgmName() throws CFException  {              
   		return dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().getDsmErrPgmName();
   }

  
	/**
	*  set variable dsmErrPgmName
	*  @param value
	**/
   public void setDsmErrPgmName(char[] value) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(value);
   } 

     /**
	 * 	Update DsmErrPgmName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmErrPgmName(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex);
   	
   }
   
   public void setDsmErrPgmName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmErrPgmName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrPgmName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmErrPgmName with another Field
	 *	@param value
	 */
   public void setDsmErrPgmName(Field source) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source);
   }  
   
     /**
	 * 	Update DsmErrPgmName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmErrPgmName(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmErrPgmName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrPgmName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 999 for isDsmDb2Error()
	 *	@return  Returns true if isDsmDb2Error() is 999
	 */
   public boolean isDsmDb2Error() throws CFException {
      return dsmCallArea.getDsmCommonArea().isDsmDb2Error();
   }

	/**
	*  set values 999
	*/
   	public void setDsmDb2ErrorTrue()  throws CFException{  			
    	dsmCallArea.getDsmCommonArea().setDsmDb2ErrorTrue();
   	}
	/**
	 *	Returns the value of dsmErrTblName
	 *	@return dsmErrTblName
	 */
   public char[] getDsmErrTblName() throws CFException  {              
   		return dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().getDsmErrTblName();
   }

  
	/**
	*  set variable dsmErrTblName
	*  @param value
	**/
   public void setDsmErrTblName(char[] value) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(value);
   } 

     /**
	 * 	Update DsmErrTblName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmErrTblName(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source, sourceIndex);
   	
   }
   
   public void setDsmErrTblName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmErrTblName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrTblName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmErrTblName with another Field
	 *	@param value
	 */
   public void setDsmErrTblName(Field source) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source);
   }  
   
     /**
	 * 	Update DsmErrTblName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmErrTblName(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmErrTblName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrTblName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += dsmCallArea.hashCode();
        str += dclfeSpiRuleFrToSvc.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public OpenSvcMainCsrOutCtx clone() {
        OpenSvcMainCsrOutCtx cloneObj = new OpenSvcMainCsrOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dclfeSpiRuleFrToSvc = new DclfeSpiRuleFrToSvc();
        cloneObj.dclfeSpiRuleFrToSvc.set(dclfeSpiRuleFrToSvc.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public OpenSvcMainCsrOutCtx getOpenSvcMainCsrOutCtx() {
            return new OpenSvcMainCsrOutCtx();
    }
     public class FetchSvcMainCsrInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesSvcmain hvHostVariablesSvcmain = D529351uCtx.this.getHvHostVariablesSvcmain();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of hv07RuleSw
	 *	@return hv07RuleSw
	 */
   public char[] getHv07RuleSw(int index) throws CFException  {              
   		return hvHostVariablesSvcmain.getHv07RuleSw(index);
   }

  
	/**
	*  set variable hv07RuleSw
	*  @param value
	**/
   public void setHv07RuleSw(int index,char[] value) throws CFException {
      hvHostVariablesSvcmain.setHv07RuleSw((index),value);
   } 

	/**
	 *	Returns the value of hvHostVariablesSvcmain
	 *	@return hvHostVariablesSvcmain
	 */   
	 public HvHostVariablesSvcmain getHvHostVariablesSvcmain() {
   	return hvHostVariablesSvcmain;
   }


	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hv05KeyDrvSvc
	 *	@return hv05KeyDrvSvc
	 */
   public char[] getHv05KeyDrvSvc(int index) throws CFException  {              
   		return hvHostVariablesSvcmain.getHv05KeyDrvSvc(index);
   }

  
	/**
	*  set variable hv05KeyDrvSvc
	*  @param value
	**/
   public void setHv05KeyDrvSvc(int index,char[] value) throws CFException {
      hvHostVariablesSvcmain.setHv05KeyDrvSvc((index),value);
   } 

	/**
	 *	Returns the value of hv06KeyDrvCau
	 *	@return hv06KeyDrvCau
	 */
   public char[] getHv06KeyDrvCau(int index) throws CFException  {              
   		return hvHostVariablesSvcmain.getHv06KeyDrvCau(index);
   }

  
	/**
	*  set variable hv06KeyDrvCau
	*  @param value
	**/
   public void setHv06KeyDrvCau(int index,char[] value) throws CFException {
      hvHostVariablesSvcmain.setHv06KeyDrvCau((index),value);
   } 

	/**
	 *	Test condition "N" for isCloseCsrNg()
	 *	@return  Returns true if isCloseCsrNg() is "N"
	 */
   public boolean isCloseCsrNg() throws CFException {
      return work.isCloseCsrNg();
   }

	/**
	*  set values "N"
	*/
   	public void setCloseCsrNgTrue()  throws CFException{  			
    	work.setCloseCsrNgTrue();
   	}
	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hv04KeyDrvPos
	 *	@return hv04KeyDrvPos
	 */
   public char[] getHv04KeyDrvPos(int index) throws CFException  {              
   		return hvHostVariablesSvcmain.getHv04KeyDrvPos(index);
   }

  
	/**
	*  set variable hv04KeyDrvPos
	*  @param value
	**/
   public void setHv04KeyDrvPos(int index,char[] value) throws CFException {
      hvHostVariablesSvcmain.setHv04KeyDrvPos((index),value);
   } 

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public FetchSvcMainCsrOutCtx getFetchSvcMainCsrOutCtx() {
            return new FetchSvcMainCsrOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesSvcmain.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public FetchSvcMainCsrInCtx clone() {
        FetchSvcMainCsrInCtx cloneObj = new FetchSvcMainCsrInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesSvcmain = new HvHostVariablesSvcmain();
        cloneObj.hvHostVariablesSvcmain.set(hvHostVariablesSvcmain.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public FetchSvcMainCsrInCtx getFetchSvcMainCsrInCtx() {
            return new FetchSvcMainCsrInCtx();
    }
     public class FetchSvcMainCsrOutCtx implements Cloneable {
     HvHostVariablesSvcmain hvHostVariablesSvcmain = D529351uCtx.this.getHvHostVariablesSvcmain();
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of hvHostVariablesSvcmain
	 *	@return hvHostVariablesSvcmain
	 */   
	 public HvHostVariablesSvcmain getHvHostVariablesSvcmain() {
   	return hvHostVariablesSvcmain;
   }



public void setHv07Index(int hv07Index) { 
    D529351uCtx.this.hv07Index = hv07Index;
}

public int getHv07Index() { 
    return D529351uCtx.this.hv07Index;
}
	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Test condition "Y" for isEndOfFetchMain()
	 *	@return  Returns true if isEndOfFetchMain() is "Y"
	 */
   public boolean isEndOfFetchMain() throws CFException {
      return work.isEndOfFetchMain();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfFetchMainTrue()  throws CFException{  			
    	work.setEndOfFetchMainTrue();
   	}
	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsmErrTblAction
	 *	@return dsmErrTblAction
	 */
   public char[] getDsmErrTblAction() throws CFException  {              
   		return dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().getDsmErrTblAction();
   }

  
	/**
	*  set variable dsmErrTblAction
	*  @param value
	**/
   public void setDsmErrTblAction(char[] value) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(value);
   } 

     /**
	 * 	Update DsmErrTblAction 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmErrTblAction(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source, sourceIndex);
   	
   }
   
   public void setDsmErrTblAction(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmErrTblAction 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrTblAction(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmErrTblAction with another Field
	 *	@param value
	 */
   public void setDsmErrTblAction(Field source) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source);
   }  
   
     /**
	 * 	Update DsmErrTblAction 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmErrTblAction(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmErrTblAction 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrTblAction(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsmErrSectnName
	 *	@return dsmErrSectnName
	 */
   public char[] getDsmErrSectnName() throws CFException  {              
   		return dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().getDsmErrSectnName();
   }

  
	/**
	*  set variable dsmErrSectnName
	*  @param value
	**/
   public void setDsmErrSectnName(char[] value) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(value);
   } 

     /**
	 * 	Update DsmErrSectnName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmErrSectnName(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex);
   	
   }
   
   public void setDsmErrSectnName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmErrSectnName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrSectnName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmErrSectnName with another Field
	 *	@param value
	 */
   public void setDsmErrSectnName(Field source) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source);
   }  
   
     /**
	 * 	Update DsmErrSectnName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmErrSectnName(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmErrSectnName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrSectnName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 999 for isDsmDb2Error()
	 *	@return  Returns true if isDsmDb2Error() is 999
	 */
   public boolean isDsmDb2Error() throws CFException {
      return dsmCallArea.getDsmCommonArea().isDsmDb2Error();
   }

	/**
	*  set values 999
	*/
   	public void setDsmDb2ErrorTrue()  throws CFException{  			
    	dsmCallArea.getDsmCommonArea().setDsmDb2ErrorTrue();
   	}

public void setHv06Index(int hv06Index) { 
    D529351uCtx.this.hv06Index = hv06Index;
}

public int getHv06Index() { 
    return D529351uCtx.this.hv06Index;
}

public void setHv05Index(int hv05Index) { 
    D529351uCtx.this.hv05Index = hv05Index;
}

public int getHv05Index() { 
    return D529351uCtx.this.hv05Index;
}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}



public void setHv04Index(int hv04Index) { 
    D529351uCtx.this.hv04Index = hv04Index;
}

public int getHv04Index() { 
    return D529351uCtx.this.hv04Index;
}
	/**
	 *	Returns the value of dsmLogArea
	 *	@return dsmLogArea
	 */   
	 public DsmLogArea getDsmLogArea() {
   	return dsmCallArea.getDsmLogArea();
   }

   /**
	* 	Update DsmLogArea with the passed value
	*	@param value
	*/
   public void setDsmLogArea(char[] value) throws CFException {
      dsmCallArea.setDsmLogArea(value);
   }   

     /**
	 * 	Update DsmLogArea 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDsmLogArea(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dsmCallArea.setDsmLogArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmLogArea 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmLogArea(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dsmCallArea.setDsmLogArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmLogArea with another Field
	 *	@param value
	 */
   public void setDsmLogArea(Field source) {
   	dsmCallArea.setDsmLogArea(source);
   }  
   
     /**
	 * 	Update DsmLogArea 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDsmLogArea(Field source, int sourceIndex,int sourceLen) {
   	dsmCallArea.setDsmLogArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmLogArea 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmLogArea(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dsmCallArea.setDsmLogArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 43 for isD51uDb2CloseError()
	 *	@return  Returns true if isD51uDb2CloseError() is 43
	 */
   public boolean isD51uDb2CloseError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2CloseError();
   }

	/**
	*  set values 43
	*/
   	public void setD51uDb2CloseErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2CloseErrorTrue();
   	}
	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Returns the value of dsmErrPgmName
	 *	@return dsmErrPgmName
	 */
   public char[] getDsmErrPgmName() throws CFException  {              
   		return dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().getDsmErrPgmName();
   }

  
	/**
	*  set variable dsmErrPgmName
	*  @param value
	**/
   public void setDsmErrPgmName(char[] value) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(value);
   } 

     /**
	 * 	Update DsmErrPgmName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmErrPgmName(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex);
   	
   }
   
   public void setDsmErrPgmName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmErrPgmName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrPgmName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmErrPgmName with another Field
	 *	@param value
	 */
   public void setDsmErrPgmName(Field source) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source);
   }  
   
     /**
	 * 	Update DsmErrPgmName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmErrPgmName(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmErrPgmName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrPgmName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsnnrows
	 *	@return dsnnrows
	 */
	public int getDsnnrows() throws CFException {        
   		return work.getDsnnrows();
	}
	
	/**
	 * 	Update Dsnnrows with the passed value
	 *	@param number
	 */
	public void setDsnnrows(int number)  throws CFException{
		work.setDsnnrows(number);
	}


	public void setDsnnrows(long number)  throws CFException{
		work.setDsnnrows((int)number);
	}


	/**
	 *	Returns the value of dsmErrTblName
	 *	@return dsmErrTblName
	 */
   public char[] getDsmErrTblName() throws CFException  {              
   		return dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().getDsmErrTblName();
   }

  
	/**
	*  set variable dsmErrTblName
	*  @param value
	**/
   public void setDsmErrTblName(char[] value) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(value);
   } 

     /**
	 * 	Update DsmErrTblName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmErrTblName(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source, sourceIndex);
   	
   }
   
   public void setDsmErrTblName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmErrTblName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrTblName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmErrTblName with another Field
	 *	@param value
	 */
   public void setDsmErrTblName(Field source) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source);
   }  
   
     /**
	 * 	Update DsmErrTblName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmErrTblName(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmErrTblName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrTblName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += hvHostVariablesSvcmain.hashCode();
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dsmCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public FetchSvcMainCsrOutCtx clone() {
        FetchSvcMainCsrOutCtx cloneObj = new FetchSvcMainCsrOutCtx();
        cloneObj.hvHostVariablesSvcmain = new HvHostVariablesSvcmain();
        cloneObj.hvHostVariablesSvcmain.set(hvHostVariablesSvcmain.getClonedField());
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public FetchSvcMainCsrOutCtx getFetchSvcMainCsrOutCtx() {
            return new FetchSvcMainCsrOutCtx();
    }
     public class MoveSvcKeyCsrInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesSvcmain hvHostVariablesSvcmain = D529351uCtx.this.getHvHostVariablesSvcmain();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();

	/**
	 *	Returns the value of hv07RuleSw
	 *	@return hv07RuleSw
	 */
   public char[] getHv07RuleSw(int index) throws CFException  {              
   		return hvHostVariablesSvcmain.getHv07RuleSw(index);
   }

  
	/**
	*  set variable hv07RuleSw
	*  @param value
	**/
   public void setHv07RuleSw(int index,char[] value) throws CFException {
      hvHostVariablesSvcmain.setHv07RuleSw((index),value);
   } 


public void setHv07Index(int hv07Index) { 
    D529351uCtx.this.hv07Index = hv07Index;
}

public int getHv07Index() { 
    return D529351uCtx.this.hv07Index;
}

public void setHv06Index(int hv06Index) { 
    D529351uCtx.this.hv06Index = hv06Index;
}

public int getHv06Index() { 
    return D529351uCtx.this.hv06Index;
}

public void setHv05Index(int hv05Index) { 
    D529351uCtx.this.hv05Index = hv05Index;
}

public int getHv05Index() { 
    return D529351uCtx.this.hv05Index;
}
	/**
	 *	Returns the value of mainCtr
	 *	@return mainCtr
	 */
	public int getMainCtr() throws CFException {        
   		return work.getMainCtr();
	}
	
	/**
	 * 	Update MainCtr with the passed value
	 *	@param number
	 */
	public void setMainCtr(int number)  throws CFException{
		work.setMainCtr(number);
	}


	public void setMainCtr(long number)  throws CFException{
		work.setMainCtr((int)number);
	}



public void setHv04Index(int hv04Index) { 
    D529351uCtx.this.hv04Index = hv04Index;
}

public int getHv04Index() { 
    return D529351uCtx.this.hv04Index;
}
	/**
	 *	Returns the value of hv05KeyDrvSvc
	 *	@return hv05KeyDrvSvc
	 */
   public char[] getHv05KeyDrvSvc(int index) throws CFException  {              
   		return hvHostVariablesSvcmain.getHv05KeyDrvSvc(index);
   }

  
	/**
	*  set variable hv05KeyDrvSvc
	*  @param value
	**/
   public void setHv05KeyDrvSvc(int index,char[] value) throws CFException {
      hvHostVariablesSvcmain.setHv05KeyDrvSvc((index),value);
   } 

	/**
	 *	Returns the value of hv06KeyDrvCau
	 *	@return hv06KeyDrvCau
	 */
   public char[] getHv06KeyDrvCau(int index) throws CFException  {              
   		return hvHostVariablesSvcmain.getHv06KeyDrvCau(index);
   }

  
	/**
	*  set variable hv06KeyDrvCau
	*  @param value
	**/
   public void setHv06KeyDrvCau(int index,char[] value) throws CFException {
      hvHostVariablesSvcmain.setHv06KeyDrvCau((index),value);
   } 

	/**
	 *	Returns the value of hv04KeyDrvPos
	 *	@return hv04KeyDrvPos
	 */
   public char[] getHv04KeyDrvPos(int index) throws CFException  {              
   		return hvHostVariablesSvcmain.getHv04KeyDrvPos(index);
   }

  
	/**
	*  set variable hv04KeyDrvPos
	*  @param value
	**/
   public void setHv04KeyDrvPos(int index,char[] value) throws CFException {
      hvHostVariablesSvcmain.setHv04KeyDrvPos((index),value);
   } 


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public MoveSvcKeyCsrOutCtx getMoveSvcKeyCsrOutCtx() {
            return new MoveSvcKeyCsrOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesSvcmain.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public MoveSvcKeyCsrInCtx clone() {
        MoveSvcKeyCsrInCtx cloneObj = new MoveSvcKeyCsrInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesSvcmain = new HvHostVariablesSvcmain();
        cloneObj.hvHostVariablesSvcmain.set(hvHostVariablesSvcmain.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public MoveSvcKeyCsrInCtx getMoveSvcKeyCsrInCtx() {
            return new MoveSvcKeyCsrInCtx();
    }
     public class MoveSvcKeyCsrOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesSvcmain hvHostVariablesSvcmain = D529351uCtx.this.getHvHostVariablesSvcmain();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();

	/**
	 *	Returns the value of d51uRetDrvPos
	 *	@return d51uRetDrvPos
	 */
   public char[] getD51uRetDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).getD51uRetDrvPos();
   }

  
	/**
	*  set variable d51uRetDrvPos
	*  @param value
	**/
   public void setD51uRetDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(value);
   } 

     /**
	 * 	Update D51uRetDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uRetDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetDrvPos with another Field
	 *	@param value
	 */
   public void setD51uRetDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source);
   }  
   
     /**
	 * 	Update D51uRetDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv07RuleSw
	 *	@return hv07RuleSw
	 */
   public char[] getHv07RuleSw(int index) throws CFException  {              
   		return hvHostVariablesSvcmain.getHv07RuleSw(index);
   }

  
	/**
	*  set variable hv07RuleSw
	*  @param value
	**/
   public void setHv07RuleSw(int index,char[] value) throws CFException {
      hvHostVariablesSvcmain.setHv07RuleSw((index),value);
   } 

	/**
	 *	Returns the value of d51uRetDrvSvc
	 *	@return d51uRetDrvSvc
	 */
   public char[] getD51uRetDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).getD51uRetDrvSvc();
   }

  
	/**
	*  set variable d51uRetDrvSvc
	*  @param value
	**/
   public void setD51uRetDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(value);
   } 

     /**
	 * 	Update D51uRetDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uRetDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uRetDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uRetDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of mainCtr
	 *	@return mainCtr
	 */
	public int getMainCtr() throws CFException {        
   		return work.getMainCtr();
	}
	
	/**
	 * 	Update MainCtr with the passed value
	 *	@param number
	 */
	public void setMainCtr(int number)  throws CFException{
		work.setMainCtr(number);
	}


	public void setMainCtr(long number)  throws CFException{
		work.setMainCtr((int)number);
	}


	/**
	 *	Returns the value of hv05KeyDrvSvc
	 *	@return hv05KeyDrvSvc
	 */
   public char[] getHv05KeyDrvSvc(int index) throws CFException  {              
   		return hvHostVariablesSvcmain.getHv05KeyDrvSvc(index);
   }

  
	/**
	*  set variable hv05KeyDrvSvc
	*  @param value
	**/
   public void setHv05KeyDrvSvc(int index,char[] value) throws CFException {
      hvHostVariablesSvcmain.setHv05KeyDrvSvc((index),value);
   } 

	/**
	 *	Returns the value of hv06KeyDrvCau
	 *	@return hv06KeyDrvCau
	 */
   public char[] getHv06KeyDrvCau(int index) throws CFException  {              
   		return hvHostVariablesSvcmain.getHv06KeyDrvCau(index);
   }

  
	/**
	*  set variable hv06KeyDrvCau
	*  @param value
	**/
   public void setHv06KeyDrvCau(int index,char[] value) throws CFException {
      hvHostVariablesSvcmain.setHv06KeyDrvCau((index),value);
   } 

	/**
	 *	Returns the value of d51uRetDrvCau
	 *	@return d51uRetDrvCau
	 */
   public char[] getD51uRetDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).getD51uRetDrvCau();
   }

  
	/**
	*  set variable d51uRetDrvCau
	*  @param value
	**/
   public void setD51uRetDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(value);
   } 

     /**
	 * 	Update D51uRetDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uRetDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetDrvCau with another Field
	 *	@param value
	 */
   public void setD51uRetDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source);
   }  
   
     /**
	 * 	Update D51uRetDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRetRuleSw
	 *	@return d51uRetRuleSw
	 */
   public char[] getD51uRetRuleSw(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).getD51uRetRuleSw();
   }

  
	/**
	*  set variable d51uRetRuleSw
	*  @param value
	**/
   public void setD51uRetRuleSw(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetRuleSw(value);
   } 

     /**
	 * 	Update D51uRetRuleSw 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRetRuleSw(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetRuleSw(source, sourceIndex);
   	
   }
   
   public void setD51uRetRuleSw(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetRuleSw(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRetRuleSw 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetRuleSw(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetRuleSw(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRetRuleSw with another Field
	 *	@param value
	 */
   public void setD51uRetRuleSw(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetRuleSw(source);
   }  
   
     /**
	 * 	Update D51uRetRuleSw 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRetRuleSw(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetRuleSw(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRetRuleSw 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRetRuleSw(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulKeys().getD51uRetRuleKeys(index).setD51uRetRuleSw(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv04KeyDrvPos
	 *	@return hv04KeyDrvPos
	 */
   public char[] getHv04KeyDrvPos(int index) throws CFException  {              
   		return hvHostVariablesSvcmain.getHv04KeyDrvPos(index);
   }

  
	/**
	*  set variable hv04KeyDrvPos
	*  @param value
	**/
   public void setHv04KeyDrvPos(int index,char[] value) throws CFException {
      hvHostVariablesSvcmain.setHv04KeyDrvPos((index),value);
   } 


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesSvcmain.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public MoveSvcKeyCsrOutCtx clone() {
        MoveSvcKeyCsrOutCtx cloneObj = new MoveSvcKeyCsrOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesSvcmain = new HvHostVariablesSvcmain();
        cloneObj.hvHostVariablesSvcmain.set(hvHostVariablesSvcmain.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public MoveSvcKeyCsrOutCtx getMoveSvcKeyCsrOutCtx() {
            return new MoveSvcKeyCsrOutCtx();
    }
     public class CloseSvcMainCsrInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public CloseSvcMainCsrOutCtx getCloseSvcMainCsrOutCtx() {
            return new CloseSvcMainCsrOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += dsmCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseSvcMainCsrInCtx clone() {
        CloseSvcMainCsrInCtx cloneObj = new CloseSvcMainCsrInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseSvcMainCsrInCtx getCloseSvcMainCsrInCtx() {
            return new CloseSvcMainCsrInCtx();
    }
     public class CloseSvcMainCsrOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of dsmSqlcode
	 *	@return dsmSqlcode
	 */
	public short getDsmSqlcode() throws CFException {
   		return dsmCallArea.getDsmCommonArea().getDsmSqlcode();
	}

    /**
	 *	Returns the String value of dsmSqlcode
	 *	@return dsmSqlcode
	 */
	public char[]  getDsmSqlcodeActualString() {
		return dsmCallArea.getDsmCommonArea().getDsmSqlcodeActualString();
	}

	/**
	 *	Returns String value of dsmSqlcode
	 *	@return dsmSqlcode
	 */
	public char[]  getDsmSqlcodeString() throws CFException {
	     return String.valueOf(dsmCallArea.getDsmCommonArea().getDsmSqlcodeString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean dsmSqlcodeIsNumeric()  throws CFException{
	    return dsmCallArea.getDsmCommonArea().dsmSqlcodeIsNumeric();
	}

	/**
	 * 	Update DsmSqlcode with the passed value
	 *	@param number
	 */
	public void setDsmSqlcode(short number)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmSqlcode(number);
	}
	
	public void setDsmSqlcode(int number)  throws CFException{
	    dsmCallArea.getDsmCommonArea().setDsmSqlcode(number);
	}
	public void setDsmSqlcode(long number)  throws CFException{
	    dsmCallArea.getDsmCommonArea().setDsmSqlcode(number);
	}
	

	
	/**
	 * 	Update DsmSqlcode with the passed value
	 *	@param value (String or char[])
	 */
	public void setDsmSqlcode(char[] value)  throws CFException {
		dsmCallArea.getDsmCommonArea().setDsmSqlcode(value);
	}
	
	/**
	 * 	Update DsmSqlcode with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setDsmSqlcodeString(char[] value)  throws CFException{
		dsmCallArea.getDsmCommonArea().setDsmSqlcode(value);
	}	

	/**
	 *	Returns the value of dsmLogArea
	 *	@return dsmLogArea
	 */   
	 public DsmLogArea getDsmLogArea() {
   	return dsmCallArea.getDsmLogArea();
   }

   /**
	* 	Update DsmLogArea with the passed value
	*	@param value
	*/
   public void setDsmLogArea(char[] value) throws CFException {
      dsmCallArea.setDsmLogArea(value);
   }   

     /**
	 * 	Update DsmLogArea 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setDsmLogArea(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	dsmCallArea.setDsmLogArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmLogArea 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmLogArea(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dsmCallArea.setDsmLogArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmLogArea with another Field
	 *	@param value
	 */
   public void setDsmLogArea(Field source) {
   	dsmCallArea.setDsmLogArea(source);
   }  
   
     /**
	 * 	Update DsmLogArea 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setDsmLogArea(Field source, int sourceIndex,int sourceLen) {
   	dsmCallArea.setDsmLogArea(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmLogArea 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmLogArea(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	dsmCallArea.setDsmLogArea(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "N" for isCloseCsrNg()
	 *	@return  Returns true if isCloseCsrNg() is "N"
	 */
   public boolean isCloseCsrNg() throws CFException {
      return work.isCloseCsrNg();
   }

	/**
	*  set values "N"
	*/
   	public void setCloseCsrNgTrue()  throws CFException{  			
    	work.setCloseCsrNgTrue();
   	}
	/**
	 *	Returns the value of dsmErrTblAction
	 *	@return dsmErrTblAction
	 */
   public char[] getDsmErrTblAction() throws CFException  {              
   		return dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().getDsmErrTblAction();
   }

  
	/**
	*  set variable dsmErrTblAction
	*  @param value
	**/
   public void setDsmErrTblAction(char[] value) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(value);
   } 

     /**
	 * 	Update DsmErrTblAction 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmErrTblAction(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source, sourceIndex);
   	
   }
   
   public void setDsmErrTblAction(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmErrTblAction 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrTblAction(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmErrTblAction with another Field
	 *	@param value
	 */
   public void setDsmErrTblAction(Field source) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source);
   }  
   
     /**
	 * 	Update DsmErrTblAction 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmErrTblAction(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmErrTblAction 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrTblAction(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblAction(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsmErrSectnName
	 *	@return dsmErrSectnName
	 */
   public char[] getDsmErrSectnName() throws CFException  {              
   		return dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().getDsmErrSectnName();
   }

  
	/**
	*  set variable dsmErrSectnName
	*  @param value
	**/
   public void setDsmErrSectnName(char[] value) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(value);
   } 

     /**
	 * 	Update DsmErrSectnName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmErrSectnName(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex);
   	
   }
   
   public void setDsmErrSectnName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmErrSectnName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrSectnName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmErrSectnName with another Field
	 *	@param value
	 */
   public void setDsmErrSectnName(Field source) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source);
   }  
   
     /**
	 * 	Update DsmErrSectnName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmErrSectnName(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmErrSectnName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrSectnName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrSectnName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsmErrPgmName
	 *	@return dsmErrPgmName
	 */
   public char[] getDsmErrPgmName() throws CFException  {              
   		return dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().getDsmErrPgmName();
   }

  
	/**
	*  set variable dsmErrPgmName
	*  @param value
	**/
   public void setDsmErrPgmName(char[] value) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(value);
   } 

     /**
	 * 	Update DsmErrPgmName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmErrPgmName(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex);
   	
   }
   
   public void setDsmErrPgmName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmErrPgmName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrPgmName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmErrPgmName with another Field
	 *	@param value
	 */
   public void setDsmErrPgmName(Field source) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source);
   }  
   
     /**
	 * 	Update DsmErrPgmName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmErrPgmName(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmErrPgmName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrPgmName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrPgmName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isCloseCsrOk()
	 *	@return  Returns true if isCloseCsrOk() is "Y"
	 */
   public boolean isCloseCsrOk() throws CFException {
      return work.isCloseCsrOk();
   }

	/**
	*  set values "Y"
	*/
   	public void setCloseCsrOkTrue()  throws CFException{  			
    	work.setCloseCsrOkTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 999 for isDsmDb2Error()
	 *	@return  Returns true if isDsmDb2Error() is 999
	 */
   public boolean isDsmDb2Error() throws CFException {
      return dsmCallArea.getDsmCommonArea().isDsmDb2Error();
   }

	/**
	*  set values 999
	*/
   	public void setDsmDb2ErrorTrue()  throws CFException{  			
    	dsmCallArea.getDsmCommonArea().setDsmDb2ErrorTrue();
   	}
	/**
	 *	Returns the value of dsmErrTblName
	 *	@return dsmErrTblName
	 */
   public char[] getDsmErrTblName() throws CFException  {              
   		return dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().getDsmErrTblName();
   }

  
	/**
	*  set variable dsmErrTblName
	*  @param value
	**/
   public void setDsmErrTblName(char[] value) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(value);
   } 

     /**
	 * 	Update DsmErrTblName 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setDsmErrTblName(char[] source, int sourceIndex) throws CFException {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source, sourceIndex);
   	
   }
   
   public void setDsmErrTblName(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update DsmErrTblName 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrTblName(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update DsmErrTblName with another Field
	 *	@param value
	 */
   public void setDsmErrTblName(Field source) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source);
   }  
   
     /**
	 * 	Update DsmErrTblName 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setDsmErrTblName(Field source, int sourceIndex,int sourceLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update DsmErrTblName 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setDsmErrTblName(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dsmCallArea.getDsmLogArea().getDsmSqlErrorMsgArea().setDsmErrTblName(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += dsmCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseSvcMainCsrOutCtx clone() {
        CloseSvcMainCsrOutCtx cloneObj = new CloseSvcMainCsrOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseSvcMainCsrOutCtx getCloseSvcMainCsrOutCtx() {
            return new CloseSvcMainCsrOutCtx();
    }
     public class OpenCombCursorInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     DclfeSpiRuleFrCondPos dclfeSpiRuleFrCondPos = D529351uCtx.this.getDclfeSpiRuleFrCondPos();
     DclfeSpiRuleCaus dclfeSpiRuleCaus = D529351uCtx.this.getDclfeSpiRuleCaus();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     TestVariables testVariables = D529351uCtx.this.getTestVariables();
     DclfeSpiRuleIpa dclfeSpiRuleIpa = D529351uCtx.this.getDclfeSpiRuleIpa();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     DclfeSpiRuleProvTyp dclfeSpiRuleProvTyp = D529351uCtx.this.getDclfeSpiRuleProvTyp();
     Sqlca sqlca = D529351uCtx.this.getSqlca();
     DclfeSpiRuleCpeFlg dclfeSpiRuleCpeFlg = D529351uCtx.this.getDclfeSpiRuleCpeFlg();

	/**
	 *	Returns the value of ripaSpiTblId
	 *	@return ripaSpiTblId
	 */
   public char[] getRipaSpiTblId() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaSpiTblId();
   }

  
	/**
	*  set variable ripaSpiTblId
	*  @param value
	**/
   public void setRipaSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaSpiTblId(value);
   } 

     /**
	 * 	Update RipaSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex);
   	
   }
   
   public void setRipaSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaSpiTblId with another Field
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source);
   }  
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testPos
	 *	@return testPos
	 */
   public char[] getTestPos() throws CFException  {              
   		return testVariables.getTestPos();
   }

  
	/**
	*  set variable testPos
	*  @param value
	**/
   public void setTestPos(char[] value) throws CFException {
      testVariables.setTestPos(value);
   } 

     /**
	 * 	Update TestPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestPos(char[] source, int sourceIndex) throws CFException {
      testVariables.setTestPos(source, sourceIndex);
   	
   }
   
   public void setTestPos(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.setTestPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestPos(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestPos with another Field
	 *	@param value
	 */
   public void setTestPos(Field source) {
      testVariables.setTestPos(source);
   }  
   
     /**
	 * 	Update TestPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestPos(Field source, int sourceIndex,int sourceLen) {
      testVariables.setTestPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestPos(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleFrCondPos
	 *	@return dclfeSpiRuleFrCondPos
	 */   
	 public DclfeSpiRuleFrCondPos getDclfeSpiRuleFrCondPos() {
   	return dclfeSpiRuleFrCondPos;
   }


	/**
	 *	Returns the value of testCaus
	 *	@return testCaus
	 */
   public char[] getTestCaus() throws CFException  {              
   		return testVariables.getTestCaus();
   }

  
	/**
	*  set variable testCaus
	*  @param value
	**/
   public void setTestCaus(char[] value) throws CFException {
      testVariables.setTestCaus(value);
   } 

     /**
	 * 	Update TestCaus 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestCaus(char[] source, int sourceIndex) throws CFException {
      testVariables.setTestCaus(source, sourceIndex);
   	
   }
   
   public void setTestCaus(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.setTestCaus(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestCaus 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestCaus(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestCaus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestCaus with another Field
	 *	@param value
	 */
   public void setTestCaus(Field source) {
      testVariables.setTestCaus(source);
   }  
   
     /**
	 * 	Update TestCaus 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestCaus(Field source, int sourceIndex,int sourceLen) {
      testVariables.setTestCaus(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestCaus 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestCaus(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestCaus(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testVariables
	 *	@return testVariables
	 */   
	 public TestVariables getTestVariables() {
   	return testVariables;
   }


	/**
	 *	Returns the value of dclfeSpiRuleIpa
	 *	@return dclfeSpiRuleIpa
	 */   
	 public DclfeSpiRuleIpa getDclfeSpiRuleIpa() {
   	return dclfeSpiRuleIpa;
   }


	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of fcndSpiTblId
	 *	@return fcndSpiTblId
	 */
   public char[] getFcndSpiTblId() throws CFException  {              
   		return dclfeSpiRuleFrCondPos.getFcndSpiTblId();
   }

  
	/**
	*  set variable fcndSpiTblId
	*  @param value
	**/
   public void setFcndSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(value);
   } 

     /**
	 * 	Update FcndSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setFcndSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source, sourceIndex);
   	
   }
   
   public void setFcndSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update FcndSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setFcndSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update FcndSpiTblId with another Field
	 *	@param value
	 */
   public void setFcndSpiTblId(Field source) {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source);
   }  
   
     /**
	 * 	Update FcndSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setFcndSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update FcndSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setFcndSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleFrCondPos.setFcndSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleCpeFlg
	 *	@return dclfeSpiRuleCpeFlg
	 */   
	 public DclfeSpiRuleCpeFlg getDclfeSpiRuleCpeFlg() {
   	return dclfeSpiRuleCpeFlg;
   }


	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of ptypSpiTblId
	 *	@return ptypSpiTblId
	 */
   public char[] getPtypSpiTblId() throws CFException  {              
   		return dclfeSpiRuleProvTyp.getPtypSpiTblId();
   }

  
	/**
	*  set variable ptypSpiTblId
	*  @param value
	**/
   public void setPtypSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(value);
   } 

     /**
	 * 	Update PtypSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setPtypSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source, sourceIndex);
   	
   }
   
   public void setPtypSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update PtypSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setPtypSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update PtypSpiTblId with another Field
	 *	@param value
	 */
   public void setPtypSpiTblId(Field source) {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source);
   }  
   
     /**
	 * 	Update PtypSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setPtypSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update PtypSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setPtypSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleProvTyp.setPtypSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of cpeflSpiTblId
	 *	@return cpeflSpiTblId
	 */
   public char[] getCpeflSpiTblId() throws CFException  {              
   		return dclfeSpiRuleCpeFlg.getCpeflSpiTblId();
   }

  
	/**
	*  set variable cpeflSpiTblId
	*  @param value
	**/
   public void setCpeflSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleCpeFlg.setCpeflSpiTblId(value);
   } 

     /**
	 * 	Update CpeflSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCpeflSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCpeFlg.setCpeflSpiTblId(source, sourceIndex);
   	
   }
   
   public void setCpeflSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCpeFlg.setCpeflSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CpeflSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCpeflSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCpeFlg.setCpeflSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CpeflSpiTblId with another Field
	 *	@param value
	 */
   public void setCpeflSpiTblId(Field source) {
      dclfeSpiRuleCpeFlg.setCpeflSpiTblId(source);
   }  
   
     /**
	 * 	Update CpeflSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCpeflSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCpeFlg.setCpeflSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CpeflSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCpeflSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCpeFlg.setCpeflSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleCaus
	 *	@return dclfeSpiRuleCaus
	 */   
	 public DclfeSpiRuleCaus getDclfeSpiRuleCaus() {
   	return dclfeSpiRuleCaus;
   }


	/**
	 *	Returns the value of testProvTyp
	 *	@return testProvTyp
	 */
   public char[] getTestProvTyp() throws CFException  {              
   		return testVariables.getTestProvTyp();
   }

  
	/**
	*  set variable testProvTyp
	*  @param value
	**/
   public void setTestProvTyp(char[] value) throws CFException {
      testVariables.setTestProvTyp(value);
   } 

     /**
	 * 	Update TestProvTyp 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestProvTyp(char[] source, int sourceIndex) throws CFException {
      testVariables.setTestProvTyp(source, sourceIndex);
   	
   }
   
   public void setTestProvTyp(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.setTestProvTyp(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestProvTyp 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestProvTyp(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestProvTyp with another Field
	 *	@param value
	 */
   public void setTestProvTyp(Field source) {
      testVariables.setTestProvTyp(source);
   }  
   
     /**
	 * 	Update TestProvTyp 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestProvTyp(Field source, int sourceIndex,int sourceLen) {
      testVariables.setTestProvTyp(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestProvTyp 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestProvTyp(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testCpeDescCd
	 *	@return testCpeDescCd
	 */
   public char[] getTestCpeDescCd() throws CFException  {              
   		return testVariables.getTestCpeDescCd();
   }

  
	/**
	*  set variable testCpeDescCd
	*  @param value
	**/
   public void setTestCpeDescCd(char[] value) throws CFException {
      testVariables.setTestCpeDescCd(value);
   } 

     /**
	 * 	Update TestCpeDescCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestCpeDescCd(char[] source, int sourceIndex) throws CFException {
      testVariables.setTestCpeDescCd(source, sourceIndex);
   	
   }
   
   public void setTestCpeDescCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.setTestCpeDescCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestCpeDescCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestCpeDescCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestCpeDescCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestCpeDescCd with another Field
	 *	@param value
	 */
   public void setTestCpeDescCd(Field source) {
      testVariables.setTestCpeDescCd(source);
   }  
   
     /**
	 * 	Update TestCpeDescCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestCpeDescCd(Field source, int sourceIndex,int sourceLen) {
      testVariables.setTestCpeDescCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestCpeDescCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestCpeDescCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.setTestCpeDescCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleProvTyp
	 *	@return dclfeSpiRuleProvTyp
	 */   
	 public DclfeSpiRuleProvTyp getDclfeSpiRuleProvTyp() {
   	return dclfeSpiRuleProvTyp;
   }


	/**
	 *	Test condition "Y" for isEndOfFetchComb()
	 *	@return  Returns true if isEndOfFetchComb() is "Y"
	 */
   public boolean isEndOfFetchComb() throws CFException {
      return work.isEndOfFetchComb();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfFetchCombTrue()  throws CFException{  			
    	work.setEndOfFetchCombTrue();
   	}
	/**
	 *	Returns the value of causSpiTblId
	 *	@return causSpiTblId
	 */
   public char[] getCausSpiTblId() throws CFException  {              
   		return dclfeSpiRuleCaus.getCausSpiTblId();
   }

  
	/**
	*  set variable causSpiTblId
	*  @param value
	**/
   public void setCausSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleCaus.setCausSpiTblId(value);
   } 

     /**
	 * 	Update CausSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setCausSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleCaus.setCausSpiTblId(source, sourceIndex);
   	
   }
   
   public void setCausSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleCaus.setCausSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update CausSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setCausSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update CausSpiTblId with another Field
	 *	@param value
	 */
   public void setCausSpiTblId(Field source) {
      dclfeSpiRuleCaus.setCausSpiTblId(source);
   }  
   
     /**
	 * 	Update CausSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setCausSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleCaus.setCausSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update CausSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setCausSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleCaus.setCausSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public OpenCombCursorOutCtx getOpenCombCursorOutCtx() {
            return new OpenCombCursorOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += dclfeSpiRuleFrCondPos.hashCode();
        str += dclfeSpiRuleCaus.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += testVariables.hashCode();
        str += dclfeSpiRuleIpa.hashCode();
        str += dsmCallArea.hashCode();
        str += dclfeSpiRuleProvTyp.hashCode();
        str += sqlca.hashCode();
        str += dclfeSpiRuleCpeFlg.hashCode();
       return str.hashCode();
    }

    public OpenCombCursorInCtx clone() {
        OpenCombCursorInCtx cloneObj = new OpenCombCursorInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dclfeSpiRuleFrCondPos = new DclfeSpiRuleFrCondPos();
        cloneObj.dclfeSpiRuleFrCondPos.set(dclfeSpiRuleFrCondPos.getClonedField());
        cloneObj.dclfeSpiRuleCaus = new DclfeSpiRuleCaus();
        cloneObj.dclfeSpiRuleCaus.set(dclfeSpiRuleCaus.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.testVariables = new TestVariables();
        cloneObj.testVariables.set(testVariables.getClonedField());
        cloneObj.dclfeSpiRuleIpa = new DclfeSpiRuleIpa();
        cloneObj.dclfeSpiRuleIpa.set(dclfeSpiRuleIpa.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dclfeSpiRuleProvTyp = new DclfeSpiRuleProvTyp();
        cloneObj.dclfeSpiRuleProvTyp.set(dclfeSpiRuleProvTyp.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.dclfeSpiRuleCpeFlg = new DclfeSpiRuleCpeFlg();
        cloneObj.dclfeSpiRuleCpeFlg.set(dclfeSpiRuleCpeFlg.getClonedField());
        return cloneObj;
    }

    }

    public OpenCombCursorInCtx getOpenCombCursorInCtx() {
            return new OpenCombCursorInCtx();
    }
     public class OpenCombCursorOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     DclfeSpiRuleFrCondPos dclfeSpiRuleFrCondPos = D529351uCtx.this.getDclfeSpiRuleFrCondPos();
     DclfeSpiRuleCaus dclfeSpiRuleCaus = D529351uCtx.this.getDclfeSpiRuleCaus();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     TestVariables testVariables = D529351uCtx.this.getTestVariables();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     DclfeSpiRuleIpa dclfeSpiRuleIpa = D529351uCtx.this.getDclfeSpiRuleIpa();
     DclfeSpiRuleProvTyp dclfeSpiRuleProvTyp = D529351uCtx.this.getDclfeSpiRuleProvTyp();
     Sqlca sqlca = D529351uCtx.this.getSqlca();
     DclfeSpiRuleCpeFlg dclfeSpiRuleCpeFlg = D529351uCtx.this.getDclfeSpiRuleCpeFlg();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Test condition 42 for isD51uDb2OpenError()
	 *	@return  Returns true if isD51uDb2OpenError() is 42
	 */
   public boolean isD51uDb2OpenError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2OpenError();
   }

	/**
	*  set values 42
	*/
   	public void setD51uDb2OpenErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2OpenErrorTrue();
   	}
	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of d51uParagraphNum
	 *	@return d51uParagraphNum
	 */
   public char[] getD51uParagraphNum() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uParagraphNum();
   }

  
	/**
	*  set variable d51uParagraphNum
	*  @param value
	**/
   public void setD51uParagraphNum(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(value);
   } 

     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex);
   	
   }
   
   public void setD51uParagraphNum(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uParagraphNum with another Field
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source);
   }  
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uDebugTracer
	 *	@return d51uDebugTracer
	 */
   public char[] getD51uDebugTracer() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uDebugTracer();
   }

  
	/**
	*  set variable d51uDebugTracer
	*  @param value
	**/
   public void setD51uDebugTracer(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(value);
   } 

     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex);
   	
   }
   
   public void setD51uDebugTracer(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uDebugTracer with another Field
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source);
   }  
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 999 for isDsmDb2Error()
	 *	@return  Returns true if isDsmDb2Error() is 999
	 */
   public boolean isDsmDb2Error() throws CFException {
      return dsmCallArea.getDsmCommonArea().isDsmDb2Error();
   }

	/**
	*  set values 999
	*/
   	public void setDsmDb2ErrorTrue()  throws CFException{  			
    	dsmCallArea.getDsmCommonArea().setDsmDb2ErrorTrue();
   	}

        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += dclfeSpiRuleFrCondPos.hashCode();
        str += dclfeSpiRuleCaus.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += testVariables.hashCode();
        str += dsmCallArea.hashCode();
        str += dclfeSpiRuleIpa.hashCode();
        str += dclfeSpiRuleProvTyp.hashCode();
        str += sqlca.hashCode();
        str += dclfeSpiRuleCpeFlg.hashCode();
       return str.hashCode();
    }

    public OpenCombCursorOutCtx clone() {
        OpenCombCursorOutCtx cloneObj = new OpenCombCursorOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.dclfeSpiRuleFrCondPos = new DclfeSpiRuleFrCondPos();
        cloneObj.dclfeSpiRuleFrCondPos.set(dclfeSpiRuleFrCondPos.getClonedField());
        cloneObj.dclfeSpiRuleCaus = new DclfeSpiRuleCaus();
        cloneObj.dclfeSpiRuleCaus.set(dclfeSpiRuleCaus.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.testVariables = new TestVariables();
        cloneObj.testVariables.set(testVariables.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.dclfeSpiRuleIpa = new DclfeSpiRuleIpa();
        cloneObj.dclfeSpiRuleIpa.set(dclfeSpiRuleIpa.getClonedField());
        cloneObj.dclfeSpiRuleProvTyp = new DclfeSpiRuleProvTyp();
        cloneObj.dclfeSpiRuleProvTyp.set(dclfeSpiRuleProvTyp.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.dclfeSpiRuleCpeFlg = new DclfeSpiRuleCpeFlg();
        cloneObj.dclfeSpiRuleCpeFlg.set(dclfeSpiRuleCpeFlg.getClonedField());
        return cloneObj;
    }

    }

    public OpenCombCursorOutCtx getOpenCombCursorOutCtx() {
            return new OpenCombCursorOutCtx();
    }
     public class FetchCombInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCombcr hvHostVariablesCombcr = D529351uCtx.this.getHvHostVariablesCombcr();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of hvHostVariablesCombcr
	 *	@return hvHostVariablesCombcr
	 */   
	 public HvHostVariablesCombcr getHvHostVariablesCombcr() {
   	return hvHostVariablesCombcr;
   }


	/**
	 *	Returns the value of hv2cDerivSvcCd
	 *	@return hv2cDerivSvcCd
	 */
   public char[] getHv2cDerivSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2cDerivSvcCd(index);
   }

  
	/**
	*  set variable hv2cDerivSvcCd
	*  @param value
	**/
   public void setHv2cDerivSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2cDerivSvcCd((index),value);
   } 

	/**
	 *	Returns the value of hv2eClmCaus1Cd
	 *	@return hv2eClmCaus1Cd
	 */
   public char[] getHv2eClmCaus1Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2eClmCaus1Cd(index);
   }

  
	/**
	*  set variable hv2eClmCaus1Cd
	*  @param value
	**/
   public void setHv2eClmCaus1Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2eClmCaus1Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2aRecTypCd
	 *	@return hv2aRecTypCd
	 */
   public char[] getHv2aRecTypCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2aRecTypCd(index);
   }

  
	/**
	*  set variable hv2aRecTypCd
	*  @param value
	**/
   public void setHv2aRecTypCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2aRecTypCd((index),value);
   } 

	/**
	 *	Returns the value of hv2mClmIpa1Cd
	 *	@return hv2mClmIpa1Cd
	 */
   public char[] getHv2mClmIpa1Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2mClmIpa1Cd(index);
   }

  
	/**
	*  set variable hv2mClmIpa1Cd
	*  @param value
	**/
   public void setHv2mClmIpa1Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2mClmIpa1Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2hClmCaus4Cd
	 *	@return hv2hClmCaus4Cd
	 */
   public char[] getHv2hClmCaus4Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2hClmCaus4Cd(index);
   }

  
	/**
	*  set variable hv2hClmCaus4Cd
	*  @param value
	**/
   public void setHv2hClmCaus4Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2hClmCaus4Cd((index),value);
   } 

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of hv2gClmCaus3Cd
	 *	@return hv2gClmCaus3Cd
	 */
   public char[] getHv2gClmCaus3Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2gClmCaus3Cd(index);
   }

  
	/**
	*  set variable hv2gClmCaus3Cd
	*  @param value
	**/
   public void setHv2gClmCaus3Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2gClmCaus3Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2jClmCaus6Cd
	 *	@return hv2jClmCaus6Cd
	 */
   public char[] getHv2jClmCaus6Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2jClmCaus6Cd(index);
   }

  
	/**
	*  set variable hv2jClmCaus6Cd
	*  @param value
	**/
   public void setHv2jClmCaus6Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2jClmCaus6Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2lClmCaus8Cd
	 *	@return hv2lClmCaus8Cd
	 */
   public char[] getHv2lClmCaus8Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2lClmCaus8Cd(index);
   }

  
	/**
	*  set variable hv2lClmCaus8Cd
	*  @param value
	**/
   public void setHv2lClmCaus8Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2lClmCaus8Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2uCpeDescCd
	 *	@return hv2uCpeDescCd
	 */
   public char[] getHv2uCpeDescCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2uCpeDescCd(index);
   }

  
	/**
	*  set variable hv2uCpeDescCd
	*  @param value
	**/
   public void setHv2uCpeDescCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2uCpeDescCd((index),value);
   } 

	/**
	 *	Returns the value of hv2nClmIpa2Cd
	 *	@return hv2nClmIpa2Cd
	 */
   public char[] getHv2nClmIpa2Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2nClmIpa2Cd(index);
   }

  
	/**
	*  set variable hv2nClmIpa2Cd
	*  @param value
	**/
   public void setHv2nClmIpa2Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2nClmIpa2Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2pProvTyp
	 *	@return hv2pProvTyp
	 */
   public char[] getHv2pProvTyp(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2pProvTyp(index);
   }

  
	/**
	*  set variable hv2pProvTyp
	*  @param value
	**/
   public void setHv2pProvTyp(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2pProvTyp((index),value);
   } 

	/**
	 *	Returns the value of hv2dDerivCausCd
	 *	@return hv2dDerivCausCd
	 */
   public char[] getHv2dDerivCausCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2dDerivCausCd(index);
   }

  
	/**
	*  set variable hv2dDerivCausCd
	*  @param value
	**/
   public void setHv2dDerivCausCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2dDerivCausCd((index),value);
   } 

	/**
	 *	Returns the value of hv2rGrpTbl1Nbr
	 *	@return hv2rGrpTbl1Nbr
	 */
   public char[] getHv2rGrpTbl1Nbr(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2rGrpTbl1Nbr(index);
   }

  
	/**
	*  set variable hv2rGrpTbl1Nbr
	*  @param value
	**/
   public void setHv2rGrpTbl1Nbr(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2rGrpTbl1Nbr((index),value);
   } 

	/**
	 *	Returns the value of hv2tGrpTbl3Nbr
	 *	@return hv2tGrpTbl3Nbr
	 */
   public char[] getHv2tGrpTbl3Nbr(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2tGrpTbl3Nbr(index);
   }

  
	/**
	*  set variable hv2tGrpTbl3Nbr
	*  @param value
	**/
   public void setHv2tGrpTbl3Nbr(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2tGrpTbl3Nbr((index),value);
   } 

	/**
	 *	Returns the value of hv2fClmCaus2Cd
	 *	@return hv2fClmCaus2Cd
	 */
   public char[] getHv2fClmCaus2Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2fClmCaus2Cd(index);
   }

  
	/**
	*  set variable hv2fClmCaus2Cd
	*  @param value
	**/
   public void setHv2fClmCaus2Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2fClmCaus2Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2iClmCaus5Cd
	 *	@return hv2iClmCaus5Cd
	 */
   public char[] getHv2iClmCaus5Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2iClmCaus5Cd(index);
   }

  
	/**
	*  set variable hv2iClmCaus5Cd
	*  @param value
	**/
   public void setHv2iClmCaus5Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2iClmCaus5Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2qFromCondPos
	 *	@return hv2qFromCondPos
	 */
   public char[] getHv2qFromCondPos(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2qFromCondPos(index);
   }

  
	/**
	*  set variable hv2qFromCondPos
	*  @param value
	**/
   public void setHv2qFromCondPos(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2qFromCondPos((index),value);
   } 

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of hv2kClmCaus7Cd
	 *	@return hv2kClmCaus7Cd
	 */
   public char[] getHv2kClmCaus7Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2kClmCaus7Cd(index);
   }

  
	/**
	*  set variable hv2kClmCaus7Cd
	*  @param value
	**/
   public void setHv2kClmCaus7Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2kClmCaus7Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2oClmIpa3Cd
	 *	@return hv2oClmIpa3Cd
	 */
   public char[] getHv2oClmIpa3Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2oClmIpa3Cd(index);
   }

  
	/**
	*  set variable hv2oClmIpa3Cd
	*  @param value
	**/
   public void setHv2oClmIpa3Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2oClmIpa3Cd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of hv2sGrpTbl2Nbr
	 *	@return hv2sGrpTbl2Nbr
	 */
   public char[] getHv2sGrpTbl2Nbr(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2sGrpTbl2Nbr(index);
   }

  
	/**
	*  set variable hv2sGrpTbl2Nbr
	*  @param value
	**/
   public void setHv2sGrpTbl2Nbr(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2sGrpTbl2Nbr((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv2bDerivPlOfSvcCd
	 *	@return hv2bDerivPlOfSvcCd
	 */
   public char[] getHv2bDerivPlOfSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2bDerivPlOfSvcCd(index);
   }

  
	/**
	*  set variable hv2bDerivPlOfSvcCd
	*  @param value
	**/
   public void setHv2bDerivPlOfSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2bDerivPlOfSvcCd((index),value);
   } 

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public FetchCombOutCtx getFetchCombOutCtx() {
            return new FetchCombOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCombcr.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public FetchCombInCtx clone() {
        FetchCombInCtx cloneObj = new FetchCombInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCombcr = new HvHostVariablesCombcr();
        cloneObj.hvHostVariablesCombcr.set(hvHostVariablesCombcr.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public FetchCombInCtx getFetchCombInCtx() {
            return new FetchCombInCtx();
    }
     public class FetchCombOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCombcr hvHostVariablesCombcr = D529351uCtx.this.getHvHostVariablesCombcr();
     Sqlca sqlca = D529351uCtx.this.getSqlca();


public void setHv2eIndex(int hv2eIndex) { 
    D529351uCtx.this.hv2eIndex = hv2eIndex;
}

public int getHv2eIndex() { 
    return D529351uCtx.this.hv2eIndex;
}
	/**
	 *	Returns the value of hvHostVariablesCombcr
	 *	@return hvHostVariablesCombcr
	 */   
	 public HvHostVariablesCombcr getHvHostVariablesCombcr() {
   	return hvHostVariablesCombcr;
   }



public void setHv2lIndex(int hv2lIndex) { 
    D529351uCtx.this.hv2lIndex = hv2lIndex;
}

public int getHv2lIndex() { 
    return D529351uCtx.this.hv2lIndex;
}
	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}



public void setHv2sIndex(int hv2sIndex) { 
    D529351uCtx.this.hv2sIndex = hv2sIndex;
}

public int getHv2sIndex() { 
    return D529351uCtx.this.hv2sIndex;
}

public void setHv2iIndex(int hv2iIndex) { 
    D529351uCtx.this.hv2iIndex = hv2iIndex;
}

public int getHv2iIndex() { 
    return D529351uCtx.this.hv2iIndex;
}

public void setHv2pIndex(int hv2pIndex) { 
    D529351uCtx.this.hv2pIndex = hv2pIndex;
}

public int getHv2pIndex() { 
    return D529351uCtx.this.hv2pIndex;
}

public void setHv2oIndex(int hv2oIndex) { 
    D529351uCtx.this.hv2oIndex = hv2oIndex;
}

public int getHv2oIndex() { 
    return D529351uCtx.this.hv2oIndex;
}

public void setHv2dIndex(int hv2dIndex) { 
    D529351uCtx.this.hv2dIndex = hv2dIndex;
}

public int getHv2dIndex() { 
    return D529351uCtx.this.hv2dIndex;
}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}



public void setHv2gIndex(int hv2gIndex) { 
    D529351uCtx.this.hv2gIndex = hv2gIndex;
}

public int getHv2gIndex() { 
    return D529351uCtx.this.hv2gIndex;
}

public void setHv2bIndex(int hv2bIndex) { 
    D529351uCtx.this.hv2bIndex = hv2bIndex;
}

public int getHv2bIndex() { 
    return D529351uCtx.this.hv2bIndex;
}

public void setHv2qIndex(int hv2qIndex) { 
    D529351uCtx.this.hv2qIndex = hv2qIndex;
}

public int getHv2qIndex() { 
    return D529351uCtx.this.hv2qIndex;
}

public void setHv2rIndex(int hv2rIndex) { 
    D529351uCtx.this.hv2rIndex = hv2rIndex;
}

public int getHv2rIndex() { 
    return D529351uCtx.this.hv2rIndex;
}

public void setHv2kIndex(int hv2kIndex) { 
    D529351uCtx.this.hv2kIndex = hv2kIndex;
}

public int getHv2kIndex() { 
    return D529351uCtx.this.hv2kIndex;
}
	/**
	 *	Returns the value of dsnnrows
	 *	@return dsnnrows
	 */
	public int getDsnnrows() throws CFException {        
   		return work.getDsnnrows();
	}
	
	/**
	 * 	Update Dsnnrows with the passed value
	 *	@param number
	 */
	public void setDsnnrows(int number)  throws CFException{
		work.setDsnnrows(number);
	}


	public void setDsnnrows(long number)  throws CFException{
		work.setDsnnrows((int)number);
	}



public void setHv2fIndex(int hv2fIndex) { 
    D529351uCtx.this.hv2fIndex = hv2fIndex;
}

public int getHv2fIndex() { 
    return D529351uCtx.this.hv2fIndex;
}

public void setHv2jIndex(int hv2jIndex) { 
    D529351uCtx.this.hv2jIndex = hv2jIndex;
}

public int getHv2jIndex() { 
    return D529351uCtx.this.hv2jIndex;
}

public void setHv2hIndex(int hv2hIndex) { 
    D529351uCtx.this.hv2hIndex = hv2hIndex;
}

public int getHv2hIndex() { 
    return D529351uCtx.this.hv2hIndex;
}

public void setHv2aIndex(int hv2aIndex) { 
    D529351uCtx.this.hv2aIndex = hv2aIndex;
}

public int getHv2aIndex() { 
    return D529351uCtx.this.hv2aIndex;
}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



public void setHv2mIndex(int hv2mIndex) { 
    D529351uCtx.this.hv2mIndex = hv2mIndex;
}

public int getHv2mIndex() { 
    return D529351uCtx.this.hv2mIndex;
}

public void setHv2tIndex(int hv2tIndex) { 
    D529351uCtx.this.hv2tIndex = hv2tIndex;
}

public int getHv2tIndex() { 
    return D529351uCtx.this.hv2tIndex;
}

public void setHv2uIndex(int hv2uIndex) { 
    D529351uCtx.this.hv2uIndex = hv2uIndex;
}

public int getHv2uIndex() { 
    return D529351uCtx.this.hv2uIndex;
}

public void setHv2cIndex(int hv2cIndex) { 
    D529351uCtx.this.hv2cIndex = hv2cIndex;
}

public int getHv2cIndex() { 
    return D529351uCtx.this.hv2cIndex;
}
	/**
	 *	Test condition "Y" for isEndOfFetchComb()
	 *	@return  Returns true if isEndOfFetchComb() is "Y"
	 */
   public boolean isEndOfFetchComb() throws CFException {
      return work.isEndOfFetchComb();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfFetchCombTrue()  throws CFException{  			
    	work.setEndOfFetchCombTrue();
   	}

public void setHv2nIndex(int hv2nIndex) { 
    D529351uCtx.this.hv2nIndex = hv2nIndex;
}

public int getHv2nIndex() { 
    return D529351uCtx.this.hv2nIndex;
}

        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCombcr.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public FetchCombOutCtx clone() {
        FetchCombOutCtx cloneObj = new FetchCombOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCombcr = new HvHostVariablesCombcr();
        cloneObj.hvHostVariablesCombcr.set(hvHostVariablesCombcr.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public FetchCombOutCtx getFetchCombOutCtx() {
            return new FetchCombOutCtx();
    }
     public class CloseCombCsrInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public CloseCombCsrOutCtx getCloseCombCsrOutCtx() {
            return new CloseCombCsrOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCombCsrInCtx clone() {
        CloseCombCsrInCtx cloneObj = new CloseCombCsrInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCombCsrInCtx getCloseCombCsrInCtx() {
            return new CloseCombCsrInCtx();
    }
     public class CloseCombCsrOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Test condition 43 for isD51uDb2CloseError()
	 *	@return  Returns true if isD51uDb2CloseError() is 43
	 */
   public boolean isD51uDb2CloseError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2CloseError();
   }

	/**
	*  set values 43
	*/
   	public void setD51uDb2CloseErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2CloseErrorTrue();
   	}
	/**
	 *	Returns the value of d51uParagraphNum
	 *	@return d51uParagraphNum
	 */
   public char[] getD51uParagraphNum() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uParagraphNum();
   }

  
	/**
	*  set variable d51uParagraphNum
	*  @param value
	**/
   public void setD51uParagraphNum(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(value);
   } 

     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex);
   	
   }
   
   public void setD51uParagraphNum(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uParagraphNum with another Field
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source);
   }  
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "N" for isCloseCsrNg()
	 *	@return  Returns true if isCloseCsrNg() is "N"
	 */
   public boolean isCloseCsrNg() throws CFException {
      return work.isCloseCsrNg();
   }

	/**
	*  set values "N"
	*/
   	public void setCloseCsrNgTrue()  throws CFException{  			
    	work.setCloseCsrNgTrue();
   	}
	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uDebugTracer
	 *	@return d51uDebugTracer
	 */
   public char[] getD51uDebugTracer() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uDebugTracer();
   }

  
	/**
	*  set variable d51uDebugTracer
	*  @param value
	**/
   public void setD51uDebugTracer(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(value);
   } 

     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex);
   	
   }
   
   public void setD51uDebugTracer(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uDebugTracer with another Field
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source);
   }  
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Test condition "Y" for isCloseCsrOk()
	 *	@return  Returns true if isCloseCsrOk() is "Y"
	 */
   public boolean isCloseCsrOk() throws CFException {
      return work.isCloseCsrOk();
   }

	/**
	*  set values "Y"
	*/
   	public void setCloseCsrOkTrue()  throws CFException{  			
    	work.setCloseCsrOkTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCombCsrOutCtx clone() {
        CloseCombCsrOutCtx cloneObj = new CloseCombCsrOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCombCsrOutCtx getCloseCombCsrOutCtx() {
            return new CloseCombCsrOutCtx();
    }
     public class MoveCauseTableInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCombcr hvHostVariablesCombcr = D529351uCtx.this.getHvHostVariablesCombcr();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();


public void setHv2eIndex(int hv2eIndex) { 
    D529351uCtx.this.hv2eIndex = hv2eIndex;
}

public int getHv2eIndex() { 
    return D529351uCtx.this.hv2eIndex;
}
	/**
	 *	Returns the value of hv2dDerivCausCd
	 *	@return hv2dDerivCausCd
	 */
   public char[] getHv2dDerivCausCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2dDerivCausCd(index);
   }

  
	/**
	*  set variable hv2dDerivCausCd
	*  @param value
	**/
   public void setHv2dDerivCausCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2dDerivCausCd((index),value);
   } 


public void setHv2jIndex(int hv2jIndex) { 
    D529351uCtx.this.hv2jIndex = hv2jIndex;
}

public int getHv2jIndex() { 
    return D529351uCtx.this.hv2jIndex;
}

public void setHv2hIndex(int hv2hIndex) { 
    D529351uCtx.this.hv2hIndex = hv2hIndex;
}

public int getHv2hIndex() { 
    return D529351uCtx.this.hv2hIndex;
}
	/**
	 *	Returns the value of hv2cDerivSvcCd
	 *	@return hv2cDerivSvcCd
	 */
   public char[] getHv2cDerivSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2cDerivSvcCd(index);
   }

  
	/**
	*  set variable hv2cDerivSvcCd
	*  @param value
	**/
   public void setHv2cDerivSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2cDerivSvcCd((index),value);
   } 


public void setHv2lIndex(int hv2lIndex) { 
    D529351uCtx.this.hv2lIndex = hv2lIndex;
}

public int getHv2lIndex() { 
    return D529351uCtx.this.hv2lIndex;
}
	/**
	 *	Returns the value of causSub
	 *	@return causSub
	 */
	public int getCausSub() throws CFException {        
   		return work.getCausSub();
	}
	
	/**
	 * 	Update CausSub with the passed value
	 *	@param number
	 */
	public void setCausSub(int number)  throws CFException{
		work.setCausSub(number);
	}


	public void setCausSub(long number)  throws CFException{
		work.setCausSub((int)number);
	}


	/**
	 *	Returns the value of hv2fClmCaus2Cd
	 *	@return hv2fClmCaus2Cd
	 */
   public char[] getHv2fClmCaus2Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2fClmCaus2Cd(index);
   }

  
	/**
	*  set variable hv2fClmCaus2Cd
	*  @param value
	**/
   public void setHv2fClmCaus2Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2fClmCaus2Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2iClmCaus5Cd
	 *	@return hv2iClmCaus5Cd
	 */
   public char[] getHv2iClmCaus5Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2iClmCaus5Cd(index);
   }

  
	/**
	*  set variable hv2iClmCaus5Cd
	*  @param value
	**/
   public void setHv2iClmCaus5Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2iClmCaus5Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2eClmCaus1Cd
	 *	@return hv2eClmCaus1Cd
	 */
   public char[] getHv2eClmCaus1Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2eClmCaus1Cd(index);
   }

  
	/**
	*  set variable hv2eClmCaus1Cd
	*  @param value
	**/
   public void setHv2eClmCaus1Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2eClmCaus1Cd((index),value);
   } 


public void setHv2iIndex(int hv2iIndex) { 
    D529351uCtx.this.hv2iIndex = hv2iIndex;
}

public int getHv2iIndex() { 
    return D529351uCtx.this.hv2iIndex;
}
	/**
	 *	Returns the value of hv2hClmCaus4Cd
	 *	@return hv2hClmCaus4Cd
	 */
   public char[] getHv2hClmCaus4Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2hClmCaus4Cd(index);
   }

  
	/**
	*  set variable hv2hClmCaus4Cd
	*  @param value
	**/
   public void setHv2hClmCaus4Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2hClmCaus4Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2kClmCaus7Cd
	 *	@return hv2kClmCaus7Cd
	 */
   public char[] getHv2kClmCaus7Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2kClmCaus7Cd(index);
   }

  
	/**
	*  set variable hv2kClmCaus7Cd
	*  @param value
	**/
   public void setHv2kClmCaus7Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2kClmCaus7Cd((index),value);
   } 


public void setHv2dIndex(int hv2dIndex) { 
    D529351uCtx.this.hv2dIndex = hv2dIndex;
}

public int getHv2dIndex() { 
    return D529351uCtx.this.hv2dIndex;
}

public void setHv2cIndex(int hv2cIndex) { 
    D529351uCtx.this.hv2cIndex = hv2cIndex;
}

public int getHv2cIndex() { 
    return D529351uCtx.this.hv2cIndex;
}

public void setHv2gIndex(int hv2gIndex) { 
    D529351uCtx.this.hv2gIndex = hv2gIndex;
}

public int getHv2gIndex() { 
    return D529351uCtx.this.hv2gIndex;
}
	/**
	 *	Returns the value of hv2gClmCaus3Cd
	 *	@return hv2gClmCaus3Cd
	 */
   public char[] getHv2gClmCaus3Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2gClmCaus3Cd(index);
   }

  
	/**
	*  set variable hv2gClmCaus3Cd
	*  @param value
	**/
   public void setHv2gClmCaus3Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2gClmCaus3Cd((index),value);
   } 


public void setHv2bIndex(int hv2bIndex) { 
    D529351uCtx.this.hv2bIndex = hv2bIndex;
}

public int getHv2bIndex() { 
    return D529351uCtx.this.hv2bIndex;
}
	/**
	 *	Returns the value of hv2bDerivPlOfSvcCd
	 *	@return hv2bDerivPlOfSvcCd
	 */
   public char[] getHv2bDerivPlOfSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2bDerivPlOfSvcCd(index);
   }

  
	/**
	*  set variable hv2bDerivPlOfSvcCd
	*  @param value
	**/
   public void setHv2bDerivPlOfSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2bDerivPlOfSvcCd((index),value);
   } 


public void setHv2kIndex(int hv2kIndex) { 
    D529351uCtx.this.hv2kIndex = hv2kIndex;
}

public int getHv2kIndex() { 
    return D529351uCtx.this.hv2kIndex;
}
	/**
	 *	Returns the value of hv2jClmCaus6Cd
	 *	@return hv2jClmCaus6Cd
	 */
   public char[] getHv2jClmCaus6Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2jClmCaus6Cd(index);
   }

  
	/**
	*  set variable hv2jClmCaus6Cd
	*  @param value
	**/
   public void setHv2jClmCaus6Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2jClmCaus6Cd((index),value);
   } 


public void setHv2fIndex(int hv2fIndex) { 
    D529351uCtx.this.hv2fIndex = hv2fIndex;
}

public int getHv2fIndex() { 
    return D529351uCtx.this.hv2fIndex;
}
	/**
	 *	Returns the value of hv2lClmCaus8Cd
	 *	@return hv2lClmCaus8Cd
	 */
   public char[] getHv2lClmCaus8Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2lClmCaus8Cd(index);
   }

  
	/**
	*  set variable hv2lClmCaus8Cd
	*  @param value
	**/
   public void setHv2lClmCaus8Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2lClmCaus8Cd((index),value);
   } 


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public MoveCauseTableOutCtx getMoveCauseTableOutCtx() {
            return new MoveCauseTableOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCombcr.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public MoveCauseTableInCtx clone() {
        MoveCauseTableInCtx cloneObj = new MoveCauseTableInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCombcr = new HvHostVariablesCombcr();
        cloneObj.hvHostVariablesCombcr.set(hvHostVariablesCombcr.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public MoveCauseTableInCtx getMoveCauseTableInCtx() {
            return new MoveCauseTableInCtx();
    }
     public class MoveCauseTableOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCombcr hvHostVariablesCombcr = D529351uCtx.this.getHvHostVariablesCombcr();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();

	/**
	 *	Test condition "Y" for isCausecdFound()
	 *	@return  Returns true if isCausecdFound() is "Y"
	 */
   public boolean isCausecdFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isCausecdFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setCausecdFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setCausecdFoundTrue();
   	}
	/**
	 *	Returns the value of hv2cDerivSvcCd
	 *	@return hv2cDerivSvcCd
	 */
   public char[] getHv2cDerivSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2cDerivSvcCd(index);
   }

  
	/**
	*  set variable hv2cDerivSvcCd
	*  @param value
	**/
   public void setHv2cDerivSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2cDerivSvcCd((index),value);
   } 

	/**
	 *	Returns the value of d51uCausDrvCau
	 *	@return d51uCausDrvCau
	 */
   public char[] getD51uCausDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausDrvCau();
   }

  
	/**
	*  set variable d51uCausDrvCau
	*  @param value
	**/
   public void setD51uCausDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(value);
   } 

     /**
	 * 	Update D51uCausDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uCausDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausDrvCau with another Field
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source);
   }  
   
     /**
	 * 	Update D51uCausDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of causSub
	 *	@return causSub
	 */
	public int getCausSub() throws CFException {        
   		return work.getCausSub();
	}
	
	/**
	 * 	Update CausSub with the passed value
	 *	@param number
	 */
	public void setCausSub(int number)  throws CFException{
		work.setCausSub(number);
	}


	public void setCausSub(long number)  throws CFException{
		work.setCausSub((int)number);
	}


	/**
	 *	Returns the value of d51uCausClmCauseCd6
	 *	@return d51uCausClmCauseCd6
	 */
   public char[] getD51uCausClmCauseCd6(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd6();
   }

  
	/**
	*  set variable d51uCausClmCauseCd6
	*  @param value
	**/
   public void setD51uCausClmCauseCd6(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd6 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd6(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd6(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd6 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd6(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd6 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd6(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd6 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd6(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd6 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd6(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd6(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd7
	 *	@return d51uCausClmCauseCd7
	 */
   public char[] getD51uCausClmCauseCd7(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd7();
   }

  
	/**
	*  set variable d51uCausClmCauseCd7
	*  @param value
	**/
   public void setD51uCausClmCauseCd7(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd7 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd7(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd7(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd7 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd7(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd7 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd7(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd7 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd7(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd7 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd7(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd7(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv2eClmCaus1Cd
	 *	@return hv2eClmCaus1Cd
	 */
   public char[] getHv2eClmCaus1Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2eClmCaus1Cd(index);
   }

  
	/**
	*  set variable hv2eClmCaus1Cd
	*  @param value
	**/
   public void setHv2eClmCaus1Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2eClmCaus1Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2hClmCaus4Cd
	 *	@return hv2hClmCaus4Cd
	 */
   public char[] getHv2hClmCaus4Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2hClmCaus4Cd(index);
   }

  
	/**
	*  set variable hv2hClmCaus4Cd
	*  @param value
	**/
   public void setHv2hClmCaus4Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2hClmCaus4Cd((index),value);
   } 

	/**
	 *	Returns the value of d51uCausClmCauseCd4
	 *	@return d51uCausClmCauseCd4
	 */
   public char[] getD51uCausClmCauseCd4(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd4();
   }

  
	/**
	*  set variable d51uCausClmCauseCd4
	*  @param value
	**/
   public void setD51uCausClmCauseCd4(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd4 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd4(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd4(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd4 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd4(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd4 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd4(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd4 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd4(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd4 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd4(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd4(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausDrvSvc
	 *	@return d51uCausDrvSvc
	 */
   public char[] getD51uCausDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausDrvSvc();
   }

  
	/**
	*  set variable d51uCausDrvSvc
	*  @param value
	**/
   public void setD51uCausDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(value);
   } 

     /**
	 * 	Update D51uCausDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uCausDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uCausDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd2
	 *	@return d51uCausClmCauseCd2
	 */
   public char[] getD51uCausClmCauseCd2(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd2();
   }

  
	/**
	*  set variable d51uCausClmCauseCd2
	*  @param value
	**/
   public void setD51uCausClmCauseCd2(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd2 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd2(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd2(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd2 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd2(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd2 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd2(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd2 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd2(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd2 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd2(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd2(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd5
	 *	@return d51uCausClmCauseCd5
	 */
   public char[] getD51uCausClmCauseCd5(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd5();
   }

  
	/**
	*  set variable d51uCausClmCauseCd5
	*  @param value
	**/
   public void setD51uCausClmCauseCd5(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd5 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd5(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd5(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd5 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd5(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd5 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd5(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd5 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd5(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd5 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd5(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd5(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv2gClmCaus3Cd
	 *	@return hv2gClmCaus3Cd
	 */
   public char[] getHv2gClmCaus3Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2gClmCaus3Cd(index);
   }

  
	/**
	*  set variable hv2gClmCaus3Cd
	*  @param value
	**/
   public void setHv2gClmCaus3Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2gClmCaus3Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2jClmCaus6Cd
	 *	@return hv2jClmCaus6Cd
	 */
   public char[] getHv2jClmCaus6Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2jClmCaus6Cd(index);
   }

  
	/**
	*  set variable hv2jClmCaus6Cd
	*  @param value
	**/
   public void setHv2jClmCaus6Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2jClmCaus6Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2lClmCaus8Cd
	 *	@return hv2lClmCaus8Cd
	 */
   public char[] getHv2lClmCaus8Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2lClmCaus8Cd(index);
   }

  
	/**
	*  set variable hv2lClmCaus8Cd
	*  @param value
	**/
   public void setHv2lClmCaus8Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2lClmCaus8Cd((index),value);
   } 

	/**
	 *	Returns the value of d51uCausDrvPos
	 *	@return d51uCausDrvPos
	 */
   public char[] getD51uCausDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausDrvPos();
   }

  
	/**
	*  set variable d51uCausDrvPos
	*  @param value
	**/
   public void setD51uCausDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(value);
   } 

     /**
	 * 	Update D51uCausDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uCausDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausDrvPos with another Field
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source);
   }  
   
     /**
	 * 	Update D51uCausDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv2dDerivCausCd
	 *	@return hv2dDerivCausCd
	 */
   public char[] getHv2dDerivCausCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2dDerivCausCd(index);
   }

  
	/**
	*  set variable hv2dDerivCausCd
	*  @param value
	**/
   public void setHv2dDerivCausCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2dDerivCausCd((index),value);
   } 

	/**
	 *	Returns the value of d51uCausClmCauseCd3
	 *	@return d51uCausClmCauseCd3
	 */
   public char[] getD51uCausClmCauseCd3(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd3();
   }

  
	/**
	*  set variable d51uCausClmCauseCd3
	*  @param value
	**/
   public void setD51uCausClmCauseCd3(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd3 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd3(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd3(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd3 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd3(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd3 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd3(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd3 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd3(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd3 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd3(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd3(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd8
	 *	@return d51uCausClmCauseCd8
	 */
   public char[] getD51uCausClmCauseCd8(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd8();
   }

  
	/**
	*  set variable d51uCausClmCauseCd8
	*  @param value
	**/
   public void setD51uCausClmCauseCd8(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd8 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd8(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd8(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd8 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd8(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd8 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd8(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd8 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd8(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd8 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd8(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd8(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCausClmCauseCd1
	 *	@return d51uCausClmCauseCd1
	 */
   public char[] getD51uCausClmCauseCd1(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).getD51uCausClmCauseCd1();
   }

  
	/**
	*  set variable d51uCausClmCauseCd1
	*  @param value
	**/
   public void setD51uCausClmCauseCd1(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(value);
   } 

     /**
	 * 	Update D51uCausClmCauseCd1 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCausClmCauseCd1(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source, sourceIndex);
   	
   }
   
   public void setD51uCausClmCauseCd1(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCausClmCauseCd1 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd1(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCausClmCauseCd1 with another Field
	 *	@param value
	 */
   public void setD51uCausClmCauseCd1(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source);
   }  
   
     /**
	 * 	Update D51uCausClmCauseCd1 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCausClmCauseCd1(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCausClmCauseCd1 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCausClmCauseCd1(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCauseData().getD51uRetRulCause(index).setD51uCausClmCauseCd1(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv2fClmCaus2Cd
	 *	@return hv2fClmCaus2Cd
	 */
   public char[] getHv2fClmCaus2Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2fClmCaus2Cd(index);
   }

  
	/**
	*  set variable hv2fClmCaus2Cd
	*  @param value
	**/
   public void setHv2fClmCaus2Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2fClmCaus2Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2iClmCaus5Cd
	 *	@return hv2iClmCaus5Cd
	 */
   public char[] getHv2iClmCaus5Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2iClmCaus5Cd(index);
   }

  
	/**
	*  set variable hv2iClmCaus5Cd
	*  @param value
	**/
   public void setHv2iClmCaus5Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2iClmCaus5Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2kClmCaus7Cd
	 *	@return hv2kClmCaus7Cd
	 */
   public char[] getHv2kClmCaus7Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2kClmCaus7Cd(index);
   }

  
	/**
	*  set variable hv2kClmCaus7Cd
	*  @param value
	**/
   public void setHv2kClmCaus7Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2kClmCaus7Cd((index),value);
   } 

	/**
	 *	Returns the value of d51uCausCnt
	 *	@return d51uCausCnt
	 */
	public int getD51uCausCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uCausCnt();
	}
	
	/**
	 * 	Update D51uCausCnt with the passed value
	 *	@param number
	 */
	public void setD51uCausCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uCausCnt(number);
	}


	public void setD51uCausCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uCausCnt((int)number);
	}


	/**
	 *	Returns the value of hv2bDerivPlOfSvcCd
	 *	@return hv2bDerivPlOfSvcCd
	 */
   public char[] getHv2bDerivPlOfSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2bDerivPlOfSvcCd(index);
   }

  
	/**
	*  set variable hv2bDerivPlOfSvcCd
	*  @param value
	**/
   public void setHv2bDerivPlOfSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2bDerivPlOfSvcCd((index),value);
   } 


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCombcr.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public MoveCauseTableOutCtx clone() {
        MoveCauseTableOutCtx cloneObj = new MoveCauseTableOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCombcr = new HvHostVariablesCombcr();
        cloneObj.hvHostVariablesCombcr.set(hvHostVariablesCombcr.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public MoveCauseTableOutCtx getMoveCauseTableOutCtx() {
            return new MoveCauseTableOutCtx();
    }
     public class MoveIpaTableInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCombcr hvHostVariablesCombcr = D529351uCtx.this.getHvHostVariablesCombcr();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DclfeSpiRuleIpa dclfeSpiRuleIpa = D529351uCtx.this.getDclfeSpiRuleIpa();

	/**
	 *	Returns the value of ripaSpiTblId
	 *	@return ripaSpiTblId
	 */
   public char[] getRipaSpiTblId() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaSpiTblId();
   }

  
	/**
	*  set variable ripaSpiTblId
	*  @param value
	**/
   public void setRipaSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaSpiTblId(value);
   } 

     /**
	 * 	Update RipaSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex);
   	
   }
   
   public void setRipaSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaSpiTblId with another Field
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source);
   }  
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv2dDerivCausCd
	 *	@return hv2dDerivCausCd
	 */
   public char[] getHv2dDerivCausCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2dDerivCausCd(index);
   }

  
	/**
	*  set variable hv2dDerivCausCd
	*  @param value
	**/
   public void setHv2dDerivCausCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2dDerivCausCd((index),value);
   } 

	/**
	 *	Returns the value of hv2rGrpTbl1Nbr
	 *	@return hv2rGrpTbl1Nbr
	 */
   public char[] getHv2rGrpTbl1Nbr(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2rGrpTbl1Nbr(index);
   }

  
	/**
	*  set variable hv2rGrpTbl1Nbr
	*  @param value
	**/
   public void setHv2rGrpTbl1Nbr(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2rGrpTbl1Nbr((index),value);
   } 

	/**
	 *	Returns the value of hv2cDerivSvcCd
	 *	@return hv2cDerivSvcCd
	 */
   public char[] getHv2cDerivSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2cDerivSvcCd(index);
   }

  
	/**
	*  set variable hv2cDerivSvcCd
	*  @param value
	**/
   public void setHv2cDerivSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2cDerivSvcCd((index),value);
   } 


public void setHv2sIndex(int hv2sIndex) { 
    D529351uCtx.this.hv2sIndex = hv2sIndex;
}

public int getHv2sIndex() { 
    return D529351uCtx.this.hv2sIndex;
}
	/**
	 *	Returns the value of hv2tGrpTbl3Nbr
	 *	@return hv2tGrpTbl3Nbr
	 */
   public char[] getHv2tGrpTbl3Nbr(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2tGrpTbl3Nbr(index);
   }

  
	/**
	*  set variable hv2tGrpTbl3Nbr
	*  @param value
	**/
   public void setHv2tGrpTbl3Nbr(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2tGrpTbl3Nbr((index),value);
   } 

	/**
	 *	Returns the value of ipaSub
	 *	@return ipaSub
	 */
	public int getIpaSub() throws CFException {        
   		return work.getIpaSub();
	}
	
	/**
	 * 	Update IpaSub with the passed value
	 *	@param number
	 */
	public void setIpaSub(int number)  throws CFException{
		work.setIpaSub(number);
	}


	public void setIpaSub(long number)  throws CFException{
		work.setIpaSub((int)number);
	}


	/**
	 *	Returns the value of hv2mClmIpa1Cd
	 *	@return hv2mClmIpa1Cd
	 */
   public char[] getHv2mClmIpa1Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2mClmIpa1Cd(index);
   }

  
	/**
	*  set variable hv2mClmIpa1Cd
	*  @param value
	**/
   public void setHv2mClmIpa1Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2mClmIpa1Cd((index),value);
   } 


public void setHv2mIndex(int hv2mIndex) { 
    D529351uCtx.this.hv2mIndex = hv2mIndex;
}

public int getHv2mIndex() { 
    return D529351uCtx.this.hv2mIndex;
}

public void setHv2tIndex(int hv2tIndex) { 
    D529351uCtx.this.hv2tIndex = hv2tIndex;
}

public int getHv2tIndex() { 
    return D529351uCtx.this.hv2tIndex;
}

public void setHv2oIndex(int hv2oIndex) { 
    D529351uCtx.this.hv2oIndex = hv2oIndex;
}

public int getHv2oIndex() { 
    return D529351uCtx.this.hv2oIndex;
}
	/**
	 *	Returns the value of hv2oClmIpa3Cd
	 *	@return hv2oClmIpa3Cd
	 */
   public char[] getHv2oClmIpa3Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2oClmIpa3Cd(index);
   }

  
	/**
	*  set variable hv2oClmIpa3Cd
	*  @param value
	**/
   public void setHv2oClmIpa3Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2oClmIpa3Cd((index),value);
   } 


public void setHv2dIndex(int hv2dIndex) { 
    D529351uCtx.this.hv2dIndex = hv2dIndex;
}

public int getHv2dIndex() { 
    return D529351uCtx.this.hv2dIndex;
}
	/**
	 *	Returns the value of hv2sGrpTbl2Nbr
	 *	@return hv2sGrpTbl2Nbr
	 */
   public char[] getHv2sGrpTbl2Nbr(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2sGrpTbl2Nbr(index);
   }

  
	/**
	*  set variable hv2sGrpTbl2Nbr
	*  @param value
	**/
   public void setHv2sGrpTbl2Nbr(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2sGrpTbl2Nbr((index),value);
   } 


public void setHv2cIndex(int hv2cIndex) { 
    D529351uCtx.this.hv2cIndex = hv2cIndex;
}

public int getHv2cIndex() { 
    return D529351uCtx.this.hv2cIndex;
}
	/**
	 *	Returns the value of d51uIpaCnt
	 *	@return d51uIpaCnt
	 */
	public int getD51uIpaCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uIpaCnt();
	}
	
	/**
	 * 	Update D51uIpaCnt with the passed value
	 *	@param number
	 */
	public void setD51uIpaCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIpaCnt(number);
	}


	public void setD51uIpaCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIpaCnt((int)number);
	}



public void setHv2bIndex(int hv2bIndex) { 
    D529351uCtx.this.hv2bIndex = hv2bIndex;
}

public int getHv2bIndex() { 
    return D529351uCtx.this.hv2bIndex;
}

public void setHv2rIndex(int hv2rIndex) { 
    D529351uCtx.this.hv2rIndex = hv2rIndex;
}

public int getHv2rIndex() { 
    return D529351uCtx.this.hv2rIndex;
}
	/**
	 *	Returns the value of hv2bDerivPlOfSvcCd
	 *	@return hv2bDerivPlOfSvcCd
	 */
   public char[] getHv2bDerivPlOfSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2bDerivPlOfSvcCd(index);
   }

  
	/**
	*  set variable hv2bDerivPlOfSvcCd
	*  @param value
	**/
   public void setHv2bDerivPlOfSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2bDerivPlOfSvcCd((index),value);
   } 

	/**
	 *	Returns the value of hv2nClmIpa2Cd
	 *	@return hv2nClmIpa2Cd
	 */
   public char[] getHv2nClmIpa2Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2nClmIpa2Cd(index);
   }

  
	/**
	*  set variable hv2nClmIpa2Cd
	*  @param value
	**/
   public void setHv2nClmIpa2Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2nClmIpa2Cd((index),value);
   } 


public void setHv2nIndex(int hv2nIndex) { 
    D529351uCtx.this.hv2nIndex = hv2nIndex;
}

public int getHv2nIndex() { 
    return D529351uCtx.this.hv2nIndex;
}

        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public MoveIpaTableOutCtx getMoveIpaTableOutCtx() {
            return new MoveIpaTableOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCombcr.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dclfeSpiRuleIpa.hashCode();
       return str.hashCode();
    }

    public MoveIpaTableInCtx clone() {
        MoveIpaTableInCtx cloneObj = new MoveIpaTableInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCombcr = new HvHostVariablesCombcr();
        cloneObj.hvHostVariablesCombcr.set(hvHostVariablesCombcr.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dclfeSpiRuleIpa = new DclfeSpiRuleIpa();
        cloneObj.dclfeSpiRuleIpa.set(dclfeSpiRuleIpa.getClonedField());
        return cloneObj;
    }

    }

    public MoveIpaTableInCtx getMoveIpaTableInCtx() {
            return new MoveIpaTableInCtx();
    }
     public class MoveIpaTableOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCombcr hvHostVariablesCombcr = D529351uCtx.this.getHvHostVariablesCombcr();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DclfeSpiRuleIpa dclfeSpiRuleIpa = D529351uCtx.this.getDclfeSpiRuleIpa();

	/**
	 *	Returns the value of ripaSpiTblId
	 *	@return ripaSpiTblId
	 */
   public char[] getRipaSpiTblId() throws CFException  {              
   		return dclfeSpiRuleIpa.getRipaSpiTblId();
   }

  
	/**
	*  set variable ripaSpiTblId
	*  @param value
	**/
   public void setRipaSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleIpa.setRipaSpiTblId(value);
   } 

     /**
	 * 	Update RipaSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRipaSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex);
   	
   }
   
   public void setRipaSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRipaSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RipaSpiTblId with another Field
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source);
   }  
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RipaSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRipaSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIpa.setRipaSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv2dDerivCausCd
	 *	@return hv2dDerivCausCd
	 */
   public char[] getHv2dDerivCausCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2dDerivCausCd(index);
   }

  
	/**
	*  set variable hv2dDerivCausCd
	*  @param value
	**/
   public void setHv2dDerivCausCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2dDerivCausCd((index),value);
   } 

	/**
	 *	Returns the value of hv2rGrpTbl1Nbr
	 *	@return hv2rGrpTbl1Nbr
	 */
   public char[] getHv2rGrpTbl1Nbr(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2rGrpTbl1Nbr(index);
   }

  
	/**
	*  set variable hv2rGrpTbl1Nbr
	*  @param value
	**/
   public void setHv2rGrpTbl1Nbr(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2rGrpTbl1Nbr((index),value);
   } 

	/**
	 *	Test condition "Y" for isIpaFound()
	 *	@return  Returns true if isIpaFound() is "Y"
	 */
   public boolean isIpaFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isIpaFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setIpaFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setIpaFoundTrue();
   	}
	/**
	 *	Returns the value of hv2cDerivSvcCd
	 *	@return hv2cDerivSvcCd
	 */
   public char[] getHv2cDerivSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2cDerivSvcCd(index);
   }

  
	/**
	*  set variable hv2cDerivSvcCd
	*  @param value
	**/
   public void setHv2cDerivSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2cDerivSvcCd((index),value);
   } 

	/**
	 *	Returns the value of hv2tGrpTbl3Nbr
	 *	@return hv2tGrpTbl3Nbr
	 */
   public char[] getHv2tGrpTbl3Nbr(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2tGrpTbl3Nbr(index);
   }

  
	/**
	*  set variable hv2tGrpTbl3Nbr
	*  @param value
	**/
   public void setHv2tGrpTbl3Nbr(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2tGrpTbl3Nbr((index),value);
   } 

	/**
	 *	Returns the value of d51uRipaClmIpa1Cd
	 *	@return d51uRipaClmIpa1Cd
	 */
	public int getD51uRipaClmIpa1Cd(int index) throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa1Cd();
	}


	/**
	 *	Returns String value of d51uRipaClmIpa1Cd
	 *	@return d51uRipaClmIpa1Cd
	 */
	public char[]  getD51uRipaClmIpa1CdString(int index) throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa1CdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uRipaClmIpa1CdIsNumeric(int index)  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index - 1).d51uRipaClmIpa1CdIsNumeric();
	}

	/**
	 * 	Update D51uRipaClmIpa1Cd with the passed value
	 *	@param number
	 */
	public void setD51uRipaClmIpa1Cd(int index,int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa1Cd(number);
	}
	

	public void setD51uRipaClmIpa1Cd(int index,long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa1Cd(number);
	}
	
	
	/**
	 * 	Update D51uRipaClmIpa1Cd with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa1Cd(int index,char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa1Cd(value);
	}
	
	/**
	 * 	Update D51uRipaClmIpa1Cd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa1CdString(int index,char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa1Cd(value);
	}	

	/**
	 *	Returns the value of d51uRipaClmIpa2Cd
	 *	@return d51uRipaClmIpa2Cd
	 */
	public int getD51uRipaClmIpa2Cd(int index) throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa2Cd();
	}


	/**
	 *	Returns String value of d51uRipaClmIpa2Cd
	 *	@return d51uRipaClmIpa2Cd
	 */
	public char[]  getD51uRipaClmIpa2CdString(int index) throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa2CdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uRipaClmIpa2CdIsNumeric(int index)  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index - 1).d51uRipaClmIpa2CdIsNumeric();
	}

	/**
	 * 	Update D51uRipaClmIpa2Cd with the passed value
	 *	@param number
	 */
	public void setD51uRipaClmIpa2Cd(int index,int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa2Cd(number);
	}
	

	public void setD51uRipaClmIpa2Cd(int index,long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa2Cd(number);
	}
	
	
	/**
	 * 	Update D51uRipaClmIpa2Cd with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa2Cd(int index,char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa2Cd(value);
	}
	
	/**
	 * 	Update D51uRipaClmIpa2Cd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa2CdString(int index,char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa2Cd(value);
	}	

	/**
	 *	Returns the value of d51uRipaDrvPos
	 *	@return d51uRipaDrvPos
	 */
   public char[] getD51uRipaDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaDrvPos();
   }

  
	/**
	*  set variable d51uRipaDrvPos
	*  @param value
	**/
   public void setD51uRipaDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(value);
   } 

     /**
	 * 	Update D51uRipaDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uRipaDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaDrvPos with another Field
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source);
   }  
   
     /**
	 * 	Update D51uRipaDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRipaGrpTbl2Nbr
	 *	@return d51uRipaGrpTbl2Nbr
	 */
   public char[] getD51uRipaGrpTbl2Nbr(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaGrpTbl2Nbr();
   }

  
	/**
	*  set variable d51uRipaGrpTbl2Nbr
	*  @param value
	**/
   public void setD51uRipaGrpTbl2Nbr(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl2Nbr(value);
   } 

     /**
	 * 	Update D51uRipaGrpTbl2Nbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaGrpTbl2Nbr(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl2Nbr(source, sourceIndex);
   	
   }
   
   public void setD51uRipaGrpTbl2Nbr(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl2Nbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaGrpTbl2Nbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaGrpTbl2Nbr(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl2Nbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaGrpTbl2Nbr with another Field
	 *	@param value
	 */
   public void setD51uRipaGrpTbl2Nbr(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl2Nbr(source);
   }  
   
     /**
	 * 	Update D51uRipaGrpTbl2Nbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaGrpTbl2Nbr(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl2Nbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaGrpTbl2Nbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaGrpTbl2Nbr(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl2Nbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ipaSub
	 *	@return ipaSub
	 */
	public int getIpaSub() throws CFException {        
   		return work.getIpaSub();
	}
	
	/**
	 * 	Update IpaSub with the passed value
	 *	@param number
	 */
	public void setIpaSub(int number)  throws CFException{
		work.setIpaSub(number);
	}


	public void setIpaSub(long number)  throws CFException{
		work.setIpaSub((int)number);
	}


	/**
	 *	Returns the value of hv2mClmIpa1Cd
	 *	@return hv2mClmIpa1Cd
	 */
   public char[] getHv2mClmIpa1Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2mClmIpa1Cd(index);
   }

  
	/**
	*  set variable hv2mClmIpa1Cd
	*  @param value
	**/
   public void setHv2mClmIpa1Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2mClmIpa1Cd((index),value);
   } 

	/**
	 *	Returns the value of d51uRipaSpiTblId
	 *	@return d51uRipaSpiTblId
	 */
   public char[] getD51uRipaSpiTblId(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaSpiTblId();
   }

  
	/**
	*  set variable d51uRipaSpiTblId
	*  @param value
	**/
   public void setD51uRipaSpiTblId(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaSpiTblId(value);
   } 

     /**
	 * 	Update D51uRipaSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaSpiTblId(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaSpiTblId(source, sourceIndex);
   	
   }
   
   public void setD51uRipaSpiTblId(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaSpiTblId(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaSpiTblId with another Field
	 *	@param value
	 */
   public void setD51uRipaSpiTblId(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaSpiTblId(source);
   }  
   
     /**
	 * 	Update D51uRipaSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaSpiTblId(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaSpiTblId(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv2oClmIpa3Cd
	 *	@return hv2oClmIpa3Cd
	 */
   public char[] getHv2oClmIpa3Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2oClmIpa3Cd(index);
   }

  
	/**
	*  set variable hv2oClmIpa3Cd
	*  @param value
	**/
   public void setHv2oClmIpa3Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2oClmIpa3Cd((index),value);
   } 

	/**
	 *	Returns the value of hv2sGrpTbl2Nbr
	 *	@return hv2sGrpTbl2Nbr
	 */
   public char[] getHv2sGrpTbl2Nbr(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2sGrpTbl2Nbr(index);
   }

  
	/**
	*  set variable hv2sGrpTbl2Nbr
	*  @param value
	**/
   public void setHv2sGrpTbl2Nbr(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2sGrpTbl2Nbr((index),value);
   } 

	/**
	 *	Returns the value of d51uRipaClmIpa3Cd
	 *	@return d51uRipaClmIpa3Cd
	 */
	public int getD51uRipaClmIpa3Cd(int index) throws CFException {
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa3Cd();
	}


	/**
	 *	Returns String value of d51uRipaClmIpa3Cd
	 *	@return d51uRipaClmIpa3Cd
	 */
	public char[]  getD51uRipaClmIpa3CdString(int index) throws CFException {
	     return String.valueOf(vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaClmIpa3CdString()).toCharArray();
	}

	 /**
	 *  This method allows testing if there is a numeric value stored in the serialized String
	 *	@return true if numeric value is stored in the string
	 */
	public boolean d51uRipaClmIpa3CdIsNumeric(int index)  throws CFException{
	    return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index - 1).d51uRipaClmIpa3CdIsNumeric();
	}

	/**
	 * 	Update D51uRipaClmIpa3Cd with the passed value
	 *	@param number
	 */
	public void setD51uRipaClmIpa3Cd(int index,int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa3Cd(number);
	}
	

	public void setD51uRipaClmIpa3Cd(int index,long number)  throws CFException{
	    vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa3Cd(number);
	}
	
	
	/**
	 * 	Update D51uRipaClmIpa3Cd with the passed value
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa3Cd(int index,char[] value)  throws CFException {
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa3Cd(value);
	}
	
	/**
	 * 	Update D51uRipaClmIpa3Cd with the passed value 
	 *
	 *	@param value (String or char[])
	 */
	public void setD51uRipaClmIpa3CdString(int index,char[] value)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaClmIpa3Cd(value);
	}	

	/**
	 *	Returns the value of d51uRipaGrpTbl3Nbr
	 *	@return d51uRipaGrpTbl3Nbr
	 */
   public char[] getD51uRipaGrpTbl3Nbr(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaGrpTbl3Nbr();
   }

  
	/**
	*  set variable d51uRipaGrpTbl3Nbr
	*  @param value
	**/
   public void setD51uRipaGrpTbl3Nbr(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl3Nbr(value);
   } 

     /**
	 * 	Update D51uRipaGrpTbl3Nbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaGrpTbl3Nbr(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl3Nbr(source, sourceIndex);
   	
   }
   
   public void setD51uRipaGrpTbl3Nbr(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl3Nbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaGrpTbl3Nbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaGrpTbl3Nbr(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl3Nbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaGrpTbl3Nbr with another Field
	 *	@param value
	 */
   public void setD51uRipaGrpTbl3Nbr(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl3Nbr(source);
   }  
   
     /**
	 * 	Update D51uRipaGrpTbl3Nbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaGrpTbl3Nbr(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl3Nbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaGrpTbl3Nbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaGrpTbl3Nbr(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl3Nbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uIpaCnt
	 *	@return d51uIpaCnt
	 */
	public int getD51uIpaCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uIpaCnt();
	}
	
	/**
	 * 	Update D51uIpaCnt with the passed value
	 *	@param number
	 */
	public void setD51uIpaCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIpaCnt(number);
	}


	public void setD51uIpaCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIpaCnt((int)number);
	}


	/**
	 *	Returns the value of d51uRipaGrpTbl1Nbr
	 *	@return d51uRipaGrpTbl1Nbr
	 */
   public char[] getD51uRipaGrpTbl1Nbr(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaGrpTbl1Nbr();
   }

  
	/**
	*  set variable d51uRipaGrpTbl1Nbr
	*  @param value
	**/
   public void setD51uRipaGrpTbl1Nbr(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl1Nbr(value);
   } 

     /**
	 * 	Update D51uRipaGrpTbl1Nbr 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaGrpTbl1Nbr(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl1Nbr(source, sourceIndex);
   	
   }
   
   public void setD51uRipaGrpTbl1Nbr(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl1Nbr(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaGrpTbl1Nbr 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaGrpTbl1Nbr(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl1Nbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaGrpTbl1Nbr with another Field
	 *	@param value
	 */
   public void setD51uRipaGrpTbl1Nbr(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl1Nbr(source);
   }  
   
     /**
	 * 	Update D51uRipaGrpTbl1Nbr 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaGrpTbl1Nbr(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl1Nbr(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaGrpTbl1Nbr 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaGrpTbl1Nbr(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaGrpTbl1Nbr(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv2bDerivPlOfSvcCd
	 *	@return hv2bDerivPlOfSvcCd
	 */
   public char[] getHv2bDerivPlOfSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2bDerivPlOfSvcCd(index);
   }

  
	/**
	*  set variable hv2bDerivPlOfSvcCd
	*  @param value
	**/
   public void setHv2bDerivPlOfSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2bDerivPlOfSvcCd((index),value);
   } 

	/**
	 *	Returns the value of d51uRipaDrvSvc
	 *	@return d51uRipaDrvSvc
	 */
   public char[] getD51uRipaDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaDrvSvc();
   }

  
	/**
	*  set variable d51uRipaDrvSvc
	*  @param value
	**/
   public void setD51uRipaDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(value);
   } 

     /**
	 * 	Update D51uRipaDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uRipaDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uRipaDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRipaDrvCau
	 *	@return d51uRipaDrvCau
	 */
   public char[] getD51uRipaDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).getD51uRipaDrvCau();
   }

  
	/**
	*  set variable d51uRipaDrvCau
	*  @param value
	**/
   public void setD51uRipaDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(value);
   } 

     /**
	 * 	Update D51uRipaDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uRipaDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRipaDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRipaDrvCau with another Field
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source);
   }  
   
     /**
	 * 	Update D51uRipaDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRipaDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRipaDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIpa().getD51uRetRuleIpa(index).setD51uRipaDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv2nClmIpa2Cd
	 *	@return hv2nClmIpa2Cd
	 */
   public char[] getHv2nClmIpa2Cd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2nClmIpa2Cd(index);
   }

  
	/**
	*  set variable hv2nClmIpa2Cd
	*  @param value
	**/
   public void setHv2nClmIpa2Cd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2nClmIpa2Cd((index),value);
   } 


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCombcr.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dclfeSpiRuleIpa.hashCode();
       return str.hashCode();
    }

    public MoveIpaTableOutCtx clone() {
        MoveIpaTableOutCtx cloneObj = new MoveIpaTableOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCombcr = new HvHostVariablesCombcr();
        cloneObj.hvHostVariablesCombcr.set(hvHostVariablesCombcr.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dclfeSpiRuleIpa = new DclfeSpiRuleIpa();
        cloneObj.dclfeSpiRuleIpa.set(dclfeSpiRuleIpa.getClonedField());
        return cloneObj;
    }

    }

    public MoveIpaTableOutCtx getMoveIpaTableOutCtx() {
            return new MoveIpaTableOutCtx();
    }
     public class MoveCsptypInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCombcr hvHostVariablesCombcr = D529351uCtx.this.getHvHostVariablesCombcr();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();


public void setHv2dIndex(int hv2dIndex) { 
    D529351uCtx.this.hv2dIndex = hv2dIndex;
}

public int getHv2dIndex() { 
    return D529351uCtx.this.hv2dIndex;
}
	/**
	 *	Returns the value of ptypSub
	 *	@return ptypSub
	 */
	public int getPtypSub() throws CFException {        
   		return work.getPtypSub();
	}
	
	/**
	 * 	Update PtypSub with the passed value
	 *	@param number
	 */
	public void setPtypSub(int number)  throws CFException{
		work.setPtypSub(number);
	}


	public void setPtypSub(long number)  throws CFException{
		work.setPtypSub((int)number);
	}


	/**
	 *	Returns the value of hv2dDerivCausCd
	 *	@return hv2dDerivCausCd
	 */
   public char[] getHv2dDerivCausCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2dDerivCausCd(index);
   }

  
	/**
	*  set variable hv2dDerivCausCd
	*  @param value
	**/
   public void setHv2dDerivCausCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2dDerivCausCd((index),value);
   } 

	/**
	 *	Returns the value of hv2cDerivSvcCd
	 *	@return hv2cDerivSvcCd
	 */
   public char[] getHv2cDerivSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2cDerivSvcCd(index);
   }

  
	/**
	*  set variable hv2cDerivSvcCd
	*  @param value
	**/
   public void setHv2cDerivSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2cDerivSvcCd((index),value);
   } 


public void setHv2cIndex(int hv2cIndex) { 
    D529351uCtx.this.hv2cIndex = hv2cIndex;
}

public int getHv2cIndex() { 
    return D529351uCtx.this.hv2cIndex;
}

public void setHv2bIndex(int hv2bIndex) { 
    D529351uCtx.this.hv2bIndex = hv2bIndex;
}

public int getHv2bIndex() { 
    return D529351uCtx.this.hv2bIndex;
}
	/**
	 *	Returns the value of hv2bDerivPlOfSvcCd
	 *	@return hv2bDerivPlOfSvcCd
	 */
   public char[] getHv2bDerivPlOfSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2bDerivPlOfSvcCd(index);
   }

  
	/**
	*  set variable hv2bDerivPlOfSvcCd
	*  @param value
	**/
   public void setHv2bDerivPlOfSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2bDerivPlOfSvcCd((index),value);
   } 


public void setHv2pIndex(int hv2pIndex) { 
    D529351uCtx.this.hv2pIndex = hv2pIndex;
}

public int getHv2pIndex() { 
    return D529351uCtx.this.hv2pIndex;
}
	/**
	 *	Returns the value of hv2pProvTyp
	 *	@return hv2pProvTyp
	 */
   public char[] getHv2pProvTyp(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2pProvTyp(index);
   }

  
	/**
	*  set variable hv2pProvTyp
	*  @param value
	**/
   public void setHv2pProvTyp(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2pProvTyp((index),value);
   } 


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public MoveCsptypOutCtx getMoveCsptypOutCtx() {
            return new MoveCsptypOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCombcr.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public MoveCsptypInCtx clone() {
        MoveCsptypInCtx cloneObj = new MoveCsptypInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCombcr = new HvHostVariablesCombcr();
        cloneObj.hvHostVariablesCombcr.set(hvHostVariablesCombcr.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public MoveCsptypInCtx getMoveCsptypInCtx() {
            return new MoveCsptypInCtx();
    }
     public class MoveCsptypOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCombcr hvHostVariablesCombcr = D529351uCtx.this.getHvHostVariablesCombcr();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();

	/**
	 *	Returns the value of d51uPtypDrvPos
	 *	@return d51uPtypDrvPos
	 */
   public char[] getD51uPtypDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).getD51uPtypDrvPos();
   }

  
	/**
	*  set variable d51uPtypDrvPos
	*  @param value
	**/
   public void setD51uPtypDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(value);
   } 

     /**
	 * 	Update D51uPtypDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uPtypDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uPtypDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uPtypDrvPos with another Field
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source);
   }  
   
     /**
	 * 	Update D51uPtypDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uPtypDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ptypSub
	 *	@return ptypSub
	 */
	public int getPtypSub() throws CFException {        
   		return work.getPtypSub();
	}
	
	/**
	 * 	Update PtypSub with the passed value
	 *	@param number
	 */
	public void setPtypSub(int number)  throws CFException{
		work.setPtypSub(number);
	}


	public void setPtypSub(long number)  throws CFException{
		work.setPtypSub((int)number);
	}


	/**
	 *	Returns the value of hv2dDerivCausCd
	 *	@return hv2dDerivCausCd
	 */
   public char[] getHv2dDerivCausCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2dDerivCausCd(index);
   }

  
	/**
	*  set variable hv2dDerivCausCd
	*  @param value
	**/
   public void setHv2dDerivCausCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2dDerivCausCd((index),value);
   } 

	/**
	 *	Returns the value of hv2cDerivSvcCd
	 *	@return hv2cDerivSvcCd
	 */
   public char[] getHv2cDerivSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2cDerivSvcCd(index);
   }

  
	/**
	*  set variable hv2cDerivSvcCd
	*  @param value
	**/
   public void setHv2cDerivSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2cDerivSvcCd((index),value);
   } 

	/**
	 *	Returns the value of d51uPtypDrvCau
	 *	@return d51uPtypDrvCau
	 */
   public char[] getD51uPtypDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).getD51uPtypDrvCau();
   }

  
	/**
	*  set variable d51uPtypDrvCau
	*  @param value
	**/
   public void setD51uPtypDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(value);
   } 

     /**
	 * 	Update D51uPtypDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uPtypDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uPtypDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uPtypDrvCau with another Field
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source);
   }  
   
     /**
	 * 	Update D51uPtypDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uPtypDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isProvtypFound()
	 *	@return  Returns true if isProvtypFound() is "Y"
	 */
   public boolean isProvtypFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isProvtypFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setProvtypFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setProvtypFoundTrue();
   	}
	/**
	 *	Returns the value of d51uPtypCnt
	 *	@return d51uPtypCnt
	 */
	public int getD51uPtypCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uPtypCnt();
	}
	
	/**
	 * 	Update D51uPtypCnt with the passed value
	 *	@param number
	 */
	public void setD51uPtypCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uPtypCnt(number);
	}


	public void setD51uPtypCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uPtypCnt((int)number);
	}


	/**
	 *	Returns the value of d51uPtypProvTyp
	 *	@return d51uPtypProvTyp
	 */
   public char[] getD51uPtypProvTyp(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).getD51uPtypProvTyp();
   }

  
	/**
	*  set variable d51uPtypProvTyp
	*  @param value
	**/
   public void setD51uPtypProvTyp(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(value);
   } 

     /**
	 * 	Update D51uPtypProvTyp 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uPtypProvTyp(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source, sourceIndex);
   	
   }
   
   public void setD51uPtypProvTyp(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uPtypProvTyp 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypProvTyp(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uPtypProvTyp with another Field
	 *	@param value
	 */
   public void setD51uPtypProvTyp(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source);
   }  
   
     /**
	 * 	Update D51uPtypProvTyp 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uPtypProvTyp(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uPtypProvTyp 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypProvTyp(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypProvTyp(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv2bDerivPlOfSvcCd
	 *	@return hv2bDerivPlOfSvcCd
	 */
   public char[] getHv2bDerivPlOfSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2bDerivPlOfSvcCd(index);
   }

  
	/**
	*  set variable hv2bDerivPlOfSvcCd
	*  @param value
	**/
   public void setHv2bDerivPlOfSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2bDerivPlOfSvcCd((index),value);
   } 

	/**
	 *	Returns the value of d51uPtypDrvSvc
	 *	@return d51uPtypDrvSvc
	 */
   public char[] getD51uPtypDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).getD51uPtypDrvSvc();
   }

  
	/**
	*  set variable d51uPtypDrvSvc
	*  @param value
	**/
   public void setD51uPtypDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(value);
   } 

     /**
	 * 	Update D51uPtypDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uPtypDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uPtypDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uPtypDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uPtypDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uPtypDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uPtypDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulProvTyp().getD51uRetRuleProvTyp(index).setD51uPtypDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv2pProvTyp
	 *	@return hv2pProvTyp
	 */
   public char[] getHv2pProvTyp(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2pProvTyp(index);
   }

  
	/**
	*  set variable hv2pProvTyp
	*  @param value
	**/
   public void setHv2pProvTyp(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2pProvTyp((index),value);
   } 


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCombcr.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public MoveCsptypOutCtx clone() {
        MoveCsptypOutCtx cloneObj = new MoveCsptypOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCombcr = new HvHostVariablesCombcr();
        cloneObj.hvHostVariablesCombcr.set(hvHostVariablesCombcr.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public MoveCsptypOutCtx getMoveCsptypOutCtx() {
            return new MoveCsptypOutCtx();
    }
     public class MoveCsfcndInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCombcr hvHostVariablesCombcr = D529351uCtx.this.getHvHostVariablesCombcr();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();


public void setHv2dIndex(int hv2dIndex) { 
    D529351uCtx.this.hv2dIndex = hv2dIndex;
}

public int getHv2dIndex() { 
    return D529351uCtx.this.hv2dIndex;
}
	/**
	 *	Returns the value of hv2dDerivCausCd
	 *	@return hv2dDerivCausCd
	 */
   public char[] getHv2dDerivCausCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2dDerivCausCd(index);
   }

  
	/**
	*  set variable hv2dDerivCausCd
	*  @param value
	**/
   public void setHv2dDerivCausCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2dDerivCausCd((index),value);
   } 

	/**
	 *	Returns the value of hv2cDerivSvcCd
	 *	@return hv2cDerivSvcCd
	 */
   public char[] getHv2cDerivSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2cDerivSvcCd(index);
   }

  
	/**
	*  set variable hv2cDerivSvcCd
	*  @param value
	**/
   public void setHv2cDerivSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2cDerivSvcCd((index),value);
   } 


public void setHv2cIndex(int hv2cIndex) { 
    D529351uCtx.this.hv2cIndex = hv2cIndex;
}

public int getHv2cIndex() { 
    return D529351uCtx.this.hv2cIndex;
}
	/**
	 *	Returns the value of fcndSub
	 *	@return fcndSub
	 */
	public int getFcndSub() throws CFException {        
   		return work.getFcndSub();
	}
	
	/**
	 * 	Update FcndSub with the passed value
	 *	@param number
	 */
	public void setFcndSub(int number)  throws CFException{
		work.setFcndSub(number);
	}


	public void setFcndSub(long number)  throws CFException{
		work.setFcndSub((int)number);
	}



public void setHv2bIndex(int hv2bIndex) { 
    D529351uCtx.this.hv2bIndex = hv2bIndex;
}

public int getHv2bIndex() { 
    return D529351uCtx.this.hv2bIndex;
}

public void setHv2qIndex(int hv2qIndex) { 
    D529351uCtx.this.hv2qIndex = hv2qIndex;
}

public int getHv2qIndex() { 
    return D529351uCtx.this.hv2qIndex;
}
	/**
	 *	Returns the value of hv2bDerivPlOfSvcCd
	 *	@return hv2bDerivPlOfSvcCd
	 */
   public char[] getHv2bDerivPlOfSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2bDerivPlOfSvcCd(index);
   }

  
	/**
	*  set variable hv2bDerivPlOfSvcCd
	*  @param value
	**/
   public void setHv2bDerivPlOfSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2bDerivPlOfSvcCd((index),value);
   } 

	/**
	 *	Returns the value of hv2qFromCondPos
	 *	@return hv2qFromCondPos
	 */
   public char[] getHv2qFromCondPos(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2qFromCondPos(index);
   }

  
	/**
	*  set variable hv2qFromCondPos
	*  @param value
	**/
   public void setHv2qFromCondPos(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2qFromCondPos((index),value);
   } 


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public MoveCsfcndOutCtx getMoveCsfcndOutCtx() {
            return new MoveCsfcndOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCombcr.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public MoveCsfcndInCtx clone() {
        MoveCsfcndInCtx cloneObj = new MoveCsfcndInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCombcr = new HvHostVariablesCombcr();
        cloneObj.hvHostVariablesCombcr.set(hvHostVariablesCombcr.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public MoveCsfcndInCtx getMoveCsfcndInCtx() {
            return new MoveCsfcndInCtx();
    }
     public class MoveCsfcndOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCombcr hvHostVariablesCombcr = D529351uCtx.this.getHvHostVariablesCombcr();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();

	/**
	 *	Returns the value of hv2dDerivCausCd
	 *	@return hv2dDerivCausCd
	 */
   public char[] getHv2dDerivCausCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2dDerivCausCd(index);
   }

  
	/**
	*  set variable hv2dDerivCausCd
	*  @param value
	**/
   public void setHv2dDerivCausCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2dDerivCausCd((index),value);
   } 

	/**
	 *	Returns the value of hv2cDerivSvcCd
	 *	@return hv2cDerivSvcCd
	 */
   public char[] getHv2cDerivSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2cDerivSvcCd(index);
   }

  
	/**
	*  set variable hv2cDerivSvcCd
	*  @param value
	**/
   public void setHv2cDerivSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2cDerivSvcCd((index),value);
   } 

	/**
	 *	Returns the value of d51uFcndFromCondPos
	 *	@return d51uFcndFromCondPos
	 */
   public char[] getD51uFcndFromCondPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).getD51uFcndFromCondPos();
   }

  
	/**
	*  set variable d51uFcndFromCondPos
	*  @param value
	**/
   public void setD51uFcndFromCondPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(value);
   } 

     /**
	 * 	Update D51uFcndFromCondPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFcndFromCondPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source, sourceIndex);
   	
   }
   
   public void setD51uFcndFromCondPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFcndFromCondPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndFromCondPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFcndFromCondPos with another Field
	 *	@param value
	 */
   public void setD51uFcndFromCondPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source);
   }  
   
     /**
	 * 	Update D51uFcndFromCondPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFcndFromCondPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFcndFromCondPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndFromCondPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndFromCondPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uFcndDrvPos
	 *	@return d51uFcndDrvPos
	 */
   public char[] getD51uFcndDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).getD51uFcndDrvPos();
   }

  
	/**
	*  set variable d51uFcndDrvPos
	*  @param value
	**/
   public void setD51uFcndDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(value);
   } 

     /**
	 * 	Update D51uFcndDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uFcndDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFcndDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFcndDrvPos with another Field
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source);
   }  
   
     /**
	 * 	Update D51uFcndDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFcndDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of fcndSub
	 *	@return fcndSub
	 */
	public int getFcndSub() throws CFException {        
   		return work.getFcndSub();
	}
	
	/**
	 * 	Update FcndSub with the passed value
	 *	@param number
	 */
	public void setFcndSub(int number)  throws CFException{
		work.setFcndSub(number);
	}


	public void setFcndSub(long number)  throws CFException{
		work.setFcndSub((int)number);
	}


	/**
	 *	Returns the value of d51uFcndDrvSvc
	 *	@return d51uFcndDrvSvc
	 */
   public char[] getD51uFcndDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).getD51uFcndDrvSvc();
   }

  
	/**
	*  set variable d51uFcndDrvSvc
	*  @param value
	**/
   public void setD51uFcndDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(value);
   } 

     /**
	 * 	Update D51uFcndDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uFcndDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFcndDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFcndDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uFcndDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFcndDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv2bDerivPlOfSvcCd
	 *	@return hv2bDerivPlOfSvcCd
	 */
   public char[] getHv2bDerivPlOfSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2bDerivPlOfSvcCd(index);
   }

  
	/**
	*  set variable hv2bDerivPlOfSvcCd
	*  @param value
	**/
   public void setHv2bDerivPlOfSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2bDerivPlOfSvcCd((index),value);
   } 

	/**
	 *	Returns the value of hv2qFromCondPos
	 *	@return hv2qFromCondPos
	 */
   public char[] getHv2qFromCondPos(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2qFromCondPos(index);
   }

  
	/**
	*  set variable hv2qFromCondPos
	*  @param value
	**/
   public void setHv2qFromCondPos(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2qFromCondPos((index),value);
   } 

	/**
	 *	Test condition "Y" for isPosFound()
	 *	@return  Returns true if isPosFound() is "Y"
	 */
   public boolean isPosFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isPosFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setPosFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setPosFoundTrue();
   	}
	/**
	 *	Returns the value of d51uFcndCnt
	 *	@return d51uFcndCnt
	 */
	public int getD51uFcndCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uFcndCnt();
	}
	
	/**
	 * 	Update D51uFcndCnt with the passed value
	 *	@param number
	 */
	public void setD51uFcndCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uFcndCnt(number);
	}


	public void setD51uFcndCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uFcndCnt((int)number);
	}


	/**
	 *	Returns the value of d51uFcndDrvCau
	 *	@return d51uFcndDrvCau
	 */
   public char[] getD51uFcndDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).getD51uFcndDrvCau();
   }

  
	/**
	*  set variable d51uFcndDrvCau
	*  @param value
	**/
   public void setD51uFcndDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(value);
   } 

     /**
	 * 	Update D51uFcndDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uFcndDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uFcndDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uFcndDrvCau with another Field
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source);
   }  
   
     /**
	 * 	Update D51uFcndDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uFcndDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uFcndDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulFrCondPos().getD51uRetRuleFrCondPos(index).setD51uFcndDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCombcr.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public MoveCsfcndOutCtx clone() {
        MoveCsfcndOutCtx cloneObj = new MoveCsfcndOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCombcr = new HvHostVariablesCombcr();
        cloneObj.hvHostVariablesCombcr.set(hvHostVariablesCombcr.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public MoveCsfcndOutCtx getMoveCsfcndOutCtx() {
            return new MoveCsfcndOutCtx();
    }
     public class MoveCflgTableInCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCombcr hvHostVariablesCombcr = D529351uCtx.this.getHvHostVariablesCombcr();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();


public void setHv2dIndex(int hv2dIndex) { 
    D529351uCtx.this.hv2dIndex = hv2dIndex;
}

public int getHv2dIndex() { 
    return D529351uCtx.this.hv2dIndex;
}

public void setHv2uIndex(int hv2uIndex) { 
    D529351uCtx.this.hv2uIndex = hv2uIndex;
}

public int getHv2uIndex() { 
    return D529351uCtx.this.hv2uIndex;
}
	/**
	 *	Returns the value of cflgSub
	 *	@return cflgSub
	 */
	public int getCflgSub() throws CFException {        
   		return work.getCflgSub();
	}
	
	/**
	 * 	Update CflgSub with the passed value
	 *	@param number
	 */
	public void setCflgSub(int number)  throws CFException{
		work.setCflgSub(number);
	}


	public void setCflgSub(long number)  throws CFException{
		work.setCflgSub((int)number);
	}


	/**
	 *	Returns the value of hv2dDerivCausCd
	 *	@return hv2dDerivCausCd
	 */
   public char[] getHv2dDerivCausCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2dDerivCausCd(index);
   }

  
	/**
	*  set variable hv2dDerivCausCd
	*  @param value
	**/
   public void setHv2dDerivCausCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2dDerivCausCd((index),value);
   } 

	/**
	 *	Returns the value of hv2cDerivSvcCd
	 *	@return hv2cDerivSvcCd
	 */
   public char[] getHv2cDerivSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2cDerivSvcCd(index);
   }

  
	/**
	*  set variable hv2cDerivSvcCd
	*  @param value
	**/
   public void setHv2cDerivSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2cDerivSvcCd((index),value);
   } 


public void setHv2cIndex(int hv2cIndex) { 
    D529351uCtx.this.hv2cIndex = hv2cIndex;
}

public int getHv2cIndex() { 
    return D529351uCtx.this.hv2cIndex;
}

public void setHv2bIndex(int hv2bIndex) { 
    D529351uCtx.this.hv2bIndex = hv2bIndex;
}

public int getHv2bIndex() { 
    return D529351uCtx.this.hv2bIndex;
}
	/**
	 *	Returns the value of hv2bDerivPlOfSvcCd
	 *	@return hv2bDerivPlOfSvcCd
	 */
   public char[] getHv2bDerivPlOfSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2bDerivPlOfSvcCd(index);
   }

  
	/**
	*  set variable hv2bDerivPlOfSvcCd
	*  @param value
	**/
   public void setHv2bDerivPlOfSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2bDerivPlOfSvcCd((index),value);
   } 

	/**
	 *	Returns the value of hv2uCpeDescCd
	 *	@return hv2uCpeDescCd
	 */
   public char[] getHv2uCpeDescCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2uCpeDescCd(index);
   }

  
	/**
	*  set variable hv2uCpeDescCd
	*  @param value
	**/
   public void setHv2uCpeDescCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2uCpeDescCd((index),value);
   } 


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public MoveCflgTableOutCtx getMoveCflgTableOutCtx() {
            return new MoveCflgTableOutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCombcr.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public MoveCflgTableInCtx clone() {
        MoveCflgTableInCtx cloneObj = new MoveCflgTableInCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCombcr = new HvHostVariablesCombcr();
        cloneObj.hvHostVariablesCombcr.set(hvHostVariablesCombcr.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public MoveCflgTableInCtx getMoveCflgTableInCtx() {
            return new MoveCflgTableInCtx();
    }
     public class MoveCflgTableOutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCombcr hvHostVariablesCombcr = D529351uCtx.this.getHvHostVariablesCombcr();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();

	/**
	 *	Returns the value of d51uCflgDrvSvc
	 *	@return d51uCflgDrvSvc
	 */
   public char[] getD51uCflgDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).getD51uCflgDrvSvc();
   }

  
	/**
	*  set variable d51uCflgDrvSvc
	*  @param value
	**/
   public void setD51uCflgDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(value);
   } 

     /**
	 * 	Update D51uCflgDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCflgDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uCflgDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCflgDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCflgDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uCflgDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uCflgDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCflgDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCflgDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uCflgCnt
	 *	@return d51uCflgCnt
	 */
	public int getD51uCflgCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uCflgCnt();
	}
	
	/**
	 * 	Update D51uCflgCnt with the passed value
	 *	@param number
	 */
	public void setD51uCflgCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uCflgCnt(number);
	}


	public void setD51uCflgCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uCflgCnt((int)number);
	}


	/**
	 *	Returns the value of cflgSub
	 *	@return cflgSub
	 */
	public int getCflgSub() throws CFException {        
   		return work.getCflgSub();
	}
	
	/**
	 * 	Update CflgSub with the passed value
	 *	@param number
	 */
	public void setCflgSub(int number)  throws CFException{
		work.setCflgSub(number);
	}


	public void setCflgSub(long number)  throws CFException{
		work.setCflgSub((int)number);
	}


	/**
	 *	Test condition "Y" for isCflgFound()
	 *	@return  Returns true if isCflgFound() is "Y"
	 */
   public boolean isCflgFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isCflgFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setCflgFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setCflgFoundTrue();
   	}
	/**
	 *	Returns the value of hv2dDerivCausCd
	 *	@return hv2dDerivCausCd
	 */
   public char[] getHv2dDerivCausCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2dDerivCausCd(index);
   }

  
	/**
	*  set variable hv2dDerivCausCd
	*  @param value
	**/
   public void setHv2dDerivCausCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2dDerivCausCd((index),value);
   } 

	/**
	 *	Returns the value of d51uCflgCpeDescCd
	 *	@return d51uCflgCpeDescCd
	 */
   public char[] getD51uCflgCpeDescCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).getD51uCflgCpeDescCd();
   }

  
	/**
	*  set variable d51uCflgCpeDescCd
	*  @param value
	**/
   public void setD51uCflgCpeDescCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgCpeDescCd(value);
   } 

     /**
	 * 	Update D51uCflgCpeDescCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCflgCpeDescCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgCpeDescCd(source, sourceIndex);
   	
   }
   
   public void setD51uCflgCpeDescCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgCpeDescCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCflgCpeDescCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgCpeDescCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgCpeDescCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCflgCpeDescCd with another Field
	 *	@param value
	 */
   public void setD51uCflgCpeDescCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgCpeDescCd(source);
   }  
   
     /**
	 * 	Update D51uCflgCpeDescCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCflgCpeDescCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgCpeDescCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCflgCpeDescCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgCpeDescCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgCpeDescCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv2cDerivSvcCd
	 *	@return hv2cDerivSvcCd
	 */
   public char[] getHv2cDerivSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2cDerivSvcCd(index);
   }

  
	/**
	*  set variable hv2cDerivSvcCd
	*  @param value
	**/
   public void setHv2cDerivSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2cDerivSvcCd((index),value);
   } 

	/**
	 *	Returns the value of d51uCflgDrvPos
	 *	@return d51uCflgDrvPos
	 */
   public char[] getD51uCflgDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).getD51uCflgDrvPos();
   }

  
	/**
	*  set variable d51uCflgDrvPos
	*  @param value
	**/
   public void setD51uCflgDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(value);
   } 

     /**
	 * 	Update D51uCflgDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCflgDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uCflgDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCflgDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCflgDrvPos with another Field
	 *	@param value
	 */
   public void setD51uCflgDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source);
   }  
   
     /**
	 * 	Update D51uCflgDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCflgDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCflgDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv2bDerivPlOfSvcCd
	 *	@return hv2bDerivPlOfSvcCd
	 */
   public char[] getHv2bDerivPlOfSvcCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2bDerivPlOfSvcCd(index);
   }

  
	/**
	*  set variable hv2bDerivPlOfSvcCd
	*  @param value
	**/
   public void setHv2bDerivPlOfSvcCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2bDerivPlOfSvcCd((index),value);
   } 

	/**
	 *	Returns the value of hv2uCpeDescCd
	 *	@return hv2uCpeDescCd
	 */
   public char[] getHv2uCpeDescCd(int index) throws CFException  {              
   		return hvHostVariablesCombcr.getHv2uCpeDescCd(index);
   }

  
	/**
	*  set variable hv2uCpeDescCd
	*  @param value
	**/
   public void setHv2uCpeDescCd(int index,char[] value) throws CFException {
      hvHostVariablesCombcr.setHv2uCpeDescCd((index),value);
   } 

	/**
	 *	Returns the value of d51uCflgDrvCau
	 *	@return d51uCflgDrvCau
	 */
   public char[] getD51uCflgDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).getD51uCflgDrvCau();
   }

  
	/**
	*  set variable d51uCflgDrvCau
	*  @param value
	**/
   public void setD51uCflgDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(value);
   } 

     /**
	 * 	Update D51uCflgDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uCflgDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uCflgDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uCflgDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uCflgDrvCau with another Field
	 *	@param value
	 */
   public void setD51uCflgDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source);
   }  
   
     /**
	 * 	Update D51uCflgDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uCflgDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uCflgDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uCflgDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulCpeFlgData().getD51uRetRulCpeFlg(index).setD51uCflgDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCombcr.hashCode();
        str += vyspi51uCallArea.hashCode();
       return str.hashCode();
    }

    public MoveCflgTableOutCtx clone() {
        MoveCflgTableOutCtx cloneObj = new MoveCflgTableOutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCombcr = new HvHostVariablesCombcr();
        cloneObj.hvHostVariablesCombcr.set(hvHostVariablesCombcr.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        return cloneObj;
    }

    }

    public MoveCflgTableOutCtx getMoveCflgTableOutCtx() {
            return new MoveCflgTableOutCtx();
    }
     public class ProcessFuncCd3InCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     LstIcdKey lstIcdKey = D529351uCtx.this.getLstIcdKey();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DclfeSpiRuleIcd dclfeSpiRuleIcd = D529351uCtx.this.getDclfeSpiRuleIcd();

	/**
	 *	Test condition "Y" for isFirstTimeMoreIcd()
	 *	@return  Returns true if isFirstTimeMoreIcd() is "Y"
	 */
   public boolean isFirstTimeMoreIcd() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isFirstTimeMoreIcd();
   }

	/**
	*  set values "Y"
	*/
   	public void setFirstTimeMoreIcdTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setFirstTimeMoreIcdTrue();
   	}
	/**
	 *	Returns the value of d51uKeyFeSpi
	 *	@return d51uKeyFeSpi
	 */
   public char[] getD51uKeyFeSpi() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyFeSpi();
   }

  
	/**
	*  set variable d51uKeyFeSpi
	*  @param value
	**/
   public void setD51uKeyFeSpi(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(value);
   } 

     /**
	 * 	Update D51uKeyFeSpi 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyFeSpi(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex);
   	
   }
   
   public void setD51uKeyFeSpi(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyFeSpi(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyFeSpi with another Field
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source);
   }  
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}


	/**
	 *	Returns the value of d51uLstClmIcdCau
	 *	@return d51uLstClmIcdCau
	 */
   public char[] getD51uLstClmIcdCau() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().getD51uLstClmIcdCau();
   }

  
	/**
	*  set variable d51uLstClmIcdCau
	*  @param value
	**/
   public void setD51uLstClmIcdCau(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(value);
   } 

     /**
	 * 	Update D51uLstClmIcdCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uLstClmIcdCau(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source, sourceIndex);
   	
   }
   
   public void setD51uLstClmIcdCau(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uLstClmIcdCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdCau(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uLstClmIcdCau with another Field
	 *	@param value
	 */
   public void setD51uLstClmIcdCau(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source);
   }  
   
     /**
	 * 	Update D51uLstClmIcdCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uLstClmIcdCau(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uLstClmIcdCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdCau(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uLstClmIcdPos
	 *	@return d51uLstClmIcdPos
	 */
   public char[] getD51uLstClmIcdPos() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().getD51uLstClmIcdPos();
   }

  
	/**
	*  set variable d51uLstClmIcdPos
	*  @param value
	**/
   public void setD51uLstClmIcdPos(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(value);
   } 

     /**
	 * 	Update D51uLstClmIcdPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uLstClmIcdPos(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source, sourceIndex);
   	
   }
   
   public void setD51uLstClmIcdPos(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uLstClmIcdPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdPos(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uLstClmIcdPos with another Field
	 *	@param value
	 */
   public void setD51uLstClmIcdPos(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source);
   }  
   
     /**
	 * 	Update D51uLstClmIcdPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uLstClmIcdPos(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uLstClmIcdPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdPos(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uLstClmIcdInd
	 *	@return d51uLstClmIcdInd
	 */
   public char[] getD51uLstClmIcdInd() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().getD51uLstClmIcdInd();
   }

  
	/**
	*  set variable d51uLstClmIcdInd
	*  @param value
	**/
   public void setD51uLstClmIcdInd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(value);
   } 

     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex);
   	
   }
   
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uLstClmIcdInd with another Field
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source);
   }  
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uLstClmIcdSvc
	 *	@return d51uLstClmIcdSvc
	 */
   public char[] getD51uLstClmIcdSvc() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().getD51uLstClmIcdSvc();
   }

  
	/**
	*  set variable d51uLstClmIcdSvc
	*  @param value
	**/
   public void setD51uLstClmIcdSvc(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(value);
   } 

     /**
	 * 	Update D51uLstClmIcdSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uLstClmIcdSvc(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source, sourceIndex);
   	
   }
   
   public void setD51uLstClmIcdSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uLstClmIcdSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uLstClmIcdSvc with another Field
	 *	@param value
	 */
   public void setD51uLstClmIcdSvc(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source);
   }  
   
     /**
	 * 	Update D51uLstClmIcdSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uLstClmIcdSvc(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uLstClmIcdSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public ProcessFuncCd3OutCtx getProcessFuncCd3OutCtx() {
            return new ProcessFuncCd3OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += lstIcdKey.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dclfeSpiRuleIcd.hashCode();
       return str.hashCode();
    }

    public ProcessFuncCd3InCtx clone() {
        ProcessFuncCd3InCtx cloneObj = new ProcessFuncCd3InCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.lstIcdKey = new LstIcdKey();
        cloneObj.lstIcdKey.set(lstIcdKey.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dclfeSpiRuleIcd = new DclfeSpiRuleIcd();
        cloneObj.dclfeSpiRuleIcd.set(dclfeSpiRuleIcd.getClonedField());
        return cloneObj;
    }

    }

    public ProcessFuncCd3InCtx getProcessFuncCd3InCtx() {
            return new ProcessFuncCd3InCtx();
    }
     public class ProcessFuncCd3OutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     LstIcdKey lstIcdKey = D529351uCtx.this.getLstIcdKey();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     DclfeSpiRuleIcd dclfeSpiRuleIcd = D529351uCtx.this.getDclfeSpiRuleIcd();

	/**
	 *	Returns the value of lstClmIcdSvc
	 *	@return lstClmIcdSvc
	 */
   public char[] getLstClmIcdSvc() throws CFException  {              
   		return lstIcdKey.getLstClmIcdSvc();
   }

  
	/**
	*  set variable lstClmIcdSvc
	*  @param value
	**/
   public void setLstClmIcdSvc(char[] value) throws CFException {
      lstIcdKey.setLstClmIcdSvc(value);
   } 

     /**
	 * 	Update LstClmIcdSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setLstClmIcdSvc(char[] source, int sourceIndex) throws CFException {
      lstIcdKey.setLstClmIcdSvc(source, sourceIndex);
   	
   }
   
   public void setLstClmIcdSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      lstIcdKey.setLstClmIcdSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update LstClmIcdSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setLstClmIcdSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      lstIcdKey.setLstClmIcdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update LstClmIcdSvc with another Field
	 *	@param value
	 */
   public void setLstClmIcdSvc(Field source) {
      lstIcdKey.setLstClmIcdSvc(source);
   }  
   
     /**
	 * 	Update LstClmIcdSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setLstClmIcdSvc(Field source, int sourceIndex,int sourceLen) {
      lstIcdKey.setLstClmIcdSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update LstClmIcdSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setLstClmIcdSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      lstIcdKey.setLstClmIcdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdDerivSvcCd
	 *	@return ricdDerivSvcCd
	 */
   public char[] getRicdDerivSvcCd() throws CFException  {              
   		return dclfeSpiRuleIcd.getRicdDerivSvcCd();
   }

  
	/**
	*  set variable ricdDerivSvcCd
	*  @param value
	**/
   public void setRicdDerivSvcCd(char[] value) throws CFException {
      dclfeSpiRuleIcd.setRicdDerivSvcCd(value);
   } 

     /**
	 * 	Update RicdDerivSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdDerivSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIcd.setRicdDerivSvcCd(source, sourceIndex);
   	
   }
   
   public void setRicdDerivSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIcd.setRicdDerivSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdDerivSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdDerivSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdDerivSvcCd with another Field
	 *	@param value
	 */
   public void setRicdDerivSvcCd(Field source) {
      dclfeSpiRuleIcd.setRicdDerivSvcCd(source);
   }  
   
     /**
	 * 	Update RicdDerivSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdDerivSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIcd.setRicdDerivSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdDerivSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdDerivSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdDerivSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uKeyFeSpi
	 *	@return d51uKeyFeSpi
	 */
   public char[] getD51uKeyFeSpi() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uKey().getD51uKeyFeSpi();
   }

  
	/**
	*  set variable d51uKeyFeSpi
	*  @param value
	**/
   public void setD51uKeyFeSpi(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(value);
   } 

     /**
	 * 	Update D51uKeyFeSpi 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uKeyFeSpi(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex);
   	
   }
   
   public void setD51uKeyFeSpi(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyFeSpi(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uKeyFeSpi with another Field
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source);
   }  
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uKeyFeSpi 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uKeyFeSpi(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uKey().setD51uKeyFeSpi(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdDerivPlOfSvcCd
	 *	@return ricdDerivPlOfSvcCd
	 */
   public char[] getRicdDerivPlOfSvcCd() throws CFException  {              
   		return dclfeSpiRuleIcd.getRicdDerivPlOfSvcCd();
   }

  
	/**
	*  set variable ricdDerivPlOfSvcCd
	*  @param value
	**/
   public void setRicdDerivPlOfSvcCd(char[] value) throws CFException {
      dclfeSpiRuleIcd.setRicdDerivPlOfSvcCd(value);
   } 

     /**
	 * 	Update RicdDerivPlOfSvcCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdDerivPlOfSvcCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIcd.setRicdDerivPlOfSvcCd(source, sourceIndex);
   	
   }
   
   public void setRicdDerivPlOfSvcCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIcd.setRicdDerivPlOfSvcCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdDerivPlOfSvcCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdDerivPlOfSvcCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdDerivPlOfSvcCd with another Field
	 *	@param value
	 */
   public void setRicdDerivPlOfSvcCd(Field source) {
      dclfeSpiRuleIcd.setRicdDerivPlOfSvcCd(source);
   }  
   
     /**
	 * 	Update RicdDerivPlOfSvcCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIcd.setRicdDerivPlOfSvcCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdDerivPlOfSvcCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdDerivPlOfSvcCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdDerivPlOfSvcCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uLstClmIcdCau
	 *	@return d51uLstClmIcdCau
	 */
   public char[] getD51uLstClmIcdCau() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().getD51uLstClmIcdCau();
   }

  
	/**
	*  set variable d51uLstClmIcdCau
	*  @param value
	**/
   public void setD51uLstClmIcdCau(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(value);
   } 

     /**
	 * 	Update D51uLstClmIcdCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uLstClmIcdCau(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source, sourceIndex);
   	
   }
   
   public void setD51uLstClmIcdCau(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uLstClmIcdCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdCau(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uLstClmIcdCau with another Field
	 *	@param value
	 */
   public void setD51uLstClmIcdCau(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source);
   }  
   
     /**
	 * 	Update D51uLstClmIcdCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uLstClmIcdCau(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uLstClmIcdCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdCau(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition " " for isMoreIcdNotFound()
	 *	@return  Returns true if isMoreIcdNotFound() is " "
	 */
   public boolean isMoreIcdNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isMoreIcdNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setMoreIcdNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setMoreIcdNotFoundTrue();
   	}
	/**
	 *	Returns the value of d51uMoreIcdCnt
	 *	@return d51uMoreIcdCnt
	 */
	public int getD51uMoreIcdCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uMoreIcdCnt();
	}
	
	/**
	 * 	Update D51uMoreIcdCnt with the passed value
	 *	@param number
	 */
	public void setD51uMoreIcdCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uMoreIcdCnt(number);
	}


	public void setD51uMoreIcdCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uMoreIcdCnt((int)number);
	}


	/**
	 *	Returns the value of d51uLstClmIcdPos
	 *	@return d51uLstClmIcdPos
	 */
   public char[] getD51uLstClmIcdPos() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().getD51uLstClmIcdPos();
   }

  
	/**
	*  set variable d51uLstClmIcdPos
	*  @param value
	**/
   public void setD51uLstClmIcdPos(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(value);
   } 

     /**
	 * 	Update D51uLstClmIcdPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uLstClmIcdPos(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source, sourceIndex);
   	
   }
   
   public void setD51uLstClmIcdPos(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uLstClmIcdPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdPos(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uLstClmIcdPos with another Field
	 *	@param value
	 */
   public void setD51uLstClmIcdPos(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source);
   }  
   
     /**
	 * 	Update D51uLstClmIcdPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uLstClmIcdPos(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uLstClmIcdPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdPos(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isCloseCsrOk()
	 *	@return  Returns true if isCloseCsrOk() is "Y"
	 */
   public boolean isCloseCsrOk() throws CFException {
      return work.isCloseCsrOk();
   }

	/**
	*  set values "Y"
	*/
   	public void setCloseCsrOkTrue()  throws CFException{  			
    	work.setCloseCsrOkTrue();
   	}
	/**
	 *	Returns the value of ricdSpiTblId
	 *	@return ricdSpiTblId
	 */
   public char[] getRicdSpiTblId() throws CFException  {              
   		return dclfeSpiRuleIcd.getRicdSpiTblId();
   }

  
	/**
	*  set variable ricdSpiTblId
	*  @param value
	**/
   public void setRicdSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleIcd.setRicdSpiTblId(value);
   } 

     /**
	 * 	Update RicdSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex);
   	
   }
   
   public void setRicdSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdSpiTblId with another Field
	 *	@param value
	 */
   public void setRicdSpiTblId(Field source) {
      dclfeSpiRuleIcd.setRicdSpiTblId(source);
   }  
   
     /**
	 * 	Update RicdSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sub
	 *	@return sub
	 */
	public int getSub() throws CFException {        
   		return work.getSub();
	}
	
	/**
	 * 	Update Sub with the passed value
	 *	@param number
	 */
	public void setSub(int number)  throws CFException{
		work.setSub(number);
	}


	public void setSub(long number)  throws CFException{
		work.setSub((int)number);
	}


	/**
	 *	Returns the value of d51uRetRuleIcd
	 *	@return d51uRetRuleIcd
	 */   
	 public D51uRetRuleIcd getD51uRetRuleIcd(int index) {
   	return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index);
   }

    public List<D51uRetRuleIcd> getD51uRetRuleIcd() {
        return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd();
    }
   /**
	* 	Update D51uRetRuleIcd with the passed value
	*	@param value
	*/
   public void setD51uRetRuleIcd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().setD51uRetRuleIcd((index),value);
   }   


	/**
	 *	Returns the value of lstClmIcdInd
	 *	@return lstClmIcdInd
	 */
   public char[] getLstClmIcdInd() throws CFException  {              
   		return lstIcdKey.getLstClmIcdInd();
   }

  
	/**
	*  set variable lstClmIcdInd
	*  @param value
	**/
   public void setLstClmIcdInd(char[] value) throws CFException {
      lstIcdKey.setLstClmIcdInd(value);
   } 

     /**
	 * 	Update LstClmIcdInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setLstClmIcdInd(char[] source, int sourceIndex) throws CFException {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex);
   	
   }
   
   public void setLstClmIcdInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update LstClmIcdInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setLstClmIcdInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update LstClmIcdInd with another Field
	 *	@param value
	 */
   public void setLstClmIcdInd(Field source) {
      lstIcdKey.setLstClmIcdInd(source);
   }  
   
     /**
	 * 	Update LstClmIcdInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setLstClmIcdInd(Field source, int sourceIndex,int sourceLen) {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update LstClmIcdInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setLstClmIcdInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "N" for isNotEndOfFetchIcd()
	 *	@return  Returns true if isNotEndOfFetchIcd() is "N"
	 */
   public boolean isNotEndOfFetchIcd() throws CFException {
      return work.isNotEndOfFetchIcd();
   }

	/**
	*  set values "N"
	*/
   	public void setNotEndOfFetchIcdTrue()  throws CFException{  			
    	work.setNotEndOfFetchIcdTrue();
   	}
	/**
	 *	Returns the value of ricdDerivCausCd
	 *	@return ricdDerivCausCd
	 */
   public char[] getRicdDerivCausCd() throws CFException  {              
   		return dclfeSpiRuleIcd.getRicdDerivCausCd();
   }

  
	/**
	*  set variable ricdDerivCausCd
	*  @param value
	**/
   public void setRicdDerivCausCd(char[] value) throws CFException {
      dclfeSpiRuleIcd.setRicdDerivCausCd(value);
   } 

     /**
	 * 	Update RicdDerivCausCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdDerivCausCd(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIcd.setRicdDerivCausCd(source, sourceIndex);
   	
   }
   
   public void setRicdDerivCausCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIcd.setRicdDerivCausCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdDerivCausCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdDerivCausCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdDerivCausCd with another Field
	 *	@param value
	 */
   public void setRicdDerivCausCd(Field source) {
      dclfeSpiRuleIcd.setRicdDerivCausCd(source);
   }  
   
     /**
	 * 	Update RicdDerivCausCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdDerivCausCd(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIcd.setRicdDerivCausCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdDerivCausCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdDerivCausCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdDerivCausCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uLstClmIcdInd
	 *	@return d51uLstClmIcdInd
	 */
   public char[] getD51uLstClmIcdInd() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().getD51uLstClmIcdInd();
   }

  
	/**
	*  set variable d51uLstClmIcdInd
	*  @param value
	**/
   public void setD51uLstClmIcdInd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(value);
   } 

     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex);
   	
   }
   
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uLstClmIcdInd with another Field
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source);
   }  
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uLstClmIcdInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of lstClmIcdCau
	 *	@return lstClmIcdCau
	 */
   public char[] getLstClmIcdCau() throws CFException  {              
   		return lstIcdKey.getLstClmIcdCau();
   }

  
	/**
	*  set variable lstClmIcdCau
	*  @param value
	**/
   public void setLstClmIcdCau(char[] value) throws CFException {
      lstIcdKey.setLstClmIcdCau(value);
   } 

     /**
	 * 	Update LstClmIcdCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setLstClmIcdCau(char[] source, int sourceIndex) throws CFException {
      lstIcdKey.setLstClmIcdCau(source, sourceIndex);
   	
   }
   
   public void setLstClmIcdCau(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      lstIcdKey.setLstClmIcdCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update LstClmIcdCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setLstClmIcdCau(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      lstIcdKey.setLstClmIcdCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update LstClmIcdCau with another Field
	 *	@param value
	 */
   public void setLstClmIcdCau(Field source) {
      lstIcdKey.setLstClmIcdCau(source);
   }  
   
     /**
	 * 	Update LstClmIcdCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setLstClmIcdCau(Field source, int sourceIndex,int sourceLen) {
      lstIcdKey.setLstClmIcdCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update LstClmIcdCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setLstClmIcdCau(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      lstIcdKey.setLstClmIcdCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of icdSub
	 *	@return icdSub
	 */
	public int getIcdSub() throws CFException {        
   		return work.getIcdSub();
	}
	
	/**
	 * 	Update IcdSub with the passed value
	 *	@param number
	 */
	public void setIcdSub(int number)  throws CFException{
		work.setIcdSub(number);
	}


	public void setIcdSub(long number)  throws CFException{
		work.setIcdSub((int)number);
	}


	/**
	 *	Returns the value of lstClmIcdPos
	 *	@return lstClmIcdPos
	 */
   public char[] getLstClmIcdPos() throws CFException  {              
   		return lstIcdKey.getLstClmIcdPos();
   }

  
	/**
	*  set variable lstClmIcdPos
	*  @param value
	**/
   public void setLstClmIcdPos(char[] value) throws CFException {
      lstIcdKey.setLstClmIcdPos(value);
   } 

     /**
	 * 	Update LstClmIcdPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setLstClmIcdPos(char[] source, int sourceIndex) throws CFException {
      lstIcdKey.setLstClmIcdPos(source, sourceIndex);
   	
   }
   
   public void setLstClmIcdPos(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      lstIcdKey.setLstClmIcdPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update LstClmIcdPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setLstClmIcdPos(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      lstIcdKey.setLstClmIcdPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update LstClmIcdPos with another Field
	 *	@param value
	 */
   public void setLstClmIcdPos(Field source) {
      lstIcdKey.setLstClmIcdPos(source);
   }  
   
     /**
	 * 	Update LstClmIcdPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setLstClmIcdPos(Field source, int sourceIndex,int sourceLen) {
      lstIcdKey.setLstClmIcdPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update LstClmIcdPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setLstClmIcdPos(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      lstIcdKey.setLstClmIcdPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uLstClmIcdSvc
	 *	@return d51uLstClmIcdSvc
	 */
   public char[] getD51uLstClmIcdSvc() throws CFException  {              
   		return vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().getD51uLstClmIcdSvc();
   }

  
	/**
	*  set variable d51uLstClmIcdSvc
	*  @param value
	**/
   public void setD51uLstClmIcdSvc(char[] value) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(value);
   } 

     /**
	 * 	Update D51uLstClmIcdSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uLstClmIcdSvc(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source, sourceIndex);
   	
   }
   
   public void setD51uLstClmIcdSvc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uLstClmIcdSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdSvc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uLstClmIcdSvc with another Field
	 *	@param value
	 */
   public void setD51uLstClmIcdSvc(Field source) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source);
   }  
   
     /**
	 * 	Update D51uLstClmIcdSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uLstClmIcdSvc(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uLstClmIcdSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uLstClmIcdSvc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uRequestFields().getD51uLstIcdKey().setD51uLstClmIcdSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += lstIcdKey.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += dclfeSpiRuleIcd.hashCode();
       return str.hashCode();
    }

    public ProcessFuncCd3OutCtx clone() {
        ProcessFuncCd3OutCtx cloneObj = new ProcessFuncCd3OutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.lstIcdKey = new LstIcdKey();
        cloneObj.lstIcdKey.set(lstIcdKey.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.dclfeSpiRuleIcd = new DclfeSpiRuleIcd();
        cloneObj.dclfeSpiRuleIcd.set(dclfeSpiRuleIcd.getClonedField());
        return cloneObj;
    }

    }

    public ProcessFuncCd3OutCtx getProcessFuncCd3OutCtx() {
            return new ProcessFuncCd3OutCtx();
    }
     public class OpenCsicdCursor3200InCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     LstIcdKey lstIcdKey = D529351uCtx.this.getLstIcdKey();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     TestVariables testVariables = D529351uCtx.this.getTestVariables();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();
     DclfeSpiRuleIcd dclfeSpiRuleIcd = D529351uCtx.this.getDclfeSpiRuleIcd();

	/**
	 *	Returns the value of testDiag17
	 *	@return testDiag17
	 */
   public char[] getTestDiag17() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag17();
   }

  
	/**
	*  set variable testDiag17
	*  @param value
	**/
   public void setTestDiag17(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag17(value);
   } 

     /**
	 * 	Update TestDiag17 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag17(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag17(source, sourceIndex);
   	
   }
   
   public void setTestDiag17(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag17(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag17 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag17(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag17(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag17 with another Field
	 *	@param value
	 */
   public void setTestDiag17(Field source) {
      testVariables.getTestDiagArea().setTestDiag17(source);
   }  
   
     /**
	 * 	Update TestDiag17 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag17(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag17(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag17 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag17(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag17(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag01
	 *	@return testDiag01
	 */
   public char[] getTestDiag01() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag01();
   }

  
	/**
	*  set variable testDiag01
	*  @param value
	**/
   public void setTestDiag01(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag01(value);
   } 

     /**
	 * 	Update TestDiag01 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag01(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag01(source, sourceIndex);
   	
   }
   
   public void setTestDiag01(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag01(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag01 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag01(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag01 with another Field
	 *	@param value
	 */
   public void setTestDiag01(Field source) {
      testVariables.getTestDiagArea().setTestDiag01(source);
   }  
   
     /**
	 * 	Update TestDiag01 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag01(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag01(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag01 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag01(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag01(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag19
	 *	@return testDiag19
	 */
   public char[] getTestDiag19() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag19();
   }

  
	/**
	*  set variable testDiag19
	*  @param value
	**/
   public void setTestDiag19(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag19(value);
   } 

     /**
	 * 	Update TestDiag19 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag19(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag19(source, sourceIndex);
   	
   }
   
   public void setTestDiag19(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag19(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag19 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag19(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag19(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag19 with another Field
	 *	@param value
	 */
   public void setTestDiag19(Field source) {
      testVariables.getTestDiagArea().setTestDiag19(source);
   }  
   
     /**
	 * 	Update TestDiag19 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag19(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag19(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag19 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag19(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag19(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag22
	 *	@return testDiag22
	 */
   public char[] getTestDiag22() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag22();
   }

  
	/**
	*  set variable testDiag22
	*  @param value
	**/
   public void setTestDiag22(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag22(value);
   } 

     /**
	 * 	Update TestDiag22 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag22(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag22(source, sourceIndex);
   	
   }
   
   public void setTestDiag22(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag22(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag22 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag22(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag22(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag22 with another Field
	 *	@param value
	 */
   public void setTestDiag22(Field source) {
      testVariables.getTestDiagArea().setTestDiag22(source);
   }  
   
     /**
	 * 	Update TestDiag22 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag22(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag22(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag22 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag22(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag22(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag12
	 *	@return testDiag12
	 */
   public char[] getTestDiag12() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag12();
   }

  
	/**
	*  set variable testDiag12
	*  @param value
	**/
   public void setTestDiag12(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag12(value);
   } 

     /**
	 * 	Update TestDiag12 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag12(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag12(source, sourceIndex);
   	
   }
   
   public void setTestDiag12(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag12(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag12 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag12(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag12(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag12 with another Field
	 *	@param value
	 */
   public void setTestDiag12(Field source) {
      testVariables.getTestDiagArea().setTestDiag12(source);
   }  
   
     /**
	 * 	Update TestDiag12 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag12(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag12(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag12 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag12(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag12(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag15
	 *	@return testDiag15
	 */
   public char[] getTestDiag15() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag15();
   }

  
	/**
	*  set variable testDiag15
	*  @param value
	**/
   public void setTestDiag15(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag15(value);
   } 

     /**
	 * 	Update TestDiag15 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag15(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag15(source, sourceIndex);
   	
   }
   
   public void setTestDiag15(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag15(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag15 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag15(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag15 with another Field
	 *	@param value
	 */
   public void setTestDiag15(Field source) {
      testVariables.getTestDiagArea().setTestDiag15(source);
   }  
   
     /**
	 * 	Update TestDiag15 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag15(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag15(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag15 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag15(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag15(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag10
	 *	@return testDiag10
	 */
   public char[] getTestDiag10() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag10();
   }

  
	/**
	*  set variable testDiag10
	*  @param value
	**/
   public void setTestDiag10(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag10(value);
   } 

     /**
	 * 	Update TestDiag10 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag10(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag10(source, sourceIndex);
   	
   }
   
   public void setTestDiag10(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag10(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag10 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag10(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag10(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag10 with another Field
	 *	@param value
	 */
   public void setTestDiag10(Field source) {
      testVariables.getTestDiagArea().setTestDiag10(source);
   }  
   
     /**
	 * 	Update TestDiag10 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag10(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag10(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag10 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag10(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag10(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag24
	 *	@return testDiag24
	 */
   public char[] getTestDiag24() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag24();
   }

  
	/**
	*  set variable testDiag24
	*  @param value
	**/
   public void setTestDiag24(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag24(value);
   } 

     /**
	 * 	Update TestDiag24 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag24(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag24(source, sourceIndex);
   	
   }
   
   public void setTestDiag24(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag24(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag24 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag24(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag24(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag24 with another Field
	 *	@param value
	 */
   public void setTestDiag24(Field source) {
      testVariables.getTestDiagArea().setTestDiag24(source);
   }  
   
     /**
	 * 	Update TestDiag24 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag24(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag24(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag24 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag24(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag24(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dclfeSpiRuleIcd
	 *	@return dclfeSpiRuleIcd
	 */   
	 public DclfeSpiRuleIcd getDclfeSpiRuleIcd() {
   	return dclfeSpiRuleIcd;
   }


	/**
	 *	Returns the value of lstIcdKey
	 *	@return lstIcdKey
	 */   
	 public LstIcdKey getLstIcdKey() {
   	return lstIcdKey;
   }


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Test condition "Y" for isEndOfFetchIcd()
	 *	@return  Returns true if isEndOfFetchIcd() is "Y"
	 */
   public boolean isEndOfFetchIcd() throws CFException {
      return work.isEndOfFetchIcd();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfFetchIcdTrue()  throws CFException{  			
    	work.setEndOfFetchIcdTrue();
   	}
	/**
	 *	Returns the value of testDiag25
	 *	@return testDiag25
	 */
   public char[] getTestDiag25() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag25();
   }

  
	/**
	*  set variable testDiag25
	*  @param value
	**/
   public void setTestDiag25(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag25(value);
   } 

     /**
	 * 	Update TestDiag25 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag25(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag25(source, sourceIndex);
   	
   }
   
   public void setTestDiag25(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag25(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag25 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag25(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag25(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag25 with another Field
	 *	@param value
	 */
   public void setTestDiag25(Field source) {
      testVariables.getTestDiagArea().setTestDiag25(source);
   }  
   
     /**
	 * 	Update TestDiag25 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag25(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag25(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag25 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag25(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag25(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag03
	 *	@return testDiag03
	 */
   public char[] getTestDiag03() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag03();
   }

  
	/**
	*  set variable testDiag03
	*  @param value
	**/
   public void setTestDiag03(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag03(value);
   } 

     /**
	 * 	Update TestDiag03 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag03(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag03(source, sourceIndex);
   	
   }
   
   public void setTestDiag03(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag03(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag03 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag03(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag03(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag03 with another Field
	 *	@param value
	 */
   public void setTestDiag03(Field source) {
      testVariables.getTestDiagArea().setTestDiag03(source);
   }  
   
     /**
	 * 	Update TestDiag03 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag03(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag03(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag03 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag03(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag03(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag11
	 *	@return testDiag11
	 */
   public char[] getTestDiag11() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag11();
   }

  
	/**
	*  set variable testDiag11
	*  @param value
	**/
   public void setTestDiag11(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag11(value);
   } 

     /**
	 * 	Update TestDiag11 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag11(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag11(source, sourceIndex);
   	
   }
   
   public void setTestDiag11(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag11(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag11 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag11(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag11(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag11 with another Field
	 *	@param value
	 */
   public void setTestDiag11(Field source) {
      testVariables.getTestDiagArea().setTestDiag11(source);
   }  
   
     /**
	 * 	Update TestDiag11 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag11(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag11(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag11 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag11(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag11(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag09
	 *	@return testDiag09
	 */
   public char[] getTestDiag09() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag09();
   }

  
	/**
	*  set variable testDiag09
	*  @param value
	**/
   public void setTestDiag09(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag09(value);
   } 

     /**
	 * 	Update TestDiag09 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag09(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag09(source, sourceIndex);
   	
   }
   
   public void setTestDiag09(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag09(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag09 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag09(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag09(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag09 with another Field
	 *	@param value
	 */
   public void setTestDiag09(Field source) {
      testVariables.getTestDiagArea().setTestDiag09(source);
   }  
   
     /**
	 * 	Update TestDiag09 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag09(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag09(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag09 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag09(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag09(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag04
	 *	@return testDiag04
	 */
   public char[] getTestDiag04() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag04();
   }

  
	/**
	*  set variable testDiag04
	*  @param value
	**/
   public void setTestDiag04(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag04(value);
   } 

     /**
	 * 	Update TestDiag04 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag04(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag04(source, sourceIndex);
   	
   }
   
   public void setTestDiag04(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag04(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag04 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag04(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag04(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag04 with another Field
	 *	@param value
	 */
   public void setTestDiag04(Field source) {
      testVariables.getTestDiagArea().setTestDiag04(source);
   }  
   
     /**
	 * 	Update TestDiag04 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag04(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag04(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag04 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag04(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag04(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag07
	 *	@return testDiag07
	 */
   public char[] getTestDiag07() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag07();
   }

  
	/**
	*  set variable testDiag07
	*  @param value
	**/
   public void setTestDiag07(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag07(value);
   } 

     /**
	 * 	Update TestDiag07 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag07(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag07(source, sourceIndex);
   	
   }
   
   public void setTestDiag07(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag07(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag07 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag07(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag07(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag07 with another Field
	 *	@param value
	 */
   public void setTestDiag07(Field source) {
      testVariables.getTestDiagArea().setTestDiag07(source);
   }  
   
     /**
	 * 	Update TestDiag07 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag07(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag07(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag07 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag07(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag07(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testVariables
	 *	@return testVariables
	 */   
	 public TestVariables getTestVariables() {
   	return testVariables;
   }


	/**
	 *	Returns the value of testDiag21
	 *	@return testDiag21
	 */
   public char[] getTestDiag21() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag21();
   }

  
	/**
	*  set variable testDiag21
	*  @param value
	**/
   public void setTestDiag21(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag21(value);
   } 

     /**
	 * 	Update TestDiag21 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag21(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag21(source, sourceIndex);
   	
   }
   
   public void setTestDiag21(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag21(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag21 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag21(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag21(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag21 with another Field
	 *	@param value
	 */
   public void setTestDiag21(Field source) {
      testVariables.getTestDiagArea().setTestDiag21(source);
   }  
   
     /**
	 * 	Update TestDiag21 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag21(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag21(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag21 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag21(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag21(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag02
	 *	@return testDiag02
	 */
   public char[] getTestDiag02() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag02();
   }

  
	/**
	*  set variable testDiag02
	*  @param value
	**/
   public void setTestDiag02(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag02(value);
   } 

     /**
	 * 	Update TestDiag02 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag02(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag02(source, sourceIndex);
   	
   }
   
   public void setTestDiag02(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag02(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag02 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag02(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag02(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag02 with another Field
	 *	@param value
	 */
   public void setTestDiag02(Field source) {
      testVariables.getTestDiagArea().setTestDiag02(source);
   }  
   
     /**
	 * 	Update TestDiag02 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag02(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag02(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag02 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag02(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag02(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag06
	 *	@return testDiag06
	 */
   public char[] getTestDiag06() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag06();
   }

  
	/**
	*  set variable testDiag06
	*  @param value
	**/
   public void setTestDiag06(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag06(value);
   } 

     /**
	 * 	Update TestDiag06 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag06(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag06(source, sourceIndex);
   	
   }
   
   public void setTestDiag06(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag06(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag06 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag06(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag06(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag06 with another Field
	 *	@param value
	 */
   public void setTestDiag06(Field source) {
      testVariables.getTestDiagArea().setTestDiag06(source);
   }  
   
     /**
	 * 	Update TestDiag06 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag06(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag06(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag06 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag06(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag06(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of testDiag14
	 *	@return testDiag14
	 */
   public char[] getTestDiag14() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag14();
   }

  
	/**
	*  set variable testDiag14
	*  @param value
	**/
   public void setTestDiag14(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag14(value);
   } 

     /**
	 * 	Update TestDiag14 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag14(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag14(source, sourceIndex);
   	
   }
   
   public void setTestDiag14(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag14(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag14 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag14(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag14(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag14 with another Field
	 *	@param value
	 */
   public void setTestDiag14(Field source) {
      testVariables.getTestDiagArea().setTestDiag14(source);
   }  
   
     /**
	 * 	Update TestDiag14 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag14(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag14(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag14 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag14(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag14(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of ricdSpiTblId
	 *	@return ricdSpiTblId
	 */
   public char[] getRicdSpiTblId() throws CFException  {              
   		return dclfeSpiRuleIcd.getRicdSpiTblId();
   }

  
	/**
	*  set variable ricdSpiTblId
	*  @param value
	**/
   public void setRicdSpiTblId(char[] value) throws CFException {
      dclfeSpiRuleIcd.setRicdSpiTblId(value);
   } 

     /**
	 * 	Update RicdSpiTblId 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setRicdSpiTblId(char[] source, int sourceIndex) throws CFException {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex);
   	
   }
   
   public void setRicdSpiTblId(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update RicdSpiTblId 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setRicdSpiTblId(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update RicdSpiTblId with another Field
	 *	@param value
	 */
   public void setRicdSpiTblId(Field source) {
      dclfeSpiRuleIcd.setRicdSpiTblId(source);
   }  
   
     /**
	 * 	Update RicdSpiTblId 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setRicdSpiTblId(Field source, int sourceIndex,int sourceLen) {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update RicdSpiTblId 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setRicdSpiTblId(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      dclfeSpiRuleIcd.setRicdSpiTblId(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag16
	 *	@return testDiag16
	 */
   public char[] getTestDiag16() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag16();
   }

  
	/**
	*  set variable testDiag16
	*  @param value
	**/
   public void setTestDiag16(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag16(value);
   } 

     /**
	 * 	Update TestDiag16 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag16(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag16(source, sourceIndex);
   	
   }
   
   public void setTestDiag16(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag16(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag16 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag16(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag16(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag16 with another Field
	 *	@param value
	 */
   public void setTestDiag16(Field source) {
      testVariables.getTestDiagArea().setTestDiag16(source);
   }  
   
     /**
	 * 	Update TestDiag16 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag16(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag16(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag16 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag16(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag16(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of testDiag18
	 *	@return testDiag18
	 */
   public char[] getTestDiag18() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag18();
   }

  
	/**
	*  set variable testDiag18
	*  @param value
	**/
   public void setTestDiag18(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag18(value);
   } 

     /**
	 * 	Update TestDiag18 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag18(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag18(source, sourceIndex);
   	
   }
   
   public void setTestDiag18(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag18(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag18 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag18(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag18(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag18 with another Field
	 *	@param value
	 */
   public void setTestDiag18(Field source) {
      testVariables.getTestDiagArea().setTestDiag18(source);
   }  
   
     /**
	 * 	Update TestDiag18 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag18(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag18(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag18 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag18(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag18(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag13
	 *	@return testDiag13
	 */
   public char[] getTestDiag13() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag13();
   }

  
	/**
	*  set variable testDiag13
	*  @param value
	**/
   public void setTestDiag13(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag13(value);
   } 

     /**
	 * 	Update TestDiag13 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag13(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag13(source, sourceIndex);
   	
   }
   
   public void setTestDiag13(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag13(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag13 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag13(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag13(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag13 with another Field
	 *	@param value
	 */
   public void setTestDiag13(Field source) {
      testVariables.getTestDiagArea().setTestDiag13(source);
   }  
   
     /**
	 * 	Update TestDiag13 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag13(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag13(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag13 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag13(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag13(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag23
	 *	@return testDiag23
	 */
   public char[] getTestDiag23() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag23();
   }

  
	/**
	*  set variable testDiag23
	*  @param value
	**/
   public void setTestDiag23(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag23(value);
   } 

     /**
	 * 	Update TestDiag23 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag23(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag23(source, sourceIndex);
   	
   }
   
   public void setTestDiag23(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag23(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag23 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag23(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag23(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag23 with another Field
	 *	@param value
	 */
   public void setTestDiag23(Field source) {
      testVariables.getTestDiagArea().setTestDiag23(source);
   }  
   
     /**
	 * 	Update TestDiag23 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag23(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag23(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag23 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag23(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag23(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of lstClmIcdInd
	 *	@return lstClmIcdInd
	 */
   public char[] getLstClmIcdInd() throws CFException  {              
   		return lstIcdKey.getLstClmIcdInd();
   }

  
	/**
	*  set variable lstClmIcdInd
	*  @param value
	**/
   public void setLstClmIcdInd(char[] value) throws CFException {
      lstIcdKey.setLstClmIcdInd(value);
   } 

     /**
	 * 	Update LstClmIcdInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setLstClmIcdInd(char[] source, int sourceIndex) throws CFException {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex);
   	
   }
   
   public void setLstClmIcdInd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update LstClmIcdInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setLstClmIcdInd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update LstClmIcdInd with another Field
	 *	@param value
	 */
   public void setLstClmIcdInd(Field source) {
      lstIcdKey.setLstClmIcdInd(source);
   }  
   
     /**
	 * 	Update LstClmIcdInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setLstClmIcdInd(Field source, int sourceIndex,int sourceLen) {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update LstClmIcdInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setLstClmIcdInd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      lstIcdKey.setLstClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag08
	 *	@return testDiag08
	 */
   public char[] getTestDiag08() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag08();
   }

  
	/**
	*  set variable testDiag08
	*  @param value
	**/
   public void setTestDiag08(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag08(value);
   } 

     /**
	 * 	Update TestDiag08 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag08(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag08(source, sourceIndex);
   	
   }
   
   public void setTestDiag08(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag08(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag08 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag08(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag08(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag08 with another Field
	 *	@param value
	 */
   public void setTestDiag08(Field source) {
      testVariables.getTestDiagArea().setTestDiag08(source);
   }  
   
     /**
	 * 	Update TestDiag08 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag08(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag08(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag08 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag08(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag08(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag20
	 *	@return testDiag20
	 */
   public char[] getTestDiag20() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag20();
   }

  
	/**
	*  set variable testDiag20
	*  @param value
	**/
   public void setTestDiag20(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag20(value);
   } 

     /**
	 * 	Update TestDiag20 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag20(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag20(source, sourceIndex);
   	
   }
   
   public void setTestDiag20(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag20(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag20 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag20(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag20(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag20 with another Field
	 *	@param value
	 */
   public void setTestDiag20(Field source) {
      testVariables.getTestDiagArea().setTestDiag20(source);
   }  
   
     /**
	 * 	Update TestDiag20 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag20(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag20(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag20 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag20(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag20(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of testDiag05
	 *	@return testDiag05
	 */
   public char[] getTestDiag05() throws CFException  {              
   		return testVariables.getTestDiagArea().getTestDiag05();
   }

  
	/**
	*  set variable testDiag05
	*  @param value
	**/
   public void setTestDiag05(char[] value) throws CFException {
      testVariables.getTestDiagArea().setTestDiag05(value);
   } 

     /**
	 * 	Update TestDiag05 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setTestDiag05(char[] source, int sourceIndex) throws CFException {
      testVariables.getTestDiagArea().setTestDiag05(source, sourceIndex);
   	
   }
   
   public void setTestDiag05(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      testVariables.getTestDiagArea().setTestDiag05(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update TestDiag05 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag05(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag05(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update TestDiag05 with another Field
	 *	@param value
	 */
   public void setTestDiag05(Field source) {
      testVariables.getTestDiagArea().setTestDiag05(source);
   }  
   
     /**
	 * 	Update TestDiag05 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setTestDiag05(Field source, int sourceIndex,int sourceLen) {
      testVariables.getTestDiagArea().setTestDiag05(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update TestDiag05 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setTestDiag05(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      testVariables.getTestDiagArea().setTestDiag05(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public OpenCsicdCursor3200OutCtx getOpenCsicdCursor3200OutCtx() {
            return new OpenCsicdCursor3200OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += lstIcdKey.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += testVariables.hashCode();
        str += dsmCallArea.hashCode();
        str += sqlca.hashCode();
        str += dclfeSpiRuleIcd.hashCode();
       return str.hashCode();
    }

    public OpenCsicdCursor3200InCtx clone() {
        OpenCsicdCursor3200InCtx cloneObj = new OpenCsicdCursor3200InCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.lstIcdKey = new LstIcdKey();
        cloneObj.lstIcdKey.set(lstIcdKey.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.testVariables = new TestVariables();
        cloneObj.testVariables.set(testVariables.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.dclfeSpiRuleIcd = new DclfeSpiRuleIcd();
        cloneObj.dclfeSpiRuleIcd.set(dclfeSpiRuleIcd.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsicdCursor3200InCtx getOpenCsicdCursor3200InCtx() {
            return new OpenCsicdCursor3200InCtx();
    }
     public class OpenCsicdCursor3200OutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     LstIcdKey lstIcdKey = D529351uCtx.this.getLstIcdKey();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     TestVariables testVariables = D529351uCtx.this.getTestVariables();
     DsmCallArea dsmCallArea = D529351uCtx.this.getDsmCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();
     DclfeSpiRuleIcd dclfeSpiRuleIcd = D529351uCtx.this.getDclfeSpiRuleIcd();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Test condition 42 for isD51uDb2OpenError()
	 *	@return  Returns true if isD51uDb2OpenError() is 42
	 */
   public boolean isD51uDb2OpenError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2OpenError();
   }

	/**
	*  set values 42
	*/
   	public void setD51uDb2OpenErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2OpenErrorTrue();
   	}
	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Returns the value of d51uParagraphNum
	 *	@return d51uParagraphNum
	 */
   public char[] getD51uParagraphNum() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uParagraphNum();
   }

  
	/**
	*  set variable d51uParagraphNum
	*  @param value
	**/
   public void setD51uParagraphNum(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(value);
   } 

     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex);
   	
   }
   
   public void setD51uParagraphNum(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uParagraphNum with another Field
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source);
   }  
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uDebugTracer
	 *	@return d51uDebugTracer
	 */
   public char[] getD51uDebugTracer() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uDebugTracer();
   }

  
	/**
	*  set variable d51uDebugTracer
	*  @param value
	**/
   public void setD51uDebugTracer(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(value);
   } 

     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex);
   	
   }
   
   public void setD51uDebugTracer(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uDebugTracer with another Field
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source);
   }  
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Test condition 999 for isDsmDb2Error()
	 *	@return  Returns true if isDsmDb2Error() is 999
	 */
   public boolean isDsmDb2Error() throws CFException {
      return dsmCallArea.getDsmCommonArea().isDsmDb2Error();
   }

	/**
	*  set values 999
	*/
   	public void setDsmDb2ErrorTrue()  throws CFException{  			
    	dsmCallArea.getDsmCommonArea().setDsmDb2ErrorTrue();
   	}

        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += lstIcdKey.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += testVariables.hashCode();
        str += dsmCallArea.hashCode();
        str += sqlca.hashCode();
        str += dclfeSpiRuleIcd.hashCode();
       return str.hashCode();
    }

    public OpenCsicdCursor3200OutCtx clone() {
        OpenCsicdCursor3200OutCtx cloneObj = new OpenCsicdCursor3200OutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.lstIcdKey = new LstIcdKey();
        cloneObj.lstIcdKey.set(lstIcdKey.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.testVariables = new TestVariables();
        cloneObj.testVariables.set(testVariables.getClonedField());
        cloneObj.dsmCallArea = new DsmCallArea();
        cloneObj.dsmCallArea.set(dsmCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        cloneObj.dclfeSpiRuleIcd = new DclfeSpiRuleIcd();
        cloneObj.dclfeSpiRuleIcd.set(dclfeSpiRuleIcd.getClonedField());
        return cloneObj;
    }

    }

    public OpenCsicdCursor3200OutCtx getOpenCsicdCursor3200OutCtx() {
            return new OpenCsicdCursor3200OutCtx();
    }
     public class FetchCsicd3250InCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCsicdo hvHostVariablesCsicdo = D529351uCtx.this.getHvHostVariablesCsicdo();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of hv3eClmFrmIcdCd
	 *	@return hv3eClmFrmIcdCd
	 */
   public char[] getHv3eClmFrmIcdCd(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3eClmFrmIcdCd(index);
   }

  
	/**
	*  set variable hv3eClmFrmIcdCd
	*  @param value
	**/
   public void setHv3eClmFrmIcdCd(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3eClmFrmIcdCd((index),value);
   } 

	/**
	 *	Returns the value of hv3cIcdDrvCau
	 *	@return hv3cIcdDrvCau
	 */
   public char[] getHv3cIcdDrvCau(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3cIcdDrvCau(index);
   }

  
	/**
	*  set variable hv3cIcdDrvCau
	*  @param value
	**/
   public void setHv3cIcdDrvCau(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3cIcdDrvCau((index),value);
   } 


public void setHv3aIndex(int hv3aIndex) { 
    D529351uCtx.this.hv3aIndex = hv3aIndex;
}

public int getHv3aIndex() { 
    return D529351uCtx.this.hv3aIndex;
}
	/**
	 *	Returns the value of hvHostVariablesCsicdo
	 *	@return hvHostVariablesCsicdo
	 */   
	 public HvHostVariablesCsicdo getHvHostVariablesCsicdo() {
   	return hvHostVariablesCsicdo;
   }



public void setHv3bIndex(int hv3bIndex) { 
    D529351uCtx.this.hv3bIndex = hv3bIndex;
}

public int getHv3bIndex() { 
    return D529351uCtx.this.hv3bIndex;
}

public void setHv3fIndex(int hv3fIndex) { 
    D529351uCtx.this.hv3fIndex = hv3fIndex;
}

public int getHv3fIndex() { 
    return D529351uCtx.this.hv3fIndex;
}
	/**
	 *	Returns the value of hv3dIcdTypCd
	 *	@return hv3dIcdTypCd
	 */
   public char[] getHv3dIcdTypCd(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3dIcdTypCd(index);
   }

  
	/**
	*  set variable hv3dIcdTypCd
	*  @param value
	**/
   public void setHv3dIcdTypCd(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3dIcdTypCd((index),value);
   } 

	/**
	 *	Returns the value of hv3fClmToIcdCd
	 *	@return hv3fClmToIcdCd
	 */
   public char[] getHv3fClmToIcdCd(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3fClmToIcdCd(index);
   }

  
	/**
	*  set variable hv3fClmToIcdCd
	*  @param value
	**/
   public void setHv3fClmToIcdCd(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3fClmToIcdCd((index),value);
   } 

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



public void setHv3dIndex(int hv3dIndex) { 
    D529351uCtx.this.hv3dIndex = hv3dIndex;
}

public int getHv3dIndex() { 
    return D529351uCtx.this.hv3dIndex;
}

public void setHv3eIndex(int hv3eIndex) { 
    D529351uCtx.this.hv3eIndex = hv3eIndex;
}

public int getHv3eIndex() { 
    return D529351uCtx.this.hv3eIndex;
}
	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}



public void setHv3cIndex(int hv3cIndex) { 
    D529351uCtx.this.hv3cIndex = hv3cIndex;
}

public int getHv3cIndex() { 
    return D529351uCtx.this.hv3cIndex;
}
	/**
	 *	Returns the value of hv3bIcdDrvSvc
	 *	@return hv3bIcdDrvSvc
	 */
   public char[] getHv3bIcdDrvSvc(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3bIcdDrvSvc(index);
   }

  
	/**
	*  set variable hv3bIcdDrvSvc
	*  @param value
	**/
   public void setHv3bIcdDrvSvc(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3bIcdDrvSvc((index),value);
   } 

	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hv3aIcdDrvPos
	 *	@return hv3aIcdDrvPos
	 */
   public char[] getHv3aIcdDrvPos(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3aIcdDrvPos(index);
   }

  
	/**
	*  set variable hv3aIcdDrvPos
	*  @param value
	**/
   public void setHv3aIcdDrvPos(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3aIcdDrvPos((index),value);
   } 

	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of icdSub
	 *	@return icdSub
	 */
	public int getIcdSub() throws CFException {        
   		return work.getIcdSub();
	}
	
	/**
	 * 	Update IcdSub with the passed value
	 *	@param number
	 */
	public void setIcdSub(int number)  throws CFException{
		work.setIcdSub(number);
	}


	public void setIcdSub(long number)  throws CFException{
		work.setIcdSub((int)number);
	}



        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public FetchCsicd3250OutCtx getFetchCsicd3250OutCtx() {
            return new FetchCsicd3250OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCsicdo.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public FetchCsicd3250InCtx clone() {
        FetchCsicd3250InCtx cloneObj = new FetchCsicd3250InCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCsicdo = new HvHostVariablesCsicdo();
        cloneObj.hvHostVariablesCsicdo.set(hvHostVariablesCsicdo.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsicd3250InCtx getFetchCsicd3250InCtx() {
            return new FetchCsicd3250InCtx();
    }
     public class FetchCsicd3250OutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     HvHostVariablesCsicdo hvHostVariablesCsicdo = D529351uCtx.this.getHvHostVariablesCsicdo();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of hv3eClmFrmIcdCd
	 *	@return hv3eClmFrmIcdCd
	 */
   public char[] getHv3eClmFrmIcdCd(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3eClmFrmIcdCd(index);
   }

  
	/**
	*  set variable hv3eClmFrmIcdCd
	*  @param value
	**/
   public void setHv3eClmFrmIcdCd(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3eClmFrmIcdCd((index),value);
   } 

	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}



public void setHv3bIndex(int hv3bIndex) { 
    D529351uCtx.this.hv3bIndex = hv3bIndex;
}

public int getHv3bIndex() { 
    return D529351uCtx.this.hv3bIndex;
}

public void setHv3fIndex(int hv3fIndex) { 
    D529351uCtx.this.hv3fIndex = hv3fIndex;
}

public int getHv3fIndex() { 
    return D529351uCtx.this.hv3fIndex;
}
	/**
	 *	Returns the value of d51uRicdDrvCau
	 *	@return d51uRicdDrvCau
	 */
   public char[] getD51uRicdDrvCau(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdDrvCau();
   }

  
	/**
	*  set variable d51uRicdDrvCau
	*  @param value
	**/
   public void setD51uRicdDrvCau(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(value);
   } 

     /**
	 * 	Update D51uRicdDrvCau 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex);
   	
   }
   
   public void setD51uRicdDrvCau(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdDrvCau 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdDrvCau with another Field
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source);
   }  
   
     /**
	 * 	Update D51uRicdDrvCau 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdDrvCau 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvCau(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvCau(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "Y" for isIcdFound()
	 *	@return  Returns true if isIcdFound() is "Y"
	 */
   public boolean isIcdFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isIcdFound();
   }

	/**
	*  set values "Y"
	*/
   	public void setIcdFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setIcdFoundTrue();
   	}
	/**
	 *	Returns the value of hv3dIcdTypCd
	 *	@return hv3dIcdTypCd
	 */
   public char[] getHv3dIcdTypCd(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3dIcdTypCd(index);
   }

  
	/**
	*  set variable hv3dIcdTypCd
	*  @param value
	**/
   public void setHv3dIcdTypCd(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3dIcdTypCd((index),value);
   } 

	/**
	 *	Returns the value of hv3fClmToIcdCd
	 *	@return hv3fClmToIcdCd
	 */
   public char[] getHv3fClmToIcdCd(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3fClmToIcdCd(index);
   }

  
	/**
	*  set variable hv3fClmToIcdCd
	*  @param value
	**/
   public void setHv3fClmToIcdCd(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3fClmToIcdCd((index),value);
   } 

	/**
	 *	Returns the value of d51uRicdClmIcdInd
	 *	@return d51uRicdClmIcdInd
	 */
   public char[] getD51uRicdClmIcdInd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdClmIcdInd();
   }

  
	/**
	*  set variable d51uRicdClmIcdInd
	*  @param value
	**/
   public void setD51uRicdClmIcdInd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(value);
   } 

     /**
	 * 	Update D51uRicdClmIcdInd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex);
   	
   }
   
   public void setD51uRicdClmIcdInd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdClmIcdInd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdClmIcdInd with another Field
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source);
   }  
   
     /**
	 * 	Update D51uRicdClmIcdInd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdClmIcdInd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdInd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdInd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRicdClmIcdFromCd
	 *	@return d51uRicdClmIcdFromCd
	 */
   public char[] getD51uRicdClmIcdFromCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdClmIcdFromCd();
   }

  
	/**
	*  set variable d51uRicdClmIcdFromCd
	*  @param value
	**/
   public void setD51uRicdClmIcdFromCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(value);
   } 

     /**
	 * 	Update D51uRicdClmIcdFromCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdClmIcdFromCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source, sourceIndex);
   	
   }
   
   public void setD51uRicdClmIcdFromCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdClmIcdFromCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdFromCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdClmIcdFromCd with another Field
	 *	@param value
	 */
   public void setD51uRicdClmIcdFromCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source);
   }  
   
     /**
	 * 	Update D51uRicdClmIcdFromCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdClmIcdFromCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdClmIcdFromCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdFromCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdFromCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


public void setHv3eIndex(int hv3eIndex) { 
    D529351uCtx.this.hv3eIndex = hv3eIndex;
}

public int getHv3eIndex() { 
    return D529351uCtx.this.hv3eIndex;
}
	/**
	 *	Test condition "Y" for isMoreIcdRecords()
	 *	@return  Returns true if isMoreIcdRecords() is "Y"
	 */
   public boolean isMoreIcdRecords() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isMoreIcdRecords();
   }

	/**
	*  set values "Y"
	*/
   	public void setMoreIcdRecordsTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setMoreIcdRecordsTrue();
   	}
	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of d51uRicdDrvSvc
	 *	@return d51uRicdDrvSvc
	 */
   public char[] getD51uRicdDrvSvc(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdDrvSvc();
   }

  
	/**
	*  set variable d51uRicdDrvSvc
	*  @param value
	**/
   public void setD51uRicdDrvSvc(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(value);
   } 

     /**
	 * 	Update D51uRicdDrvSvc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex);
   	
   }
   
   public void setD51uRicdDrvSvc(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdDrvSvc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdDrvSvc with another Field
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source);
   }  
   
     /**
	 * 	Update D51uRicdDrvSvc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdDrvSvc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvSvc(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvSvc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uRicdClmIcdToCd
	 *	@return d51uRicdClmIcdToCd
	 */
   public char[] getD51uRicdClmIcdToCd(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdClmIcdToCd();
   }

  
	/**
	*  set variable d51uRicdClmIcdToCd
	*  @param value
	**/
   public void setD51uRicdClmIcdToCd(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(value);
   } 

     /**
	 * 	Update D51uRicdClmIcdToCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdClmIcdToCd(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source, sourceIndex);
   	
   }
   
   public void setD51uRicdClmIcdToCd(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdClmIcdToCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdToCd(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdClmIcdToCd with another Field
	 *	@param value
	 */
   public void setD51uRicdClmIcdToCd(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source);
   }  
   
     /**
	 * 	Update D51uRicdClmIcdToCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdClmIcdToCd(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdClmIcdToCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdClmIcdToCd(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdClmIcdToCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of dsnnrows
	 *	@return dsnnrows
	 */
	public int getDsnnrows() throws CFException {        
   		return work.getDsnnrows();
	}
	
	/**
	 * 	Update Dsnnrows with the passed value
	 *	@param number
	 */
	public void setDsnnrows(int number)  throws CFException{
		work.setDsnnrows(number);
	}


	public void setDsnnrows(long number)  throws CFException{
		work.setDsnnrows((int)number);
	}


	/**
	 *	Returns the value of hv3aIcdDrvPos
	 *	@return hv3aIcdDrvPos
	 */
   public char[] getHv3aIcdDrvPos(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3aIcdDrvPos(index);
   }

  
	/**
	*  set variable hv3aIcdDrvPos
	*  @param value
	**/
   public void setHv3aIcdDrvPos(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3aIcdDrvPos((index),value);
   } 

	/**
	 *	Test condition "Y" for isEndOfFetchIcd()
	 *	@return  Returns true if isEndOfFetchIcd() is "Y"
	 */
   public boolean isEndOfFetchIcd() throws CFException {
      return work.isEndOfFetchIcd();
   }

	/**
	*  set values "Y"
	*/
   	public void setEndOfFetchIcdTrue()  throws CFException{  			
    	work.setEndOfFetchIcdTrue();
   	}
	/**
	 *	Returns the value of icdSub
	 *	@return icdSub
	 */
	public int getIcdSub() throws CFException {        
   		return work.getIcdSub();
	}
	
	/**
	 * 	Update IcdSub with the passed value
	 *	@param number
	 */
	public void setIcdSub(int number)  throws CFException{
		work.setIcdSub(number);
	}


	public void setIcdSub(long number)  throws CFException{
		work.setIcdSub((int)number);
	}


	/**
	 *	Returns the value of hv3cIcdDrvCau
	 *	@return hv3cIcdDrvCau
	 */
   public char[] getHv3cIcdDrvCau(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3cIcdDrvCau(index);
   }

  
	/**
	*  set variable hv3cIcdDrvCau
	*  @param value
	**/
   public void setHv3cIcdDrvCau(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3cIcdDrvCau((index),value);
   } 


public void setHv3aIndex(int hv3aIndex) { 
    D529351uCtx.this.hv3aIndex = hv3aIndex;
}

public int getHv3aIndex() { 
    return D529351uCtx.this.hv3aIndex;
}
	/**
	 *	Returns the value of d51uRicdDrvPos
	 *	@return d51uRicdDrvPos
	 */
   public char[] getD51uRicdDrvPos(int index) throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).getD51uRicdDrvPos();
   }

  
	/**
	*  set variable d51uRicdDrvPos
	*  @param value
	**/
   public void setD51uRicdDrvPos(int index,char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(value);
   } 

     /**
	 * 	Update D51uRicdDrvPos 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex);
   	
   }
   
   public void setD51uRicdDrvPos(int index,char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uRicdDrvPos 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uRicdDrvPos with another Field
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source);
   }  
   
     /**
	 * 	Update D51uRicdDrvPos 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uRicdDrvPos 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uRicdDrvPos(int index,Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uArrayData().getD51uRetRulIcd().getD51uRetRuleIcd(index).setD51uRicdDrvPos(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of hvHostVariablesCsicdo
	 *	@return hvHostVariablesCsicdo
	 */   
	 public HvHostVariablesCsicdo getHvHostVariablesCsicdo() {
   	return hvHostVariablesCsicdo;
   }


	/**
	 *	Test condition " " for isIcdNotFound()
	 *	@return  Returns true if isIcdNotFound() is " "
	 */
   public boolean isIcdNotFound() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().isIcdNotFound();
   }

	/**
	*  set values " "
	*/
   	public void setIcdNotFoundTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().setIcdNotFoundTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of d51uIcdCnt
	 *	@return d51uIcdCnt
	 */
	public int getD51uIcdCnt() throws CFException {        
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().getD51uIcdCnt();
	}
	
	/**
	 * 	Update D51uIcdCnt with the passed value
	 *	@param number
	 */
	public void setD51uIcdCnt(int number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIcdCnt(number);
	}


	public void setD51uIcdCnt(long number)  throws CFException{
		vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uReturnSw().getD51uTableCounts().setD51uIcdCnt((int)number);
	}



public void setHv3dIndex(int hv3dIndex) { 
    D529351uCtx.this.hv3dIndex = hv3dIndex;
}

public int getHv3dIndex() { 
    return D529351uCtx.this.hv3dIndex;
}

public void setHv3cIndex(int hv3cIndex) { 
    D529351uCtx.this.hv3cIndex = hv3cIndex;
}

public int getHv3cIndex() { 
    return D529351uCtx.this.hv3cIndex;
}
	/**
	 *	Returns the value of hv3bIcdDrvSvc
	 *	@return hv3bIcdDrvSvc
	 */
   public char[] getHv3bIcdDrvSvc(int index) throws CFException  {              
   		return hvHostVariablesCsicdo.getHv3bIcdDrvSvc(index);
   }

  
	/**
	*  set variable hv3bIcdDrvSvc
	*  @param value
	**/
   public void setHv3bIcdDrvSvc(int index,char[] value) throws CFException {
      hvHostVariablesCsicdo.setHv3bIcdDrvSvc((index),value);
   } 


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += hvHostVariablesCsicdo.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public FetchCsicd3250OutCtx clone() {
        FetchCsicd3250OutCtx cloneObj = new FetchCsicd3250OutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.hvHostVariablesCsicdo = new HvHostVariablesCsicdo();
        cloneObj.hvHostVariablesCsicdo.set(hvHostVariablesCsicdo.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public FetchCsicd3250OutCtx getFetchCsicd3250OutCtx() {
            return new FetchCsicd3250OutCtx();
    }
     public class CloseCsr3260InCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlerrd
	 *	@return sqlerrd
	 */
	public int getSqlerrd(int index) throws CFException {        
   		return sqlca.getSqlerrd((index));
	}
	
	/**
	 * 	Update Sqlerrd with the passed value
	 *	@param number
	 */
	public void setSqlerrd(int index,int number)  throws CFException{
		sqlca.setSqlerrd((index),number);
	}


	public void setSqlerrd(int index,long number)  throws CFException{
		sqlca.setSqlerrd((index),(int)number);
	}


	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlwarn
	 *	@return sqlwarn
	 */   
	 public Sqlwarn getSqlwarn() {
   	return sqlca.getSqlwarn();
   }

   /**
	* 	Update Sqlwarn with the passed value
	*	@param value
	*/
   public void setSqlwarn(char[] value) throws CFException {
      sqlca.setSqlwarn(value);
   }   

     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen) throws CFException {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with a String from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlwarn with another Field
	 *	@param value
	 */
   public void setSqlwarn(Field source) {
   	sqlca.setSqlwarn(source);
   }  
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length             
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlwarn 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlwarn(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
   	sqlca.setSqlwarn(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }


	/**
	 *	Returns the value of sqlerrmc
	 *	@return sqlerrmc
	 */
   public char[] getSqlerrmc() throws CFException  {              
   		return sqlca.getSqlerrm().getSqlerrmc();
   }

  
	/**
	*  set variable sqlerrmc
	*  @param value
	**/
   public void setSqlerrmc(char[] value) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(value);
   } 

     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex) throws CFException {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex);
   	
   }
   
   public void setSqlerrmc(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update Sqlerrmc with another Field
	 *	@param value
	 */
   public void setSqlerrmc(Field source) {
      sqlca.getSqlerrm().setSqlerrmc(source);
   }  
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update Sqlerrmc 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setSqlerrmc(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      sqlca.getSqlerrm().setSqlerrmc(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }


        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }

        public CloseCsr3260OutCtx getCloseCsr3260OutCtx() {
            return new CloseCsr3260OutCtx();
        }

    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsr3260InCtx clone() {
        CloseCsr3260InCtx cloneObj = new CloseCsr3260InCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsr3260InCtx getCloseCsr3260InCtx() {
            return new CloseCsr3260InCtx();
    }
     public class CloseCsr3260OutCtx implements Cloneable {
     Work work = D529351uCtx.this.getWork();
     Vyspi51uCallArea vyspi51uCallArea = D529351uCtx.this.getVyspi51uCallArea();
     Sqlca sqlca = D529351uCtx.this.getSqlca();

	/**
	 *	Returns the value of sqlcode
	 *	@return sqlcode
	 */
	public int getSqlcode() throws CFException {        
   		return sqlca.getSqlcode();
	}
	
	/**
	 * 	Update Sqlcode with the passed value
	 *	@param number
	 */
	public void setSqlcode(int number)  throws CFException{
		sqlca.setSqlcode(number);
	}


	public void setSqlcode(long number)  throws CFException{
		sqlca.setSqlcode((int)number);
	}


	/**
	 *	Returns the value of sqlcode_Ws
	 *	@return sqlcode_Ws
	 */
	public int getSqlcode_Ws() throws CFException {        
   		return work.getSqlcode_Ws();
	}
	
	/**
	 * 	Update Sqlcode_Ws with the passed value
	 *	@param number
	 */
	public void setSqlcode_Ws(int number)  throws CFException{
		work.setSqlcode_Ws(number);
	}


	public void setSqlcode_Ws(long number)  throws CFException{
		work.setSqlcode_Ws((int)number);
	}


	/**
	 *	Test condition 43 for isD51uDb2CloseError()
	 *	@return  Returns true if isD51uDb2CloseError() is 43
	 */
   public boolean isD51uDb2CloseError() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2CloseError();
   }

	/**
	*  set values 43
	*/
   	public void setD51uDb2CloseErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2CloseErrorTrue();
   	}
	/**
	 *	Returns the value of d51uParagraphNum
	 *	@return d51uParagraphNum
	 */
   public char[] getD51uParagraphNum() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uParagraphNum();
   }

  
	/**
	*  set variable d51uParagraphNum
	*  @param value
	**/
   public void setD51uParagraphNum(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(value);
   } 

     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex);
   	
   }
   
   public void setD51uParagraphNum(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uParagraphNum with another Field
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source);
   }  
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uParagraphNum 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uParagraphNum(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uParagraphNum(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition "N" for isCloseCsrNg()
	 *	@return  Returns true if isCloseCsrNg() is "N"
	 */
   public boolean isCloseCsrNg() throws CFException {
      return work.isCloseCsrNg();
   }

	/**
	*  set values "N"
	*/
   	public void setCloseCsrNgTrue()  throws CFException{  			
    	work.setCloseCsrNgTrue();
   	}
	/**
	 *	Returns the value of d51uSqlOrRespCd
	 *	@return d51uSqlOrRespCd
	 */
   public char[] getD51uSqlOrRespCd() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uSqlOrRespCd();
   }

  
	/**
	*  set variable d51uSqlOrRespCd
	*  @param value
	**/
   public void setD51uSqlOrRespCd(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(value);
   } 

     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex);
   	
   }
   
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uSqlOrRespCd with another Field
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source);
   }  
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uSqlOrRespCd 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uSqlOrRespCd(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uSqlOrRespCd(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Returns the value of d51uDebugTracer
	 *	@return d51uDebugTracer
	 */
   public char[] getD51uDebugTracer() throws CFException  {              
   		return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().getD51uDebugTracer();
   }

  
	/**
	*  set variable d51uDebugTracer
	*  @param value
	**/
   public void setD51uDebugTracer(char[] value) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(value);
   } 

     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length             
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex) throws CFException {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex);
   	
   }
   
   public void setD51uDebugTracer(char[] source, int sourceIndex , int sourceLen) throws CFException  {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with a char[] from an offset and length  
	 *                     to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(char[] source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }
   
    /**
	 * 	Update D51uDebugTracer with another Field
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source);
   }  
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length          
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen);   	
   }
   
     /**
	 * 	Update D51uDebugTracer 
	 *     with another Field from an offset and length  
	 *                         to  an offset and length         
	 *	@param value
	 */
   public void setD51uDebugTracer(Field source, int sourceIndex,int sourceLen, int targetIndex,int targetLen) {
      vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().getD51uErrorTrace().setD51uDebugTracer(source, sourceIndex, sourceLen, targetIndex, targetLen);
   }

	/**
	 *	Test condition 2 for isD51uDb2Error()
	 *	@return  Returns true if isD51uDb2Error() is 2
	 */
   public boolean isD51uDb2Error() throws CFException {
      return vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().isD51uDb2Error();
   }

	/**
	*  set values 2
	*/
   	public void setD51uDb2ErrorTrue()  throws CFException{  			
    	vyspi51uCallArea.getD51uReturnArea().getD51uNonArrayData().setD51uDb2ErrorTrue();
   	}
	/**
	 *	Test condition "Y" for isCloseCsrOk()
	 *	@return  Returns true if isCloseCsrOk() is "Y"
	 */
   public boolean isCloseCsrOk() throws CFException {
      return work.isCloseCsrOk();
   }

	/**
	*  set values "Y"
	*/
   	public void setCloseCsrOkTrue()  throws CFException{  			
    	work.setCloseCsrOkTrue();
   	}
	/**
	 *	Returns the value of sqlca
	 *	@return sqlca
	 */   
	 public Sqlca getSqlca() {
   	return sqlca;
   }



        public D529351uCtx getD529351uCtx() {
            return D529351uCtx.this;
        }


    @Override
    public boolean equals(Object o) {
        if (o == null) return false;
        return this.hashCode() == o.hashCode();
    }

    @Override
    public int hashCode() {
        String str = "";
        str += work.hashCode();
        str += vyspi51uCallArea.hashCode();
        str += sqlca.hashCode();
       return str.hashCode();
    }

    public CloseCsr3260OutCtx clone() {
        CloseCsr3260OutCtx cloneObj = new CloseCsr3260OutCtx();
        cloneObj.work = new Work();
        cloneObj.work.set(work.getClonedField());
        cloneObj.vyspi51uCallArea = new Vyspi51uCallArea();
        cloneObj.vyspi51uCallArea.set(vyspi51uCallArea.getClonedField());
        cloneObj.sqlca = new Sqlca();
        cloneObj.sqlca.set(sqlca.getClonedField());
        return cloneObj;
    }

    }

    public CloseCsr3260OutCtx getCloseCsr3260OutCtx() {
            return new CloseCsr3260OutCtx();
    }
}
